const con = require("./database");
const fs = require("fs");
const nodeMailer = require("nodemailer");
const { response } = require("express");
const { resolve } = require("path");
const pdfTemplate = require("./invoice");
const pdfTemplate1 = require("./coverletter/attestationcover");
const pdfTemplate2 = require("./coverletter/apostillecover");
const pdfTemplate3 = require("./coverletter/visacover");
const pdfTemplate4 = require("./coverletter/dispatchreports");
const pdfCashflowDetail = require("./cashflowDetails");
const pdfCommissionDetail = require("./commissionDetails");
const pdfTemplate5 = require("./coverletter/accountreport");
const pdfTemplate6 = require("./proformainvoice");
const pdfTemplate7 = require("./coverletter/translationcover");
const allcovertemplate = require("./coverletter/allcover");
const refundReceipt = require("./refundreceipt");
const paymentReceipt = require("./paymentreceipt");
const draftpaymentReceipt = require("./draftpaymentreceipt");
// Message And Mail Send
const sendmessage = require("./sendmessage");
const allinvoicetemplate = require("./allinvoice");
var pdf = require("html-pdf");
let moment = require("moment");
const res = require("express/lib/response");
const { sendWsMessage } = require("./sendLNotification");
async function sendOtp(data) {
  try {
    let sql = `SELECT * FROM users WHERE u_email='${data.email}'`;
    let senderMailSetting = await sendmessage.getEmailSetting(1);
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            let otpcode = Math.floor(Math.random() * 1000000) + 1;
            const sql1 = `UPDATE users SET token=${otpcode}  WHERE u_email='${data.email}'`;
            con.query(sql1, (err, result1) => {
              if (err) {
                resolve({ status: 0, message: "Something went to wrong" });
              }
              if (result1) {
                let transporter = nodeMailer.createTransport({
                  host: senderMailSetting.e_host,
                  port: senderMailSetting.e_port,
                  secureConnection: false,
                  auth: {
                    user: senderMailSetting.e_username,
                    pass: senderMailSetting.e_password,
                  },
                });
                // let transporter = nodeMailer.createTransport({
                //   host: "smtp.gmail.com",
                //   port: 465,
                //   secure: true,
                //   auth: {
                //     user: "jilsutariyapatel10179@gmail.com",
                //     pass: "cbmkokgsaqnnhhef",
                //   },
                // });
                let mailOptions = {
                  from:
                    '"Excellent Apostille Services" <' +
                    senderMailSetting.e_username +
                    ">", // sender address
                  // to:"vatsalmarkana22@gmail.com", // list of receivers
                  cc: senderMailSetting.cc_email,
                  to: data.email,
                  replyTo: senderMailSetting.reply_mail,
                  subject: "One Time Password", // Subject line
                  text: `OTP is:${otpcode}`, // plain text body
                };
                // let mailOptions = {
                //   from: '"Vatsal Markana" <jilsutariyapatel10179@gmail.com>', // sender address
                //   to: data.email,
                //   subject: "One Time Password", // Subject line
                //   text: `OTP is:${otpcode}`, // plain text body
                //   // html: `<b>${code}</b>` // html body
                // };
                transporter.sendMail(mailOptions, (err, info) => {
                  if (err) {
                    return console.log(err);
                  }
                  res.render("index");
                });
                resolve({
                  status: 1,
                  otp: otpcode,
                  message: "OTP sent succeessfully",
                });
              } else {
                resolve({
                  status: 0,
                  message: "Something went to wrong",
                });
              }
            });
          } else {
            resolve({ status: 0, message: "Email doesn't exist....." });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function verifyOtp(data) {
  try {
    let sql = `SELECT * FROM  users WHERE u_email='${data.email}' AND token=${data.otp}`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              message: "Confirm OTP",
            });
          } else {
            resolve({
              status: 0,
              message: "Your OTP is wrong",
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function setNewPassword(data) {
  try {
    let sql = `UPDATE users SET password=md5('${data.new_password
      }'),token=${null}  WHERE u_email='${data.email}' AND token=${data.otp}`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.affectedRows > 0) {
            resolve({
              status: 1,
              message: "Set New Password successfully",
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function setChangePassword(data) {
  try {
    let sql = `UPDATE users SET  password=md5('${data.new_password}') WHERE u_id=${data.u_id} AND password = md5('${data.current_password}')`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.affectedRows > 0) {
            resolve({
              status: 1,
              message: "Change Password successfully",
            });
          } else {
            resolve({
              status: 0,
              message: "Current Password Not Matched",
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function updateUserData(data, filename = "", ufilename = "") {
  try {
    let sql = `UPDATE users SET u_name='${mysql_real_escape_string(
      data.u_name
    )}' ,branch_id=${data.branch_id},p_d_id=${data.p_d_id},p_h_id=${data.p_h_id
      }, u_email='${mysql_real_escape_string(
        data.u_email
      )}',mobile='${mysql_real_escape_string(
        data.mobile
      )}',f_url='${mysql_real_escape_string(data.f_url)}',address='${data.address == "" || data.address == "undefined"
        ? "<p>&nbsp</p>"
        : mysql_real_escape_string(data.address)
      }'`;
    if (typeof data.s_email_signature != "undefined") {
      sql += `,s_email_signature='${data.emailsignature == "" || data.s_email_signature == "undefined"
        ? "<p>&nbsp</p>"
        : mysql_real_escape_string(data.s_email_signature)
        }'`;
    }
    if (typeof data.bank_details != "undefined") {
      sql += `,bank_details='${data.bank_details == "" || data.bank_details == "undefined"
        ? "<p>&nbsp</p>"
        : mysql_real_escape_string(data.bank_details)
        }'`;
    }
    if (filename != "") {
      sql += `,invoice_signature='${mysql_real_escape_string(filename)}'`;
    }
    if (ufilename != "") {
      sql += `,u_image='${mysql_real_escape_string(ufilename)}'`;
    }
    sql += ` WHERE u_id=${data.u_id}`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.affectedRows > 0) {
            let sql1 = `SELECT *,(SELECT b_name FROM branch where branch.branch_id=users.branch_id) as branch_name FROM users WHERE u_id=${data.u_id}`;
            con.query(sql1, function (err, result1) {
              if (err) {
                console.log(err);
                resolve({ status: 0, message: "Something went to wrong" });
              } else {
                if (result1.length > 0) {
                  resolve({
                    status: 1,
                    message: "User Profile Update Successfully",
                    uData: result1[0],
                  });
                } else {
                  resolve({
                    status: 0,
                    message: "Something went to wrong",
                  });
                }
              }
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

// 08-04
async function insertAttribute(data) {
  try {
    sql = `SELECT * FROM attributes WHERE name="${data.name}" and type=${data.type}`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({ status: 0, message: "Already Exists" });
          } else {
            if (data.p_c_id != undefined) {
              sql1 = `INSERT INTO attributes (name,shortcode,type,p_c_id,coupon_amt,code_email,process_limit_days,document_type,TIN_number,code) VALUES ('${mysql_real_escape_string(
                data.name
              )}','${mysql_real_escape_string(data.shortcode)}',${data.type},${data.p_c_id
                },'${data.coupon_amt}','${mysql_real_escape_string(
                  data.code_email
                )}',${data.process_limit_days},${data.document_type},'${data.TIN_number
                }',${data.code})`;
            } else {
              sql1 = `INSERT INTO attributes (name,shortcode,type,coupon_amt,code_email,process_limit_days,document_type,TIN_number,website,code) VALUES ('${mysql_real_escape_string(
                data.name
              )}','${mysql_real_escape_string(data.shortcode)}',${data.type},'${data.coupon_amt
                }','${mysql_real_escape_string(data.code_email)}',${data.process_limit_days
                },${data.document_type},'${data.TIN_number}','${data.website}',${data.code
                })`;
            }
            con.query(sql1, function (err, result) {
              if (err) {
                console.log(err);
                resolve({ status: 0, message: "Something went to wrong" });
              } else {
                if (result.affectedRows > 0) {
                  resolve({
                    status: 1,
                    message: "Attribute Inserted successfully",
                  });
                } else {
                  resolve({
                    status: 0,
                    message: "Something went to wrong",
                  });
                }
              }
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function getallAttribute(data) {
  try {
    let sql = "";
    if (data.type != 0) {
      sql = `SELECT *,(row_number() over ( order by attributes.attribute_id DESC) ) AS row_no,(SELECT COUNT(*) FROM attributes where type=${data.type}) as trows FROM attributes where  type=${data.type}`;
    } else {
      sql = `SELECT *,(row_number() over ( order by attributes.attribute_id DESC) ) AS row_no,(SELECT COUNT(*) FROM attributes) as trows FROM attributes`;
    }
    sql += ` ORDER BY attribute_id DESC limit ${(data.page - 1) * data.perpage
      },${data.perpage}`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              aData: result,
            });
          } else {
            resolve({
              status: 1,
              aData: [],
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function updateattrstatus(data) {
  try {
    let sql = "";
    sql = `UPDATE attributes SET status=${data.status} WHERE attribute_id=${data.attribute_id}`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.affectedRows > 0) {
            resolve({
              status: 1,
              message: "Status update successfully",
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}
// 08-04
async function updateattribute(data) {
  try {
    let sql = "";
    sql = `UPDATE attributes SET name='${mysql_real_escape_string(
      data.name
    )}',shortcode='${mysql_real_escape_string(data.shortcode)}',type=${data.type
      },p_c_id=${data.p_c_id},coupon_amt='${data.coupon_amt
      }',code_email='${mysql_real_escape_string(
        data.code_email
      )}',process_limit_days=${data.process_limit_days} ,document_type=${data.document_type
      },TIN_number='${data.TIN_number}',website='${data.website}',code=${data.code
      } WHERE attribute_id=${data.attribute_id}`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.affectedRows > 0) {
            resolve({
              status: 1,
              message: "Attribute update successfully",
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function insertBranch(data, filename) {
  try {
    sql = `SELECT * FROM branch WHERE b_name="${data.b_name}"`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({ status: 0, message: "Already Exists" });
          } else {
            sql1 = `INSERT INTO branch (b_name,ip_address,company_name,email,mo_no,address,website_url,logo,state_id,c_term_condition,b_email_template_header,b_email_template_footer,b_email_signature,b_bank_details,b_nongst_bank_deatils,r_link,b_gstno) VALUES ('${mysql_real_escape_string(
              data.b_name
            )}','${mysql_real_escape_string(
              data.ip_address
            )}','${mysql_real_escape_string(
              data.company_name
            )}','${mysql_real_escape_string(
              data.email
            )}','${mysql_real_escape_string(
              data.mo_no
            )}','${mysql_real_escape_string(
              data.address
            )}','${mysql_real_escape_string(
              data.website_url
            )}','${mysql_real_escape_string(filename)}',${data.state_id},'${data.c_term_condition == "undefined" ||
              data.c_term_condition == "" ||
              data.c_term_condition.match("<p></p>") == null
              ? "<p>&nbsp</p>"
              : data.c_term_condition
              }','${data.b_email_template_header == "undefined" ||
                data.b_email_template_header == "" ||
                data.b_email_template_header.match("<p></p>") == null
                ? "<p>&nbsp</p>"
                : data.b_email_template_header
              }','${data.b_email_template_footer == "undefined" ||
                data.b_email_template_footer == "" ||
                data.b_email_template_footer.match("<p></p>") == null
                ? "<p>&nbsp</p>"
                : data.b_email_template_footer
              }','${data.b_email_signature == "undefined" ||
                data.b_email_signature == "" ||
                data.b_email_signature.match("<p></p>") == null
                ? "<p>&nbsp</p>"
                : data.b_email_signature
              }','${data.b_bank_details == "undefined" ||
                data.b_bank_details == "" ||
                data.b_bank_details.match("<p></p>") == null
                ? "<p>&nbsp</p>"
                : data.b_bank_details
              }','${data.b_nongst_bank_deatils == "undefined" ||
                data.b_nongst_bank_deatils == "" ||
                data.b_nongst_bank_deatils.match("<p></p>") == null
                ? "<p>&nbsp</p>"
                : data.b_nongst_bank_deatils
              }','${data.r_link != "undefined"
                ? mysql_real_escape_string(data.r_link)
                : ""
              }','${data.b_gstno != "undefined"
                ? mysql_real_escape_string(data.b_gstno)
                : ""
              }')`;
            con.query(sql1, function (err, result) {
              if (err) {
                console.log(err);
                resolve({ status: 0, message: "Something went to wrong" });
              } else {
                if (result.affectedRows > 0) {
                  resolve({
                    status: 1,
                    message: "Branch Inserted Successfully",
                  });
                } else {
                  resolve({
                    status: 0,
                    message: "Something went to wrong",
                  });
                }
              }
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

//0103
async function getallBranch() {
  try {
    let sql = "";
    // sql = `SELECT *,(row_number() over ( order by branch.branch_id desc) ) AS row_no,(SELECT name FROM attributes WHERE attributes.attribute_id = branch.state_id) AS state_name FROM branch WHERE deleted=0 order by branch_id  desc`;
    sql = `SELECT branch_tbl.*,(row_number() over ( order by branch_tbl.branch_id desc) ) AS row_no,att_tbl.name AS state_name FROM branch branch_tbl LEFT JOIN attributes att_tbl ON att_tbl.attribute_id = branch_tbl.state_id WHERE branch_tbl.deleted=0 order by branch_tbl.branch_id desc;`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              bData: result,
            });
          } else {
            resolve({
              status: 1,
              bData: [],
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}
async function updatebranch(data, filename = "") {
  try {
    let sql = "";
    if (filename != "") {
      sql = `UPDATE branch SET b_name='${mysql_real_escape_string(
        data.b_name
      )}',ip_address='${mysql_real_escape_string(
        data.ip_address
      )}',company_name='${mysql_real_escape_string(
        data.company_name
      )}',email='${mysql_real_escape_string(
        data.email
      )}',mo_no='${mysql_real_escape_string(
        data.mo_no
      )}',address='${mysql_real_escape_string(
        data.address
      )}',website_url='${mysql_real_escape_string(
        data.website_url
      )}',logo='${mysql_real_escape_string(filename)}',state_id=${data.state_id
        },r_link='${data.r_link != "null" ? mysql_real_escape_string(data.r_link) : ""
        }',b_gstno='${mysql_real_escape_string(data.b_gstno)}'
      WHERE branch_id=${data.branch_id} `;
    } else {
      sql = `UPDATE branch SET b_name='${mysql_real_escape_string(
        data.b_name
      )}',ip_address='${mysql_real_escape_string(
        data.ip_address
      )}',company_name='${mysql_real_escape_string(
        data.company_name
      )}',email='${mysql_real_escape_string(
        data.email
      )}',mo_no='${mysql_real_escape_string(
        data.mo_no
      )}',address='${mysql_real_escape_string(
        data.address
      )}',website_url='${mysql_real_escape_string(
        data.website_url
      )}',state_id=${data.state_id},r_link='${data.r_link != "null" ? mysql_real_escape_string(data.r_link) : ""
        }',b_gstno='${mysql_real_escape_string(data.b_gstno)}'
      WHERE branch_id=${data.branch_id} `;
    }
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Branch Not Updated" });
        } else {
          if (result) {
            resolve({ status: 1, message: "Branch SuccessFully Updated" });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function deleteBranch(data) {
  try {
    let sql = "";
    sql = `UPDATE branch SET deleted=1 WHERE  branch_id=${data.id}`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.affectedRows > 0) {
            resolve({
              status: 1,
              message: "Branch delete successfully",
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function gettypecountry(data) {
  try {
    let sql = "";
    sql = `SELECT * FROM attributes WHERE type=${data.type} OR type=${data.country} `;

    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              Data: result,
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function insertService(data) {
  try {
    sql = `SELECT * FROM serviceprice WHERE country=${data.country} and s_type=${data.s_type} and service=${data.service}`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({ status: 0, message: "Already Exists" });
          } else {
            sql1 = `INSERT INTO serviceprice (s_amount,profit,actual_price,service,country,s_type,charge_type) VALUES ('${data.s_amount}','${data.profit}','${data.actual_price}',${data.service},${data.country},${data.s_type},${data.charge_type})`;
            con.query(sql1, function (err, result) {
              if (err) {
                console.log(err);
                resolve({ status: 0, message: "Something went to wrong" });
              } else {
                if (result.affectedRows > 0) {
                  resolve({
                    status: 1,
                    message: "Service Insert successfully",
                  });
                } else {
                  resolve({
                    status: 0,
                    message: "Something went to wrong",
                  });
                }
              }
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function deleteService(data) {
  try {
    sql = `UPDATE serviceprice SET deleted=1 WHERE  service_id =${data.id}`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.affectedRows > 0) {
            resolve({
              status: 1,
              message: "Service delete successfully",
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

//0103
async function getallService(data) {
  try {
    // sql = `SELECT *,(row_number() over ( order by serviceprice.service_id DESC) ) AS row_no,(SELECT COUNT(*) FROM serviceprice where deleted=0) as trows,(SELECT name FROM attributes WHERE attributes.attribute_id=serviceprice.country)AS country_name,(SELECT name FROM attributes WHERE attributes.attribute_id=serviceprice.s_type)AS service_type FROM serviceprice WHERE deleted=0 ORDER BY service_id DESC limit ${(data.page - 1) * data.perpage
    //   },${data.perpage}`;
    sql = `SELECT s_price_tbl.*,(row_number() over ( order by s_price_tbl.service_id DESC) ) AS row_no,(SELECT COUNT(*) FROM serviceprice where deleted=0) as trows,att_tbl.name AS service_type,att_tbl1.name AS country_name FROM serviceprice s_price_tbl LEFT JOIN attributes att_tbl ON att_tbl.attribute_id=s_price_tbl.s_type LEFT JOIN attributes att_tbl1 ON att_tbl1.attribute_id=s_price_tbl.country WHERE s_price_tbl.deleted = 0 ORDER BY s_price_tbl.service_id DESC limit ${(data.page - 1) * data.perpage
      },${data.perpage}`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              sData: result,
            });
          } else {
            resolve({
              status: 1,
              sData: [],
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function insertFeature(data) {
  try {
    sql = `INSERT INTO features (name) VALUES ('${data.name}') `;

    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.affectedRows > 0) {
            sql1 = `INSERT INTO user_permission (f_id, views, creates, edits, deletes, u_id) VALUES (${result.insertId},1,1,1,1,1)`;
            con.query(sql1, function (err, res) {
              if (err) {
                console.log(err);
              }
            });
            resolve({
              status: 1,
              message: "Feature Insert successfully",
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function getallFeature() {
  try {
    sql = `SELECT *,(row_number() over ( order by features.f_id desc) ) AS row_no FROM features WHERE deleted=0 order by features.f_id desc`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              fData: result,
            });
          } else {
            resolve({
              status: 1,
              fData: [],
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function updateFeature(data) {
  try {
    sql = `UPDATE features SET name='${data.name}' WHERE f_id=${data.f_id}`;

    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.affectedRows > 0) {
            resolve({
              status: 1,
              message: "Feature updated successfully",
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function deleteFeature(data) {
  try {
    sql = `UPDATE features SET deleted=1 WHERE  f_id =${data.id}`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.affectedRows > 0) {
            resolve({
              status: 1,
              message: "Feature delete successfully",
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function getLeadSource() {
  try {
    sql = `SELECT * FROM attributes WHERE type=2  ORDER BY name ASC;`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              lsData: result,
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

//2303
async function insertLead(data) {
  try {
    let curr_date = moment().format("DD-MM-YYYY");
    let response = await new Promise((resolve, reject) => {
      if (data.leadExists != 1) {
        sql = `SELECT elead.*,users.u_name,branch.b_name FROM elead LEFT JOIN users on users.u_id = elead.l_created_by LEFT JOIN branch on branch.branch_id = elead.l_branch_id WHERE elead.l_email="${data.l_email}" order by elead.lead_id DESC limit 1 `;
        con.query(sql, async function (err, result) {
          if (err) {
            console.log(err);
            resolve({ status: 0, message: "Something went to wrong" });
          } else {
            if (result.length > 0) {
              if (result[0].convert_status == 0) {
                resolve({
                  status: 2,
                  u_name: result[0].u_name,
                  b_name: result[0].b_name,
                  message: "Email Id Already Exists in Lead",
                });
              } else {
                checkcust = `SELECT customer.*,users.u_name,branch.b_name FROM customer LEFT JOIN users on users.u_id = customer.u_id LEFT JOIN branch on branch.branch_id = customer.branch_id WHERE customer.c_email="${data.l_email}" order by customer.c_id DESC limit 1`;
                let resp = await new Promise((resolve, reject) => {
                  con.query(
                    checkcust,
                    function (checkcust_err, checkcust_result) {
                      if (checkcust_err) {
                        console.log(checkcust_err);
                        resolve({
                          status: 0,
                          message: "Something went to wrong",
                        });
                      } else {
                        if (checkcust_result.length > 0) {
                          resolve({
                            status: 3,
                            u_name: checkcust_result[0].u_name,
                            b_name: checkcust_result[0].b_name,
                            message: "Email Id Already Exists in Customer",
                          });
                        } else {
                          resolve({
                            status: 2,
                            u_name: result[0].u_name,
                            b_name: result[0].b_name,
                            message: "Email Id Already Exists",
                          });
                        }
                      }
                    }
                  );
                });
                resolve({
                  status: resp.status,
                  u_name: resp.u_name,
                  b_name: resp.b_name,
                  message: resp.message,
                });
              }
            } else {
              sql = `INSERT INTO elead (l_date,l_source,l_name_prefix,l_name,co_no,l_email,l_address,l_service,l_created_by,l_branch_id,l_allocate_to,l_status,priority,updated_date,d_c_date,d_c_d_date,l_message,reference_id,l_created_branch_id) VALUES ('${mysql_real_escape_string(
                data.l_date
              )}',${data.l_source},'${mysql_real_escape_string(
                data.l_name_prefix
              )}','${mysql_real_escape_string(
                data.l_name
              )}','${mysql_real_escape_string(
                data.co_no
              )}','${mysql_real_escape_string(
                data.l_email
              )}','${mysql_real_escape_string(data.l_address)}',${data.l_service
                },${data.l_created_by},${typeof data.l_branch_id != "undefined" ? data.l_branch_id : 0
                },${typeof data.l_allocate_to != "undefined"
                  ? data.l_allocate_to
                  : data.l_created_by
                },${data.l_status},${data.priority},'${mysql_real_escape_string(
                  curr_date
                )}','${data.d_c_date == undefined
                  ? ""
                  : mysql_real_escape_string(data.d_c_date)
                }','${data.d_c_d_date == undefined
                  ? ""
                  : mysql_real_escape_string(data.d_c_d_date)
                }','${typeof data.l_message == undefined || data.l_message == undefined || data.l_message == null
                  ? ""
                  : mysql_real_escape_string(data.l_message)
                }',${data.reference_id != null &&
                  data.reference_id != undefined &&
                  data.reference_id != 0
                  ? data.reference_id
                  : 0
                },${data.l_created_branch_id != undefined &&
                  data.l_created_branch_id != 0 &&
                  data.l_created_branch_id != null
                  ? data.l_created_branch_id
                  : data.l_branch_id
                })`;
              con.query(sql, async function (err, result) {
                if (err) {
                  console.log(err);
                  resolve({ status: 0, message: "Something went to wrong" });
                } else {
                  if (result.affectedRows > 0) {
                    // GET EMAIL SETTING FOR SENDING MAIL
                    senderMailSetting = await sendmessage.getEmailSetting(
                      data.l_created_by
                    );

                    sqlll = `SELECT u_email FROM users WHERE u_id = ${data.l_created_by} `;
                    let ccmail = await new Promise((resolve, reject) => {
                      con.query(sqlll, async function (err1, result1) {
                        if (err1) {
                          console.log(err1);
                          resolve({
                            status: 0,
                            message: "Something went to wrong",
                          });
                        } else {
                          if (result1.length > 0) {
                            resolve({
                              status: 1,
                              result: result1[0].u_email,
                            });
                          } else {
                            resolve({
                              status: 0,
                              message: "Something went to wrong",
                            });
                          }
                        }
                      });
                    });
                    let message = await sendmessage.getTemplate(1);
                    // Add HEADER AND FOOTER ON EMAIL ACOTDING TO PERMISSION
                    if (message.status != 0) {
                      message.template = message.template.replace(
                        "{:name:}",
                        data.l_name_prefix + " " + data.l_name
                      );
                      let mess =
                        (message.header == 1
                          ? typeof senderMailSetting.email_template_header !=
                            undefined && senderMailSetting.email_template_header !=
                            undefined &&
                            senderMailSetting.email_template_header != null
                            ? senderMailSetting.email_template_header
                            : ""
                          : "") +
                        message.template +
                        (message.b_d_id != 0
                          ? message.b_d_id == 1
                            ? senderMailSetting.gst_bankdetails
                            : message.b_d_id == 2
                              ? senderMailSetting.ngst_bankdetails
                              : message.b_d_id == 3
                                ? senderMailSetting.general_bankdetails
                                : ""
                          : "") +
                        (message.footer == 1
                          ? senderMailSetting.email_template_footer
                          : "") +
                        (message.signature == 1
                          ? senderMailSetting.email_signature
                          : "");

                      //  GET CC Email Id On Mail Send Time
                      CCMailSetting = await sendmessage.getEmailSetting(1);
                      let pathname =
                        __dirname + "/public/Assets/images/emailtemplateimage";
                      // senderMailSetting , reciver email id , message , 0 - SMS & 1 - Email
                      sendmessagenow = sendmessage.custommailsend(
                        senderMailSetting,
                        data.l_email,
                        mess,
                        message.subject,
                        message.attachment,
                        ccmail.result, //CCMailSetting.e_username,  // user mail
                        ccmail.result, // reply mail
                        1,
                        pathname
                      );
                      sql123 = `INSERT INTO template_history(lead_id,cus_id,template_body,created_id,created_branch_id,template_subject) VALUES (${result.insertId
                        },0,'${mysql_real_escape_string(mess)}',${data.l_created_by
                        },${data.l_created_branch_id},'${mysql_real_escape_string(
                          message.subject
                        )}')`;
                      con.query(sql123, function (err, result) {
                        if (err) {
                          console.log(err);
                          resolve({
                            status: 0,
                            message: "Something went to wrong",
                          });
                        } else {
                          if (result.affectedRows > 0) {
                            console.log("History Inserted");
                          } else {
                            resolve({
                              status: 0,
                              message: "Something went to wrong",
                            });
                          }
                        }
                      });
                    }
                    resolve({
                      status: 1,
                      message: "Lead Insert successfully",
                      email: data.l_email,
                      prefix: data.l_name_prefix,
                      name: data.l_name,
                      lead_id: result.insertId,
                    });
                    if (data.reference_id != 0) {
                      const tdata = await getAllNewLead({ id: data.l_allocate_to });
                      let respdata = {
                        channel: "READ_NEWLEAD",
                        data: {
                          counter: tdata.counter,
                          data: tdata.data,
                        },
                      };
                      sendWsMessage(data.l_allocate_to, respdata);
                      const tdata1 = await getAllNewLead({ id: 1 });
                      let respdata1 = {
                        channel: "READ_NEWLEAD",
                        data: {
                          counter: tdata1.counter,
                          data: tdata1.data,
                        },
                      };
                      sendWsMessage(1, respdata1);
                      const tdata2 = await getAllNewLead({ id: data.reference_id });
                      console.log(tdata2, "tdata2");
                      let respdata2 = {
                        channel: "READ_NEWLEAD",
                        data: {
                          counter: tdata2.counter,
                          data: tdata2.data,
                        },
                      };
                      sendWsMessage(data.reference_id, respdata2);
                    }

                  } else {
                    resolve({
                      status: 0,
                      message: "Something went to wrong",
                    });
                  }
                }
              });
            }
          }
        });
      } else {
        sql = `INSERT INTO elead (l_date,l_source,l_name_prefix,l_name,co_no,l_email,l_address,l_service,l_created_by,l_branch_id,l_allocate_to,l_status,priority,updated_date,d_c_date,d_c_d_date,l_message,reference_id,l_created_branch_id) VALUES ('${mysql_real_escape_string(
          data.l_date
        )}',${data.l_source},'${mysql_real_escape_string(
          data.l_name_prefix
        )}','${mysql_real_escape_string(
          data.l_name
        )}','${mysql_real_escape_string(
          data.co_no
        )}','${mysql_real_escape_string(
          data.l_email
        )}','${mysql_real_escape_string(data.l_address)}',${data.l_service},${data.l_created_by
          },${typeof data.l_branch_id != "undefined" ? data.l_branch_id : 0},${typeof data.l_allocate_to != "undefined"
            ? data.l_allocate_to
            : data.l_created_by
          },${data.l_status},${data.priority},'${mysql_real_escape_string(
            curr_date
          )}','${data.d_c_date == undefined
            ? ""
            : mysql_real_escape_string(data.d_c_date)
          }','${data.d_c_d_date == undefined
            ? ""
            : mysql_real_escape_string(data.d_c_d_date)
          }','${typeof data.l_message == undefined || data.l_message == undefined || data.l_message == null
            ? ""
            : mysql_real_escape_string(data.l_message)
          }',${data.reference_id != null &&
            data.reference_id != undefined &&
            data.reference_id != 0
            ? data.reference_id
            : 0
          },${data.l_created_branch_id})`;
        con.query(sql, async function (err, result) {
          if (err) {
            console.log(err);
            resolve({ status: 0, message: "Something went to wrong" });
          } else {
            if (result.affectedRows > 0) {
              // GET EMAIL SETTING FOR SENDING MAIL
              senderMailSetting = await sendmessage.getEmailSetting(
                data.l_created_by
              );

              sqlll = `SELECT u_email FROM users WHERE u_id = ${data.l_created_by} `;
              let ccmail = await new Promise((resolve, reject) => {
                con.query(sqlll, async function (err1, result1) {
                  if (err1) {
                    console.log(err1);
                    resolve({
                      status: 0,
                      message: "Something went to wrong",
                    });
                  } else {
                    if (result1.length > 0) {
                      resolve({ status: 1, result: result1[0].u_email });
                    } else {
                      resolve({
                        status: 0,
                        message: "Something went to wrong",
                      });
                    }
                  }
                });
              });
              let message = await sendmessage.getTemplate(1);
              console.log(message.status, "*****sdsefsfsdf****");
              // Add HEADER AND FOOTER ON EMAIL ACOTDING TO PERMISSION
              if (message.status != 0) {
                message.template = message.template.replace(
                  "{:name:}",
                  data.l_name_prefix + " " + data.l_name
                );
                let mess =
                  (message.header == 1
                    ? typeof senderMailSetting.email_template_header !=
                      undefined && senderMailSetting.email_template_header != undefined &&
                      senderMailSetting.email_template_header != null
                      ? senderMailSetting.email_template_header
                      : ""
                    : "") +
                  message.template +
                  (message.b_d_id != 0
                    ? message.b_d_id == 1
                      ? senderMailSetting.gst_bankdetails
                      : message.b_d_id == 2
                        ? senderMailSetting.ngst_bankdetails
                        : message.b_d_id == 3
                          ? senderMailSetting.general_bankdetails
                          : ""
                    : "") +
                  (message.footer == 1
                    ? senderMailSetting.email_template_footer
                    : "") +
                  (message.signature == 1
                    ? senderMailSetting.email_signature
                    : "");

                //  GET CC Email Id On Mail Send Time
                CCMailSetting = await sendmessage.getEmailSetting(1);
                let pathname =
                  __dirname + "/public/Assets/images/emailtemplateimage";
                // senderMailSetting , reciver email id , message , 0 - SMS & 1 - Email

                sendmessagenow = sendmessage.custommailsend(
                  senderMailSetting,
                  data.l_email,
                  mess,
                  message.subject,
                  message.attachment,
                  ccmail.result, //CCMailSetting.e_username,  // user mail
                  ccmail.result, // reply mail
                  1,
                  pathname
                );
                sql123 = `INSERT INTO template_history(lead_id,cus_id,template_body,created_id,created_branch_id,template_subject) VALUES (${result.insertId
                  },0,'${mysql_real_escape_string(mess)}',${data.l_created_by},${data.created_branch_id
                  },'${mysql_real_escape_string(message.subject)}')`;
                con.query(sql123, function (err, result) {
                  if (err) {
                    console.log(err);
                    resolve({
                      status: 0,
                      message: "Something went to wrong",
                    });
                  } else {
                    if (result.affectedRows > 0) {
                      console.log("History Inserted");
                    } else {
                      resolve({
                        status: 0,
                        message: "Something went to wrong",
                      });
                    }
                  }
                });
              }
              resolve({
                status: 1,
                message: "Lead Insert successfully",
                email: data.l_email,
                prefix: data.l_name_prefix,
                name: data.l_name,
                lead_id: result.insertId,
              });
              if (data.reference_id != 0) {
                const tdata = await getAllNewLead({ id: data.l_allocate_to });
                const tdata1 = await getAllNewLead({ id: 1 });

                let respdata = {
                  channel: "READ_NEWLEAD",
                  data: {
                    counter: tdata.counter,
                    data: tdata.data,
                  },
                };
                let respdata1 = {
                  channel: "READ_NEWLEAD",
                  data: {
                    counter: tdata1.counter,
                    data: tdata1.data,
                  },
                };
                sendWsMessage(data.l_allocate_to, respdata);
                sendWsMessage(1, respdata1);
              }
            } else {
              resolve({
                status: 0,
                message: "Something went to wrong",
              });
            }
          }
        });
      }
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

//0103
async function getAllLead(data) {
  try {
    let record = [];
    let getuserquery = `select * from users where u_id=${data.id} and deleted=0`;
    let response = await new Promise((resolve, reject) => {
      con.query(getuserquery, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            if (result[0].user_type == 1) {
              // Jil After Form Link get Lead with their Responsible Person
              getallchilduser = `select * from users where ((p_u_id=${data.id} OR p_u_id=1 OR p_u_id IN (SELECT users.u_id  from users where users.branch_id= ${result[0].branch_id})) and branch_id=${result[0].branch_id}) and deleted=0`;

              // getallchilduser = `select * from users where ((p_u_id=${data.id} OR p_u_id=1) and branch_id=${result[0].branch_id}) and deleted=0`;
              con.query(getallchilduser, function (err, res) {
                if (err) {
                  console.log(err);
                  resolve({ status: 0, message: "Something went to wrong" });
                } else {
                  res.forEach(function (r) {
                    record.push(r.u_id);
                  });
                  record.push(data.id);
                  resolve({
                    record: record,
                    type: result[0].user_type,
                  });
                }
              });
            } else {
              resolve({
                type: result[0].user_type,
              });
            }
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    let getLeadPaginationQuery = "";
    let getleadsql = "";

    if (response.type == 1) {
      // Jil After Form Link get Lead with their Responsible Person
      // getleadquery = `SELECT *,(row_number() over ( order by elead.lead_id DESC) ) AS row_no,
      // (SELECT COUNT(*) FROM elead where (elead.l_created_by IN(${record}) or elead.l_allocate_to IN(${record})) and elead.deleted=0 and elead.convert_status=0 and users.deleted=0) as trows,
      // (SELECT  CASE
      //   WHEN l_source =282
      //      THEN (SELECT m_c_name FROM main_customer WHERE m_c_id=l_created_by)
      //      ELSE (SELECT u_name FROM users WHERE users.u_id=elead.l_created_by)
      // END)as createdBy,
      // (SELECT u_name FROM users WHERE users.u_id=elead.l_allocate_to)as allocatedTo,
      // (select users.u_name from users where users.u_id = (select users.marketing_parent_id FROM users where elead.l_created_by = users.u_id)) as resp_per,
      // (SELECT b_name FROM branch WHERE branch.branch_id =elead.l_branch_id)as branch,
      // (SELECT name FROM attributes WHERE attributes.attribute_id =elead.l_status)as status,
      // (SELECT name FROM attributes WHERE attributes.attribute_id =elead.l_source)as source FROM elead,users WHERE elead.deleted=0 and elead.convert_status=0 and users.deleted=0 and (elead.l_created_by IN(${record}) or elead.l_allocate_to IN(${record}) ) GROUP by elead.lead_id `;
      //1403

      getLeadPaginationQuery = `SELECT COUNT(elead.lead_id) as trows FROM elead LEFT JOIN lead_customer on lead_customer.l_id = elead.lead_id AND lead_customer.deleted = 0  LEFT JOIN users user_tbl ON user_tbl.u_id=elead.l_created_by LEFT JOIN users user_tbl1 ON  user_tbl1.u_id = elead.l_allocate_to LEFT JOIN users user_tbl2 ON  user_tbl2.u_id = user_tbl.marketing_parent_id WHERE elead.deleted=0 and elead.convert_status=0 and user_tbl.deleted=0 and (elead.l_created_by IN(${record}) or elead.l_allocate_to IN(${record}) or  elead.reference_id IN(${record}))`;

      getleadsql = `SELECT lead_followup.n_f_date,elead.*,lead_customer.login_u_id as login_u_id,user_tbl.*,user_tbl.u_name as createdBy,IF(elead.l_source = 282, m_cust_tbl1.m_c_name, user_tbl4.u_name) as marketing_user,user_tbl1.u_name AS allocatedTo,user_tbl2.u_name AS resp_per,branch_tbl.b_name AS branch,att_tbl.name AS status,att_tbl1.name AS source,att_tbl2.name AS c_c_name  FROM elead LEFT JOIN lead_customer on lead_customer.l_id = elead.lead_id  AND lead_customer.deleted = 0 LEFT JOIN lead_followup on lead_followup.l_f_id IN (SELECT MAX(l_f_id) FROM lead_followup GROUP BY lead_id) and lead_followup.lead_id = elead.lead_id LEFT JOIN main_customer m_cust_tbl ON m_cust_tbl.m_c_id=elead.l_created_by LEFT JOIN main_customer m_cust_tbl1 ON m_cust_tbl1.m_c_id=elead.reference_id  LEFT JOIN users user_tbl ON user_tbl.u_id=elead.l_created_by LEFT JOIN users user_tbl4 ON user_tbl4.u_id=elead.reference_id LEFT JOIN users user_tbl1 ON user_tbl1.u_id = elead.l_allocate_to LEFT JOIN users user_tbl2 ON user_tbl2.u_id = user_tbl.marketing_parent_id LEFT JOIN branch branch_tbl ON branch_tbl.branch_id = elead.l_branch_id LEFT JOIN attributes att_tbl ON att_tbl.attribute_id = elead.l_status LEFT JOIN  attributes att_tbl1 ON att_tbl1.attribute_id = elead.l_source LEFT JOIN  attributes att_tbl2 ON att_tbl2.attribute_id = elead.courier_id  WHERE elead.deleted=0 and elead.convert_status=0 and user_tbl.deleted=0 and (elead.l_created_by IN(${record}) or elead.l_allocate_to IN(${record}) or  elead.reference_id IN(${record})) GROUP by elead.lead_id `;
    } else {
      // Jil After Form Link get Lead with their Responsible Person
      // getleadquery = `SELECT *,(row_number() over ( order by elead.lead_id DESC) ) AS row_no,
      // (SELECT COUNT(*) FROM elead where elead.deleted=0 and elead.convert_status=0) as trows,
      // (SELECT  CASE
      //   WHEN l_source =282
      //      THEN (SELECT m_c_name FROM main_customer WHERE m_c_id=l_created_by)
      //      ELSE (SELECT u_name FROM users WHERE users.u_id=elead.l_created_by)
      // END )as createdBy,
      // (SELECT u_name FROM users WHERE users.u_id=elead.l_allocate_to)as allocatedTo,
      // (select users.u_name from users where users.u_id = (select users.marketing_parent_id FROM users where elead.l_created_by = users.u_id)) as resp_per,
      // (SELECT b_name FROM branch WHERE branch.branch_id =elead.l_branch_id)as branch,
      // (SELECT name FROM attributes WHERE attributes.attribute_id =elead.l_status)as status,
      // (SELECT name FROM attributes WHERE attributes.attribute_id =elead.l_source)as source FROM elead, users
      // WHERE elead.deleted=0 and elead.convert_status=0 AND users.u_id = elead.l_created_by`;
      //1403

      getLeadPaginationQuery = `SELECT COUNT(elead.lead_id) as trows FROM elead LEFT JOIN lead_customer on lead_customer.l_id = elead.lead_id AND lead_customer.deleted = 0  LEFT JOIN users user_tbl ON user_tbl.u_id=elead.l_created_by LEFT JOIN users user_tbl1 ON  user_tbl1.u_id = elead.l_allocate_to LEFT JOIN users user_tbl2 ON  user_tbl2.u_id = user_tbl.marketing_parent_id WHERE elead.deleted=0 and elead.convert_status=0 AND user_tbl.u_id = elead.l_created_by AND user_tbl.deleted = 0`;

      getleadsql = `SELECT lead_followup.n_f_date,elead.*,lead_customer.login_u_id as login_u_id,user_tbl.*,user_tbl.u_name as createdBy,IF(elead.l_source = 282, m_cust_tbl1.m_c_name, user_tbl4.u_name) as marketing_user,user_tbl1.u_name AS allocatedTo,user_tbl2.u_name AS resp_per,branch_tbl.b_name AS branch,att_tbl.name AS status,att_tbl1.name AS source,att_tbl2.name AS c_c_name  FROM elead LEFT JOIN lead_customer on lead_customer.l_id = elead.lead_id AND lead_customer.deleted = 0  LEFT JOIN lead_followup on lead_followup.l_f_id IN (
        SELECT MAX(l_f_id)
        FROM lead_followup
        GROUP BY lead_id
    ) and lead_followup.lead_id = elead.lead_id  LEFT JOIN main_customer m_cust_tbl ON m_cust_tbl.m_c_id=elead.l_created_by  LEFT JOIN main_customer m_cust_tbl1 ON m_cust_tbl1.m_c_id=elead.reference_id LEFT JOIN users user_tbl ON user_tbl.u_id=elead.l_created_by LEFT JOIN users user_tbl4 ON user_tbl4.u_id=elead.reference_id LEFT JOIN users user_tbl1 ON  user_tbl1.u_id = elead.l_allocate_to LEFT JOIN users user_tbl2 ON  user_tbl2.u_id = user_tbl.marketing_parent_id LEFT JOIN branch branch_tbl ON branch_tbl.branch_id = elead.l_branch_id LEFT JOIN attributes att_tbl ON att_tbl.attribute_id = elead.l_status LEFT JOIN  attributes att_tbl1 ON att_tbl1.attribute_id = elead.l_source LEFT JOIN  attributes att_tbl2 ON att_tbl2.attribute_id = elead.courier_id WHERE elead.deleted=0 and elead.convert_status=0 AND user_tbl.u_id = elead.l_created_by AND user_tbl.deleted = 0`;

      if (response.type == 3) {
        // Jil After Form Link get Lead with their Responsible Person
        // getleadquery += ` and (l_created_by=${data.id} or l_allocate_to=${data.id} OR users.marketing_parent_id =${data.id})`;
        getLeadPaginationQuery += ` and (elead.l_created_by=${data.id} or elead.l_allocate_to=${data.id} or  elead.reference_id = ${data.id} OR user_tbl.marketing_parent_id =${data.id})`;
        getleadsql += ` and (elead.l_created_by=${data.id} or elead.l_allocate_to=${data.id}   or  elead.reference_id = ${data.id} OR user_tbl.marketing_parent_id =${data.id})`;
      }
    }
    getleadsql += ` order by elead.lead_id DESC`;
    getleadsql += ` limit ${(data.page - 1) * data.perpage},${data.perpage}`;

    let resp = await new Promise((resolve, reject) => {
      con.query(getLeadPaginationQuery, function (err1, lres1) {
        if (err1) {
          console.log(err1);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (lres1.length > 0) {
            resolve({
              status: 1,
              t_rows: lres1[0].trows,
            });
          } else {
            resolve({
              status: 0,
              data: [],
            });
          }
        }
      });
    });

    let response1 = await new Promise((resolve, reject) => {
      con.query(getleadsql, function (err, lres) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (lres.length > 0) {
            resolve({
              status: 1,
              data: lres,
              t_rows: resp.t_rows,
            });
          } else {
            resolve({
              status: 0,
              data: [],
            });
          }
        }
      });
    });
    // sql = ` SELECT *,(SELECT COUNT(*) FROM elead) as trows,(SELECT u_name FROM users WHERE users.u_id=elead.l_created_by)as createdBy,(SELECT u_name FROM users WHERE users.u_id=elead.l_allocate_to)as allocatedTo,(SELECT b_name FROM branch WHERE branch.branch_id =elead.l_branch_id)as branch,(SELECT name FROM attributes WHERE attributes.attribute_id =elead.l_status)as status,(SELECT name FROM attributes WHERE attributes.attribute_id =elead.l_source)as source FROM elead WHERE deleted=0`;
    // if (data.id != 1) {
    //   sql += ` and (l_created_by=${data.id} or l_allocate_to=${data.id})`;
    // }
    // sql += ` limit ${(data.page - 1) * data.perpage},${data.perpage}`;
    // let response = await new Promise((resolve, reject) => {
    //   con.query(sql, function (err, result) {
    //     if (err) {
    //       resolve({ status: 0, message: "Something went to wrong" });
    //     }
    //     if (result.length > 0) {
    //       resolve({
    //         status: 1,
    //         lData: result,
    //       });
    //     }
    //   });
    // });
    return response1;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function deleteLead(data) {
  try {
    sql = `UPDATE elead SET deleted=1 WHERE  lead_id =${data.id}`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.affectedRows > 0) {
            resolve({
              status: 1,
              message: "Lead delete successfully",
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function updateLead(data) {
  try {
    let sql11 = `SELECT elead.*,users.u_name,branch.b_name FROM elead LEFT JOIN users on users.u_id = elead.l_created_by LEFT JOIN branch on branch.branch_id = elead.l_branch_id WHERE elead.l_email="${data.l_email}" and elead.convert_status = 0`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql11, async function (err11, result11) {
        if (err11) {
          console.log(err11);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result11.length > 0 && data.lead_id != result11[0].lead_id) {
            resolve({
              status: 0,
              u_name: result11[0].u_name,
              b_name: result11[0].b_name,
              message: "Email Id Already Exists",
            });
          } else {
            sql = `UPDATE elead SET l_date='${mysql_real_escape_string(
              data.l_date
            )}', l_source=${data.l_source}, l_status=${data.l_status
              }, l_name_prefix='${mysql_real_escape_string(
                data.l_name_prefix
              )}', l_name='${mysql_real_escape_string(
                data.l_name
              )}', co_no='${mysql_real_escape_string(
                data.co_no
              )}', l_email='${mysql_real_escape_string(
                data.l_email
              )}', l_address='${mysql_real_escape_string(
                data.l_address
              )}',l_service=${data.l_service},l_branch_id=${data.l_branch_id
              },l_allocate_to=${data.l_allocate_to},priority=${data.priority
              },d_c_date='${data.d_c_date == undefined
                ? ""
                : mysql_real_escape_string(data.d_c_date)
              }',d_c_d_date='${data.d_c_d_date == undefined
                ? ""
                : mysql_real_escape_string(data.d_c_d_date)
              }',l_message='${typeof data.l_message == undefined || data.l_message == undefined || data.l_message == null ? "" : mysql_real_escape_string(
                data.l_message
              )}' WHERE lead_id=${data.lead_id}`;
            let response = await new Promise((resolve, reject) => {
              con.query(sql, function (err, result) {
                if (err) {
                  console.log(err);
                  resolve({ status: 0, message: "Something went to wrong" });
                } else {
                  if (result.affectedRows > 0) {
                    resolve({
                      status: 1,
                      message: "Lead updated successfully",
                    });
                  } else {
                    resolve({
                      status: 0,
                      message: "Something went to wrong",
                    });
                  }
                }
              });
            });
            resolve({
              status: 1,
              message: "Lead updated successfully",
            });
          }
        }
      });
    });
    sql = `SELECT * FROM lead_customer WHERE m_c_id = ${data.lead_id} AND deleted = 0`;
    let res = await new Promise((resolve, reject) => {
      con.query(sql, async function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({ status: 1, result: result });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    if (res.status == 1) {
      sql1 = `UPDATE lead_customer SET c_prefix='${mysql_real_escape_string(
        data.l_name_prefix
      )}',c_name='${mysql_real_escape_string(
        data.l_name
      )}',c_mo_no='${mysql_real_escape_string(
        data.co_no
      )}',c_email='${mysql_real_escape_string(
        data.l_email
      )}',c_address='${mysql_real_escape_string(
        data.l_address
      )}' WHERE m_c_id=${data.lead_id} `;
      let response1 = await new Promise((resolve, reject) => {
        con.query(sql1, function (err, result) {
          if (err) {
            console.log(err);
          } else {
            if (result.affectedRows > 0) {
              resolve({
                status: 1,
                result: result,
                message: "Lead Customer Updated Successfully...",
              });
            } else {
              resolve({ status: 0, message: "Something went to wrong" });
            }
          }
        });
      });
    }

    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function getAllBranch() {
  try {
    sql = `SELECT * FROM branch WHERE deleted=0  ORDER BY b_name ASC;`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              bData: result,
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function getUsers(data) {
  try {
    sql = `SELECT * FROM users WHERE u_id=${data.uid} and deleted=0 order by u_name asc `;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            let sql1 = "";
            if (result[0].user_type == 0) {
              sql1 = `SELECT * FROM users WHERE user_type!=0 AND user_type!=2 AND branch_id=${data.bid} AND deleted=0 order by u_name asc`;
              con.query(sql1, function (err, res) {
                if (err) {
                  console.log(err);
                  resolve({ status: 0, message: "Something went to wrong" });
                } else {
                  if (typeof res != "undefined" && res.length > 0) {
                    resolve({
                      status: 1,
                      uData: res,
                    });
                  } else {
                    resolve({
                      status: 0,
                      uData: [],
                    });
                  }
                }
              });
            } else if (result[0].user_type == 1) {
              sql1 = `SELECT * FROM users,roles WHERE users.r_id=roles.r_id AND (users.p_u_id=${data.uid} OR users.branch_id=${data.bid}) AND user_type!=0 and users.deleted=0 order by u_name asc`;
              con.query(sql1, function (err, res) {
                if (err) {
                  console.log(err);
                  resolve({ status: 0, message: "Something went to wrong" });
                } else {
                  if (typeof res != "undefined" && res.length > 0) {
                    resolve({
                      status: 1,
                      uData: res,
                    });
                  } else {
                    resolve({
                      status: 0,
                      uData: [],
                    });
                  }
                }
              });
            }
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function getAllLeadStatus() {
  try {
    sql = `SELECT * FROM attributes WHERE type=1 and status=0 ORDER BY name ASC`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              lsData: result,
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function updateLeadBranch(data) {
  try {
    sql = `UPDATE elead SET l_branch_id=${data.l_branch_id} WHERE lead_id =${data.lead_id}`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.affectedRows > 0) {
            resolve({
              status: 1,
              message: "Branch update successfully",
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}
//0103
async function updateLeadStatus(data, filename) {
  try {
    let sql;
    let curr_date = moment().format("DD-MM-YYYY");
    if (filename != undefined) {
      if (data.l_status == 5) {
        sql = `UPDATE elead SET l_status=${data.l_status
          },pick_img='${mysql_real_escape_string(filename)}' WHERE  lead_id =${data.lead_id
          }`;
      } else if (data.l_status == 537) {
        console.log(filename, "p_o_attachment");
        if (data.p_i_note != "") {
          sql = `UPDATE elead SET l_status=250,p_d_id=${data.p_d_id
            },p_i_note='${mysql_real_escape_string(typeof data.p_i_note != undefined && data.p_i_note != undefined && data.p_i_note != null ? data.p_i_note : ''
            )}',p_o_attachment='${mysql_real_escape_string(
              filename
            )}',l_message='${typeof data.l_message != undefined && data.l_message != undefined && data.l_message != null
              ? `${mysql_real_escape_string(
                data.l_message
              )}, ${mysql_real_escape_string(typeof data.p_i_note != undefined && data.p_i_note != undefined && data.p_i_note != null ? data.p_i_note : '')}`
              : mysql_real_escape_string(typeof data.p_i_note != undefined && data.p_i_note != undefined && data.p_i_note != null ? data.p_i_note : '')
            } ',updated_date='${mysql_real_escape_string(
              curr_date
            )}',p_d_date='${mysql_real_escape_string(
              curr_date
            )}',sent_by_self=1 WHERE  lead_id =${data.lead_id}`;
        } else {
          sql = `UPDATE elead SET l_status=250,p_d_id=${data.p_d_id
            },p_o_attachment='${mysql_real_escape_string(filename)}',l_message='${typeof data.l_message != undefined && data.l_message != undefined && data.l_message != null
              ? `${mysql_real_escape_string(
                data.l_message
              )}, ${mysql_real_escape_string(typeof data.p_i_note != undefined && data.p_i_note != undefined && data.p_i_note != null ? data.p_i_note : '')}`
              : mysql_real_escape_string(typeof data.p_i_note != undefined && data.p_i_note != undefined && data.p_i_note != null ? data.p_i_note : '')
            } ',updated_date='${mysql_real_escape_string(
              curr_date
            )}',p_d_date='${mysql_real_escape_string(
              curr_date
            )}',sent_by_self=1 WHERE  lead_id =${data.lead_id}`;
        }
      }
      //2303
    } else {
      if (data.l_status == 249) {
        sql = `UPDATE elead SET l_status=${data.l_status
          },d_c_date='${mysql_real_escape_string(
            data.d_c_date
          )}',updated_date='${mysql_real_escape_string(curr_date)}',p_h_id=${data.p_h_id
          },l_message='${typeof data.l_message != undefined && data.l_message != undefined && data.l_message != null
            ? `${mysql_real_escape_string(
              data.l_message
            )} ,${mysql_real_escape_string(typeof data.p_i_note != undefined && data.p_i_note != undefined && data.p_i_note != null ? data.p_i_note : '')}`
            : mysql_real_escape_string(typeof data.p_i_note != undefined && data.p_i_note != undefined && data.p_i_note != null ? data.p_i_note : '')
          }',p_d_id=${data.p_d_id},in_out=1,p_i_note="${typeof data.p_i_note != undefined && data.p_i_note != undefined && data.p_i_note != null
            ? mysql_real_escape_string(data.p_i_note)
            : ""
          }" WHERE  lead_id =${data.lead_id}`;
      } else if (data.l_status == 250) {
        sql = `UPDATE elead SET l_status=${data.l_status
          },d_c_d_date='${mysql_real_escape_string(
            data.d_c_d_date
          )}',updated_date='${mysql_real_escape_string(
            curr_date
          )}' WHERE  lead_id =${data.lead_id}`;
      } else if (data.l_status == 537) {
        if (data.p_i_note != "") {
          sql = `UPDATE elead SET l_status=250,p_d_id=${data.p_d_id
            },p_i_note='${mysql_real_escape_string(typeof data.p_i_note != undefined && data.p_i_note != undefined && data.p_i_note != null ? data.p_i_note : '')}',l_message='${typeof data.l_message != undefined && data.l_message != undefined && data.l_message != null
              ? `${mysql_real_escape_string(
                data.l_message
              )}, ${mysql_real_escape_string(typeof data.p_i_note != undefined && data.p_i_note != undefined && data.p_i_note != null ? data.p_i_note : '')}`
              : mysql_real_escape_string(typeof data.p_i_note != undefined && data.p_i_note != undefined && data.p_i_note != null ? data.p_i_note : '')
            }',updated_date='${mysql_real_escape_string(
              curr_date
            )}',p_d_date='${mysql_real_escape_string(
              curr_date
            )}',sent_by_self=1 WHERE  lead_id =${data.lead_id}`;
        } else {
          sql = `UPDATE elead SET l_status=250,p_d_id=${data.p_d_id
            },updated_date='${mysql_real_escape_string(
              curr_date
            )}',p_d_date='${mysql_real_escape_string(
              curr_date
            )}',sent_by_self=1 WHERE  lead_id =${data.lead_id}`;
        }
      } else {
        sql = `UPDATE elead SET l_status=${data.l_status
          },updated_date='${mysql_real_escape_string(
            curr_date
          )}' WHERE  lead_id =${data.lead_id}`;
      }
    }
    let response = await new Promise((resolve, reject) => {
      con.query(sql, async function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.affectedRows > 0) {
            resolve({
              status: 1,
              message: "Status update successfully",
            });
            let res = "";
            if (data.l_status == 249) {
              // sqll = `Select *,(select u_name from users where users.u_id = ${data.p_h_id})as handler_name,(select u_email from users where users.u_id = ${data.p_h_id})as u_email from elead where lead_id =${data.lead_id} and deleted = 0`;
              sqll = `SELECT elead.*,u1.u_name AS handler_name,u1.u_name AS handler_name,u2.u_email AS u_email FROM elead LEFT JOIN users u1 ON u1.u_id = ${data.p_h_id} LEFT JOIN users u2 ON u2.u_id = ${data.p_h_id} WHERE elead.lead_id = ${data.lead_id} AND elead.deleted = 0;`;
              res = await new Promise(async (resolve, reject) => {
                con.query(sqll, async function (err, result) {
                  if (err) {
                    console.log(err);
                    resolve({ status: 0, message: "Something went to wrong" });
                  } else {
                    if (result.length > 0) {
                      resolve({
                        status: 1,
                        data: result,
                      });
                    }
                  }
                });
              });
            }
            if (data.l_status == 249) {
              let table = `<div>
  <table style="border-collapse: collapse;" >
  <tr>
    <th style="border: 1px solid #333;padding:5px;"> Name </th>
    <th style="border: 1px solid #333;padding:5px;"> Email </th>
    <th style="border: 1px solid #333;padding:5px;"> Mobile No </th>
    <th style="border: 1px solid #333;padding:5px;"> Address </th>
    <th style="border: 1px solid #333;padding:5px;"> Message </th>
  </tr>
  ${`<tr><td style="border: 1px solid #333;padding:5px;"> ${res.data[0].l_name_prefix + res.data[0].l_name
                } </td>
    <td style="border: 1px solid #333;padding:5px;"> ${res.data[0].l_email
                } </td>
    <td style="border: 1px solid #333;padding:5px;"> ${res.data[0].co_no} </td>
    <td style="border: 1px solid #333;padding:5px;"> ${res.data[0].l_address
                } </td>
    <td style="border: 1px solid #333;padding:5px;"> ${res.data[0].l_message
                } </td>`}
  </table>
  </div>`;
              let message = await sendmessage.getTemplate(49);
              let subject =
                res.data[0].handler_name +
                "(Pick Up Date : " +
                res.data[0].d_c_date +
                ")";
              if (message.status != 0) {
                message.template = message.template.replace(
                  "{:name:}",
                  res.data[0].handler_name
                );
                message.template = message.template.replace("{:table:}", table);
                let senderMailSetting = await sendmessage.getEmailSetting(
                  data.u_id
                );

                sqlll = `SELECT u_email FROM users WHERE u_id = ${data.u_id} `;
                let ccmail = await new Promise((resolve, reject) => {
                  con.query(sqlll, async function (err1, result1) {
                    if (err1) {
                      console.log(err);
                      resolve({
                        status: 0,
                        message: "Something went to wrong",
                      });
                    } else {
                      if (result1.length > 0) {
                        resolve({ status: 1, result: result1[0].u_email });
                      } else {
                        resolve({
                          status: 0,
                          message: "Something went to wrong",
                        });
                      }
                    }
                  });
                });

                let mess =
                  (message.header == 1
                    ? typeof senderMailSetting.email_template_header !=
                      undefined && senderMailSetting.email_template_header != undefined &&
                      senderMailSetting.email_template_header != null
                      ? senderMailSetting.email_template_header
                      : ""
                    : "") +
                  message.template +
                  (message.b_d_id != 0
                    ? message.b_d_id == 1
                      ? senderMailSetting.gst_bankdetails
                      : message.b_d_id == 2
                        ? senderMailSetting.ngst_bankdetails
                        : message.b_d_id == 3
                          ? senderMailSetting.general_bankdetails
                          : ""
                    : "") +
                  (message.footer == 1
                    ? senderMailSetting.email_template_footer
                    : "") +
                  (message.signature == 1
                    ? senderMailSetting.email_signature
                    : "");
                CCMailSetting = await sendmessage.getEmailSetting(1);
                sendmessagenow = sendmessage.customermessagesend(
                  senderMailSetting,
                  res.data[0].u_email,
                  mess,
                  subject,
                  ccmail.result, //CCMailSetting.e_username,  // user mail
                  ccmail.result, // reply mail
                  1
                );
              }
            }
            if (data.l_status == 537) {
              sqll = `Select *,(select u_name from users where users.u_id = ${data.p_d_id})as handler_name,(select u_email from users where users.u_id = ${data.p_d_id})as u_email from elead where lead_id =${data.lead_id} and deleted = 0`;
              let res = await new Promise(async (resolve, reject) => {
                con.query(sqll, async function (err, result) {
                  if (err) {
                    console.log(err);
                    resolve({ status: 0, message: "Something went to wrong" });
                  } else {
                    if (result.length > 0) {
                      resolve({
                        status: 1,
                        data: result,
                      });
                    }
                  }
                });
              });
              let table = `<div>
              <table style="border-collapse: collapse;" >
              <tr style="border: 1px solid #333;padding:5px;">
                <th style="border: 1px solid #333;padding:5px;">Name</th>
                <th style="border: 1px solid #333;padding:5px;">Email</th>
                <th style="border: 1px solid #333;padding:5px;">Mobile No</th>
                <th style="border: 1px solid #333;padding:5px;">Address</th>
                <th style="border: 1px solid #333;padding:5px;">Message</th>
              </tr>
              ${`<tr><td style="border: 1px solid #333;padding:5px;">${res.data[0].l_name}</td>
                <td style="border: 1px solid #333;padding:5px;">${res.data[0].l_email}</td>
                <td style="border: 1px solid #333;padding:5px;">${res.data[0].co_no}</td>
                <td style="border: 1px solid #333;padding:5px;">${res.data[0].l_address}</td>
                <td style="border: 1px solid #333;padding:5px;">${res.data[0].l_message}</td>`}
              </table>
              </div>`;
              let message = await sendmessage.getTemplate(50);
              if (message.status != 0) {
                message.template = message.template.replace(
                  "{:name:}",
                  res.data[0].handler_name
                );
                message.template = message.template.replace("{:table:}", table);
                message.template = message.template.replace(
                  "{:address:}",
                  data.address
                );
                let senderMailSetting = await sendmessage.getEmailSetting(1);
                sqlll = `SELECT u_email FROM users WHERE u_id = ${data.p_d_id} `;
                let ccmail = await new Promise((resolve, reject) => {
                  con.query(sqlll, async function (err1, result1) {
                    if (err1) {
                      console.log(err1);
                      resolve({
                        status: 0,
                        message: "Something went to wrong",
                      });
                    } else {
                      if (result1.length > 0) {
                        resolve({ status: 1, result: result1[0].u_email });
                      } else {
                        resolve({
                          status: 0,
                          message: "Something went to wrong",
                        });
                      }
                    }
                  });
                });
                let mess =
                  (message.header == 1
                    ? typeof senderMailSetting.email_template_header !=
                      undefined && senderMailSetting.email_template_header != undefined &&
                      senderMailSetting.email_template_header != null
                      ? senderMailSetting.email_template_header
                      : ""
                    : "") +
                  message.template +
                  (message.b_d_id != 0
                    ? message.b_d_id == 1
                      ? senderMailSetting.gst_bankdetails
                      : message.b_d_id == 2
                        ? senderMailSetting.ngst_bankdetails
                        : message.b_d_id == 3
                          ? senderMailSetting.general_bankdetails
                          : ""
                    : "") +
                  (message.footer == 1
                    ? senderMailSetting.email_template_footer
                    : "") +
                  (message.signature == 1
                    ? senderMailSetting.email_signature
                    : "");
                CCMailSetting = await sendmessage.getEmailSetting(1);
                let pathname =
                  __dirname + "/public/Assets/images/lead_pick_img";
                sendmessagenow = sendmessage.pickupmailsend(
                  senderMailSetting,
                  res.data[0].u_email,
                  mess,
                  `${message.subject}  || ${res.data[0].l_name_prefix} ${res.data[0].l_name}`,
                  filename,
                  ccmail.result, //CCMailSetting.e_username,  // user mail
                  ccmail.result, // reply mail
                  1,
                  pathname
                );
              }
            }
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function updateLeadPriority(data) {
  try {
    sql = `UPDATE elead SET priority=${data.priority} WHERE  lead_id =${data.lead_id}`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.affectedRows > 0) {
            resolve({
              status: 1,
              message: "Priority update successfully",
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function insertFollowup(data) {
  try {
    if (data.type == 0) {
      sql = `INSERT INTO lead_followup (lead_id,date,comment,n_f_date,source_id,u_id) VALUES (${data.lead_id
        },'${mysql_real_escape_string(data.date)}','${mysql_real_escape_string(
          data.l_f_comment
        )}','${mysql_real_escape_string(data.n_f_date)}',${data.source_id},${data.u_id
        })`;
    } else {
      sql = `INSERT INTO lead_followup (c_id,date,comment,n_f_date,source_id,u_id) VALUES (${data.c_id
        },'${mysql_real_escape_string(data.date)}','${mysql_real_escape_string(
          data.l_f_comment
        )}','${mysql_real_escape_string(data.n_f_date)}',${data.source_id},${data.u_id
        })`;
    }
    console.log("sql", sql);
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.affectedRows > 0) {
            resolve({
              status: 1,
              message: "FollowUp Insert successfully",
            });
          }
          // if (result.affectedRows > 0) {
          //   sql1 = `UPDATE lead_followup SET read_status = 1 WHERE l_f_id = ${data.l_f_id}`;
          //   console.log("sql1",sql1);
          //   con.query(sql1, async function (err, result) {
          //     if (result.affectedRows > 0) {
          //       resolve({
          //         status: 1,
          //         message: "Lead FollowUp Insert successfully",
          //       });
          //     }
          //     else {
          //       resolve({ status: 0, message: "Something went to wrong" });
          //     }
          //     if (err) {
          //       resolve({ status: 0, message: "Something went to wrong" });
          //     }
          //   });
          // }
          else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function getFollowUp(data) {
  try {
    sql = `SELECT *,(SELECT u_name FROM users WHERE users.u_id=lead_followup.u_id)AS f_name,(SELECT name FROM attributes WHERE attributes.attribute_id=lead_followup.source_id)as source_name FROM lead_followup WHERE lead_id=${data.lead_id}`;
    // if (
    //   data.u_id != undefined &&
    //   data.u_id != "undefined" &&
    //   data.u_id != "" &&
    //   data.u_id != 0
    // ) {
    //   sql += ` and u_id=${data.u_id}`;
    // }
    sql += " ORDER BY l_f_id DESC";
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              Data: result,
            });
          } else {
            resolve({
              status: 0,
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

//0203
async function searchlead(data) {
  try {
    let record = [];
    getuserquery = `select * from users where u_id=${data.u_id} and deleted=0`;
    let response = await new Promise((resolve, reject) => {
      con.query(getuserquery, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            if (
              result[0].user_type == 1 ||
              (result[0].user_type == 3 && result[0].s_u_permission == 1)
            ) {
              // getallchilduser = `select * from users where ((p_u_id=${data.u_id} OR p_u_id=1) and branch_id=${result[0].branch_id}) and deleted=0`;
              getallchilduser = `select * from users where ((p_u_id=${data.u_id} OR p_u_id=1 OR p_u_id IN (SELECT users.u_id  from users where users.branch_id= ${result[0].branch_id})) and branch_id=${result[0].branch_id}) and deleted=0`;
              con.query(getallchilduser, function (err, res) {
                if (err) {
                  console.log(err);
                  resolve({ status: 0, message: "Something went to wrong" });
                } else {
                  res.forEach(function (r) {
                    record.push(r.u_id);
                  });
                  record.push(data.u_id);

                  resolve({
                    record: record,
                    type: result[0].user_type,
                    s_u_permission: result[0].s_u_permission,
                  });
                }
              });
            } else {
              resolve({
                type: result[0].user_type,
                s_u_permission: result[0].s_u_permission,
              });
            }
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    let getLeadPaginationSql = "";
    let sql = "";
    if (
      response.type == 1 ||
      (response.type == 3 && response.s_u_permission == 1)
    ) {
      // sql = `SELECT *,(row_number() over ( order by elead.lead_id DESC) ) AS row_no,(SELECT COUNT(*) FROM elead where (elead.l_created_by IN(${record}) or elead.l_allocate_to IN(${record})) and elead.deleted=0 and elead.convert_status=0 and users.deleted=0) as trows,
      // (SELECT  CASE
      //   WHEN l_source =282
      //      THEN (SELECT m_c_name FROM main_customer WHERE m_c_id=l_created_by)
      //      ELSE (SELECT u_name FROM users WHERE users.u_id=elead.l_created_by)
      // END  )as createdBy,
      // (SELECT u_name FROM users WHERE users.u_id=elead.l_allocate_to)as allocatedTo,(SELECT b_name FROM branch WHERE branch.branch_id =elead.l_branch_id)as branch,(SELECT name FROM attributes WHERE attributes.attribute_id =elead.l_status)as status,(SELECT name FROM attributes WHERE attributes.attribute_id =elead.l_source)as source FROM elead,users WHERE elead.deleted=0 and elead.convert_status=0 and users.deleted=0 and (elead.l_created_by IN(${record}) or elead.l_allocate_to IN(${record}))`;

      getLeadPaginationSql = `SELECT  elead.lead_id FROM elead LEFT JOIN lead_customer on lead_customer.l_id = elead.lead_id AND lead_customer.deleted = 0 LEFT JOIN main_customer m_cust_tbl ON m_cust_tbl.m_c_id=elead.l_created_by  LEFT JOIN lead_followup on lead_followup.l_f_id IN (SELECT MAX(l_f_id) FROM lead_followup GROUP BY lead_id) and lead_followup.lead_id = elead.lead_id LEFT JOIN main_customer m_cust_tbl1 ON m_cust_tbl1.m_c_id=elead.reference_id LEFT JOIN users user_tbl4 ON user_tbl4.u_id=elead.reference_id LEFT JOIN users user_tbl ON user_tbl.u_id=elead.l_created_by LEFT JOIN users user_tbl1 ON  user_tbl1.u_id = elead.l_allocate_to LEFT JOIN branch branch_tbl ON branch_tbl.branch_id = elead.l_branch_id LEFT JOIN attributes att_tbl ON att_tbl.attribute_id = elead.l_status LEFT JOIN  attributes att_tbl1 ON att_tbl1.attribute_id = elead.l_source  WHERE elead.deleted=0 and elead.convert_status=0  and (elead.l_created_by IN(${record}) or elead.l_allocate_to IN(${record}) or elead.reference_id IN(${record}))`;

      sql = `SELECT lead_followup.n_f_date,elead.*,lead_customer.login_u_id as login_u_id,user_tbl.*,user_tbl.u_name as createdBy,IF(elead.l_source = 282, m_cust_tbl1.m_c_name, user_tbl4.u_name) as marketing_user,user_tbl1.u_name AS allocatedTo,branch_tbl.b_name AS branch,att_tbl.name AS status,att_tbl1.name AS source  FROM elead LEFT JOIN lead_customer on lead_customer.l_id = elead.lead_id AND lead_customer.deleted = 0 LEFT JOIN main_customer m_cust_tbl ON m_cust_tbl.m_c_id=elead.l_created_by  LEFT JOIN lead_followup on lead_followup.l_f_id IN (SELECT MAX(l_f_id) FROM lead_followup GROUP BY lead_id) and lead_followup.lead_id = elead.lead_id LEFT JOIN main_customer m_cust_tbl1 ON m_cust_tbl1.m_c_id=elead.reference_id LEFT JOIN users user_tbl4 ON user_tbl4.u_id=elead.reference_id LEFT JOIN users user_tbl ON user_tbl.u_id=elead.l_created_by LEFT JOIN users user_tbl1 ON  user_tbl1.u_id = elead.l_allocate_to LEFT JOIN branch branch_tbl ON branch_tbl.branch_id = elead.l_branch_id LEFT JOIN attributes att_tbl ON att_tbl.attribute_id = elead.l_status LEFT JOIN  attributes att_tbl1 ON att_tbl1.attribute_id = elead.l_source WHERE elead.deleted=0 and elead.convert_status=0  and (elead.l_created_by IN(${record}) or elead.l_allocate_to IN(${record}) or elead.reference_id IN(${record})) `;
    } else if (response.type == 3) {
      // sql = `SELECT *,(row_number() over ( order by elead.lead_id DESC) ) AS row_no,
      // (SELECT COUNT(*) FROM elead where elead.deleted=0 and elead.convert_status=0) as trows,
      // (SELECT  CASE
      //   WHEN l_source =282
      //      THEN (SELECT m_c_name FROM main_customer WHERE m_c_id=l_created_by)
      //      ELSE (SELECT u_name FROM users WHERE users.u_id=elead.l_created_by)
      // END  )as createdBy,
      // (SELECT u_name FROM users WHERE users.u_id=elead.l_allocate_to)as allocatedTo,
      // (select users.u_name from users where users.u_id = (select users.marketing_parent_id FROM users where elead.l_created_by = users.u_id)) as resp_per,
      // (SELECT b_name FROM branch WHERE branch.branch_id =elead.l_branch_id)as branch,
      // (SELECT name FROM attributes WHERE attributes.attribute_id =elead.l_status)as status,
      // (SELECT name FROM attributes WHERE attributes.attribute_id =elead.l_source)as source FROM elead, users
      // WHERE elead.deleted=0 and elead.convert_status=0 AND users.u_id = elead.l_created_by and (l_created_by=${data.u_id} or l_allocate_to=${data.u_id} OR users.marketing_parent_id =${data.u_id})`;

      getLeadPaginationSql = `SELECT elead.lead_id FROM elead LEFT JOIN lead_customer on lead_customer.l_id = elead.lead_id AND lead_customer.deleted = 0 LEFT JOIN main_customer m_cust_tbl ON m_cust_tbl.m_c_id=elead.l_created_by LEFT JOIN lead_followup on lead_followup.l_f_id IN (SELECT MAX(l_f_id) FROM lead_followup GROUP BY lead_id) and lead_followup.lead_id = elead.lead_id LEFT JOIN main_customer m_cust_tbl1 ON m_cust_tbl1.m_c_id=elead.reference_id LEFT JOIN users user_tbl4 ON user_tbl4.u_id=elead.reference_id LEFT JOIN users user_tbl ON user_tbl.u_id=elead.l_created_by LEFT JOIN users user_tbl1 ON  user_tbl1.u_id = elead.l_allocate_to LEFT JOIN users user_tbl2 ON  user_tbl2.u_id = user_tbl.marketing_parent_id LEFT JOIN branch branch_tbl ON branch_tbl.branch_id = elead.l_branch_id LEFT JOIN attributes att_tbl ON att_tbl.attribute_id = elead.l_status LEFT JOIN  attributes att_tbl1 ON att_tbl1.attribute_id = elead.l_source  WHERE elead.deleted=0 and elead.convert_status=0 AND user_tbl.u_id = elead.l_created_by and (l_created_by=${data.u_id} or l_allocate_to=${data.u_id} or elead.reference_id =${data.u_id} OR user_tbl.marketing_parent_id =${data.u_id})`;

      sql = `SELECT lead_followup.n_f_date,elead.*,lead_customer.login_u_id as login_u_id,user_tbl.*,user_tbl.u_name as createdBy,IF(elead.l_source = 282, m_cust_tbl1.m_c_name, user_tbl4.u_name) as marketing_user,user_tbl1.u_name AS allocatedTo,user_tbl2.u_name AS resp_per,branch_tbl.b_name AS branch,att_tbl.name AS status,att_tbl1.name AS source  FROM elead LEFT JOIN lead_customer on lead_customer.l_id = elead.lead_id AND lead_customer.deleted = 0 LEFT JOIN main_customer m_cust_tbl ON m_cust_tbl.m_c_id=elead.l_created_by LEFT JOIN lead_followup on lead_followup.l_f_id IN (SELECT MAX(l_f_id) FROM lead_followup GROUP BY lead_id) and lead_followup.lead_id = elead.lead_id LEFT JOIN main_customer m_cust_tbl1 ON m_cust_tbl1.m_c_id=elead.reference_id LEFT JOIN users user_tbl4 ON user_tbl4.u_id=elead.reference_id LEFT JOIN users user_tbl ON user_tbl.u_id=elead.l_created_by LEFT JOIN users user_tbl1 ON  user_tbl1.u_id = elead.l_allocate_to LEFT JOIN users user_tbl2 ON  user_tbl2.u_id = user_tbl.marketing_parent_id LEFT JOIN branch branch_tbl ON branch_tbl.branch_id = elead.l_branch_id LEFT JOIN attributes att_tbl ON att_tbl.attribute_id = elead.l_status LEFT JOIN  attributes att_tbl1 ON att_tbl1.attribute_id = elead.l_source WHERE elead.deleted=0 and elead.convert_status=0 AND user_tbl.u_id = elead.l_created_by and (l_created_by=${data.u_id} or l_allocate_to=${data.u_id} or elead.reference_id =${data.u_id} OR user_tbl.marketing_parent_id =${data.u_id}) `;
    } else {
      // sql = `SELECT *,(row_number() over ( order by elead.lead_id DESC) ) AS row_no,(SELECT COUNT(*) FROM elead where elead.deleted=0 and elead.convert_status=0) as trows,
      // (SELECT  CASE
      //   WHEN l_source =282
      //      THEN (SELECT m_c_name FROM main_customer WHERE m_c_id=l_created_by)
      //      ELSE (SELECT u_name FROM users WHERE users.u_id=elead.l_created_by)
      // END  )as createdBy,(SELECT u_name FROM users WHERE users.u_id=elead.l_allocate_to)as allocatedTo,(SELECT b_name FROM branch WHERE branch.branch_id =elead.l_branch_id)as branch,(SELECT name FROM attributes WHERE attributes.attribute_id =elead.l_status)as status,(SELECT name FROM attributes WHERE attributes.attribute_id =elead.l_source)as source FROM elead WHERE deleted=0 and elead.convert_status=0`;

      getLeadPaginationSql = `SELECT  elead.lead_id FROM elead LEFT JOIN lead_customer on lead_customer.l_id = elead.lead_id AND lead_customer.deleted = 0 LEFT JOIN main_customer m_cust_tbl ON m_cust_tbl.m_c_id=elead.l_created_by LEFT JOIN lead_followup on lead_followup.l_f_id IN (SELECT MAX(l_f_id) FROM lead_followup GROUP BY lead_id) and lead_followup.lead_id = elead.lead_id LEFT JOIN main_customer m_cust_tbl1 ON m_cust_tbl1.m_c_id=elead.reference_id LEFT JOIN users user_tbl4 ON user_tbl4.u_id=elead.reference_id LEFT JOIN users user_tbl ON user_tbl.u_id=elead.l_created_by LEFT JOIN users user_tbl1 ON  user_tbl1.u_id = elead.l_allocate_to LEFT JOIN branch branch_tbl ON branch_tbl.branch_id = elead.l_branch_id LEFT JOIN attributes att_tbl ON att_tbl.attribute_id = elead.l_status LEFT JOIN  attributes att_tbl1 ON att_tbl1.attribute_id = elead.l_source  WHERE elead.deleted=0 and elead.convert_status=0 `;
      sql = `SELECT lead_followup.n_f_date,elead.*,lead_customer.login_u_id as login_u_id,user_tbl.u_name as createdBy,IF(elead.l_source = 282, m_cust_tbl1.m_c_name, user_tbl4.u_name) as marketing_user,user_tbl1.u_name AS allocatedTo,branch_tbl.b_name AS branch,att_tbl.name AS status,att_tbl1.name AS source  FROM elead LEFT JOIN lead_customer on lead_customer.l_id = elead.lead_id AND lead_customer.deleted = 0 LEFT JOIN main_customer m_cust_tbl ON m_cust_tbl.m_c_id=elead.l_created_by LEFT JOIN lead_followup on lead_followup.l_f_id IN (SELECT MAX(l_f_id) FROM lead_followup GROUP BY lead_id) and lead_followup.lead_id = elead.lead_id LEFT JOIN main_customer m_cust_tbl1 ON m_cust_tbl1.m_c_id=elead.reference_id LEFT JOIN users user_tbl4 ON user_tbl4.u_id=elead.reference_id LEFT JOIN users user_tbl ON user_tbl.u_id=elead.l_created_by LEFT JOIN users user_tbl1 ON  user_tbl1.u_id = elead.l_allocate_to LEFT JOIN branch branch_tbl ON branch_tbl.branch_id = elead.l_branch_id LEFT JOIN attributes att_tbl ON att_tbl.attribute_id = elead.l_status LEFT JOIN  attributes att_tbl1 ON att_tbl1.attribute_id = elead.l_source WHERE elead.deleted=0 and elead.convert_status=0 `;
    }
    if (data.buttonType == 1) {
      sql += ` and lead_followup.lead_id = elead.lead_id `;
      getLeadPaginationSql += ` and lead_followup.lead_id = elead.lead_id `;
    }
    if (typeof data.l_name != "undefined" && data.l_name != "") {
      sql += ` and elead.l_name like '%${data.l_name}%'`;
      getLeadPaginationSql += ` and elead.l_name like '%${data.l_name}%'`;
    }
    if (typeof data.s_date != "undefined" && data.s_date != "") {
      if (data.buttonType == 1) {
        sql += ` and STR_TO_DATE(lead_followup.n_f_date,"%d-%m-%Y")>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y")`;
        getLeadPaginationSql += ` and STR_TO_DATE(lead_followup.n_f_date,"%d-%m-%Y")>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y")`;
      } else {
        sql += ` and STR_TO_DATE(elead.l_date,"%d-%m-%Y")>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y")`;
        getLeadPaginationSql += ` and STR_TO_DATE(elead.l_date,"%d-%m-%Y")>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y")`;
      }
    }
    if (typeof data.e_date != "undefined" && data.e_date != "") {
      if (data.buttonType == 1) {
        sql += ` and STR_TO_DATE(lead_followup.n_f_date,"%d-%m-%Y")<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y")`;
        getLeadPaginationSql += ` and STR_TO_DATE(lead_followup.n_f_date,"%d-%m-%Y")<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y")`;
      } else {
        sql += ` and STR_TO_DATE(elead.l_date,"%d-%m-%Y")<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y")`;
        getLeadPaginationSql += ` and STR_TO_DATE(elead.l_date,"%d-%m-%Y")<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y")`;
      }
    }
    if (typeof data.co_no != "undefined" && data.co_no != "") {
      sql += ` and elead.co_no like '%${data.co_no}%'`;
      getLeadPaginationSql += ` and elead.co_no like '%${data.co_no}%'`;
    }

    if (
      typeof data.l_source != "undefined" &&
      data.l_source != "" &&
      data.l_source != 0
    ) {
      sql += ` and elead.l_source='${data.l_source}'`;
      getLeadPaginationSql += ` and elead.l_source='${data.l_source}'`;
    }
    if (typeof data.l_email != "undefined" && data.l_email != "") {
      sql += ` and elead.l_email like '%${data.l_email}%'`;
      getLeadPaginationSql += ` and elead.l_email like '%${data.l_email}%'`;
    }
    if (
      typeof data.l_branch_id != "undefined" &&
      data.l_branch_id != "" &&
      data.l_branch_id != 0
    ) {
      sql += ` and elead.l_branch_id='${data.l_branch_id}'`;
      getLeadPaginationSql += ` and elead.l_branch_id='${data.l_branch_id}'`;
    }
    if (
      typeof data.l_allocate_to != "undefined" &&
      data.l_allocate_to != "" &&
      data.l_allocate_to != 0
    ) {
      sql += ` and elead.l_allocate_to='${data.l_allocate_to}'`;
      getLeadPaginationSql += ` and elead.l_allocate_to='${data.l_allocate_to}'`;
    }
    if (
      typeof data.priority != "undefined" &&
      data.priority != "" &&
      data.priority != -1
    ) {
      sql += ` and elead.priority=${data.priority}`;
      getLeadPaginationSql += ` and elead.priority=${data.priority}`;
    }
    if (
      typeof data.l_service != "undefined" &&
      data.l_service != "" &&
      data.l_service != 0
    ) {
      sql += ` and elead.l_service=${data.l_service}`;
      getLeadPaginationSql += ` and elead.l_service=${data.l_service}`;
    }
    if (
      typeof data.l_status != "undefined" &&
      data.l_status != "" &&
      data.l_status == 300000
    ) {
      sql += ` and elead.l_status != 248`;
      getLeadPaginationSql += ` and elead.l_status != 248`;
    } else if (
      typeof data.l_status != "undefined" &&
      data.l_status != "" &&
      data.l_status != 0
    ) {
      if (data.l_status == 615) {
        sql += ` and elead.proforma_status = 1`;
        getLeadPaginationSql += ` and elead.proforma_status = 1`;
      } else {
        sql += ` and elead.l_status='${data.l_status}'`;
        getLeadPaginationSql += ` and elead.l_status='${data.l_status}'`;
      }
    }
    if (response.type == 1) {
      sql += ` GROUP by elead.lead_id`;
      getLeadPaginationSql += ` GROUP by elead.lead_id`;
    }
    sql += ` order by elead.lead_id DESC limit ${(data.page - 1) * data.perpage
      },${data.perpage}`;
    let resp = await new Promise((resolve, reject) => {
      con.query(getLeadPaginationSql, function (err1, lres1) {
        if (err1) {
          console.log(err1);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (lres1.length > 0) {
            resolve({
              status: 1,
              t_rows: lres1.length,
            });
          } else {
            resolve({
              status: 0,
              data: [],
            });
          }
        }
      });
    });
    let response1 = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              data: result,
              t_rows: resp.t_rows,
            });
          } else {
            resolve({
              status: 0,
              data: [],
            });
          }
        }
      });
    });
    return response1;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function searchAllpickupdoneleadlist(data) {
  try {
    //1403
    let sql = "";
    if (data.u_id != 1) {
      //   sql = `SELECT elead.*,lead_customer.login_u_id, (SELECT  CASE
      //   WHEN l_source =282
      //      THEN (SELECT m_c_name FROM main_customer WHERE m_c_id=l_created_by)
      //      ELSE (SELECT u_name FROM users WHERE users.u_id=elead.l_created_by)
      // END  )as createdBy,(SELECT u_name FROM users WHERE users.u_id=elead.l_allocate_to)as allocatedTo,(SELECT b_name FROM branch WHERE branch.branch_id =elead.l_branch_id)as branch,
      // (SELECT name FROM attributes WHERE attributes.attribute_id =elead.l_status)as status,
      // (SELECT name FROM attributes WHERE attributes.attribute_id =elead.l_source)as source, (SELECT name FROM attributes WHERE attributes.attribute_id =elead.courier_id)as c_c_name FROM elead,lead_customer WHERE lead_customer.l_id = elead.lead_id  and elead.l_status=250 AND elead.deleted = 0 and elead.convert_status=0 AND (elead.p_d_id = ${data.id} OR elead.l_created_by = ${data.id})  ORDER BY elead.lead_id DESC`;
      sql = `SELECT elead.*,lead_customer.login_u_id, (SELECT  CASE
      WHEN l_source =282 
         THEN (SELECT m_c_name FROM main_customer WHERE m_c_id=l_created_by) 
         ELSE (SELECT u_name FROM users WHERE users.u_id=elead.l_created_by)
    END  )as createdBy,(SELECT u_name FROM users WHERE users.u_id=elead.l_allocate_to)as allocatedTo,(SELECT b_name FROM branch WHERE branch.branch_id =elead.l_branch_id)as branch,
    (SELECT name FROM attributes WHERE attributes.attribute_id =elead.l_status)as status,
    (SELECT name FROM attributes WHERE attributes.attribute_id =elead.l_source)as source, (SELECT name FROM attributes WHERE attributes.attribute_id =elead.courier_id)as c_c_name FROM elead left join lead_customer on lead_customer.l_id = elead.lead_id AND lead_customer.deleted = 0 WHERE elead.l_status=250 AND elead.deleted = 0 and elead.convert_status=0 AND (elead.p_d_id = ${data.u_id} OR elead.l_created_by = ${data.u_id}) `;
    } else {
      sql = `SELECT elead.*,lead_customer.login_u_id,(SELECT  CASE
        WHEN l_source =282 
           THEN (SELECT m_c_name FROM main_customer WHERE m_c_id=l_created_by) 
           ELSE (SELECT u_name FROM users WHERE users.u_id=elead.l_created_by)
      END  )as createdBy,(SELECT u_name FROM users WHERE users.u_id=elead.l_allocate_to)as allocatedTo,(SELECT b_name FROM branch WHERE branch.branch_id =elead.l_branch_id)as branch,
      (SELECT name FROM attributes WHERE attributes.attribute_id =elead.l_status)as status,
      (SELECT name FROM attributes WHERE attributes.attribute_id =elead.l_source)as source, (SELECT name FROM attributes WHERE attributes.attribute_id =elead.courier_id)as c_c_name FROM elead left join lead_customer on lead_customer.l_id = elead.lead_id AND lead_customer.deleted = 0 WHERE elead.l_status=250 AND elead.deleted = 0 and elead.convert_status=0 `;
    }

    if (
      typeof data.awb_no != undefined &&
      data.awb_no != undefined &&
      data.awb_no != null
    ) {
      sql += `  and elead.awb_no like '%${data.awb_no}%' `;
    }
    if (
      typeof data.l_name != undefined &&
      data.l_name != undefined &&
      data.l_name != null
    ) {
      sql += `  and elead.l_name like '%${data.l_name}%' `;
    }
    sql += `  ORDER BY elead.lead_id DESC `;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              counter: result.length,
              data: result,
            });
          } else {
            resolve({
              status: 0,
              data: [],
              counter: 0,
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function getsettingdata() {
  try {
    sql = `SELECT * FROM gsetting WHERE s_id = 1`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result) {
            resolve({
              status: 1,
              data: result[0],
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function updateSetting(data, filename = "") {
  try {
    sbranchsql = `UPDATE branch SET b_e_username='${mysql_real_escape_string(
      data.e_username
    )}',b_e_password = '${mysql_real_escape_string(
      data.e_password
    )}',b_email_template_header ='${data.email_template_header == "" ||
      data.email_template_header == "undefined"
      ? "<p>&nbsp</p>"
      : mysql_real_escape_string(data.email_template_header)
      }',b_email_template_footer = '${data.email_template_footer == "" ||
        data.email_template_footer == "undefined"
        ? "<p>&nbsp</p>"
        : mysql_real_escape_string(data.email_template_footer)
      }',b_email_signature = '${data.email_signature == "" || data.email_signature == "undefined"
        ? "<p>&nbsp</p>"
        : mysql_real_escape_string(data.email_signature)
      }',c_term_condition = '${data.c_term_condition == "" || data.c_term_condition == "undefined"
        ? "<p>&nbsp</p>"
        : data.c_term_condition
      }',b_hsn_code = ${data.hsn_code},b_gstno  = '${mysql_real_escape_string(
        data.c_gstno
      )}',b_bank_details = '${data.bank_details == "" || data.bank_details == "undefined"
        ? "<p>&nbsp</p>"
        : mysql_real_escape_string(data.bank_details)
      }',b_nongst_bank_deatils = '${data.nongst_bank_details == "" ||
        data.nongst_bank_details == "undefined"
        ? "<p>&nbsp</p>"
        : mysql_real_escape_string(data.nongst_bank_details)
      }',arn_no = '${mysql_real_escape_string(data.arn_no)}',std_commission = ${data.std_commission
      },c_url = '${mysql_real_escape_string(data.c_url)}' WHERE branch_id =${data.branch_id
      }`;
    // con.query(sbranchsql, function (err, result) {
    //   if (err) {
    //     resolve({ status: 0, message: "Something went to wrong" });
    //   }
    //   // if (result.affectedRows > 0) {
    //   //   resolve({
    //   //     status: 1,
    //   //     message: "Setting Updated successfully",
    //   //   });
    //   // }
    // });
    sql = `UPDATE gsetting SET c_name ='${mysql_real_escape_string(
      data.c_name
    )}', c_email = '${mysql_real_escape_string(
      data.c_email
    )}', c_gstno = '${mysql_real_escape_string(
      data.c_gstno
    )}',c_gst_pre = '${mysql_real_escape_string(
      data.c_gst_pre
    )}',s_gst_pre = '${mysql_real_escape_string(
      data.s_gst_pre
    )}',c_term_condition = '${data.c_term_condition == "" || data.c_term_condition == "undefined"
      ? "<p>&nbsp</p>"
      : mysql_real_escape_string(data.c_term_condition)
      }',sms_username = '${mysql_real_escape_string(
        data.sms_username
      )}',sms_key = '${mysql_real_escape_string(
        data.sms_key
      )}',sms_id = '${mysql_real_escape_string(
        data.sms_id
      )}',sms_balance = '${mysql_real_escape_string(
        data.sms_balance
      )}',e_host ='${mysql_real_escape_string(
        data.e_host
      )}', e_port = '${mysql_real_escape_string(
        data.e_port
      )}',e_username = '${mysql_real_escape_string(
        data.e_username
      )}',e_password = '${mysql_real_escape_string(
        data.e_password
      )}',email_template_header ='${data.email_template_header == "" ||
        data.email_template_header == "undefined"
        ? "<p>&nbsp</p>"
        : mysql_real_escape_string(data.email_template_header)
      }',email_template_footer ='${data.email_template_footer == "" ||
        data.email_template_footer == "undefined"
        ? "<p>&nbsp</p>"
        : mysql_real_escape_string(data.email_template_footer)
      }',email_signature ='${data.email_signature == "" || data.email_signature == "undefined"
        ? "<p>&nbsp</p>"
        : mysql_real_escape_string(data.email_signature)
      }',website_url ='${mysql_real_escape_string(data.website_url)}',hsn_code=${data.hsn_code
      },bank_details='${data.bank_details == "" || data.bank_details == "undefined"
        ? "<p>&nbsp</p>"
        : mysql_real_escape_string(data.bank_details)
      }',nongst_bank_details='${data.nongst_bank_details == "" ||
        data.nongst_bank_details == "undefined"
        ? "<p>&nbsp</p>"
        : mysql_real_escape_string(data.nongst_bank_details)
      }',r_link='${data.r_link != "null" ? mysql_real_escape_string(data.r_link) : ""
      }',mobile='${data.mobile != "null" ? mysql_real_escape_string(data.mobile) : ""
      }',address ='${mysql_real_escape_string(
        data.address
      )}',arn_no ='${mysql_real_escape_string(data.arn_no)}',std_commission = ${data.std_commission
      },c_url = '${mysql_real_escape_string(
        data.c_url
      )}',cc_email = '${mysql_real_escape_string(data.cc_email)}'`;

    if (filename != "") {
      sql += ` , logo = '${mysql_real_escape_string(filename)}'`;
    }
    sql += ` WHERE s_id = 1`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.affectedRows > 0) {
            resolve({
              status: 1,
              message: "Setting Updated successfully",
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

function mysql_real_escape_string(str) {
  if (str != undefined && str != "" && str != null) {
    return str.replace(/[\0\x08\x09\x1a\n\r"'\\\%]/g, function (char) {
      switch (char) {
        case "\0":
          return "\\0";
        case "\x08":
          return "\\b";
        case "\x09":
          return "\\t";
        case "\x1a":
          return "\\z";
        case "\n":
          return "\\n";
        case "\r":
          return "\\r";
        case '"':
        case "'":
        case "\\":
          return "\\" + char;
        case "%":
          return char;
      }
    });
  }
  return str;
}

async function insertSMSTemplate(data) {
  try {
    sql = `INSERT INTO email_template (Template_name,template,type) VALUES ('${mysql_real_escape_string(
      data.Template_name
    )}','${mysql_real_escape_string(data.template)}','2')`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.affectedRows > 0) {
            resolve({
              status: 1,
              message: "SMS Template Inserted Successfully",
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function getAllSMStemlate() {
  try {
    sql =
      "SELECT *,(row_number() over ( order by email_template.e_t_id DESC) ) AS row_no FROM email_template WHERE deleted=0 AND type=2 ORDER BY e_t_id DESC";
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              Data: result,
            });
          } else {
            resolve({
              status: 1,
              Data: [],
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function deleteSMSTemlate(data) {
  try {
    sql = `UPDATE email_template SET deleted=1 WHERE  e_t_id=${data.id}`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.affectedRows > 0) {
            resolve({
              status: 1,
              message: "SMS Temlate deleted Successfully",
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function updateSMSTemplate(data) {
  try {
    sql = `UPDATE email_template SET Template_name='${mysql_real_escape_string(
      data.Template_name
    )}', template='${mysql_real_escape_string(data.template)}'  WHERE e_t_id=${data.e_t_id
      }`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.affectedRows > 0) {
            resolve({
              status: 1,
              message: "SMS Temlate updated successfully",
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function updateAllocatedTo(data) {
  try {
    sql = `UPDATE elead SET l_branch_id=${data.l_branch_id},l_allocate_to=${data.l_allocate_to}  WHERE  lead_id =${data.lead_id}`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.affectedRows > 0) {
            resolve({
              status: 1,
              message: "Lead Allocated to User Successfully",
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

//sakshi
async function insertrole(data) {
  try {
    let rolelist = JSON.parse(data.rolelist);
    sql = `INSERT INTO roles (name) values ('${data.rolename}')`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.affectedRows > 0) {
            let record = [];
            Object.keys(rolelist).map((key) => {
              record.push([
                key,
                typeof rolelist[key].view == "undefined"
                  ? 0
                  : rolelist[key].view,
                typeof rolelist[key].create == "undefined"
                  ? 0
                  : rolelist[key].create,
                typeof rolelist[key].edit == "undefined"
                  ? 0
                  : rolelist[key].edit,
                typeof rolelist[key].delete == "undefined"
                  ? 0
                  : rolelist[key].delete,
                result.insertId,
              ]);
            });
            sql1 =
              "INSERT INTO role_permission (`f_id`, `views`, `creates`, `edits`, `deletes`, `r_id`) VALUES ?";
            con.query(sql1, [record], (error, res) => {
              if (error) {
                console.log(error);
              } else {
                if (res.affectedRows > 0) {
                  resolve({
                    status: 1,
                    message: "Role Inserted successfully",
                    rdata: result,
                    rpdata: res,
                  });
                } else {
                  resolve({
                    status: 0,
                    message: "Something went to wrong",
                  });
                }
              }
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function updaterole(data) {
  try {
    let rolelist = JSON.parse(data.rolelist);
    let roleid = data.roleid;
    sql = `UPDATE roles SET name = '${data.rolename}' WHERE roles.r_id = '${roleid}'`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.affectedRows > 0) {
            Object.keys(rolelist).map((key) => {
              sql1 = `SELECT * FROM role_permission WHERE r_id=${data.roleid} and f_id=${key}`;
              con.query(sql1, (error, res) => {
                var views = rolelist[key].view;
                var edits = rolelist[key].edit;
                var dels = rolelist[key].delete;
                var creates = rolelist[key].create;
                var f_id = key;
                if (error) {
                  console.log(error);
                } else {
                  if (res.length > 0) {
                    sql_update = `UPDATE role_permission SET views=${views},creates=${creates},edits=${edits},deletes=${dels}  where f_id=${f_id} and r_id=${roleid}`;
                    con.query(sql_update, (error, sql_updateres) => {
                      if (error) {
                        console.log(error);
                      }
                    });
                  } else {
                    sql_insert = `INSERT INTO role_permission (f_id, views, creates, edits, deletes, r_id) VALUES (${f_id}, ${typeof views == "undefined" ? 0 : views
                      }, ${typeof creates == "undefined" ? 0 : creates},${typeof edits == "undefined" ? 0 : edits
                      }, ${typeof dels == "undefined" ? 0 : dels}, ${roleid})`;
                    con.query(sql_insert, (error, sql_insertres) => {
                      if (error) {
                        console.log(error);
                      }
                    });
                  }
                }
              });
            });
            resolve({
              status: 1,
              message: "Role Updated successfully",
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function getroledata() {
  try {
    sql = `SELECT *,(row_number() over ( order by roles.r_id desc) ) AS row_no FROM roles where  roles.r_id!=1  order by roles.r_id desc`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              fData: result,
            });
          } else {
            resolve({
              status: 1,
              fData: [],
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function getrolepermission(data) {
  try {
    let record = [];
    sql = `SELECT * FROM roles,role_permission WHERE roles.r_id=role_permission.r_id and roles.r_id=${data.id}`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              data: result,
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

// async function insertUser(data, filename = "", ifilename = "") {
//   try {
//     // let pass = Math.floor(Math.random() * 90000) + 10000;
//     let response, response1;
//     let userpermission = JSON.parse(data.rolelist);
//     let emailtpermission = JSON.parse(data.emailtpermissions);
//     let fcatepermissions = JSON.parse(data.fcatepermissions);
//     if (data.r_id == "1") {
//       sql1 = `select r_id from users where r_id = 1 and deleted = 0 `;
//     } else if (data.r_id == "2") {
//       sql1 = `select r_id from users where r_id = 2 and branch_id=${data.branch_id} AND deleted= 0`;
//     }
//     let resp = await new Promise((resolve, reject) => {
//       con.query(sql1, async function (err, result) {
//         if (err) {
//           resolve({ status: 0, message: "Something went wrong......" });
//         }
//         if (result.length == 0) {
//           resolve({ status: 1, result: [0] });
//         }
//         if (result.length > 0) {
//           resolve({ status: 0, result: result[0] });
//         }
//       });
//     });
//     if (
//       (data.r_id !== "1" && data.r_id !== "2") ||
//       (resp.status == 1 && (data.r_id !== "1" || data.r_id !== "2"))
//     ) {
//     sql = `INSERT INTO users (u_name,address,r_id, u_email, password, mobile, user_type, branch_id,p_u_id,deleted,u_footer,s_email_signature,is_ip,is_marketing,marketing_parent_id,u_image,p_h_id,p_h_permission,p_d_id,p_d_permission,invoice_signature) VALUES ('${data.u_name
//       }', '${data.address}', '${data.r_id}', '${data.u_email}', md5('${data.password
//       }'), '${data.mobile}',${data.r_id == 1
//         ? 0
//         : data.r_id == 2
//           ? 1
//           : data.r_id == 3
//             ? 2
//             : data.r_id == 4
//               ? 3
//               : 3
//       }, ${data.branch_id == "undefined" ? 0 : data.branch_id},${data.u_id},0,'${data.u_footer == "" ||
//         data.u_footer == "undefined" ||
//         data.u_footer.match("<p></p>") != null
//         ? "<p>&nbsp</p>"
//         : mysql_real_escape_string(data.u_footer)
//       }','${data.s_email_signature == "" ||
//         data.s_email_signature == "undefined" ||
//         data.s_email_signature.match("<p></p>") != null
//         ? "<p>&nbsp</p>"
//         : mysql_real_escape_string(data.s_email_signature)
//       }',${data.is_ip == "undefined" ? 0 : 1},${data.is_marketing == "undefined" ? 0 : data.is_marketing
//       },${data.marketing_parent_id == "undefined" ? 0 : data.marketing_parent_id
//       },"${filename == undefined ? "" : filename}",
//     ${data.p_h_id == "undefined" ? 0 : data.p_h_id},${data.p_h_permission == "undefined" ? 0 : data.p_h_permission
//       },${data.p_d_id == "undefined" ? 0 : data.p_d_id},${data.p_d_permission == "undefined" ? 0 : data.p_d_permission
//       },"${ifilename == undefined ? "" : ifilename}")`;
//     let response = await new Promise((resolve, reject) => {
//       con.query(sql, async function (err, result) {
//         if (err) {
//           resolve({ status: 0, message: "Something went to wrong" });
//         }
//         if (result.affectedRows > 0) {
//           let senderMailSetting = await sendmessage.getEmailSetting(
//             data.created_id
//           );

//           let message = await sendmessage.getTemplate(34);
//           message.template = message.template.replace("{:name:}", data.u_name);
//           message.template = message.template.replace(
//             "{:username:}",
//             data.u_email
//           );
//           message.template = message.template.replace(
//             "{:password:}",
//             data.password
//           );
//           let mess =
//             (message.header == 1
//               ? senderMailSetting.email_template_header
//               : "") +
//             message.template +
//             (message.b_d_id != 0
//               ? message.b_d_id == 1
//                 ? senderMailSetting.gst_bankdetails
//                 : message.b_d_id == 2
//                   ? senderMailSetting.ngst_bankdetails
//                   : message.b_d_id == 3
//                     ? senderMailSetting.general_bankdetails
//                     : ""
//               : "") +
//             (message.footer == 1
//               ? senderMailSetting.email_template_footer
//               : "") +
//             (message.signature == 1 ? senderMailSetting.email_signature : "");

//           CCMailSetting = await sendmessage.getEmailSetting(1);

//           sendmessagenow = sendmessage.customermessagesend(
//             senderMailSetting,
//             data.u_email,
//             mess,
//             message.subject,
//             CCMailSetting.e_username,
//             1
//           );

//           let record = [];
//           Object.keys(userpermission).map((key) => {
//             record.push([
//               key,
//               typeof userpermission[key].view == "undefined"
//                 ? 0
//                 : userpermission[key].view,
//               typeof userpermission[key].create == "undefined"
//                 ? 0
//                 : userpermission[key].create,
//               typeof userpermission[key].edit == "undefined"
//                 ? 0
//                 : userpermission[key].edit,
//               typeof userpermission[key].delete == "undefined"
//                 ? 0
//                 : userpermission[key].delete,
//               result.insertId,
//             ]);
//           });
//           sql1 =
//             "INSERT INTO user_permission (`f_id`, `views`, `creates`, `edits`, `deletes`, `u_id`) VALUES ?";
//           con.query(sql1, [record], (error, res) => {
//             if (res.affectedRows > 0) {
//               resolve({
//                 status: 1,
//                 message: "User Inserted successfully",
//                 data: res,
//                 uid: result.insertId,
//               });
//             }
//           });
//         } else {
//           resolve({ status: 0, message: "Something went to wrong" });
//         }
//       });
//     });

//     let response1 = await new Promise((resolve, reject) => {
//       let epermission = [];
//       Object.keys(emailtpermission).map((key) => {
//         epermission.push([
//           key,
//           typeof emailtpermission[key].view == "undefined"
//             ? 0
//             : emailtpermission[key].view,
//           typeof emailtpermission[key].create == "undefined"
//             ? 0
//             : emailtpermission[key].create,
//           typeof emailtpermission[key].edit == "undefined"
//             ? 0
//             : emailtpermission[key].edit,
//           typeof emailtpermission[key].delete == "undefined"
//             ? 0
//             : emailtpermission[key].delete,
//           response.uid,
//         ]);
//       });
//       if (epermission.length > 0) {
//         sqlemail =
//           "INSERT INTO email_access_permission (`attribute_id`, `views`, `creates`, `edits`, `deletes`, `u_id`) VALUES ?";
//         con.query(sqlemail, [epermission], (error, eres) => {
//           if (error) {
//             resolve({ status: 0, message: "Something went to wrong" });
//           }
//           if (eres.affectedRows > 0) {
//             resolve({
//               status: 1,
//               message: "User Inserted successfully",
//               edata: eres,
//             });
//           }
//         });
//       } else {
//         resolve({
//           status: 0,
//           edata: [],
//         });
//       }
//     });

//     let response2 = await new Promise((resolve, reject) => {
//       let fcpermission = [];
//       Object.keys(fcatepermissions).map((key) => {
//         fcpermission.push([
//           key,
//           typeof fcatepermissions[key] == "undefined"
//             ? 0
//             : fcatepermissions[key],
//           response.uid,
//         ]);
//       });
//       if (fcpermission.length > 0) {
//         fsqlcate =
//           "INSERT INTO faq_category_permission (`f_c_id`, `is_view`, `u_id`) VALUES ?";
//         con.query(fsqlcate, [fcpermission], (error, fres) => {
//           if (error) {
//             resolve({ status: 0, message: "Something went to wrong" });
//           }
//           if (fres.affectedRows > 0) {
//             resolve({
//               status: 1,
//               message: "User Inserted successfully",
//               fdata: fres,
//             });
//           }
//         });
//       } else {
//         resolve({
//           status: 0,
//           fdata: [],
//         });
//       }
//     });
//   }
//     let fresponse = await new Promise((resolve, reject) => {
//       if (
//         (data.r_id !== "1" && data.r_id !== "2") ||
//         (resp.status == 1 && (data.r_id !== "1" || data.r_id !== "2"))
//       ) {
//         resolve({
//           status: 1,
//           message: "User Inserted successfully",
//           data: response.data,
//           edata: response1.edata,
//         });
//       } else if (data.r_id == "1") {
//         resolve({ status: 0, message: "Superadmin already exist..." });
//       } else if (data.r_id == "2") {
//         resolve({ status: 0, message: "BranchAdmin already exist..." });
//       } else {
//         resolve({ status: 0, message: "Something went wrong..." });
//       }
//     });
//     return fresponse;
//   } catch (error) {
//     return { status: 0, message: "Invalid Call Try Again" };
//   }
// }

async function insertUser(data, filename = "", ifilename = "") {
  try {
    // let pass = Math.floor(Math.random() * 90000) + 10000;
    let response, response1;
    let userpermission = JSON.parse(data.rolelist);
    let emailtpermission = JSON.parse(data.emailtpermissions);
    let fcatepermissions = JSON.parse(data.fcatepermissions);
    if (data.r_id == "1") {
      sql1 = `select r_id from users where r_id = 1`;
    } else if (data.r_id == "2") {
      sql1 = `select r_id from users where r_id = 2 and branch_id=${data.branch_id} AND deleted= 0`;
    }
    let resp = await new Promise((resolve, reject) => {
      con.query(sql1, async function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went wrong......" });
        } else {
          if (result.length == 0) {
            resolve({ status: 1, result: [0] });
          }
          if (result.length > 0) {
            resolve({ status: 0, result: result[0] });
          }
        }
      });
    });
    //2903
    if (
      (data.r_id !== "1" && data.r_id !== "2") ||
      (resp.status == 1 && (data.r_id !== "1" || data.r_id !== "2"))
    ) {
      sql = `INSERT INTO users (u_name,address,r_id, u_email, password, mobile, user_type, branch_id,p_u_id,deleted,u_footer,s_email_signature,is_ip,is_marketing,marketing_parent_id,u_image,p_h_id,p_h_permission,p_d_id,p_d_permission,invoice_signature,f_url,c_l_permission,s_u_permission,d_a_permission,payment_apporval,r_r_permission,code_mail_permission,u_commission) VALUES ('${mysql_real_escape_string(
        data.u_name
      )}', '${mysql_real_escape_string(data.address)}', '${data.r_id
        }', '${mysql_real_escape_string(data.u_email)}', md5('${data.password
        }'), '${mysql_real_escape_string(data.mobile)}',${data.r_id == 1
          ? 0
          : data.r_id == 2
            ? 1
            : data.r_id == 3
              ? 2
              : data.r_id == 4
                ? 3
                : 3
        }, ${data.branch_id == "undefined" ? 0 : data.branch_id},${data.u_id
        },0,'${data.u_footer == "" ||
          data.u_footer == "undefined" ||
          data.u_footer.match("<p></p>") != null
          ? "<p>&nbsp</p>"
          : mysql_real_escape_string(data.u_footer)
        }','${data.s_email_signature == "" ||
          data.s_email_signature == "undefined" ||
          data.s_email_signature.match("<p></p>") != null
          ? "<p>&nbsp</p>"
          : mysql_real_escape_string(data.s_email_signature)
        }',${data.is_ip == "undefined" ? 0 : 1},${data.is_marketing == "undefined" ? 0 : data.is_marketing
        },${data.marketing_parent_id == "undefined" ? 0 : data.marketing_parent_id
        },"${filename == undefined ? "" : mysql_real_escape_string(filename)}",
    ${data.p_h_id == "undefined" ? 0 : data.p_h_id},${data.p_h_permission == "undefined" ? 0 : data.p_h_permission
        },${data.p_d_id == "undefined" ? 0 : data.p_d_id},${data.p_d_permission == "undefined" ? 0 : data.p_d_permission
        },"${ifilename == undefined ? "" : mysql_real_escape_string(ifilename)
        }",'${mysql_real_escape_string(data.f_url)}',${data.c_l_permission == "undefined" ? 0 : data.c_l_permission
        },${data.s_u_permission == "undefined" ? 0 : data.s_u_permission},${data.d_a_permission == "undefined" ? 0 : data.d_a_permission
        },${data.payment_apporval == "undefined" ? 0 : data.payment_apporval},${data.r_r_permission == "undefined" ? 0 : data.r_r_permission
        }, ${data.code_mail_permission == "undefined"
          ? 0
          : data.code_mail_permission
        },'${data.u_commission}')`;
      response = await new Promise((resolve, reject) => {
        con.query(sql, async function (err, result) {
          if (err) {
            console.log(err);
            resolve({ status: 0, message: "Something went to wrong" });
          } else {
            if (result.affectedRows > 0) {
              let senderMailSetting = await sendmessage.getEmailSetting(
                data.created_id
              );

              sqlll = `SELECT u_email FROM users WHERE u_id = ${data.created_id} `;
              let ccmail = await new Promise((resolve, reject) => {
                con.query(sqlll, async function (err1, result1) {
                  if (err1) {
                    console.log(err1);
                    resolve({ status: 0, message: "Something went to wrong" });
                  } else {
                    if (result1.length > 0) {
                      resolve({ status: 1, result: result1[0].u_email });
                    } else {
                      resolve({
                        status: 0,
                        message: "Something went to wrong",
                      });
                    }
                  }
                });
              });

              let message = await sendmessage.getTemplate(34);
              if (message.status != 0) {
                message.template = message.template.replace(
                  "{:name:}",
                  data.u_name
                );
                message.template = message.template.replace(
                  "{:username:}",
                  data.u_email
                );
                message.template = message.template.replace(
                  "{:password:}",
                  data.password
                );
                let mess =
                  (message.header == 1
                    ? typeof senderMailSetting.email_template_header !=
                      undefined && senderMailSetting.email_template_header != undefined &&
                      senderMailSetting.email_template_header != null
                      ? senderMailSetting.email_template_header
                      : ""
                    : "") +
                  message.template +
                  (message.b_d_id != 0
                    ? message.b_d_id == 1
                      ? senderMailSetting.gst_bankdetails
                      : message.b_d_id == 2
                        ? senderMailSetting.ngst_bankdetails
                        : message.b_d_id == 3
                          ? senderMailSetting.general_bankdetails
                          : ""
                    : "") +
                  (message.footer == 1
                    ? senderMailSetting.email_template_footer
                    : "") +
                  (message.signature == 1
                    ? senderMailSetting.email_signature
                    : "");

                CCMailSetting = await sendmessage.getEmailSetting(1);

                sendmessagenow = sendmessage.customermessagesend(
                  senderMailSetting,
                  data.u_email,
                  mess,
                  message.subject,
                  ccmail.result, //CCMailSetting.e_username,  // user mail
                  ccmail.result, // reply mail
                  1
                );
              }
              let record = [];
              Object.keys(userpermission).map((key) => {
                record.push([
                  key,
                  typeof userpermission[key].view == "undefined"
                    ? 0
                    : userpermission[key].view,
                  typeof userpermission[key].create == "undefined"
                    ? 0
                    : userpermission[key].create,
                  typeof userpermission[key].edit == "undefined"
                    ? 0
                    : userpermission[key].edit,
                  typeof userpermission[key].delete == "undefined"
                    ? 0
                    : userpermission[key].delete,
                  result.insertId,
                ]);
              });
              sql1 =
                "INSERT INTO user_permission (`f_id`, `views`, `creates`, `edits`, `deletes`, `u_id`) VALUES ?";
              con.query(sql1, [record], (error, res) => {
                if (error) {
                  console.log(error);
                } else {
                  if (res.affectedRows > 0) {
                    resolve({
                      status: 1,
                      message: "User Inserted successfully",
                      data: res,
                      uid: result.insertId,
                    });
                  }
                }
              });
            } else {
              resolve({ status: 0, message: "Something went to wrong" });
            }
          }
        });
      });
      response1 = await new Promise((resolve, reject) => {
        let epermission = [];
        Object.keys(emailtpermission).map((key) => {
          epermission.push([
            key,
            typeof emailtpermission[key].view == "undefined"
              ? 0
              : emailtpermission[key].view,
            typeof emailtpermission[key].create == "undefined"
              ? 0
              : emailtpermission[key].create,
            typeof emailtpermission[key].edit == "undefined"
              ? 0
              : emailtpermission[key].edit,
            typeof emailtpermission[key].delete == "undefined"
              ? 0
              : emailtpermission[key].delete,
            response.uid,
          ]);
        });
        if (epermission.length > 0) {
          sqlemail =
            "INSERT INTO email_access_permission (`attribute_id`, `views`, `creates`, `edits`, `deletes`, `u_id`) VALUES ?";
          con.query(sqlemail, [epermission], (error, eres) => {
            if (error) {
              console.log(error);
              resolve({ status: 0, message: "Something went to wrong" });
            } else {
              if (eres.affectedRows > 0) {
                resolve({
                  status: 1,
                  message: "User Inserted successfully",
                  edata: eres,
                });
              } else {
                resolve({
                  status: 0,
                  message: "Something went to wrong",
                });
              }
            }
          });
        } else {
          resolve({
            status: 0,
            edata: [],
          });
        }
      });
      response2 = await new Promise((resolve, reject) => {
        let fcpermission = [];
        Object.keys(fcatepermissions).map((key) => {
          fcpermission.push([
            key,
            typeof fcatepermissions[key] == "undefined"
              ? 0
              : fcatepermissions[key],
            response.uid,
          ]);
        });
        if (fcpermission.length > 0) {
          fsqlcate =
            "INSERT INTO faq_category_permission (`f_c_id`, `is_view`, `u_id`) VALUES ?";
          con.query(fsqlcate, [fcpermission], (error, fres) => {
            if (error) {
              console.log(error);
              resolve({ status: 0, message: "Something went to wrong" });
            } else {
              if (fres.affectedRows > 0) {
                resolve({
                  status: 1,
                  message: "User Inserted successfully",
                  fdata: fres,
                });
              } else {
                resolve({
                  status: 0,
                  message: "Something went to wrong",
                });
              }
            }
          });
        } else {
          resolve({
            status: 0,
            fdata: [],
          });
        }
      });

      if (data.r_id == 2) {
        updatebranchsettingsql = `UPDATE branch SET 
        b_email_template_footer ='${data.u_footer == ""
            ? "<p>&nbsp</p>"
            : mysql_real_escape_string(data.u_footer)
          }',b_email_signature ='${data.s_email_signature == ""
            ? "<p>&nbsp</p>"
            : mysql_real_escape_string(data.s_email_signature)
          }' where branch_id=${data.branch_id}`;
        uresponse = await new Promise((resolve, reject) => {
          con.query(updatebranchsettingsql, async function (err, result) {
            if (err) {
              console.log(err);
              resolve({ status: 0, message: "Something went to wrong" });
            } else {
              if (result.affectedRows > 0) {
                resolve({ status: 1, message: "Branch setting updated" });
              } else {
                resolve({ status: 0, message: "Something went to wrong" });
              }
            }
          });
        });
      }
    }
    let fresponse = await new Promise((resolve, reject) => {
      if (
        (data.r_id !== "1" && data.r_id !== "2") ||
        (resp.status == 1 && (data.r_id !== "1" || data.r_id !== "2"))
      ) {
        resolve({
          status: 1,
          message: "User Inserted successfully",
          data: response.data,
          edata: response1.edata,
        });
      } else if (data.r_id == "1") {
        resolve({ status: 0, message: "Superadmin already exist..." });
      } else if (data.r_id == "2") {
        resolve({ status: 0, message: "BranchAdmin already exist..." });
      } else {
        resolve({ status: 0, message: "Something went wrong..." });
      }
    });

    return fresponse;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}
async function getuserbyparent(data) {
  try {
    if (data.id == 1) {
      sql = `select (row_number() over ( order by u1.u_id DESC) ) AS row_no,(SELECT b_name FROM branch WHERE branch.branch_id = u1.branch_id)as branch_name,r1.name,u1.*, u2.u_name as pickup_handler,u3.u_name as pickup_done from users u1 left join users u2 on u2.u_id = u1.p_h_id left join users u3 on u3.u_id = u1.p_d_id left join roles r1 on r1.r_id=u1.r_id where u1.user_type!=0 and u1.deleted=0 ORDER BY u1.u_id DESC`;
    } else {
      sql = `select (row_number() over ( order by u1.u_id DESC) ) AS row_no,(SELECT b_name FROM branch WHERE branch.branch_id = u1.branch_id)as branch_name,r1.name,u1.*, u2.u_name as pickup_handler,u3.u_name as pickup_done from users u1 left join users u2 on u2.u_id = u1.p_h_id left join users u3 on u3.u_id = u1.p_d_id left join roles r1 on r1.r_id=u1.r_id WHERE  (u1.p_u_id=${data.id} OR u1.branch_id=${data.branch_id}) AND u1.user_type=3 and u1.deleted=0 ORDER BY u1.u_id DESC`;
    }
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              data: result,
            });
          } else {
            resolve({
              status: 1,
              data: [],
            });
          }
        }
      });
    });

    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function getuserpermission(data) {
  try {
    sql = `SELECT * FROM users,user_permission WHERE users.u_id=user_permission.u_id and users.u_id=${data.id}`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              data: result,
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    esql = `SELECT * FROM users,email_access_permission WHERE users.u_id=email_access_permission.u_id and users.u_id=${data.id}`;

    let response1 = await new Promise((resolve, reject) => {
      con.query(esql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              data: response.data,
              edata: result,
            });
          } else {
            resolve({
              status: 1,
              data: response.data,
            });
          }
        }
      });
    });
    return response1;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

//2903
async function updateuser(data, filename = "", ifilename = "") {
  try {
    let rolelist = JSON.parse(data.rolelist);
    let emailtpermissions = JSON.parse(data.emailtpermissions);
    let fcatepermissions = JSON.parse(data.fcatepermissions);
    if (data.password != "") {
      sql = `UPDATE users SET u_name = '${mysql_real_escape_string(
        data.u_name
      )}',address='${mysql_real_escape_string(data.address)}',r_id=${data.r_id
        },u_email='${mysql_real_escape_string(data.u_email)}',
      password=md5('${data.password}'),mobile='${mysql_real_escape_string(
          data.mobile
        )}',branch_id='${data.branch_id}',user_type=${data.r_id == 1
          ? 0
          : data.r_id == 2
            ? 1
            : data.r_id == 3
              ? 2
              : data.r_id == 4
                ? 3
                : 0
        },u_footer='${data.u_footer == ""
          ? "<p>&nbsp</p>"
          : mysql_real_escape_string(data.u_footer)
        }',s_email_signature='${data.s_email_signature == ""
          ? "<p>&nbsp</p>"
          : mysql_real_escape_string(data.s_email_signature)
        }',is_ip=${data.is_ip},is_marketing=${data.is_marketing == "undefined" ? 0 : data.is_marketing
        },marketing_parent_id=${data.marketing_parent_id == "undefined"
          ? 0
          : data.is_marketing == 0
            ? 0
            : data.marketing_parent_id
        },p_h_id=${data.p_h_id == "undefined" ? 0 : data.p_h_id
        },p_h_permission=${data.p_h_permission == "undefined" ? 0 : data.p_h_permission
        },p_d_id=${data.p_d_id == "undefined" ? 0 : data.p_d_id
        },p_d_permission=${data.p_d_permission == "undefined" ? 0 : data.p_d_permission
        },f_url='${mysql_real_escape_string(data.f_url)}',c_l_permission=${data.c_l_permission == "undefined" ? 0 : data.c_l_permission
        },s_u_permission=${data.s_u_permission == "undefined" ? 0 : data.s_u_permission
        },d_a_permission=${data.d_a_permission == "undefined" ? 0 : data.d_a_permission
        },payment_apporval=${data.payment_apporval == "undefined" ? 0 : data.payment_apporval
        },r_r_permission=${data.r_r_permission == "undefined" ? 0 : data.r_r_permission
        },code_mail_permission=${data.code_mail_permission == "undefined"
          ? 0
          : data.code_mail_permission
        },u_commission ='${data.u_commission}' `;
    } else {
      sql = `UPDATE users SET u_name = '${mysql_real_escape_string(
        data.u_name
      )}',address='${mysql_real_escape_string(data.address)}',r_id=${data.r_id
        },u_email='${mysql_real_escape_string(
          data.u_email
        )}', mobile='${mysql_real_escape_string(data.mobile)}',branch_id='${data.branch_id
        }',user_type=${data.r_id == 1
          ? 0
          : data.r_id == 2
            ? 1
            : data.r_id == 3
              ? 2
              : data.r_id == 4
                ? 3
                : 0
        },u_footer='${data.u_footer == ""
          ? "<p>&nbsp</p>"
          : mysql_real_escape_string(data.u_footer)
        }',s_email_signature='${data.s_email_signature == ""
          ? "<p>&nbsp</p>"
          : mysql_real_escape_string(data.s_email_signature)
        }',is_ip=${data.is_ip},is_marketing=${data.is_marketing == "undefined" ? 0 : data.is_marketing
        },marketing_parent_id=${data.marketing_parent_id == "undefined"
          ? 0
          : data.is_marketing == 0
            ? 0
            : data.marketing_parent_id
        },p_h_id=${data.p_h_id == "undefined" ? 0 : data.p_h_id
        },p_h_permission=${data.p_h_permission == "undefined" ? 0 : data.p_h_permission
        },p_d_id=${data.p_d_id == "undefined" ? 0 : data.p_d_id
        },p_d_permission=${data.p_d_permission == "undefined" ? 0 : data.p_d_permission
        },f_url='${mysql_real_escape_string(data.f_url)}',c_l_permission=${data.c_l_permission == "undefined" ? 0 : data.c_l_permission
        },s_u_permission=${data.s_u_permission == "undefined" ? 0 : data.s_u_permission
        },d_a_permission=${data.d_a_permission == "undefined" ? 0 : data.d_a_permission
        },payment_apporval=${data.payment_apporval == "undefined" ? 0 : data.payment_apporval
        },r_r_permission=${data.r_r_permission == "undefined" ? 0 : data.r_r_permission
        },code_mail_permission=${data.code_mail_permission == "undefined"
          ? 0
          : data.code_mail_permission
        },u_commission ='${data.u_commission}'`;
    }
    if (filename != "") {
      sql += ` ,u_image="${mysql_real_escape_string(filename)}" `;
    }
    if (ifilename != "") {
      sql += ` ,invoice_signature="${mysql_real_escape_string(ifilename)}" `;
    }
    sql += ` WHERE users.u_id = '${data.u_id}'`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.affectedRows > 0) {
            Object.keys(rolelist).map((key) => {
              sql1 = `SELECT * FROM user_permission WHERE u_id=${data.u_id} and f_id=${key}`;
              con.query(sql1, (error, res) => {
                var views = rolelist[key].view;
                var edits = rolelist[key].edit;
                var dels = rolelist[key].delete;
                var creates = rolelist[key].create;
                var f_id = key;
                if (error) {
                  console.log(error);
                } else {
                  if (res.length > 0) {
                    sql_update = `UPDATE user_permission SET views=${views},creates=${creates},edits=${edits},deletes=${dels}  where f_id=${f_id} and u_id=${data.u_id}`;
                    con.query(sql_update, (error, sql_updateres) => {
                      if (error) {
                        console.log(error);
                      }
                    });
                  } else {
                    sql_insert = `INSERT INTO user_permission (f_id, views, creates, edits, deletes, u_id) VALUES (${f_id}, ${typeof views == "undefined" ? 0 : views
                      }, ${typeof creates == "undefined" ? 0 : creates},${typeof edits == "undefined" ? 0 : edits
                      }, ${typeof dels == "undefined" ? 0 : dels}, ${data.u_id
                      })`;
                    con.query(sql_insert, (error, sql_insertres) => {
                      if (error) {
                        console.log(error);
                      }
                    });
                  }
                }
              });
            });
            resolve({
              status: 1,
              message: "User Updated successfully",
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });

    if (data.r_id == 2) {
      updatebranchsettingsql = `UPDATE branch SET 
      b_email_template_footer ='${data.u_footer == ""
          ? "<p>&nbsp</p>"
          : mysql_real_escape_string(data.u_footer)
        }',b_email_signature ='${data.s_email_signature == ""
          ? "<p>&nbsp</p>"
          : mysql_real_escape_string(data.s_email_signature)
        }',c_url='${mysql_real_escape_string(data.f_url)}' where branch_id=${data.branch_id
        }`;
      uresponse = await new Promise((resolve, reject) => {
        con.query(updatebranchsettingsql, async function (err, result) {
          if (err) {
            console.log(err);
            resolve({ status: 0, message: "Something went to wrong" });
          } else {
            if (result.affectedRows > 0) {
              resolve({ status: 1, message: "Branch setting updated" });
            } else {
              resolve({ status: 0, message: "Something went to wrong" });
            }
          }
        });
      });
    }
    let response1 = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.affectedRows > 0) {
            Object.keys(emailtpermissions).map((key) => {
              sql1 = `SELECT * FROM email_access_permission WHERE u_id=${data.u_id} and attribute_id=${key}`;
              con.query(sql1, (error, res) => {
                var views = emailtpermissions[key].view;
                var edits = emailtpermissions[key].edit;
                var dels = emailtpermissions[key].delete;
                var creates = emailtpermissions[key].create;
                var attribute_id = key;
                if (error) {
                  console.log(error);
                } else {
                  if (res.length > 0) {
                    sql_update = `UPDATE email_access_permission SET views=${views},creates=${creates},edits=${edits},deletes=${dels}  where attribute_id=${attribute_id} and u_id=${data.u_id}`;
                    con.query(sql_update, (error, sql_updateres) => {
                      if (error) {
                        console.log(error);
                      }
                    });
                  } else {
                    sql_insert = `INSERT INTO email_access_permission (attribute_id, views, creates, edits, deletes, u_id) VALUES (${attribute_id}, ${typeof views == "undefined" ? 0 : views
                      }, ${typeof creates == "undefined" ? 0 : creates},${typeof edits == "undefined" ? 0 : edits
                      }, ${typeof dels == "undefined" ? 0 : dels}, ${data.u_id
                      })`;
                    con.query(sql_insert, (error, sql_insertres) => {
                      if (error) {
                        console.log(error);
                      }
                    });
                  }
                }
              });
            });
            resolve({
              status: 1,
              message: "User Updated successfully",
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    let response2 = await new Promise((resolve, reject) => {
      if (Object.keys(fcatepermissions).length > 0) {
        Object.keys(fcatepermissions).map((key) => {
          sql1 = `SELECT * FROM faq_category_permission WHERE u_id=${data.u_id} and f_c_id=${key}`;
          con.query(sql1, (error, res) => {
            var views = fcatepermissions[key];
            var f_c_id = key;
            if (error) {
              console.log(error);
            } else {
              if (res.length > 0) {
                sql_update = `UPDATE faq_category_permission SET is_view=${views} where f_c_id=${f_c_id} and u_id=${data.u_id}`;
              } else {
                sql_update = `INSERT INTO faq_category_permission (f_c_id, is_view, u_id) VALUES (${f_c_id}, ${typeof views == "undefined" ? 0 : views
                  }, ${data.u_id})`;
              }
              con.query(sql_update, (error, sql_updateres) => {
                if (error) {
                  resolve({ status: 0, message: "Something went to wrong" });
                } else {
                  resolve({
                    status: 1,
                    message: "User Updated successfully",
                  });
                }
              });
            }
          });
        });
      } else {
        resolve({
          status: 1,
          message: "User Updated successfully",
        });
      }
    });
    return response2;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function deleteUser(data) {
  try {
    sql = `UPDATE users SET deleted=1 WHERE  u_id =${data.id}`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.affectedRows > 0) {
            sql1 = `delete from user_permission WHERE u_id =${data.id}`;
            con.query(sql1, function (err, res) {
              if (err) {
                console.log(err);
              } else {
                if (result.affectedRows > 0) {
                  sqlfdelete = `delete from faq_category_permission WHERE u_id =${data.id}`;
                  con.query(sqlfdelete, function (err, res) {
                    if (err) {
                      console.log(err);
                    } else {
                      if (result.affectedRows > 0) {
                        resolve({
                          status: 1,
                          message: "User delete successfully",
                        });
                      }
                    }
                  });
                }
              }
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function getuserbytype(data) {
  try {
    let record = [];
    sql = `SELECT * FROM users WHERE user_type=${data.id} and deleted=0`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              data: result,
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function insertmanagerallocation(data) {
  try {
    let branchid = JSON.parse(data.branch_id);
    let record = [];
    for (i = 0; i < branchid.length; i++) {
      record.push([data.managerid, branchid[i]]);
    }
    sql = `INSERT INTO manager_allocation (manager_id,branch_id) VALUES ?`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, [record], (error, res) => {
        if (error) {
          console.log(error);
        } else {
          if (res.affectedRows > 0) {
            resolve({
              status: 1,
              message: "Branch Allocate successfully",
              data: res,
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function getallocationlist() {
  try {
    sql = `SELECT *,(row_number() over ( order by manager_allocation.manager_id) ) AS row_no,COUNT(*) as total_branch FROM manager_allocation,users WHERE manager_allocation.manager_id=users.u_id AND users.deleted=0 and manager_allocation.deleted=0 GROUP by manager_id`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              data: result,
            });
          } else {
            resolve({
              status: 1,
              data: [],
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function getbranchallocationlist(manager_id) {
  try {
    sql = `SELECT *,users.branch_id as b_b_id FROM manager_allocation,users,branch WHERE branch.branch_id=manager_allocation.branch_id and users.u_id=manager_allocation.manager_id AND manager_allocation.manager_id=${manager_id.id} AND manager_allocation.deleted=0 AND users.deleted=0 AND branch.deleted=0`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              data: result,
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function updatemanagerallocation(data) {
  try {
    let branchid = JSON.parse(data.branch_id);
    sql = `delete FROM manager_allocation where manager_id=${data.managerid}`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.affectedRows > 0) {
            let record = [];
            for (i = 0; i < branchid.length; i++) {
              record.push([data.managerid, branchid[i]]);
            }
            sql1 = `INSERT INTO manager_allocation (manager_id,branch_id) VALUES ?`;
            con.query(sql1, [record], (error, res) => {
              if (error) {
                console.log(error);
              } else {
                if (res.affectedRows > 0) {
                  resolve({
                    status: 1,
                    message: "Allocation Updated successfully",
                  });
                }
              }
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function deletemanagerallocation(data) {
  try {
    sql = `UPDATE manager_allocation SET deleted=1 WHERE  manager_id =${data.id}`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.affectedRows > 0) {
            resolve({
              status: 1,
              message: "Allocation deleted successfully",
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function deleteallocatedbranchbyid(data) {
  try {
    sql = `UPDATE manager_allocation SET deleted=1 WHERE  manager_id =${data.id} and branch_id=${data.bid}`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.affectedRows > 0) {
            resolve({
              status: 1,
              message: "Branch Allocation deleted successfully",
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function getemailtemplatecategory() {
  try {
    sql = "SELECT * FROM attributes WHERE type = 13 ORDER BY name ASC;";
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              data: result,
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function updatetemplatestatus(data) {
  try {
    sql = `UPDATE email_template SET status=${data.status} WHERE e_t_id=${data.e_t_id}`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.affectedRows > 0) {
            resolve({
              status: 1,
              message: "Status update successfully",
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function updateEmailTemplate(data, name) {
  try {
    data.template = data.template.replace("{:amount:}", data.amount);
    let pricerelation = JSON.parse(data.pricerelation);
    let certi_id = JSON.parse(data.certi_id);
    let certi_name = JSON.parse(data.certi_name);
    sql = `UPDATE email_template SET Template_name='${mysql_real_escape_string(
      data.Template_name
    )}',c_id=${data.c_id},s_c_id=${data.s_c_id},template='${data.template == "" ||
      data.template == "undefined" ||
      data.template.match("<p></p>") != null
      ? "<p>&nbsp</p>"
      : mysql_real_escape_string(data.template)
      }',header=${data.header},footer=${data.footer},signature=${data.signature
      },a_code=${pricerelation.a_code},a_country=${pricerelation.a_country
      },a_type=${pricerelation.a_type},c_type='${certi_id.length == 0 ? "" : certi_id
      }',certi_name='${certi_name.length == 0 ? "" : certi_name
      }',subject="${mysql_real_escape_string(data.subject)}",b_d_id=${data.b_d_id
      } WHERE e_t_id=${data.e_t_id}`;
    console.log("sql", sql);
    // sql = `UPDATE email_template SET Template_name='${data.Template_name}',c_id=${data.c_id},s_c_id=${data.s_c_id},template='${data.template == "" || data.template == "undefined" || data.template.match("<p></p>") != null ? "<p>&nbsp</p>" : data.template}',header=${data.header},footer=${data.footer},signature=${data.signature},a_country=${pricerelation.a_country},a_type=${pricerelation.a_type},charge_type=${pricerelation.charge_type},s_amt=${data.amount} WHERE e_t_id=${data.e_t_id}`;
    // sql = `UPDATE email_template SET Template_name='${data.Template_name}',c_id=${data.c_id},s_c_id=${data.s_c_id},template='${data.template}',header=${data.header},footer=${data.footer},signature=${data.signature} WHERE e_t_id=${data.e_t_id}`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.affectedRows > 0) {
            if (name != undefined) {
              let record = [];
              for (i = 0; i < name.length; i++) {
                record.push([data.e_t_id, name[i]]);
              }
              sql1 = `INSERT INTO e_attachment (e_id,url) VALUES ?`;
              con.query(sql1, [record], function (err1, result1) {
                if (err1) {
                  console.log(err1);
                  resolve({ status: 0, message: "Something went to wrong" });
                } else {
                  if (result1.affectedRows > 0) {
                    resolve({
                      status: 1,
                      message: "Email Template update Successfully",
                    });
                  }
                }
              });
            } else {
              resolve({
                status: 1,
                message: "Email Template update successfully",
              });
            }
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return {
      status: 0,
      message: "Invalid Call Try Again",
    };
  }
}

async function gettemplatesubcategory(data) {
  try {
    sql = `SELECT * FROM attributes WHERE p_c_id = ${data.id} ORDER BY name ASC`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              data: result,
            });
          } else {
            resolve({
              status: 0,
              data: [],
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

// async function insertEmailTemplate(data, name) {
//   try {
//     sql = `INSERT INTO email_template (header,footer,signature,Template_name,c_id,s_c_id,template,type) VALUES (${data.header},${data.footer},${data.signature},'${data.Template_name}',${data.c_id},${data.s_c_id},'${data.template}',1)`;
//     let response = await new Promise((resolve, reject) => {
//       con.query(sql, function (err, result) {
//         if (err) {
//           resolve({ status: 0, message: "Something went to wrong" });
//         }
//         if (result.affectedRows > 0) {
//           if (name != undefined) {
//             let record = [];
//             for (i = 0; i < name.length; i++) {
//               record.push([result.insertId, name[i]]);
//             }
//             sql1 = `INSERT INTO e_attachment (e_id,url) VALUES ?`;
//             con.query(sql1, [record], function (err1, result1) {
//               if (err1) {
//                 resolve({ status: 0, message: "Something went to wrong" });
//               }
//               if (result1.affectedRows > 0) {
//                 resolve({
//                   status: 1,
//                   message: "Email Template Insert Successfully",
//                 });
//               }
//             });
//           } else {
//             resolve({
//               status: 1,
//               message: "Email Template Insert Successfully",
//             });
//           }
//         }
//       });
//     });
//     return response;
//   } catch (error) {
//     return { status: 0, message: "Invalid Call Try Again" };
//   }
// }

// async function getemailtemplate() {
//   try {
//     let emailTemplate = [];

//     let emailTemplateList = [];
//     sql = `SELECT *,(SELECT name FROM attributes WHERE email_template.c_id=attributes.attribute_id) as category,(SELECT name FROM attributes WHERE email_template.s_c_id=attributes.attribute_id)as subcategory FROM email_template WHERE type=1 AND deleted = 0`;
//     let response = await new Promise((resolve, reject) => {
//       con.query(sql, function (err, result) {
//         if (err) {
//           resolve({ status: 0, message: "Something went to wrong" });
//         }
//         if (result.length > 0) {
//           let i = 0;
//           for (; i < result.length; i += 1) {
//             emailTemplate.push({
//               e_t_id: result[i].e_t_id,
//               Template_name: result[i].Template_name,
//               c_id: result[i].c_id,
//               category: result[i].category,
//               subcategory: result[i].subcategory,
//               s_c_id: result[i].s_c_id,
//               template: result[i].template,
//               header: result[i].header,
//               footer: result[i].footer,
//               signature: result[i].signature,
//               type: result[i].type,
//               status: result[i].status,
//               template_image: [],
//             });
//             emailTemplateList.push({
//               e_t_id: result[i].e_t_id,
//               Template_name: result[i].Template_name,
//               c_id: result[i].c_id,
//               s_c_id: result[i].s_c_id,
//               category: result[i].category,
//               subcategory: result[i].subcategory,
//               template: result[i].template,
//               header: result[i].header,
//               footer: result[i].footer,
//               signature: result[i].signature,
//               type: result[i].type,
//               status: result[i].status,
//               template_image: [],
//             });
//           }

//           Object.keys(emailTemplate).map((kk) => {
//             sql1 = `SELECT * FROM e_attachment  WHERE  e_attachment.e_id = ${emailTemplate[kk].e_t_id}`;

//             con.query(sql1, function (errsql1, sql1res) {
//               let templateImageList = [];
//               Object.keys(sql1res).map((ak) => {
//                 templateImageList.push(sql1res[ak]);
//               });

//               emailTemplateList[kk].template_image = templateImageList;
//               if (kk == emailTemplate.length - 1) {
//                 // res.send(JSON.stringify(emailTemplateList));
//                 resolve({
//                   status: 1,
//                   data: emailTemplateList,
//                 });
//               }
//             });
//           });
//           //
//           // con.query(sql1, function (err, result1) {
//           //   if (err) {
//           //     resolve({ status: 0, message: "Something went to wrong" });
//           //   }
//           //   if (result1.length > 0) {
//           //     resolve({
//           //       status: 1,
//           //       data: result,
//           //     });
//           //   }
//           // });
//         }
//       });
//     });
//     return response;
//   } catch (error) {
//     return { status: 0, message: "Invalid Call Try Again" };
//   }
// }

async function insertEmailTemplate(data, name) {
  try {
    data.template = data.template.replace("{:amount:}", data.amount);
    let pricerelation = JSON.parse(data.pricerelation);
    let certi_id = JSON.parse(data.certi_id);
    let certi_name = JSON.parse(data.certi_name);
    sql = `INSERT INTO email_template (header,footer,signature,Template_name,c_id,s_c_id,template,type,a_code,a_country,a_type,c_type,certi_name,subject,b_d_id) VALUES (${data.header
      },${data.footer},${data.signature},'${mysql_real_escape_string(
        data.Template_name
      )}',${data.c_id},${data.s_c_id == "undefined" ? 0 : data.s_c_id},'${data.template == "" ||
        data.template == "undefined" ||
        data.template.match("<p></p>") != null
        ? "<p>&nbsp</p>"
        : mysql_real_escape_string(data.template)
      }',1,${typeof pricerelation.a_code == "undefined" ? 0 : pricerelation.a_code
      },${typeof pricerelation.a_country == "undefined"
        ? 0
        : pricerelation.a_country
      },${typeof pricerelation.a_type == "undefined" ? 0 : pricerelation.a_type
      },'${certi_id.length == 0 ? "" : certi_id}','${certi_name.length == 0 ? "" : certi_name
      }',"${mysql_real_escape_string(data.subject)}",${data.b_d_id})`;
    console.log("sql", sql);
    // sql = `INSERT INTO email_template (header,footer,signature,Template_name,c_id,s_c_id,template,type,a_country,a_type,charge_type,s_amt) VALUES (${data.header},${data.footer},${data.signature},'${data.Template_name}',${data.c_id},${data.s_c_id=='undefined'?0:data.s_c_id},'${data.template == "" || data.template == "undefined" || data.template.match("<p></p>") != null ? "<p>&nbsp</p>" : data.template}',1,${typeof pricerelation.a_country=='undefined'?0:pricerelation.a_country},${typeof pricerelation.a_type=='undefined'?0:pricerelation.a_type},${typeof pricerelation.charge_type=='undefined'?0:pricerelation.charge_type},'${data.amount}')`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.affectedRows > 0) {
            if (name != undefined) {
              let record = [];
              for (i = 0; i < name.length; i++) {
                record.push([result.insertId, name[i]]);
              }
              sql1 = `INSERT INTO e_attachment (e_id,url) VALUES ?`;
              con.query(sql1, [record], function (err1, result1) {
                if (err1) {
                  console.log(err1);
                  resolve({ status: 0, message: "Something went to wrong" });
                } else {
                  if (result1.affectedRows > 0) {
                    resolve({
                      status: 1,
                      message: "Email Template Insert Successfully",
                    });
                  }
                }
              });
            } else {
              resolve({
                status: 1,
                message: "Email Template Insert Successfully",
              });
            }
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function getemailtemplate() {
  try {
    let emailTemplate = [];

    let emailTemplateList = [];
    sql = `SELECT *,(row_number() over ( order by email_template.e_t_id DESC) ) AS row_no,(SELECT name FROM attributes WHERE email_template.c_id=attributes.attribute_id) as category,(SELECT name FROM attributes WHERE email_template.s_c_id=attributes.attribute_id)as subcategory FROM email_template WHERE type=1 AND deleted = 0 ORDER BY e_t_id DESC`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            let i = 0;
            for (; i < result.length; i += 1) {
              emailTemplate.push({
                e_t_id: result[i].e_t_id,
                b_d_id: result[i].b_d_id,
                Template_name: result[i].Template_name,
                subject: result[i].subject,
                c_id: result[i].c_id,
                category: result[i].category,
                subcategory: result[i].subcategory,
                s_c_id: result[i].s_c_id,
                template: result[i].template,
                header: result[i].header,
                footer: result[i].footer,
                signature: result[i].signature,
                type: result[i].type,
                status: result[i].status,
                template_image: [],
                a_code: result[i].a_code,
                a_country: result[i].a_country,
                a_type: result[i].a_type,
                c_type: result[i].c_type,
                certi_name: result[i].certi_name,
                row_no: result[i].row_no,
                // charge_type:result[i].charge_type,
                // s_amt:result[i].s_amt,
              });
              emailTemplateList.push({
                e_t_id: result[i].e_t_id,
                b_d_id: result[i].b_d_id,
                Template_name: result[i].Template_name,
                subject: result[i].subject,
                c_id: result[i].c_id,
                s_c_id: result[i].s_c_id,
                category: result[i].category,
                subcategory: result[i].subcategory,
                template: result[i].template,
                header: result[i].header,
                footer: result[i].footer,
                signature: result[i].signature,
                type: result[i].type,
                status: result[i].status,
                a_code: result[i].a_code,
                a_country: result[i].a_country,
                a_type: result[i].a_type,
                c_type: result[i].c_type,
                certi_name: result[i].certi_name,
                row_no: result[i].row_no,
                // charge_type:result[i].charge_type,
                // s_amt:result[i].s_amt,
                template_image: [],
              });
            }

            Object.keys(emailTemplate).map((kk) => {
              sql1 = `SELECT * FROM e_attachment  WHERE  e_attachment.e_id = ${emailTemplate[kk].e_t_id}`;

              con.query(sql1, function (errsql1, sql1res) {
                if (errsql1) {
                  console.log(errsql1);
                } else {
                  let templateImageList = [];
                  Object.keys(sql1res).map((ak) => {
                    templateImageList.push(sql1res[ak]);
                  });

                  emailTemplateList[kk].template_image = templateImageList;
                  if (kk == emailTemplate.length - 1) {
                    // res.send(JSON.stringify(emailTemplateList));
                    resolve({
                      status: 1,
                      data: emailTemplateList,
                    });
                  }
                }
              });
            });
            //
            // con.query(sql1, function (err, result1) {
            //   if (err) {
            //     resolve({ status: 0, message: "Something went to wrong" });
            //   }
            //   if (result1.length > 0) {
            //     resolve({
            //       status: 1,
            //       data: result,
            //     });
            //   }
            // });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function deleteEmailTemplate(data) {
  try {
    sql = `UPDATE email_template SET deleted=1 WHERE e_t_id=${data.id}`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.affectedRows > 0) {
            resolve({
              status: 1,
              message: "Email Template deleted successfully",
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function getbranchdatabyid(data) {
  try {
    sql = `SELECT * FROM branch WHERE branch_id=${data.id}`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              data: result[0],
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function updateBranchSetting(data, filename = "") {
  try {
    sql = `UPDATE branch SET ip_address ='${mysql_real_escape_string(
      data.ip_address
    )}', mo_no = '${mysql_real_escape_string(
      data.mo_no
    )}', website_url = '${mysql_real_escape_string(
      data.website_url
    )}',b_e_host = '${mysql_real_escape_string(
      data.b_e_host
    )}', b_e_port = '${mysql_real_escape_string(
      data.b_e_port
    )}',b_e_username = '${mysql_real_escape_string(
      data.b_e_username
    )}',b_e_password = '${mysql_real_escape_string(
      data.b_e_password
    )}',b_hsn_code=${data.b_hsn_code},b_gstno='${mysql_real_escape_string(
      data.b_gstno
    )}',company_name='${mysql_real_escape_string(
      data.company_name
    )}',c_term_condition = '${data.c_term_condition == ""
      ? "<p>&nbsp</p>"
      : mysql_real_escape_string(data.c_term_condition)
      }',b_email_template_header ='${data.b_email_template_header == ""
        ? "<p>&nbsp</p>"
        : mysql_real_escape_string(data.b_email_template_header)
      }',b_email_template_footer ='${data.b_email_template_footer == ""
        ? "<p>&nbsp</p>"
        : mysql_real_escape_string(data.b_email_template_footer)
      }',b_email_signature ='${data.b_email_signature == ""
        ? "<p>&nbsp</p>"
        : mysql_real_escape_string(data.b_email_signature)
      }',b_bank_details='${data.b_bank_details == ""
        ? "<p>&nbsp</p>"
        : mysql_real_escape_string(data.b_bank_details)
      }',b_nongst_bank_deatils= '${data.b_nongst_bank_deatils == ""
        ? "<p>&nbsp</p>"
        : mysql_real_escape_string(data.b_nongst_bank_deatils)
      }',r_link='${data.r_link != "null" ? mysql_real_escape_string(data.r_link) : ""
      }',arn_no='${mysql_real_escape_string(
        data.arn_no
      )}',address="${mysql_real_escape_string(data.address)}",std_commission = ${data.std_commission
      }`;
    if (filename != "") {
      sql += ` , logo = '${mysql_real_escape_string(filename)}'`;
    }
    sql += ` WHERE branch_id = '${data.branch_id}'`;

    let updateusersql = `UPDATE users SET u_footer='${data.b_email_template_footer == ""
      ? "<p>&nbsp</p>"
      : mysql_real_escape_string(data.b_email_template_footer)
      }',s_email_signature='${data.b_email_signature == ""
        ? "<p>&nbsp</p>"
        : mysql_real_escape_string(data.b_email_signature)
      }' where u_id=${data.u_id} `;
    let usresponse = await new Promise((resolve, reject) => {
      con.query(updateusersql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.affectedRows > 0) {
            resolve({
              status: 1,
              message: "User Setting Updated successfully",
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.affectedRows > 0) {
            resolve({
              status: 1,
              message: "Branch Setting Updated successfully",
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function getAttributebyid(data) {
  try {
    sql = `SELECT * FROM attributes WHERE type=${data.id} order by name ASC `;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              data: result,
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function deleteEmailImage(data) {
  try {
    sql = `DELETE FROM e_attachment WHERE e_a_id =${data.id}`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.affectedRows > 0) {
            resolve({
              status: 1,
              message: "Email Image deleted successfully",
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function insertTask(data, name) {
  try {
    sql = `INSERT INTO task (subject,sdate,edate,priority,description,t_branch_id,u_id,allocate_id) VALUES ('${data.subject
      }','${data.sdate}','${data.edate}',${data.priority},'${data.description}',${data.t_branch_id == "undefined" ? 0 : data.t_branch_id
      },${data.u_id},${data.allocate_id == "undefined" ? data.u_id : data.allocate_id
      })`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.affectedRows > 0) {
            if (name != undefined) {
              let record = [];
              for (i = 0; i < name.length; i++) {
                record.push([result.insertId, name[i]]);
              }
              sql1 = `INSERT INTO task_attachment (t_id,url) VALUES ?`;
              con.query(sql1, [record], function (err1, result1) {
                if (err1) {
                  console.log(err1);
                  resolve({ status: 0, message: "Something went to wrong" });
                } else {
                  if (result1.affectedRows > 0) {
                    resolve({
                      status: 1,
                      message: "Task Insert Successfully",
                    });
                  } else {
                    resolve({
                      status: 0,
                      message: "Something went to wrong",
                    });
                  }
                }
              });
            } else {
              resolve({
                status: 1,
                message: "Task Insert Successfully",
              });
            }
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function getallTask(data) {
  try {
    let task = [];
    let taskList = [];
    let record = [];
    getuserquery = `select * from users where u_id=${data.id} and deleted=0`;
    let response = await new Promise((resolve, reject) => {
      con.query(getuserquery, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            if (result[0].user_type == 1) {
              getallchilduser = `select * from users where ((p_u_id=${data.id} OR p_u_id=1) and branch_id=${result[0].branch_id}) and deleted=0`;
              con.query(getallchilduser, function (err, res) {
                if (err) {
                  console.log(err);
                  resolve({ status: 0, message: "Something went to wrong" });
                } else {
                  res.forEach(function (r) {
                    record.push(r.u_id);
                  });
                  resolve({
                    record: record,
                    type: result[0].user_type,
                  });
                }
              });
            } else {
              resolve({
                type: result[0].user_type,
              });
            }
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    if (response.type == 1) {
      getleadquery = `SELECT *,(SELECT COUNT(*) FROM task where (task.u_id IN(${record}) or task.allocate_id IN(${record})) and task.deleted=0 and users.deleted=0) as trows,(SELECT u_name FROM users WHERE users.u_id=task.u_id)as createdBy,(SELECT u_name FROM users WHERE users.u_id=task.allocate_id)as allocateTo FROM task ,users WHERE task.deleted=0 and users.deleted=0 and (task.u_id IN(${record}) or task.allocate_id IN(${record}))`;
      countsql = getleadquery;
      getleadquery += `GROUP by task.t_id ORDER BY priority DESC limit ${(data.page - 1) * data.perPage
        },${data.perPage}`;
    } else if (response.type == 3) {
      getleadquery = `SELECT *,(SELECT COUNT(*) FROM task where task.deleted=0 and (u_id=${data.id} OR allocate_id=${data.id})) as trows,(SELECT u_name FROM users WHERE users.u_id=task.u_id)as createdBy,(SELECT u_name FROM users WHERE users.u_id=task.allocate_id)as allocateTo FROM task WHERE deleted = 0 and (u_id=${data.id} OR allocate_id=${data.id})`;
      countsql = getleadquery;
      getleadquery += ` ORDER BY priority DESC limit ${(data.page - 1) * data.perPage
        },${data.perPage}`;
    } else {
      getleadquery = `SELECT *,(SELECT COUNT(*) FROM task where task.deleted=0) as trows,(SELECT u_name FROM users WHERE users.u_id=task.u_id)as createdBy,(SELECT u_name FROM users WHERE users.u_id=task.allocate_id)as allocateTo FROM task WHERE deleted = 0`;
      countsql = getleadquery;
      getleadquery += ` ORDER BY priority DESC limit ${(data.page - 1) * data.perPage
        },${data.perPage}`;
    }
    let response1 = await new Promise((resolve, reject) => {
      con.query(getleadquery, function (err, lres) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (lres.length > 0) {
            let i = 0;
            for (; i < lres.length; i += 1) {
              task.push({
                t_id: lres[i].t_id,
                subject: lres[i].subject,
                sdate: lres[i].sdate,
                edate: lres[i].edate,
                priority: lres[i].priority,
                description: lres[i].description,
                u_id: lres[i].u_id,
                allocate_id: lres[i].allocate_id,
                t_status: lres[i].t_status,
                t_branch_id: lres[i].t_branch_id,
                createdBy: lres[i].createdBy,
                allocateTo: lres[i].allocateTo,
                trows: lres[i].trows,
                task_image: [],
              });
              taskList.push({
                t_id: lres[i].t_id,
                subject: lres[i].subject,
                sdate: lres[i].sdate,
                edate: lres[i].edate,
                priority: lres[i].priority,
                description: lres[i].description,
                u_id: lres[i].u_id,
                allocate_id: lres[i].allocate_id,
                t_status: lres[i].t_status,
                t_branch_id: lres[i].t_branch_id,
                createdBy: lres[i].createdBy,
                allocateTo: lres[i].allocateTo,
                trows: lres[i].trows,
                task_image: [],
              });
            }

            Object.keys(task).map((kk) => {
              sql1 = `SELECT * FROM task_attachment  WHERE  task_attachment.t_id = ${task[kk].t_id}`;

              con.query(sql1, function (errsql1, sql1res) {
                if (errsql1) {
                  console.log(errsql1);
                } else {
                  let taskimg = [];
                  Object.keys(sql1res).map((ak) => {
                    taskimg.push(sql1res[ak]);
                  });

                  taskList[kk].task_image = taskimg;
                  if (kk == task.length - 1) {
                    con.query(countsql, function (err, cres) {
                      if (cres.length > 0) {
                        resolve({
                          status: 1,
                          data: taskList,
                          t_rows: cres.length,
                        });
                      }
                    });
                  }
                }
              });
            });
          } else {
            resolve({
              status: 0,
              data: [],
            });
          }
        }

        // resolve({
        //   status: 1,
        //   lData: lres,
        // });
      });
    });

    return response1;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function deleteTask(data) {
  try {
    sql = `UPDATE task SET deleted=1 WHERE t_id=${data.id}`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.affectedRows > 0) {
            resolve({
              status: 1,
              message: "Task deleted successfully",
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function deleteTaskImage(data) {
  try {
    sql = `DELETE FROM task_attachment WHERE t_a_id  =${data.id}`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.affectedRows > 0) {
            resolve({
              status: 1,
              message: "Task Image deleted successfully",
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function updateTask(data, name) {
  try {
    sql = `UPDATE task SET subject='${data.subject}',sdate='${data.sdate}',edate='${data.edate}',priority=${data.priority},description='${data.description}',u_id=${data.u_id},t_branch_id=${data.t_branch_id},allocate_id=${data.allocate_id} WHERE t_id =${data.t_id}`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.affectedRows > 0) {
            if (name != undefined) {
              let record = [];
              for (i = 0; i < name.length; i++) {
                record.push([data.t_id, name[i]]);
              }
              sql1 = `INSERT INTO task_attachment (t_id ,url) VALUES ?`;
              con.query(sql1, [record], function (err1, result1) {
                if (err1) {
                  console.log(err1);
                  resolve({ status: 0, message: "Something went to wrong" });
                } else {
                  if (result1.affectedRows > 0) {
                    resolve({
                      status: 1,
                      message: "Task update Successfully",
                    });
                  }
                }
              });
            } else {
              resolve({
                status: 1,
                message: "Task update successfully",
              });
            }
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return {
      status: 0,
      message: "Invalid Call Try Again",
    };
  }
}

async function updateTaskPriority(data) {
  try {
    sql = `UPDATE task SET priority=${data.priority} WHERE  t_id  =${data.t_id}`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.affectedRows > 0) {
            resolve({
              status: 1,
              message: "Priority update successfully",
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function updateTaskStatus(data) {
  try {
    sql = `UPDATE task SET t_status=${data.t_status} WHERE  t_id  =${data.t_id}`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.affectedRows > 0) {
            resolve({
              status: 1,
              message: "Status Updated Successfully",
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function getTodayLFollowup(data) {
  try {
    let tDate = moment().format("DD-MM-YYYY");
    let record = [];
    getuserquery = `select * from users where u_id=${data.id} and deleted=0`;
    let response = await new Promise((resolve, reject) => {
      con.query(getuserquery, async function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            if (result[0].user_type == 1) {
              getallchilduser = `select * from users where ((p_u_id=${data.id} OR p_u_id=1) and branch_id=${result[0].branch_id}) and deleted=0`;
              con.query(getallchilduser, function (err, res) {
                if (err) {
                  console.log(err);
                  resolve({ status: 0, message: "Something went to wrong" });
                } else {
                  res.forEach(function (r) {
                    record.push(r.u_id);
                  });
                  record.push(data.id);
                  resolve({
                    record: record,
                    type: result[0].user_type,
                    branch_id: result[0].branch_id,
                  });
                }
              });
            } else if (result[0].user_type == 2) {
              let branchallocation = await getzonemanagerbranch(data.id);
              // Jil After Form Link get Lead with their Responsible Person
              getallchilduser = `select * from users where ((p_u_id=${data.id} OR p_u_id=1 OR p_u_id IN (SELECT users.u_id  from users where users.branch_id IN (${branchallocation.branchdata}))) and branch_id IN (${branchallocation.branchdata})) and deleted=0`;
              // getallchilduser = `select * from users where ((p_u_id=${data.id} OR p_u_id=1) and branch_id=${result[0].branch_id}) and deleted=0`;
              con.query(getallchilduser, function (err, res) {
                if (err) {
                  console.log(err);
                  resolve({ status: 0, message: "Something went to wrong" });
                } else {
                  res.forEach(function (r) {
                    record.push(r.u_id);
                  });
                  resolve({
                    record: record,
                    type: result[0].user_type,
                    branch_id: result[0].branch_id,
                  });
                }
              });
            } else {
              resolve({
                type: result[0].user_type,
                branch_id: result[0].branch_id,
              });
            }
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });

    sql123 = `select * from users where branch_id=${response.branch_id} and user_type=1 and deleted=0`;
    let ress = await new Promise((resolve, reject) => {
      con.query(sql123, async function (err1, result1) {
        if (err1) {
          console.log(err1);
          resolve({ status: 0, message: "Something Went Wrong" });
        } else {
          if (result1.length > 0) {
            resolve({ status: 1, u_id: result1[0].u_id });
          } else {
            resolve({ status: 1, message: "No Data" });
          }
        }
      });
    });

    if (response.type == 1 || response.type == 2) {
      getleadquery = `SELECT *,(SELECT  CASE
        WHEN l_source =282 
           THEN (SELECT m_c_name FROM main_customer WHERE m_c_id=l_created_by) 
           ELSE (SELECT u_name FROM users WHERE users.u_id=elead.l_created_by)
   END  )as createdBy,
  (SELECT u_name FROM users WHERE users.u_id=elead.l_allocate_to)as allocatedTo,(SELECT b_name FROM branch WHERE branch.branch_id =elead.l_branch_id)as branch,
  (SELECT name FROM attributes WHERE attributes.attribute_id =elead.l_status)as status,
  (SELECT name FROM attributes WHERE attributes.attribute_id =elead.l_source)as source FROM lead_followup,elead WHERE (STR_TO_DATE("${moment()
          .add(+4, "minute")
          .format(
            "DD-MM-YYYY HH:mm:ss"
          )}", "%d-%m-%Y %H:%i:%s") >= STR_TO_DATE(lead_followup.n_f_date, "%d-%m-%Y %H:%i:%s"))  AND  lead_followup.read_status=0 AND elead.lead_id=lead_followup.lead_id and (elead.l_created_by IN(${record}) or elead.l_allocate_to IN(${record}))`;
    } else {
      getleadquery = `SELECT *,(SELECT  CASE
        WHEN l_source =282 
           THEN (SELECT m_c_name FROM main_customer WHERE m_c_id=l_created_by) 
           ELSE (SELECT u_name FROM users WHERE users.u_id=elead.l_created_by)
   END  )as createdBy,
  (SELECT u_name FROM users WHERE users.u_id=elead.l_allocate_to)as allocatedTo,(SELECT b_name FROM branch WHERE branch.branch_id =elead.l_branch_id)as branch,
  (SELECT name FROM attributes WHERE attributes.attribute_id =elead.l_status)as status,
  (SELECT name FROM attributes WHERE attributes.attribute_id =elead.l_source)as source FROM lead_followup,elead WHERE (STR_TO_DATE("${moment()
          .add(+4, "minute")
          .format(
            "DD-MM-YYYY HH:mm:ss"
          )}", "%d-%m-%Y %H:%i:%s") >= STR_TO_DATE(lead_followup.n_f_date, "%d-%m-%Y %H:%i:%s")) AND lead_followup.read_status=0 AND elead.lead_id=lead_followup.lead_id`;
      if (response.type == 3) {
        getleadquery += ` and (elead.l_created_by=${data.id} or elead.l_allocate_to=${data.id})`;
      }
    }
    let response1 = await new Promise((resolve, reject) => {
      con.query(getleadquery, async function (err, lres) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (lres.length > 0) {
            resolve({
              status: 1,
              counter: lres.length,
              data: lres,
              u_id: ress.u_id,
            });
          } else {
            resolve({
              status: 0,
              counter: 0,
              data: [],
            });
          }
        }
      });
    });
    return response1;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function insertTaskFeedback(data, filename) {
  try {
    if (filename != undefined) {
      sql = `INSERT INTO taskfeedback (t_id,u_id,tf_content,tf_attachment,tf_date) VALUES (${data.t_id},${data.u_id},'${data.tf_content}','${filename}','${data.tf_date}')`;
    } else {
      sql = `INSERT INTO taskfeedback (t_id,u_id,tf_content,tf_date) VALUES (${data.t_id},${data.u_id},'${data.tf_content}','${data.tf_date}')`;
    }
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.affectedRows > 0) {
            sql1 = `UPDATE task SET t_status=2 WHERE t_id=${data.t_id}`;
            con.query(sql1, function (err1, result1) {
              if (err1) {
                console.log(err1);
                resolve({ status: 0, message: "Something went to wrong" });
              } else {
                if (result1.affectedRows > 0) {
                  resolve({
                    status: 1,
                    message: "Task Feedback Insert successfully",
                  });
                }
              }
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function getTaskFeedback(data) {
  try {
    sql = `SELECT * FROM taskfeedback WHERE t_id =${data.id}`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              data: result,
            });
          } else {
            resolve({
              status: 0,
              data: [],
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function updateTaskAllocatedTo(data) {
  try {
    sql = `UPDATE task SET t_branch_id=${data.t_branch_id},allocate_id=${data.allocate_id}  WHERE  t_id  =${data.t_id}`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.affectedRows > 0) {
            resolve({
              status: 1,
              message: "Task Allocated to User Successfully",
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function updateTaskRevision(data, filename) {
  try {
    sql = `UPDATE task SET t_status=1 WHERE  t_id  =${data.t_id}`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.affectedRows > 0) {
            if (filename != undefined) {
              sql1 = `INSERT INTO taskfeedback (t_id,u_id,tf_content,tf_attachment,tf_date) VALUES (${data.t_id},${data.u_id},'${data.tf_content}','${filename}','${data.tf_date}')`;
            } else {
              sql1 = `INSERT INTO taskfeedback (t_id,u_id,tf_content,tf_date) VALUES (${data.t_id},${data.u_id},'${data.tf_content}','${data.tf_date}')`;
            }
            con.query(sql1, function (err1, result1) {
              if (err1) {
                console.log(err1);
                resolve({ status: 0, message: "Something went to wrong" });
              } else {
                if (result1.affectedRows > 0) {
                  resolve({
                    status: 1,
                    message: "Task in Revision",
                  });
                }
              }
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function getTotalTask(data) {
  try {
    let record = [];
    getuserquery = `select * from users where u_id=${data.u_id} and deleted=0`;
    let response = await new Promise((resolve, reject) => {
      con.query(getuserquery, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            if (result[0].user_type == 1) {
              getallchilduser = `select * from users where (p_u_id=${data.u_id} or branch_id=${result[0].branch_id}) and deleted=0`;
              con.query(getallchilduser, function (err, res) {
                if (err) {
                  console.log(err);
                  resolve({ status: 0, message: "Something went to wrong" });
                } else {
                  res.forEach(function (r) {
                    record.push(r.u_id);
                  });
                  resolve({
                    record: record,
                    type: result[0].user_type,
                  });
                }
              });
            } else {
              resolve({
                type: result[0].user_type,
              });
            }
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    if (response.type == 1) {
      sql = `SELECT COUNT(t_id)as t_task FROM task WHERE (u_id IN(${record}) OR allocate_id IN(${record})) AND t_status=${data.t_status} AND deleted=0`;
    } else {
      if (data.u_id == 1) {
        sql = `SELECT COUNT(t_id)as t_task FROM task WHERE  t_status=${data.t_status} AND deleted=0`;
      } else {
        sql = `SELECT COUNT(t_id)as t_task FROM task WHERE u_id=${data.u_id} OR allocate_id=${data.u_id} AND t_status=${data.t_status} AND deleted=0`;
      }
    }
    let response1 = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              data: result[0],
            });
          } else {
            resolve({
              status: 0,
              data: 0,
            });
          }
        }
      });
    });
    return response1;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function getTotalLead(data) {
  try {
    let record = [];
    getuserquery = `select * from users where u_id=${data.u_id} and deleted=0`;
    let response = await new Promise((resolve, reject) => {
      con.query(getuserquery, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            if (result[0].user_type == 1) {
              // getallchilduser = `select * from users where (p_u_id=${data.u_id} or branch_id=${result[0].branch_id}) and deleted=0`;
              getallchilduser = `select * from users where ((p_u_id=${data.u_id} OR p_u_id=1 OR p_u_id IN (SELECT users.u_id  from users where users.branch_id= ${result[0].branch_id})) and branch_id=${result[0].branch_id}) and deleted=0`;
              con.query(getallchilduser, function (err, res) {
                if (err) {
                  console.log(err);
                  resolve({ status: 0, message: "Something went to wrong" });
                } else {
                  res.forEach(function (r) {
                    record.push(r.u_id);
                  });
                  resolve({
                    record: record,
                    type: result[0].user_type,
                  });
                }
              });
            } else {
              resolve({
                type: result[0].user_type,
              });
            }
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });

    if (response.type == 1) {
      sql = `SELECT COUNT(lead_id)as t_lead FROM elead WHERE elead.deleted=0 and l_service=${data.l_service} and (elead.l_created_by IN(${record}) or elead.l_allocate_to IN(${record})) AND elead.l_status != 6 AND elead.convert_status=0`;
    } else {
      if (data.u_id == 1) {
        sql = `SELECT COUNT(lead_id)as t_lead FROM elead WHERE  l_service=${data.l_service}  and deleted=0 AND elead.l_status != 6 AND elead.convert_status=0`;
      } else {
        sql = `SELECT COUNT(lead_id)as t_lead FROM elead,users WHERE elead.deleted=0 AND users.u_id = elead.l_created_by and (l_created_by=${data.u_id} or l_allocate_to=${data.u_id} OR users.marketing_parent_id =${data.u_id}) AND l_service=${data.l_service} AND elead.l_status != 6 AND elead.convert_status=0`;
      }
    }
    // if (response.type == 1) {
    //   sql = `SELECT COUNT(lead_id )as t_lead FROM elead WHERE (l_created_by IN(${record}) OR l_allocate_to IN(${record})) AND l_service=${data.l_service}  and deleted=0`;
    // } else {
    //   if (data.u_id == 1) {
    //     sql = `SELECT COUNT(lead_id )as t_lead FROM elead WHERE  l_service=${data.l_service}  and deleted=0`;
    //   } else {
    //     sql = `SELECT COUNT(lead_id )as t_lead FROM elead WHERE (l_created_by=${data.u_id} OR l_allocate_to=${data.u_id}) AND l_service=${data.l_service}  and deleted=0`;
    //   }
    // }
    let response1 = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              data: result[0],
            });
          } else {
            resolve({
              status: 0,
              data: 0,
            });
          }
        }
      });
    });
    return response1;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function getTotalTodayLead(data, date) {
  try {
    let record = [];
    getuserquery = `select * from users where u_id=${data.u_id} and deleted=0`;
    let response = await new Promise((resolve, reject) => {
      con.query(getuserquery, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            if (result[0].user_type == 1) {
              getallchilduser = `select * from users where (p_u_id=${data.u_id} or branch_id=${result[0].branch_id}) and deleted=0`;
              con.query(getallchilduser, function (err, res) {
                if (err) {
                  console.log(err);
                  resolve({ status: 0, message: "Something went to wrong" });
                } else {
                  res.forEach(function (r) {
                    record.push(r.u_id);
                  });
                  resolve({
                    record: record,
                    type: result[0].user_type,
                  });
                }
              });
            } else {
              resolve({
                type: result[0].user_type,
              });
            }
          }
        }
      });
    });
    if (response.type == 1) {
      sql = `SELECT COUNT(lead_id )as t_lead FROM elead WHERE (l_created_by IN(${record})  OR l_allocate_to IN(${record}) ) AND l_service=${data.l_service} AND l_date='${date}' AND convert_status=0 `;
    } else {
      if (data.u_id == 1) {
        sql = `SELECT COUNT(lead_id )as t_lead FROM elead WHERE  l_service=${data.l_service} AND l_date='${date}'  AND convert_status=0`;
      } else {
        sql = `SELECT COUNT(lead_id )as t_lead FROM elead WHERE (l_created_by=${data.u_id} OR l_allocate_to=${data.u_id}) AND l_service=${data.l_service} AND l_date='${date}'  AND convert_status=0`;
      }
    }

    let response1 = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              data: result[0],
            });
          } else {
            resolve({
              status: 0,
              data: 0,
            });
          }
        }
      });
    });
    return response1;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function getAttributebyid(data) {
  try {
    sql = `SELECT * FROM attributes WHERE type=${data.id} and status=0 order by name ASC`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              result: result,
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function getAttributeNamebyid(data) {
  try {
    sql = `SELECT name FROM attributes WHERE attribute_id=${data.id} and status=0 `;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              result: result[0].name,
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

// async function checkcustomer(data) {
//   try {
//     sql = `SELECT *,(SELECT name FROM attributes WHERE attributes.attribute_id = main_customer.m_c_state)as statename FROM main_customer WHERE m_c_email = '${data.m_c_email}'`;
//     let response = await new Promise((resolve, reject) => {
//       con.query(sql, function (err, result) {
//         if (err) {
//           console.log(err);
//         } else {
//           if (result && result.length) {
//             result.forEach(function (result) {
//               resolve({
//                 status: 1,
//                 result: result,
//                 c_id: result.m_c_id,
//               });
//             });
//           } else {
//             resolve({
//               status: 0,
//               result: [],
//             });
//           }
//         }
//       });
//     });
//     return response;
//   } catch (error) {
//     console.log(error);
//     return { status: 0, message: "Invalid Call Try Again" };
//   }
// }
async function checkcustomer(data) {
  try {
    let mainCustSql = `SELECT *,(SELECT name FROM attributes WHERE attributes.attribute_id = main_customer.m_c_state)as statename FROM main_customer WHERE m_c_email = '${data.m_c_email}' and deleted = 0  `;
    let response = await new Promise((resolve, reject) => {
      con.query(mainCustSql, function (mainCustSql_err, mainCustSql_result) {
        if (mainCustSql_err) {
          console.log(mainCustSql_err);
        } else {
          if (mainCustSql_result && mainCustSql_result.length > 0) {
            let checklead = `SELECT l_allocate_to,l_branch_id,l_created_by,l_created_branch_id FROM elead WHERE l_email = '${data.m_c_email}' and convert_status = 0 and deleted= 0`;

            con.query(checklead, async function (err3, result3) {
              if (err3) {
                console.log(err3);
              } else {
                if (result3 && result3.length > 0) {
                  if (result3[0].l_branch_id == data.branch_id) {
                    let checkleadbranch = `SELECT lead_id,l_allocate_to,l_message,l_email,l_branch_id,l_created_by,l_created_branch_id FROM elead WHERE l_email = '${data.m_c_email}' and l_branch_id = ${result3[0].l_branch_id} and convert_status = 0 and deleted= 0`;
                    con.query(checkleadbranch, async function (err, result) {
                      if (err) {
                        console.log(err);
                      } else {
                        if (result && result.length > 0) {
                          let todayDate = moment().format("DD-MM-YYYY");
                          sql4 = `UPDATE elead SET convert_status=1,convert_date="${todayDate}" WHERE  lead_id =${result[0].lead_id}`;
                          con.query(sql4, async function (err4, result4) {
                            if (err4) {
                              console.log(err4);
                              resolve({
                                status: 0,
                                message: "Something went wrong",
                              });
                            } else {
                              if (result4.affectedRows > 0) {
                                resolve({
                                  status: 1,
                                  result: {
                                    ...mainCustSql_result[0],
                                    l_id: result[0].lead_id,
                                    c_remark: result[0].l_message,
                                    branch_id: result[0].l_branch_id,
                                    u_id: result[0].l_allocate_to,
                                    l_created_by: result[0].l_created_by,
                                    l_created_branch_id: result[0].l_created_branch_id
                                  },
                                  c_id: mainCustSql_result[0].m_c_id,
                                });
                              } else {
                                resolve({
                                  status: 0,
                                  message: "Something went wrong... ",
                                });
                              }
                            }
                          });
                        } else {
                          resolve({
                            status: 1,
                            result: mainCustSql_result[0],
                            c_id: mainCustSql_result[0].m_c_id,
                          });
                        }
                      }
                    });
                  } else {
                    resolve({
                      status: 1,
                      result: mainCustSql_result[0],
                      c_id: mainCustSql_result[0].m_c_id,
                    });
                  }
                } else {
                  resolve({
                    status: 1,
                    result: mainCustSql_result[0],
                    c_id: mainCustSql_result[0].m_c_id,
                  });
                }
              }
            });
          } else {
            let checklead = `SELECT l_allocate_to,l_branch_id,l_created_by,l_created_branch_id FROM elead WHERE l_email = '${data.m_c_email}' and convert_status = 0 and deleted= 0`;

            con.query(checklead, async function (err3, result3) {
              if (err3) {
                console.log(err3);
              } else {
                if (result3 && result3.length > 0) {
                  if (result3[0].l_branch_id == data.branch_id) {
                    let checkleadbranch = `SELECT lead_id as l_id,l_name_prefix as m_c_prefix,l_name as m_c_name,co_no as m_c_mo_no,l_email as m_c_email,l_address as m_c_address,l_allocate_to as u_id,l_branch_id as branch_id,l_message as c_remark,l_created_by,l_created_branch_id FROM elead WHERE l_email = '${data.m_c_email}' and l_branch_id = ${result3[0].l_branch_id} and convert_status = 0 and deleted= 0`;
                    con.query(checkleadbranch, async function (err, result) {
                      if (err) {
                        console.log(err);
                      } else {
                        if (result && result.length > 0) {
                          let todayDate = moment().format("DD-MM-YYYY");
                          sql4 = `UPDATE elead SET convert_status=1,convert_date="${todayDate}" WHERE lead_id =${result[0].l_id}`;
                          con.query(sql4, async function (err4, result4) {
                            if (err4) {
                              console.log(err4);
                              resolve({
                                status: 0,
                                message: "Something went wrong",
                              });
                            } else {
                              if (result4.affectedRows > 0) {
                                resolve({
                                  status: 1,
                                  result: result[0],
                                });
                              } else {
                                resolve({
                                  status: 0,
                                  message: "Something went wrong... ",
                                });
                              }
                            }
                          });
                        } else {
                          resolve({
                            status: 0,
                            result: [],
                          });
                        }
                      }
                    });
                  } else {
                    resolve({
                      status: 0,
                      result: [],
                    });
                  }
                } else {
                  resolve({
                    status: 0,
                    result: [],
                  });
                }
              }
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}


async function insertmaincustomer(data) {
  try {
    let today_date = moment().format("DD-MM-YYYY");
    let status_change_date = moment().format("DD-MM-YYYY HH:mm:ss");
    let pass = Math.floor(Math.random() * 90000) + 10000;
    sqlll = `SELECT u_name FROM users WHERE u_id = ${data.u_id} `;
    let ress = await new Promise((resolve, reject) => {
      con.query(sqlll, async function (err1, result1) {
        if (err1) {
          console.log(err1);
          resolve({ status: 0, message: "Customer Not Updated" });
        } else {
          if (result1.length > 0) {
            resolve({ status: 1, result: result1[0].u_name });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    sql12 = `SELECT b_name FROM branch WHERE branch_id = ${data.branch_id} `;
    let res = await new Promise((resolve, reject) => {
      con.query(sql12, async function (err1, result1) {
        if (err1) {
          console.log(err1);
          resolve({ status: 0, message: "Customer Not Updated" });
        } else {
          if (result1.length > 0) {
            resolve({ status: 1, result: result1[0].b_name });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });

    let senderMailSetting = await sendmessage.getEmailSetting(data.created_id != undefined && data.created_id != null && typeof data.created_id != undefined ? data.created_id : data.inserted_id);

    sqlll = `SELECT u_email FROM users WHERE u_id = ${data.created_id != undefined && data.created_id != null && typeof data.created_id != undefined ? data.created_id : data.inserted_id} `;
    let ccmail = await new Promise((resolve, reject) => {
      con.query(sqlll, async function (err1, result1) {
        if (err1) {
          console.log(err1);
          resolve({
            status: 0,
            message: "Something went to wrong",
          });
        } else {
          if (result1.length > 0) {
            resolve({ status: 1, result: result1[0].u_email });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    // //changes
    let currdate = moment().format("DDMMYYhhmmss");
    let tracking_id = `${res.result.substring(
      0,
      2
    )}${currdate}${ress.result.substring(0, 1)}`;
    sql = `SELECT m_c_id FROM main_customer WHERE m_c_email = '${data.m_c_email}'`;

    let response = await new Promise((resolve, reject) => {
      con.query(sql, async function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0 && data.check == 1) {
            sql1 = `UPDATE main_customer SET m_c_prefix='${data.m_c_prefix
              }',m_c_name='${mysql_real_escape_string(
                data.m_c_name
              )}',m_c_state='${data.m_c_state}',m_c_mo_no='${data.m_c_mo_no
              }',m_c_email='${mysql_real_escape_string(
                data.m_c_email
              )}',m_c_address='${mysql_real_escape_string(
                data.m_c_address
              )}',m_c_gst='${data.m_c_gst}',m_c_state='${data.m_c_state
              }',created_id= ${data.created_id != undefined && data.created_id != null && typeof data.created_id != undefined ? data.created_id : data.inserted_id} WHERE m_c_id=${data.m_c_id} `;
            con.query(sql1, async function (err1, result1) {
              if (err) {
                console.log(err);
                resolve({ status: 0, message: "Customer Not Updated" });
              } else {
                resolve({ status: 1, m_c_id: data.m_c_id });
              }
            });
          } else if (result.length == 0) {
            sql1 = `INSERT INTO main_customer (m_c_prefix,m_c_name,m_c_mo_no,m_c_email,m_c_address,m_c_gst,m_c_state,created_id,password) VALUES ('${data.m_c_prefix
              }','${mysql_real_escape_string(data.m_c_name)}','${data.m_c_mo_no
              }','${mysql_real_escape_string(
                data.m_c_email
              )}','${mysql_real_escape_string(data.m_c_address)}','${data.m_c_gst == undefined ? "" : data.m_c_gst
              }',${data.m_c_state},${data.created_id != undefined && data.created_id != null && typeof data.created_id != undefined ? data.created_id : data.inserted_id},'${pass}') `;

            con.query(sql1, async function (err1, result) {
              if (err1) {
                console.log(err1);
              } else {
                let message = await sendmessage.getTemplate(17);
                if (message.status != 0) {
                  message.template = message.template.replace(
                    "{:name:}",
                    data.m_c_prefix + " " + data.m_c_name
                  );
                  message.template = message.template.replace(
                    "{:username:}",
                    data.m_c_email
                  );
                  message.template = message.template.replace(
                    "{:password:}",
                    pass
                  );
                  let mess =
                    (message.header == 1
                      ? typeof senderMailSetting.email_template_header !=
                        undefined && senderMailSetting.email_template_header != undefined &&
                        senderMailSetting.email_template_header != null
                        ? senderMailSetting.email_template_header
                        : ""
                      : "") +
                    message.template +
                    (message.b_d_id != 0
                      ? message.b_d_id == 1
                        ? senderMailSetting.gst_bankdetails
                        : message.b_d_id == 2
                          ? senderMailSetting.ngst_bankdetails
                          : message.b_d_id == 3
                            ? senderMailSetting.general_bankdetails
                            : ""
                      : "") +
                    // (data.created_id == 1
                    //   ? data.c_tax == 0
                    //     ? senderMailSetting.bank_details
                    //     : senderMailSetting.nongst_bank_details
                    //   : data.c_tax == 0
                    //     ? senderMailSetting.b_bank_details
                    //     : senderMailSetting.b_nongst_bank_deatils) +
                    (message.footer == 1
                      ? senderMailSetting.email_template_footer
                      : "") +
                    (message.signature == 1
                      ? senderMailSetting.email_signature
                      : "");

                  CCMailSetting = await sendmessage.getEmailSetting(1);

                  let sendmessagenow = sendmessage.customermessagesend(
                    senderMailSetting,
                    data.m_c_email,
                    mess,
                    message.subject,
                    "", //CCMailSetting.e_username,  // user mail
                    ccmail.result, // reply mail
                    1,
                    "info@hyderabadattestation.com"
                  );
                }
                if (err1) {
                  resolve({ status: 0, message: "Customer Not Inserted" });
                } else {
                  const insertgroup = await insertGroupChat({ c_name: data.m_c_name, u_name: ress.result, u_id: data.u_id, c_id: result.insertId });
                  resolve({ status: 1, m_c_id: result.insertId });
                }
              }
            });
          } else {
            resolve({ status: 1, m_c_id: data.m_c_id });
          }
        }
      });
    });
    //2703
    let todayDate = moment().format("DD-MM-YYYY");
    let lastTenDay = moment().add(-10, "d").format("DD-MM-YYYY");
    lastTargetSql = `SELECT target_count,DATE_FORMAT(created_timestamp, "%d-%m-%Y") as month FROM customer WHERE c_email  = '${data.m_c_email}' and DATE_FORMAT(created_timestamp, "%d-%m-%Y") <= DATE_FORMAT(STR_TO_DATE('${todayDate}', "%d-%m-%Y") ,"%d-%m-%Y") and DATE_FORMAT(created_timestamp, "%d-%m-%Y") >= DATE_FORMAT(STR_TO_DATE('${lastTenDay}', "%d-%m-%Y") ,"%d-%m-%Y") order by c_id desc limit 1`;
    console.log(lastTargetSql, "lastTargetSqllastTargetSql");
    let target_count_res = await new Promise((resolve, reject) => {
      con.query(
        lastTargetSql,
        async function (lastTargetSql_err, lastTargetSql_result) {
          if (lastTargetSql_err) {
            console.log(lastTargetSql_err);
            resolve({ status: 0, message: "Customer Not Updated" });
          } else {
            if (lastTargetSql_result.length > 0) {
              resolve({
                status: 1,
                result: lastTargetSql_result[0].target_count,
              });
            } else {
              resolve({
                status: 0,
                result: 0,
              });
            }
          }
        }
      );
    });

    const target = target_count_res.result + 1;
    sql1 = `INSERT INTO customer (m_c_id,c_date,c_prefix,c_name,c_mo_no,c_email,c_address,c_gst_no,c_state,c_s_type,c_total_customer,c_tax,c_gst,c_remark,created_id,u_id,branch_id,d_address,tracking_id,created_branch_id,arn_no,f_z_type,city,pincode,target_count,login_u_id) VALUES (${response.m_c_id
      },'${data.c_date}','${data.m_c_prefix}',
            '${mysql_real_escape_string(data.m_c_name)}','${data.m_c_mo_no
      }','${mysql_real_escape_string(
        data.m_c_email
      )}','${mysql_real_escape_string(data.m_c_address)}','${typeof data.m_c_gst == "undefined" ? "" : data.m_c_gst
      }',${data.m_c_state},${data.c_s_type},${data.c_total_customer},${data.c_tax
      },${data.c_gst},'${typeof data.c_remark == "undefined"
        ? ""
        : mysql_real_escape_string(data.c_remark)
      }', ${data.created_id != undefined && data.created_id != null && typeof data.created_id != undefined ? data.created_id : data.inserted_id},${data.u_id},${data.branch_id
      },'${mysql_real_escape_string(data.d_address)}','${mysql_real_escape_string(
        tracking_id
      )}',${data.created_branch_id},'${typeof data.arn_no == "undefined" || data.arn_no == "" ? "" : data.arn_no
      }',${typeof data.f_z_type == "undefined" ? 0 : data.f_z_type},'${typeof data.city == "undefined" ||
        data.city == "undefined" ||
        data.pincode == null ||
        data.city == ""
        ? ""
        : data.city
      }','${typeof data.pincode == "undefined" ||
        data.pincode == "undefined" ||
        data.pincode == null ||
        data.pincode == ""
        ? ""
        : data.pincode
      }',${target},${data.login_u_id})`;

    let response1 = await new Promise((resolve, reject) => {
      con.query(sql1, async function (err1, result1) {
        if (err1) {
          console.log(err1);
          resolve({ status: 0, message: "Customer Not Updated" });
        } else {
          if (result1) {
            resolve({
              status: 1,
              c_id: result1.insertId,
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    if (data.c_s_type == 8) {
      let k = 0;
      amount = await getcustomeramount(data);

      for (i = 0; i < data.applicationdata.length; i++) {
        sql2 = `INSERT INTO visa (c_id,v_prefix,v_name,v_code,v_passport,v_type,v_country,v_supporting_doc,created_id,pg_no,tracking_id,process_limit_date,process_limit_mail_date) VALUES (${response1.c_id
          },'${data.applicationdata[i].v_prefix}','${mysql_real_escape_string(
            data.applicationdata[i].v_name
          )}',${data.applicationdata[i].v_code},'${data.applicationdata[i].v_passport
          }',${data.applicationdata[i].v_type},'${data.applicationdata[
            i
          ].v_country
            .sort()
            .toString()}','${data.applicationdata[
              i
            ].a_supporting_doc.toString()}',${data.created_id != undefined && data.created_id != null && typeof data.created_id != undefined ? data.created_id : data.inserted_id},${data.applicationdata[i].pg_no
          },'${mysql_real_escape_string(tracking_id)}','${data.applicationdata[i].process_limit_date
          }','${data.applicationdata[i].process_limit_date}')`;

        let response2 = await new Promise((resolve, reject) => {
          con.query(sql2, async function (err2, result2) {
            if (err2) {
              console.log(err2);
              resolve({ status: 0, message: "Something went wrong" });
            } else {
              if (result2) {
                resolve({
                  status: 1,
                  result: result2.insertId,
                });
              } else {
                resolve({
                  status: 0,
                  message: "Something went to wrong",
                });
              }
            }
          });
        });

        for (j = 0; j < data.applicationdata[i].v_country.length; j++) {
          sql3 = `INSERT INTO details (service_type,service_id,amount,d_c_id,tracking_id,updated_date,status_mail_date,status_change_date) VALUES (${data.c_s_type
            },${response2.result},${amount.result[k]},${data.applicationdata[i].v_country[j]
            },'${mysql_real_escape_string(
              tracking_id
            )}','${today_date}','${today_date}','${status_change_date}')`;

          k = k + 1;
          let response3 = await new Promise((resolve, reject) => {
            con.query(sql3, async function (err3, result3) {
              if (err3) {
                console.log(err3);
                resolve({ status: 0, message: "Something went wrong" });
              } else {
                if (result3) {
                  resolve({
                    status: 1,
                    result: result3,
                  });
                } else {
                  resolve({
                    status: 0,
                    message: "Something went to wrong",
                  });
                }
              }
            });
          });
        }
      }
    } else {
      amount = await getcustomeramount(data);

      for (i = 0; i < data.applicationdata.length; i++) {
        if (data.c_s_type == 10) {
          sql2 = `INSERT INTO attestation`;
        } else if (data.c_s_type == 17) {
          sql2 = `INSERT INTO apostille`;
        } else {
          sql2 = `INSERT INTO translation`;
        }
        sql2 += `(c_id,a_prefix,a_name,a_code,a_country,a_type,a_certificate,a_supporting_doc,a_extra_doc,created_id,pg_no,tracking_id,process_limit_date,process_limit_mail_date,no_of_certificates) VALUES (${response1.c_id
          },'${data.applicationdata[i].a_prefix}','${mysql_real_escape_string(
            data.applicationdata[i].a_name
          )}',${data.applicationdata[i].a_code},${data.applicationdata[i].a_country
          },${data.applicationdata[i].a_type},
        '${data.applicationdata[i].a_certificate.sort().toString()}',
                      '${typeof data.applicationdata[i].a_supporting_doc ==
            "undefined"
            ? ""
            : data.applicationdata[i].a_supporting_doc.toString()
          }',
                      '${typeof data.applicationdata[i].a_extra_doc ==
            "undefined"
            ? ""
            : data.applicationdata[i].a_extra_doc.toString()
          }',${data.created_id != undefined && data.created_id != null && typeof data.created_id != undefined ? data.created_id : data.inserted_id},${data.applicationdata[i].pg_no
          },'${mysql_real_escape_string(tracking_id)}','${data.applicationdata[i].process_limit_date
          }','${data.applicationdata[i].process_limit_date}',${data.applicationdata[i].no_of_certificates
          })`;

        let response2 = await new Promise((resolve, reject) => {
          con.query(sql2, async function (err2, result2) {
            if (err2) {
              console.log(err2);
              resolve({ status: 0, message: "Something went wrong" });
            } else {
              if (result2) {
                resolve({
                  status: 1,
                  result: result2.insertId,
                });
              } else {
                resolve({
                  status: 0,
                  message: "Something went to wrong",
                });
              }
            }
          });
        });

        for (j = 0; j < data.applicationdata[i].a_certificate.length; j++) {
          sql3 = `INSERT INTO details (service_type,service_id,amount,d_c_id,tracking_id,updated_date,status_mail_date,status_change_date) VALUES (${data.c_s_type
            },${response2.result},${amount.result[i]},${data.applicationdata[i].a_certificate[j]
            },'${mysql_real_escape_string(
              tracking_id
            )}','${today_date}','${today_date}','${status_change_date}')`;
          let response3 = await new Promise((resolve, reject) => {
            con.query(sql3, async function (err3, result3) {
              if (err3) {
                console.log(err3);
                resolve({ status: 0, message: "Something went wrong" });
              } else {
                if (result3) {
                  resolve({
                    status: 1,
                    result: result3,
                  });
                } else {
                  resolve({
                    status: 0,
                    message: "Something went to wrong",
                  });
                }
              }
            });
          });
        }
      }
    }
    //1003
    let responseinvoice = await new Promise((resolve, reject) => {
      if (data.c_tax == "1") {
        // getinvoiceno = `SELECT *,invoice_no FROM payment,customer WHERE payment.c_id=customer.c_id and payment.c_tax = "1" and customer.branch_id=${data.branch_id} and payment.deleted=0 ORDER BY customer.c_id DESC limit 1;`;
        let getinvoiceno = `SELECT *,invoice_no FROM payment JOIN customer ON payment.c_id=customer.c_id and payment.c_tax = "1" and customer.branch_id=${data.branch_id} and payment.deleted=0 ORDER BY payment.payment_id DESC,customer.c_id DESC limit 1;`;
        // const now = new Date();
        // const cvalue = date.format(now, "YY");
        // const currentYear = new Date().getFullYear().toString().slice(-2);
        // const previousYear = currentYear - 1;
        const cvalue = moment().format("MM");
        const last2 = new Date().getFullYear().toString().substring(2);
        const last2Num = Number(last2);
        var today = new Date();
        if (today.getMonth() + 1 <= 3) {
          fiscalyear = last2Num - 1 + "-" + last2Num;
        } else {
          fiscalyear = last2Num + "-" + (last2Num + 1);
        }
        let invoice_no = 0;
        con.query(getinvoiceno, async function (errino, inoresult) {
          if (errino) {
            console.log(errino);
            resolve({ status: 0, message: "Something went wrong" });
          } else {
            //1003
            if (inoresult.length > 0 && inoresult[0].invoice_no != 0) {
              let ino = inoresult[0].invoice_no;
              let n_ino = ino.split("/");
              if (fiscalyear == n_ino[1]) {
                invoice_no =
                  res.result.substring(0, 2) +
                  "/" +
                  fiscalyear +
                  "/" +
                  "g" +
                  cvalue +
                  "/" +
                  ++n_ino[3];
              } else {
                invoice_no =
                  res.result.substring(0, 2) +
                  "/" +
                  fiscalyear +
                  "/" +
                  "g" +
                  cvalue +
                  "/" +
                  1;
              }
            } else {
              invoice_no =
                res.result.substring(0, 2) +
                "/" +
                fiscalyear +
                "/" +
                "g" +
                cvalue +
                "/" +
                1;
            }
            resolve({ status: 1, ino: invoice_no });
          }
        });
      } else {
        //1003
        // getinvoiceno = `SELECT *,invoice_no FROM payment,customer WHERE payment.c_id=customer.c_id and payment.c_tax = "0" and customer.branch_id=${data.branch_id} and payment.deleted=0 ORDER BY customer.c_id DESC limit 1;`;
        let getinvoiceno = `SELECT *,invoice_no FROM payment JOIN customer ON payment.c_id=customer.c_id and payment.c_tax = "0" and customer.branch_id=${data.branch_id} and payment.deleted=0 ORDER BY payment.payment_id DESC,customer.c_id DESC limit 1;`;
        // const now = new Date();
        // const cvalue = date.format(now, "YY");
        // const currentYear = new Date().getFullYear().toString().slice(-2);
        // const previousYear = currentYear - 1;
        const cvalue = moment().format("MM");
        const last2 = new Date().getFullYear().toString().substring(2);
        const last2Num = Number(last2);
        var today = new Date();
        if (today.getMonth() + 1 <= 3) {
          fiscalyear = last2Num - 1 + "-" + last2Num;
        } else {
          fiscalyear = last2Num + "-" + (last2Num + 1);
        }
        let invoice_no = 0;
        con.query(getinvoiceno, async function (errino, inoresult) {
          if (errino) {
            console.log(errino);
            resolve({ status: 0, message: "Something went wrong" });
          } else {
            //1003
            if (inoresult.length > 0 && inoresult[0].invoice_no != 0) {
              let ino = inoresult[0].invoice_no;
              let n_ino = ino.split("/");
              if (fiscalyear == n_ino[1]) {
                invoice_no =
                  res.result.substring(0, 2) +
                  "/" +
                  fiscalyear +
                  "/" +
                  cvalue +
                  "/" +
                  ++n_ino[3];
              } else {
                invoice_no =
                  res.result.substring(0, 2) +
                  "/" +
                  fiscalyear +
                  "/" +
                  cvalue +
                  "/" +
                  1;
              }
            } else {
              invoice_no =
                res.result.substring(0, 2) +
                "/" +
                fiscalyear +
                "/" +
                cvalue +
                "/" +
                1;
            }
            resolve({ status: 1, ino: invoice_no });
          }
        });
      }
    });

    lastpayment = `SELECT p_receipt_no FROM payment WHERE (receive_amt!='' AND receive_amt!=0) order by payment_id  DESC limit 1`;
    const rlast2 = new Date().getFullYear().toString().substring(2);
    const rlast2Num = Number(rlast2);
    var rtoday = new Date();
    let financialYear;
    if (rtoday.getMonth() + 1 <= 3) {
      financialYear = rlast2Num - 1 + "-" + rlast2Num;
    } else {
      financialYear = rlast2Num + "-" + (rlast2Num + 1);
    }
    let rec_no = 0;
    let response11 = await new Promise((resolve, reject) => {
      con.query(lastpayment, function (err1, result1) {
        if (err1) {
          console.log(err1);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result1.length > 0 && result1[0].p_receipt_no != 0) {
            let rno = result1[0].p_receipt_no;
            let n_rno = rno.split("_");
            if (financialYear == n_rno[0]) {
              rec_no = financialYear + "_" + ++n_rno[1];
            } else {
              rec_no = financialYear + "_" + 1;
            }
          } else {
            rec_no = financialYear + "_" + 1;
          }
          resolve({
            status: 1,
            result: rec_no,
          });
        }
      });
    });
    // let rec_no = parseInt(response11.result) + 1;
    sql4 = `INSERT INTO payment(payment_date,c_id,total_amount,courier,embassy_fees,dis_amt,net_amt,sgst,cgst,igst,created_id,due_amt,u_id,tracking_id,invoice_no,p_receipt_no,exp_charge,coupon_amt,c_tax,created_branch_id) VALUES ('${data.c_date
      }',${response1.c_id},'${data.total_amount}',
                '${data.courier}','${data.embassy_fees}','${data.dis_amt}','${data.net_amt
      }','${data.sgst}','${data.cgst}','${data.igst}',${data.created_id != undefined && data.created_id != null && typeof data.created_id != undefined ? data.created_id : data.inserted_id},'${data.net_amt
      }',${data.u_id},'${mysql_real_escape_string(tracking_id)}','${responseinvoice.ino
      }','${rec_no}','${data.exp_charge}','${data.coupon_amt}','${data.c_tax}',${data.created_branch_id
      })`;
    let response4 = await new Promise((resolve, reject) => {
      con.query(sql4, async function (err4, result4) {
        if (err4) {
          console.log(err4);
          resolve({ status: 0, message: "Something went wrong" });
        } else {
          if (result4) {
            let message = await sendmessage.getTemplate(
              data.c_tax == "1" ? 234 : 235
            );
            if (message.status != 0) {
              message.template = message.template.replace(
                "{:name:}",
                data.m_c_prefix + " " + data.m_c_name
              );
              let mess =
                (message.header == 1
                  ? typeof senderMailSetting.email_template_header !=
                    undefined && senderMailSetting.email_template_header != undefined &&
                    senderMailSetting.email_template_header != null
                    ? senderMailSetting.email_template_header
                    : ""
                  : "") +
                message.template +
                (message.b_d_id != 0
                  ? message.b_d_id == 1
                    ? senderMailSetting.gst_bankdetails
                    : message.b_d_id == 2
                      ? senderMailSetting.ngst_bankdetails
                      : message.b_d_id == 3
                        ? senderMailSetting.general_bankdetails
                        : ""
                  : "") +
                // (data.created_id == 1
                //   ? data.c_tax == 0
                //     ? senderMailSetting.bank_details
                //     : senderMailSetting.nongst_bank_details
                //   : data.c_tax == 0
                //     ? senderMailSetting.b_bank_details
                //     : senderMailSetting.b_nongst_bank_deatils) +
                (message.footer == 1
                  ? senderMailSetting.email_template_footer
                  : "") +
                (message.signature == 1
                  ? senderMailSetting.email_signature
                  : "");

              CCMailSetting = await sendmessage.getEmailSetting(1);
              //0304
              let sendmessagenow = sendmessage.custommailsend(
                senderMailSetting,
                data.m_c_email,
                mess,
                message.subject,
                message.attachment,
                "", //CCMailSetting.e_username,  // user mail
                ccmail.result, // reply mail
                1,
                "info@hyderabadattestation.com"
              );
            }
            resolve({
              status: 1,
              message: "Customer Inserted Successfully....",
              c_id: response1.c_id,
              u_id: data.created_id != undefined && data.created_id != null && typeof data.created_id != undefined ? data.created_id : data.inserted_id,
              login_u_id: data.login_u_id,
              branch_id: data.branch_id,
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    return response4;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function getpaymentdetail(data) {
  try {
    sql1 = `SELECT user_type FROM users WHERE u_id = ${data.uid} and deleted =0`;

    let response1 = await new Promise((resolve, reject) => {
      con.query(sql1, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            result.forEach(function (result) {
              resolve({
                status: 1,
                user_type: result.user_type,
              });
            });
          } else {
            resolve({
              status: 0,
              user_type: "Something went wrong...",
            });
          }
        }
      });
    });

    // sql = `SELECT *,(SELECT COUNT(*) FROM payment WHERE deleted =0 AND receive_amt != 0 )as trows,(SELECT c_name FROM customer WHERE customer.c_id = payment.c_id AND deleted = 0)AS c_name,(SELECT c_prefix FROM customer WHERE customer.c_id = payment.c_id AND deleted = 0)AS c_prefix,(SELECT branch_id FROM customer WHERE customer.c_id = payment.c_id AND deleted = 0)AS branch_id,(SELECT name FROM attributes WHERE attributes.attribute_id = payment.mode_id)AS mode_name FROM payment WHERE deleted = 0 AND receive_amt != 0  ORDER BY payment.payment_id DESC limit ${(data.page - 1) * data.perpage
    //   },${data.perpage}  `;
    sql = `SELECT *,(SELECT name FROM attributes WHERE attributes.attribute_id = payment.mode_id)AS mode_name ,(SELECT b_name FROM branch WHERE branch.branch_id = customer.branch_id) as branch_name FROM payment join customer on payment.c_id = customer.c_id WHERE payment.deleted=0 and payment.receive_amt!=0`;
    if (response1.user_type == 3) {
      sql += ` and payment.u_id=${data.uid}`;
    }
    if (response1.user_type == 1) {
      sql += ` and customer.branch_id= ${data.bid}`;
    }
    countquery = sql;
    sql += ` ORDER BY payment.payment_id DESC limit ${(data.page - 1) * data.perpage
      },${data.perpage}`;

    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            con.query(countquery, function (err, cres) {
              if (cres.length > 0) {
                resolve({
                  status: 1,
                  result: result,
                  trows: cres.length,
                });
              }
            });
            // resolve({
            //   status: 1,
            //   result: result,
            // });
          } else {
            resolve({ status: 1, result: [] });
          }
        }
      });
    });

    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function getcustomeramount(data) {
  try {
    let record = [];
    let data1 = [];
    let sql = "";
    if (data.l_service != undefined) {
      if (data.l_service == 8) {
        for (i = 0; i < data.applicationdata.length; i++) {
          for (j = 0; j < data.applicationdata[i].v_country.length; j++) {
            sql += `SELECT s_amount FROM serviceprice WHERE service = ${data.l_service}  AND country = ${data.applicationdata[i].v_country[j]} AND s_type = ${data.applicationdata[i].v_type} AND deleted = 0;`;
          }
        }
      } else {
        for (i = 0; i < data.applicationdata.length; i++) {
          sql += `SELECT s_amount FROM serviceprice WHERE service = ${data.l_service}  AND country = ${data.applicationdata[i].a_country} AND s_type = ${data.applicationdata[i].a_type}  AND deleted = 0;`;
        }
      }
    } else {
      if (data.c_s_type == 8) {
        for (i = 0; i < data.applicationdata.length; i++) {
          for (j = 0; j < data.applicationdata[i].v_country.length; j++) {
            sql += `SELECT s_amount FROM serviceprice WHERE service = ${data.c_s_type}  AND country = ${data.applicationdata[i].v_country[j]} AND s_type = ${data.applicationdata[i].v_type}  AND deleted = 0;`;
          }
        }
      } else {
        for (i = 0; i < data.applicationdata.length; i++) {
          sql += `SELECT s_amount FROM serviceprice WHERE service = ${data.c_s_type}  AND country = ${data.applicationdata[i].a_country} AND s_type = ${data.applicationdata[i].a_type}  AND deleted = 0;`;
        }
      }
    }

    let response = await new Promise((resolve, reject) => {
      con.query(sql, async function (err, results) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went wrong" });
        } else {
          if (results.length == 1) {
            results.forEach(function (res) {
              record.push(res.s_amount);
              data1.push(res);

              resolve({
                result: record,
                data: data1,
              });
            });
            resolve({
              data: data1,
              result: record,
            });
          }
          if (results.length > 1) {
            results.forEach(function (result) {
              if (result.length > 0) {
                result.forEach(function (res) {
                  record.push(res.s_amount);
                  data1.push(res);

                  resolve({
                    data: data1,
                    result: record,
                  });
                });
              } else {
                record.push(0);
                data1.push(0);

                resolve({
                  data: data1,
                  result: record,
                });
              }
            });
          } else {
            resolve({
              data: [],
              result: [0],
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function updatepayment(data, tdate) {
  try {
    sql2 = `SELECT c_email,c_s_type,c_tax,c_prefix,c_name,created_id,under_process_date FROM customer WHERE c_id = ${data.c_id} AND deleted = 0;`;

    let response2 = await new Promise((resolve, reject) => {
      con.query(sql2, async function (err, results) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (results.length > 0) {
            // results.forEach(function (result) {
            resolve({
              status: 1,
              result: results[0].c_email,
              type: results[0].c_s_type,
              c_tax: results[0].c_tax,
              c_name: results[0].c_name,
              under_process_date: results[0].under_process_date,
              created_id: results[0].created_id,
            });
            // });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });

    let sql = `SELECT paid_amt,due_amt FROM payment WHERE c_id = ${data.c_id} AND deleted=0 order BY payment_id desc`;

    let response = await new Promise((resolve, reject) => {
      con.query(sql, async function (err, results) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (results.length > 0) {
            results.forEach(function (result) {
              resolve({
                status: 1,
                paid_amt: result.paid_amt,
                due_amt: result.due_amt,
              });
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    const totalDraft = await getTotalDraft(data.c_id);
    let sql1 = "";
    if (data.dr_status == 1) {
      lastpayment = `SELECT p_receipt_no FROM draft_payment WHERE deleted= 0 and (receive_amt!='' AND receive_amt!=0) order by d_p_id  DESC limit 1`;

      const rlast2 = new Date().getFullYear().toString().substring(2);
      const rlast2Num = Number(rlast2);
      var rtoday = new Date();
      let financialYear;
      if (rtoday.getMonth() + 1 <= 3) {
        financialYear = rlast2Num - 1 + "-" + rlast2Num;
      } else {
        financialYear = rlast2Num + "-" + (rlast2Num + 1);
      }
      let rec_no = 0;
      let response11 = await new Promise((resolve, reject) => {
        con.query(lastpayment, function (err1, result1) {
          if (err1) {
            console.log(err1);
            resolve({ status: 0, message: "Something went to wrong" });
          } else {
            if (result1.length > 0 && result1[0].p_receipt_no != 0) {
              let rno = result1[0].p_receipt_no;
              let n_rno = rno.split("_");
              if (financialYear == n_rno[0]) {
                rec_no = financialYear + "_" + ++n_rno[1];
              } else {
                rec_no = financialYear + "_" + 1;
              }
            } else {
              rec_no = financialYear + "_" + 1;
            }
            resolve({
              status: 1,
              result: rec_no,
            });
          }
        });
      });
      // let rec_no = parseInt(response11.result) + 1;
      sql1 = `INSERT INTO draft_payment(payment_date,c_id,total_amount,extra_amt,courier,service_tax,mode_id,payment_desc,chk_dd_no,chk_dd_date,embassy_fees,dis_amt,net_amt,paid_amt,due_amt,sgst,cgst,igst,created_id,receive_amt,u_id,is_tds,tds_amt,invoice_no,tracking_id,bank_name,coupon_amt,exp_charge,c_tax,p_receipt_no,created_branch_id,is_draft_taken) VALUES ('${data.payment_date
        }',${data.c_id},'${data.total_amount}','${data.extra_amt}',
        '${data.courier}','${data.service_tax}',${data.mode_id},'${data.payment_desc != "null" ? data.payment_desc : ""
        }','${data.chk_dd_no != "null" ? data.chk_dd_no : ""}','${data.mode_id != 160 ? data.chk_dd_date : ""
        }','${data.embassy_fees}','${data.dis_amt}','${data.net_amt}','${parseInt(data.paid_amt) + parseInt(data.receive_amt)
        }','${parseInt(data.due_amt) - parseInt(data.receive_amt)}','${data.sgst
        }','${data.cgst}','${data.igst}',${data.created_id},'${data.receive_amt
        }',${data.u_id},${data.is_tds},'${data.tds_amt}','${data.invoice_no}','${data.tracking_id
        }','${data.bank_name != "null" ? data.bank_name : ""}','${data.coupon_amt
        }','${data.exp_charge}','${response2.c_tax}','${rec_no}',${data.created_branch_id
        },${data.is_tds == 1 ? 1 : 0})`;
      let response1 = await new Promise((resolve, reject) => {
        if (
          parseFloat(data.receive_amt) <=
          parseFloat(response.due_amt) - parseFloat(totalDraft.result)
        ) {
          con.query(sql1, async function (err, result) {
            //grishma
            if (err) {
              console.log(err);
            } else {
              if (result.affectedRows > 0) {
                //2303
                if (response.paid_amt == 0) {
                  if (
                    response2.under_process_date == null ||
                    response2.under_process_date == undefined ||
                    response2.under_process_date == ""
                  ) {
                    let updatecust = `Update customer SET under_process_date = '${tdate}' where c_id = ${data.c_id} and deleted= 0`;
                    let resp = await new Promise((resolve, reject) => {
                      con.query(
                        updatecust,
                        async function (custerr1, custresult1) {
                          if (custerr1) {
                            resolve({
                              status: 0,
                              message: "something went wrong",
                            });
                          }
                          if (custresult1.affectedRows > 0) {
                            resolve({
                              status: 1,
                              message: "Process Date Changed",
                            });
                          } else {
                            resolve({ status: 0, message: "No data found" });
                          }
                        }
                      );
                    });
                  }
                }
                sql12 = `SELECT * FROM draft_payment join customer on draft_payment.c_id = customer.c_id WHERE draft_payment.deleted=0 and draft_payment.receive_amt!=0 and d_p_id = ${result.insertId} `;
                let res = await new Promise((resolve, reject) => {
                  con.query(sql12, async function (err1, result1) {
                    if (err1) {
                      resolve({ status: 0, message: "something went wrong" });
                    }
                    if (result1.length > 0) {
                      // let updatecust = `Update customer SET under_process_date = '${tdate}' where c_id = ${data.c_id} and deleted= 0`;
                      // let resp = await new Promise((resolve, reject) => {
                      //   con.query(
                      //     updatecust,
                      //     async function (custerr1, custresult1) {
                      //       if (custerr1) {
                      //         resolve({
                      //           status: 0,
                      //           message: "something went wrong",
                      //         });
                      //       }
                      //       if (custresult1.affectedRows > 0) {
                      //         resolve({
                      //           status: 1,
                      //           message: "Process Date Changed",
                      //         });
                      //       } else {
                      //         resolve({ status: 0, message: "No data found" });
                      //       }
                      //     }
                      //   );
                      // });
                      resolve({ status: 1, result: result1 });
                    } else {
                      resolve({ status: 0, message: "No data found" });
                    }
                  });
                });
                if (response.paid_amt == 0) {
                  if (response2.type == 8) {
                    sql2 = `SELECT visa.v_id,details.detail_id,details.status_id FROM visa,details WHERE visa.v_id=details.service_id AND service_type=8 AND visa.deleted=0 AND details.deleted=0 AND visa.c_id=${data.c_id}`;
                  } else if (response2.type == 10) {
                    sql2 = `SELECT attestation.a_id,details.detail_id,details.status_id FROM attestation,details WHERE attestation.a_id=details.service_id AND service_type=10 AND attestation.deleted=0 AND details.deleted=0 AND attestation.c_id=${data.c_id}`;
                  } else if (response2.type == 17) {
                    sql2 = `SELECT apostille.a_id,details.detail_id,details.status_id FROM apostille,details WHERE apostille.a_id=details.service_id AND service_type=17 AND apostille.deleted=0 AND details.deleted=0 AND apostille.c_id=${data.c_id}`;
                  } else {
                    sql2 = `SELECT translation.a_id,details.detail_id,details.status_id FROM translation,details WHERE translation.a_id=details.service_id AND service_type=20 AND translation.deleted=0 AND details.deleted=0 AND translation.c_id=${data.c_id}`;
                  }
                  let response3 = await new Promise((resolve, reject) => {
                    con.query(sql2, async function (err2, result2) {
                      if (err2) {
                        resolve({
                          status: 0,
                          message: "Something went to wrong",
                        });
                      }
                      if (result2.length > 0) {
                        let record = [];
                        result2.forEach((k) => {
                          let newobj = {
                            detail_id: k.detail_id,
                            status_id: k.status_id,
                          };
                          record.push(newobj);
                        });
                        resolve({
                          result: record,
                        });
                      } else {
                        resolve({
                          status: 0,
                          message: "Something went to wrong",
                        });
                      }
                    });
                  });
                  let curr_date = moment().format("DD-MM-YYYY");
                  response3.result.map((res) => {
                    sql4 = `UPDATE details SET status_id=21,under_process_date='${tdate}',status_mail_date='${curr_date}' WHERE detail_id =${res.detail_id} and (status_id = 16 OR status_id = 20)`;
                    con.query(sql4, async function (err4, result4) {
                      if (err4) {
                        resolve({
                          status: 0,
                          message: "Something went to wrong",
                        });
                      }
                      if (result4.affectedRows > 0) {
                        //0903
                        const updated_date = moment().format(
                          "DD-MM-YYYY HH:mm:ss"
                        );
                        sq1 = `INSERT INTO status_activity_log(old_status_id,new_status_id,updated_date,detail_id,u_id) VALUES(${res.status_id},21,'${updated_date}',${res.detail_id},${data.u_id})`;
                        let res11 = await new Promise((resolve, reject) => {
                          con.query(sq1, function (er, res) {
                            if (er) {
                              resolve({
                                status: 0,
                                message: "Something went to wrong",
                              });
                            }
                            if (res.affectedRows > 0) {
                              resolve({
                                status: 1,
                                message:
                                  "Activity log inserted successfully...",
                              });
                            }
                          });
                        });
                      } else {
                        resolve({
                          status: 0,
                          message: "Something went to wrong",
                        });
                      }
                    });
                  });
                }
                resolve({
                  status: 1,
                  data: res.result[0],
                  message: "Payment Updated successfully",
                });
              } else {
                resolve({ status: 0, message: "Something went to wrong" });
              }
            }
          });
        } else {
          resolve({
            status: 0,
            message: "Recieve Amount must be smaller then Due amount",
          });
        }
      });

      return response1;
    } else {
      paymentrecord = `SELECT * FROM payment WHERE c_id = ${data.c_id} and deleted = 0 ORDER BY payment_id DESC limit 1;`;
      let payment = await new Promise((resolve, reject) => {
        con.query(paymentrecord, async function (err, result) {
          if (err) {
            console.log(err);
            resolve({ status: 0, message: "Customer Not Updated" });
          } else {
            if (result.length > 0) {
              resolve({
                status: 1,
                result: result[0].payment_id,
                due_amt: result[0].due_amt,
              });
            } else {
              resolve({
                status: 0,
                result: 0,
                message: "Something went to wrong",
              });
            }
          }
        });
      });

      let response1 = await new Promise(async (resolve, reject) => {
        if (
          parseFloat(data.receive_amt) <=
          parseFloat(payment.due_amt) - parseFloat(totalDraft.result)
        ) {
          if (response.paid_amt == 0) {
            sql1 = `UPDATE payment SET payment_date='${data.payment_date
              }',mode_id=${data.mode_id},paid_amt= '${data.receive_amt
              }',	due_amt='${parseInt(data.due_amt) - parseInt(data.receive_amt)
              }',receive_amt='${data.receive_amt}',is_tds = ${data.is_tds
              },tds_amt = '${data.tds_amt}',invoice_no='${data.invoice_no
              }',tracking_id='${data.tracking_id}',u_id =${data.u_id
              },embassy_fees='${data.embassy_fees}',bank_name='${data.bank_name != "null" ? data.bank_name : ""
              }',chk_dd_date='${data.chk_dd_date}',chk_dd_no='${data.chk_dd_no != "null" ? data.chk_dd_no : ""
              }',is_draft_taken=${data.is_tds == 1 ? 1 : 0},created_id=${data.created_id
              } WHERE payment_id=${payment.result}  AND deleted = 0  `;
          } else {
            lastpayment = `SELECT p_receipt_no FROM payment WHERE (receive_amt!='' AND receive_amt!=0) order by payment_id  DESC limit 1`;
            const rlast2 = new Date().getFullYear().toString().substring(2);
            const rlast2Num = Number(rlast2);
            var rtoday = new Date();
            let financialYear;
            if (rtoday.getMonth() + 1 <= 3) {
              financialYear = rlast2Num - 1 + "-" + rlast2Num;
            } else {
              financialYear = rlast2Num + "-" + (rlast2Num + 1);
            }
            let rec_no = 0;
            let response11 = await new Promise((resolve, reject) => {
              con.query(lastpayment, function (err1, result1) {
                if (err1) {
                  console.log(err1);
                  resolve({ status: 0, message: "Something went to wrong" });
                } else {
                  if (result1.length > 0 && result1[0].p_receipt_no != 0) {
                    let rno = result1[0].p_receipt_no;
                    let n_rno = rno.split("_");
                    if (financialYear == n_rno[0]) {
                      rec_no = financialYear + "_" + ++n_rno[1];
                    } else {
                      rec_no = financialYear + "_" + 1;
                    }
                  } else {
                    rec_no = financialYear + "_" + 1;
                  }
                  resolve({
                    status: 1,
                    result: rec_no,
                  });
                }
              });
            });
            // let rec_no = parseInt(response11.result) + 1;
            sql1 = `INSERT INTO payment(payment_date,c_id,total_amount,extra_amt,courier,service_tax,mode_id,payment_desc,chk_dd_no,chk_dd_date,embassy_fees,dis_amt,net_amt,paid_amt,due_amt,sgst,cgst,igst,created_id,receive_amt,u_id,is_tds,tds_amt,invoice_no,tracking_id,bank_name,coupon_amt,exp_charge,c_tax,p_receipt_no,created_branch_id,is_draft_taken) VALUES ('${data.payment_date
              }',${data.c_id},'${data.total_amount}','${data.extra_amt}',
      '${data.courier}','${data.service_tax}',${data.mode_id},'${data.payment_desc != "null" ? data.payment_desc : ""
              }','${data.chk_dd_no != "null" ? data.chk_dd_no : ""}','${data.mode_id != 160 ? data.chk_dd_date : ""
              }','${data.embassy_fees}','${data.dis_amt}','${data.net_amt}','${parseInt(data.paid_amt) + parseInt(data.receive_amt)
              }','${parseInt(data.due_amt) - parseInt(data.receive_amt)}','${data.sgst
              }','${data.cgst}','${data.igst}',${data.created_id},'${data.receive_amt
              }',${data.u_id},${data.is_tds},'${data.tds_amt}','${data.invoice_no
              }','${data.tracking_id}','${data.bank_name != "null" ? data.bank_name : ""
              }','${data.coupon_amt}','${data.exp_charge}','${response2.c_tax
              }','${rec_no}',${data.created_branch_id},${data.is_tds == 1 ? 1 : 0
              })`;
          }

          let date_ob = moment(data.payment_date, "DD-MM-YYYY").format(
            "YYYY-MM-DD"
          );
          let date = new Date(date_ob);

          date.setDate(date.getDate() + 3);

          let td = date.getDate();

          con.query(sql1, async function (err, result) {
            if (err) {
              console.log(err);
            } else {
              if (result.affectedRows > 0) {
                //grishma
                if (response.paid_amt == 0) {
                  if (
                    response2.under_process_date == null ||
                    response2.under_process_date == undefined ||
                    response2.under_process_date == ""
                  ) {
                    let updatecust = `Update customer SET under_process_date = '${tdate}' where c_id = ${data.c_id} and deleted= 0`;
                    let resp = await new Promise((resolve, reject) => {
                      con.query(
                        updatecust,
                        async function (custerr1, custresult1) {
                          if (custerr1) {
                            resolve({
                              status: 0,
                              message: "something went wrong",
                            });
                          }
                          if (custresult1.affectedRows > 0) {
                            resolve({
                              status: 1,
                              message: "Process Date Changed",
                            });
                          } else {
                            resolve({ status: 0, message: "No data found" });
                          }
                        }
                      );
                    });
                  }
                }
                const isFullPaid = await getpayment({ id: data.c_id });
                let custSql = `SELECT created_id,marketing_user,created_branch_id FROM customer WHERE c_id = ${data.c_id} AND customer.target_count = 1 AND deleted = 0;`;
                let cust_created_id = await new Promise((resolve, reject) => {
                  con.query(custSql, async function (err, results) {
                    if (err) {
                      console.log(err);
                      resolve({
                        status: 0,
                        message: "Something went to wrong",
                      });
                    } else {
                      if (results.length > 0) {
                        resolve({
                          status: 1,
                          created_id: results[0].created_id,
                          marketing_user: results[0].marketing_user,
                          branch_id: results[0].created_branch_id,
                        });
                      } else {
                        resolve({
                          status: 1,
                          created_id: 0,
                          marketing_user: 0,
                          branch_id: 0
                        });
                      }
                    }
                  });
                });
                console.log(cust_created_id, "dhruvi");
                if (cust_created_id.created_id != 0) {
                  const uCommission = await getUserCommision(
                    cust_created_id.created_id
                  );
                  let u_Commission;
                  if (
                    cust_created_id.marketing_user != 0 &&
                    cust_created_id.marketing_user != null
                  ) {
                    u_Commission = await getUserCommision(
                      cust_created_id.marketing_user
                    );
                  }
                  const commision_date = moment().format("DD-MM-YYYY");
                  if (isFullPaid.payment.due_amt == 0) {
                    console.log("ifffffffffff1111111111111");
                    let sq1 = "";
                    sq1 = `INSERT INTO user_commision_payment(u_id,created_id,commision_date,c_amount,c_id,p_u_id,p_branch_id) VALUES(${cust_created_id.created_id
                      },${data.u_id},'${mysql_real_escape_string(
                        commision_date
                      )}',${uCommission.u_commission},${data.c_id},${cust_created_id.created_id},${cust_created_id.branch_id});`;
                    if (
                      cust_created_id.marketing_user != 0 &&
                      cust_created_id.marketing_user != null
                    ) {
                      sq1 += `INSERT INTO user_commision_payment(u_id,created_id,commision_date,c_amount,c_id,p_u_id,p_branch_id) VALUES(${cust_created_id.marketing_user
                        },${data.u_id},'${mysql_real_escape_string(
                          commision_date
                        )}',${u_Commission.u_commission},${data.c_id},${cust_created_id.created_id},${cust_created_id.branch_id});`;
                    }
                    let res11 = await new Promise((resolve, reject) => {
                      con.query(sq1, function (er, res) {
                        if (er) {
                          console.log(er);
                          resolve({
                            status: 0,
                            message: "Something went to wrong",
                          });
                        } else {
                          if (res.affectedRows > 0) {
                            resolve({
                              status: 1,
                              message:
                                "User commission inserted successfully...",
                            });
                          } else {
                            resolve({
                              status: 0,
                              message: "Something went to wrong",
                            });
                          }
                        }
                      });
                    });

                    updateamt = `UPDATE users SET u_total_commision=u_total_commision+${uCommission.u_commission}  WHERE u_id=${cust_created_id.created_id};`;
                    if (
                      cust_created_id.marketing_user != 0 &&
                      cust_created_id.marketing_user != null
                    ) {
                      updateamt += `UPDATE users SET u_total_commision=u_total_commision+${u_Commission.u_commission}  WHERE u_id=${cust_created_id.marketing_user};`;
                    }
                    console.log(updateamt, "##sssfsdfsdf");

                    let res12 = await new Promise((resolve, reject) => {
                      con.query(updateamt, function (er, res) {
                        if (er) {
                          console.log(er);
                          resolve({
                            status: 0,
                            message: "Something went to wrong",
                          });
                        } else {
                          if (res.affectedRows > 0) {
                            resolve({
                              status: 1,
                              message:
                                "Users commission updated successfully...",
                            });
                          } else {
                            resolve({
                              status: 0,
                              message: "Something went to wrong",
                            });
                          }
                        }
                      });
                    });
                  }
                }

                sql12 = `SELECT * FROM payment join customer on payment.c_id = customer.c_id WHERE payment.deleted=0 and payment.receive_amt!=0 and payment_id = ${response.paid_amt == 0 ? data.payment_id : result.insertId
                  } `;
                let res = await new Promise((resolve, reject) => {
                  con.query(sql12, async function (err1, result1) {
                    if (err1) {
                      resolve({ status: 0, message: "something went wrong" });
                    }
                    if (result1.length > 0) {
                      resolve({ status: 1, result: result1 });
                    } else {
                      resolve({ status: 0, message: "No data found" });
                    }
                  });
                });
                resolve({
                  status: 1,
                  data: res.result[0],
                  message: "Payment Updated successfully",
                });

                // var task = cron.schedule(
                //   `00 00 ${td} * *}`,
                //   async () => {
                //     let date1 = moment(date).format("DD-MM-YYYY");
                //     let curr_date = moment().format("DD-MM-YYYY");
                //     if (date1 == curr_date) {
                //       let senderMailSetting = await sendmessage.getEmailSetting(
                //         data.created_id
                //       );

                //       sqlll = `SELECT u_email FROM users WHERE u_id = ${data.created_id} `;
                //       let ccmail = await new Promise((resolve, reject) => {
                //         con.query(sqlll, async function (err1, result1) {
                //           if (err1) {
                //             resolve({
                //               status: 0,
                //               message: "Something went to wrong",
                //             });
                //           }
                //           if (result1.length > 0) {
                //             resolve({ status: 1, result: result1[0].u_email });
                //           } else {
                //             resolve({
                //               status: 0,
                //               message: "Something went to wrong",
                //             });
                //           }
                //         });
                //       });

                //       let message = await sendmessage.getTemplate(3);
                //       if (message.status != 0) {
                //         message.template = message.template.replace(
                //           "{:name:}",
                //           response2.c_prefix + " " + response2.c_name
                //         );
                //         let mess =
                //           (message.header == 1
                //             ? senderMailSetting.email_template_header
                //             : "") +
                //           message.template +
                //           (message.b_d_id != 0
                //             ? message.b_d_id == 1
                //               ? senderMailSetting.gst_bankdetails
                //               : message.b_d_id == 2
                //               ? senderMailSetting.ngst_bankdetails
                //               : message.b_d_id == 3
                //               ? senderMailSetting.general_bankdetails
                //               : ""
                //             : "") +
                //           (message.footer == 1
                //             ? senderMailSetting.email_template_footer
                //             : "") +
                //           (message.signature == 1
                //             ? senderMailSetting.email_signature
                //             : "");

                //         CCMailSetting = await sendmessage.getEmailSetting(1);

                //         sendmessagenow = sendmessage.customermessagesend(
                //           senderMailSetting,
                //           response2.result,
                //           mess,
                //           message.subject,
                //           ccmail.result, //CCMailSetting.e_username,  // user mail
                //           ccmail.result, // reply mail
                //           1
                //         );
                //       }
                //       if (message.status != 0 && sendmessagenow.status == 1) {
                //         resolve({
                //           status: 1,
                //           data: res.result[0],
                //           message: "Payment Updated successfully",
                //         });
                //       } else {
                //         resolve({
                //           status: 1,
                //           data: res.result[0],
                //           message:
                //             "Payment Update Without Sending Mail successfully",
                //         });
                //       }
                //     } else {
                //       task.stop();
                //     }
                //   },
                //   {
                //     scheduled: true,
                //   }
                // );

                // task.start();

                // task.stop();
              } else {
                resolve({ status: 0, message: "Something went to wrong" });
              }
            }

            // task.stop();
          });
          if (response.paid_amt == 0) {
            if (response2.type == 8) {
              sql2 = `SELECT visa.v_id,details.detail_id,details.status_id FROM visa,details WHERE visa.v_id=details.service_id AND service_type=8 AND visa.deleted=0 AND details.deleted=0 AND visa.c_id=${data.c_id}`;
            } else if (response2.type == 10) {
              sql2 = `SELECT attestation.a_id,details.detail_id,details.status_id FROM attestation,details WHERE attestation.a_id=details.service_id AND service_type=10 AND attestation.deleted=0 AND details.deleted=0 AND attestation.c_id=${data.c_id}`;
            } else if (response2.type == 17) {
              sql2 = `SELECT apostille.a_id,details.detail_id,details.status_id FROM apostille,details WHERE apostille.a_id=details.service_id AND service_type=17 AND apostille.deleted=0 AND details.deleted=0 AND apostille.c_id=${data.c_id}`;
            } else {
              sql2 = `SELECT translation.a_id,details.detail_id,details.status_id FROM translation,details WHERE translation.a_id=details.service_id AND service_type=20 AND translation.deleted=0 AND details.deleted=0 AND translation.c_id=${data.c_id}`;
            }
            let response3 = await new Promise((resolve, reject) => {
              con.query(sql2, async function (err2, result2) {
                if (err2) {
                  console.log(err2);
                  resolve({ status: 0, message: "Something went to wrong" });
                } else {
                  if (result2.length > 0) {
                    let record = [];
                    result2.forEach((k) => {
                      let newobj = {
                        detail_id: k.detail_id,
                        status_id: k.status_id,
                      };
                      record.push(newobj);
                    });
                    resolve({
                      result: record,
                    });
                  } else {
                    resolve({
                      status: 0,
                      message: "Something went to wrong",
                    });
                  }
                }
              });
            });
            let curr_date = moment().format("DD-MM-YYYY");
            response3.result.map(async (res) => {
              //0704
              sql4 = `UPDATE details SET status_id=21,under_process_date='${tdate}',status_mail_date='${curr_date}' WHERE detail_id =${res.detail_id} and (status_id = 16 OR status_id = 20) `;
              let updateDetail = await new Promise((resolve, reject) => {
                con.query(sql4, async function (err4, result4) {
                  if (err4) {
                    console.log(err4);
                    resolve({ status: 0, message: "Something went to wrong" });
                  } else {
                    if (result4.affectedRows > 0) {
                      //0903
                      const updated_date = moment().format(
                        "DD-MM-YYYY HH:mm:ss"
                      );
                      let sq1 = `INSERT INTO status_activity_log(old_status_id,new_status_id,updated_date,detail_id,u_id) VALUES(${res.status_id},21,'${updated_date}',${res.detail_id},${data.u_id})`;
                      let res11 = await new Promise((resolve, reject) => {
                        con.query(sq1, function (er, res) {
                          if (er) {
                            console.log(er);
                            resolve({
                              status: 0,
                              message: "Something went to wrong",
                            });
                          } else {
                            if (res.affectedRows > 0) {
                              resolve({
                                status: 1,
                                message:
                                  "Activity log inserted successfully...",
                              });
                            }
                          }
                        });
                      });
                    } else {
                      resolve({
                        status: 0,
                        message: "Something went to wrong",
                      });
                    }
                  }
                });
              });
            });
          }
        } else {
          resolve({
            status: 0,
            message: "Recieve Amount must be smaller then Due amount",
          });
        }
      });
      return response1;
    }
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function feedbackmailsend() {
  try {
    let insdate = moment().add(-4, "d").format("DD-MM-YYYY");
    let response = await new Promise(async (resolve, reject) => {
      sql = `SELECT customer.*,visa.v_id,details.detail_id,details.status_id,details.delivery_date,details.collection_date FROM customer,visa,details WHERE customer.c_id=visa.c_id AND visa.v_id=details.service_id AND details.service_type=8 AND details.deleted=0 AND visa.deleted=0 AND customer.is_cancel = 0 and customer.deleted=0  AND ((details.status_id=24 AND details.delivery_date='${insdate}') OR (details.status_id=23 AND details.collection_date='${insdate}')) AND details.f_mail_status=0 GROUP BY customer.c_id UNION  SELECT customer.*,attestation.a_id,details.detail_id,details.status_id,details.delivery_date,details.collection_date FROM customer,attestation,details WHERE customer.c_id=attestation.c_id AND attestation.a_id=details.service_id AND details.service_type=10 AND details.deleted=0 AND attestation.deleted=0 AND customer.is_cancel = 0 and customer.deleted=0 AND details.f_mail_status=0 AND ((details.status_id=24 AND details.delivery_date='${insdate}') OR (details.status_id=23 AND details.collection_date='${insdate}')) GROUP BY customer.c_id UNION SELECT customer.*,apostille.a_id,details.detail_id,details.status_id,details.delivery_date,details.collection_date FROM customer,apostille,details WHERE customer.c_id=apostille.c_id AND apostille.a_id=details.service_id AND details.service_type=17 AND details.deleted=0 AND apostille.deleted=0 AND customer.is_cancel = 0 and customer.deleted=0 AND details.f_mail_status=0 AND ((details.status_id=24 AND details.delivery_date='${insdate}') OR (details.status_id=23 AND details.collection_date='${insdate}')) GROUP BY customer.c_id UNION SELECT customer.*,translation.a_id,details.detail_id,details.status_id,details.delivery_date,details.collection_date FROM customer,translation,details WHERE customer.c_id=translation.c_id AND translation.a_id=details.service_id AND details.service_type=20 AND details.deleted=0 AND translation.deleted=0 AND customer.is_cancel = 0 and customer.deleted=0 AND details.f_mail_status=0 AND ((details.status_id=24 AND details.delivery_date='${insdate}') OR (details.status_id=23 AND details.collection_date='${insdate}')) GROUP BY customer.c_id`;
      con.query(sql, async function (err, results) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (results.length > 0) {
            results.forEach(function (result) {
              resolve({
                status: 1,
                result: results,
              });
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    let record = [];
    {
      response.status == 1 &&
        response.result.map(async (k) => {
          record.push(k);
        });
      let messa1 = [];
      record.map(async (data, index) => {
        console.log("data", data);
        let senderMailSetting = await sendmessage.getEmailSetting(
          data.created_id
        );

        sqlll = `SELECT u_email FROM users WHERE u_id = ${data.created_id} `;
        let ccmail = await new Promise((resolve, reject) => {
          con.query(sqlll, async function (err1, result1) {
            if (err1) {
              console.log(err1);
              resolve({ status: 0, message: "Something went to wrong" });
            } else {
              if (result1.length > 0) {
                resolve({ status: 1, result: result1[0].u_email });
              } else {
                resolve({
                  status: 0,
                  message: "Something went to wrong",
                });
              }
            }
          });
        });

        let message = await sendmessage.getTemplate(38);
        if (message.status != 0) {
          message.template = message.template.replace(
            "{:name:}",
            data.c_prefix + " " + data.c_name
          );
          message.template = message.template.replace(
            "{:link:}",
            senderMailSetting.r_link
          );
          messa1.push(message);
          let mess =
            (messa1[index].header != "" &&
              messa1[index].header != undefined &&
              messa1[index].header == 1
              ? typeof senderMailSetting.email_template_header !=
                undefined && senderMailSetting.email_template_header != undefined &&
                senderMailSetting.email_template_header != null
                ? senderMailSetting.email_template_header
                : ""
              : "") +
            messa1[index].template +
            (messa1[index].b_d_id != 0
              ? messa1[index].b_d_id == 1
                ? senderMailSetting.gst_bankdetails
                : messa1[index].b_d_id == 2
                  ? senderMailSetting.ngst_bankdetails
                  : messa1[index].b_d_id == 3
                    ? senderMailSetting.general_bankdetails
                    : ""
              : "") +
            // (data.created_id == 1
            //   ? data.c_tax == 0
            //     ? senderMailSetting.bank_details
            //     : senderMailSetting.nongst_bank_details
            //   : data.c_tax == 0
            //     ? senderMailSetting.b_bank_details
            //     : senderMailSetting.b_nongst_bank_deatils) +
            (messa1[index].footer == 1
              ? senderMailSetting.email_template_footer
              : "") +
            (messa1[index].signature == 1
              ? senderMailSetting.email_signature
              : "");
          CCMailSetting = await sendmessage.getEmailSetting(1);
          sendmessagenow = sendmessage.customermessagesend(
            senderMailSetting,
            data.c_email,
            mess,
            `${message.subject} || ${data.c_prefix + " " + data.c_name}`,
            ccmail.result, //CCMailSetting.e_username,  // user mail
            ccmail.result, // reply mail
            1
          );

          sql2 = `UPDATE details SET f_mail_status=1 WHERE detail_id = ${data.detail_id} `;
          con.query(sql2, async function (errr, resulttt) {
            if (errr) {
              console.log(errr);
              resolve({ status: 0, message: "Something went to wrong" });
            } else {
              if (resulttt.length > 0) {
                resolve({ status: 1, message: "Updated Successfully..." });
              }
            }
          });
        }
      });
    }
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function deletecustomer(data) {
  try {
    let sql1 = `SELECT details.*,attestation.a_id FROM details,attestation WHERE attestation.a_id = details.service_id and details.service_type = 10 and attestation.c_id = ${data.id} UNION  SELECT details.*,apostille.a_id FROM details,apostille WHERE apostille.a_id = details.service_id and details.service_type = 17 and apostille.c_id = ${data.id} UNION  SELECT details.*,translation.a_id FROM details,translation WHERE translation.a_id = details.service_id and details.service_type = 20 and translation.c_id = ${data.id} UNION  SELECT details.*,visa.v_id FROM details,visa WHERE visa.v_id = details.service_id and details.service_type = 8 and visa.c_id = ${data.id}`;
    let response1 = await new Promise((resolve, reject) => {
      con.query(sql1, function (err1, result1) {
        if (err1) {
          console.log(err1);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result1.length > 0) {
            resolve({
              status: 1,
              result: result1,
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });

    sql = `UPDATE customer SET deleted = 1 WHERE c_id = ${data.id} ;UPDATE visa SET deleted = 1 WHERE c_id = ${data.id} AND deleted=0;UPDATE apostille SET deleted = 1 WHERE c_id = ${data.id};UPDATE translation SET deleted = 1 WHERE c_id = ${data.id} ;UPDATE attestation SET deleted = 1 WHERE c_id = ${data.id} ;UPDATE payment SET deleted = 1 WHERE c_id = ${data.id};UPDATE draft_payment SET deleted = 1 WHERE c_id = ${data.id}; `;
    let sqll = "";
    let sqll1 = "";
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err1, result1) {
        if (err1) {
          console.log(err1);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result1.affectedRows > 0) {
            response1.result.map((res) => {
              sqll += `UPDATE details SET deleted = 1 WHERE detail_id = ${res.detail_id} ;`;
            });
            con.query(sqll, function (err, result) {
              if (err) {
                console.log(err);
                resolve({ status: 0, message: "Something went to wrong" });
              } else {
                if (result.affectedRows > 0) {
                  resolve({
                    status: 1,
                  });
                }
              }
            });

            resolve({
              status: 1,
              result: result1,
              message: "Customer Deleted Successfully....",
            });
          } else {
            response1.result.map((res) => {
              sqll1 += `UPDATE details SET deleted = 1 WHERE detail_id = ${res.detail_id} ;`;
            });
            con.query(sqll1, function (err, result) {
              if (err) {
                console.log(err);
                resolve({ status: 0, message: "Something went to wrong" });
              } else {
                if (result.affectedRows > 0) {
                  resolve({
                    status: 1,
                  });
                }
              }
            });
            resolve({
              status: 1,
              result: result1,
              message: "Customer Deleted Successfully....",
            });
          }
        }
      });
    });

    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function gettds(data) {
  try {
    let sql = `SELECT payment.*,customer.c_prefix,customer.c_name
    FROM payment,customer
    WHERE payment_id IN (
        SELECT MAX(payment_id)
        FROM payment
        GROUP BY c_id
    ) and payment.c_id = customer.c_id and payment.is_tds = 1 AND payment.deleted = 0 AND payment.tds_status = 0 `;

    let tdsPaginate = `SELECT COUNT(payment.payment_id)as trows
    FROM payment,customer
    WHERE payment_id IN (
        SELECT MAX(payment_id)
        FROM payment
        GROUP BY c_id
    ) and payment.c_id = customer.c_id and payment.is_tds = 1 AND payment.deleted = 0 AND payment.tds_status = 0 `;

    if (typeof data.s_date != "undefined" && data.s_date != "") {
      sql += ` and STR_TO_DATE(payment.payment_date,"%d-%m-%Y")>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y")`;
      tdsPaginate += ` and STR_TO_DATE(payment.payment_date,"%d-%m-%Y")>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y")`;
    }
    if (typeof data.e_date != "undefined" && data.e_date != "") {
      sql += ` and STR_TO_DATE(payment.payment_date,"%d-%m-%Y")<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y")`;
      tdsPaginate += ` and STR_TO_DATE(payment.payment_date,"%d-%m-%Y")<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y")`;
    }
    if (
      typeof data.s_branch_id != "undefined" &&
      data.s_branch_id != "" &&
      data.s_branch_id != 0
    ) {
      sql += ` and customer.branch_id=${data.s_branch_id}`;
      tdsPaginate += ` and customer.branch_id=${data.s_branch_id}`;
    }
    sql += ` order by customer.c_id DESC`;

    sql += ` limit ${(data.page - 1) * data.perpage},${data.perpage}`;

    let resp = await new Promise((resolve, reject) => {
      con.query(tdsPaginate, function (err1, lres1) {
        if (err1) {
          console.log(err1);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (lres1.length > 0) {
            resolve({
              status: 1,
              t_rows: lres1[0].trows,
            });
          } else {
            resolve({
              status: 0,
              data: [],
            });
          }
        }
      });
    });
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, res) {
        if (err) {
          console.log(err);
        } else {
          if (res.length > 0) {
            resolve({
              status: 1,
              result: res,
              t_rows: resp.t_rows,
            });
          } else {
            resolve({
              status: 0,
              result: [],
              t_rows: 0,
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

//update tds-status
async function updatetds(data) {
  try {
    sql = `UPDATE payment SET tds_status = 1 WHERE payment_id=${data.payment_id} AND deleted = 0;`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.affectedRows > 0) {
            resolve({
              status: 1,
              message: "TDS Accepted...",
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}
//0203
async function getallcustomer(data) {
  try {
    sql1 = `SELECT user_type FROM users WHERE u_id = ${data.uid} and deleted =0`;

    let response1 = await new Promise((resolve, reject) => {
      con.query(sql1, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            result.forEach(function (result) {
              resolve({
                status: 1,
                user_type: result.user_type,
              });
            });
          } else {
            resolve({
              status: 0,
              user_type: "Something went wrong...",
            });
          }
        }
      });
    });
    let getCustomerPaginationQuery = "";
    let sql = "";
    if (response1.user_type == 0) {
      // sql = `SELECT customer.created_id,customer.under_process_date,customer.mode,customer.awb_no,customer.d_p_name,customer.o_mode,customer.l_id,customer.foreign_branchuser,customer.is_cancel,customer.is_block,customer.c_id,customer.c_prefix,customer.c_name,customer.c_date,customer.c_mo_no,customer.c_email,customer.c_address,customer.c_gst_no,customer.c_s_type,customer.c_total_customer,customer.branch_id,customer.u_id,customer.foreign_branch,customer.c_tax,customer.tracking_id,details.detail_id,details.service_id,(SELECT u_name FROM users WHERE users.u_id = customer.foreign_branchuser)as username,(SELECT name FROM attributes WHERE attributes.attribute_id = customer.c_state)as state,(SELECT b_name FROM branch WHERE branch.branch_id = customer.foreign_branch)as branch_name,(SELECT b_name FROM branch WHERE branch.branch_id = customer.branch_id)as a_branch_name,(SELECT u_name FROM users WHERE users.u_id = customer.u_id)as a_user_name,(SELECT u_name FROM users WHERE users.u_id = customer.created_id)as createdBy,(SELECT m_c_name FROM main_customer WHERE main_customer.m_c_id = customer.refrence_by)as reference_name FROM customer LEFT JOIN attestation ON customer.c_id = attestation.c_id left join details ON attestation.a_id=details.service_id where customer.deleted=0 and attestation.deleted=0 and details.deleted=0 and service_type=10 group by customer.c_id
      // UNION SELECT customer.created_id,customer.under_process_date,customer.mode,customer.awb_no,customer.d_p_name,customer.o_mode,customer.l_id,customer.foreign_branchuser,customer.is_cancel,customer.is_block,customer.c_id,customer.c_prefix,customer.c_name,
      // customer.c_date,customer.c_mo_no,customer.c_email,customer.c_address,customer.c_gst_no,customer.c_s_type,customer.c_total_customer,customer.branch_id,customer.u_id,customer.foreign_branch,customer.c_tax,customer.tracking_id,details.detail_id,details.service_id,(SELECT u_name FROM users WHERE users.u_id = customer.foreign_branchuser)as username,(SELECT name FROM attributes WHERE attributes.attribute_id = customer.c_state)as state,(SELECT b_name FROM branch WHERE branch.branch_id = customer.foreign_branch)as branch_name,(SELECT b_name FROM branch WHERE branch.branch_id = customer.branch_id)as a_branch_name,(SELECT u_name FROM users WHERE users.u_id = customer.u_id)as a_user_name,(SELECT u_name FROM users WHERE users.u_id = customer.created_id)as createdBy,(SELECT m_c_name FROM main_customer WHERE main_customer.m_c_id = customer.refrence_by)as reference_name FROM customer LEFT JOIN apostille ON customer.c_id = apostille.c_id left join details ON apostille.a_id=details.service_id where customer.deleted=0 and apostille.deleted=0 and details.deleted=0 and service_type=17 group by customer.c_id
      // UNION select customer.created_id,customer.under_process_date,customer.mode,customer.awb_no,customer.d_p_name,customer.o_mode,customer.l_id,customer.foreign_branchuser,customer.is_cancel,customer.is_block,customer.c_id,customer.c_prefix,customer.c_name,customer.c_date,customer.c_mo_no,customer.c_email,customer.c_address,customer.c_gst_no,customer.c_s_type,customer.c_total_customer,customer.branch_id,customer.u_id,customer.foreign_branch,customer.c_tax,customer.tracking_id,details.detail_id,details.service_id,(SELECT u_name FROM users WHERE users.u_id = customer.foreign_branchuser)as username,(SELECT name FROM attributes WHERE attributes.attribute_id = customer.c_state)as state,(SELECT b_name FROM branch WHERE branch.branch_id = customer.foreign_branch)as branch_name,(SELECT b_name FROM branch WHERE branch.branch_id = customer.branch_id)as a_branch_name,(SELECT u_name FROM users WHERE users.u_id = customer.u_id)as a_user_name,(SELECT u_name FROM users WHERE users.u_id = customer.created_id)as createdBy,(SELECT m_c_name FROM main_customer WHERE main_customer.m_c_id = customer.refrence_by)as reference_name FROM customer LEFT JOIN translation ON customer.c_id = translation.c_id left join details ON translation.a_id=details.service_id where customer.deleted=0 and translation.deleted=0 and details.deleted=0 and service_type=20 group by customer.c_id
      // UNION select customer.created_id,customer.under_process_date,customer.mode,customer.awb_no,customer.d_p_name,customer.o_mode,customer.l_id,customer.foreign_branchuser,customer.is_cancel,customer.is_block,customer.c_id,customer.c_prefix,customer.c_name,customer.c_date,customer.c_mo_no,customer.c_email,customer.c_address,customer.c_gst_no,customer.c_s_type,customer.c_total_customer,customer.branch_id,customer.u_id,customer.foreign_branch,customer.c_tax,customer.tracking_id,details.detail_id,details.service_id,(SELECT u_name FROM users WHERE users.u_id = customer.foreign_branchuser)as username,(SELECT name FROM attributes WHERE attributes.attribute_id = customer.c_state)as state,(SELECT b_name FROM branch WHERE branch.branch_id = customer.foreign_branch)as branch_name,(SELECT b_name FROM branch WHERE branch.branch_id = customer.branch_id)as a_branch_name,(SELECT u_name FROM users WHERE users.u_id = customer.u_id)as a_user_name,(SELECT u_name FROM users WHERE users.u_id = customer.created_id)as createdBy,(SELECT m_c_name FROM main_customer WHERE main_customer.m_c_id = customer.refrence_by)as reference_name FROM customer LEFT JOIN visa ON customer.c_id = visa.c_id left join details ON visa.v_id=details.service_id where customer.deleted=0 and visa.deleted=0 and details.deleted=0 and service_type=8 group by customer.c_id ORDER by c_id DESC`;
      getCustomerPaginationQuery = `SELECT customer.c_id  FROM customer LEFT JOIN attestation ON customer.c_id = attestation.c_id left join details ON attestation.a_id=details.service_id where customer.deleted=0 and attestation.deleted=0 and details.deleted=0 and service_type=10 group by customer.c_id 
      UNION SELECT customer.c_id  FROM customer LEFT JOIN apostille ON customer.c_id = apostille.c_id left join details ON apostille.a_id=details.service_id   where customer.deleted=0 and apostille.deleted=0 and details.deleted=0 and details.service_type=17 group by customer.c_id 
      UNION SELECT customer.c_id FROM customer LEFT JOIN translation ON customer.c_id = translation.c_id left join details ON translation.a_id=details.service_id  where customer.deleted=0 and translation.deleted=0 and details.deleted=0 and details.service_type=20 group by customer.c_id
       UNION SELECT customer.c_id  FROM customer LEFT JOIN visa ON customer.c_id = visa.c_id left join details ON visa.v_id=details.service_id  where customer.deleted=0 and visa.deleted=0 and details.deleted=0 and details.service_type=8 group by customer.c_id   `;

      sql = `SELECT customer.login_u_id,customer.city,customer.pincode,customer.c_id,customer.c_prefix,customer.c_name,customer.c_remark,customer.c_date,customer.created_id,customer.under_process_date,customer.mode,customer.awb_no,customer.d_p_name,customer.o_mode,customer.l_id,customer.foreign_branchuser,customer.is_cancel,customer.is_block,customer.c_mo_no,customer.c_email,customer.c_address,customer.c_gst_no,customer.c_s_type,customer.c_total_customer,customer.branch_id,customer.u_id,customer.foreign_branch,customer.c_tax,customer.tracking_id,details.detail_id,details.service_id,u1.u_name AS branch_name,att_tbl.name AS state,b1.b_name AS branch_name,b2.b_name AS a_branch_name,u2.u_name AS a_user_name,u3.u_name AS createdBy,main_customer.m_c_name as reference_name  FROM customer LEFT JOIN attestation ON customer.c_id = attestation.c_id left join details ON attestation.a_id=details.service_id LEFT join users u1 ON u1.u_id = customer.foreign_branchuser LEFT JOIN attributes att_tbl ON att_tbl.attribute_id = customer.c_state LEFT JOIN branch b1 ON b1.branch_id = customer.foreign_branch LEFT JOIN branch b2 ON  b2.branch_id = customer.branch_id LEFT JOIN users u2 ON u2.u_id = customer.u_id  LEFT JOIN users u3 ON u3.u_id = customer.created_id LEFT JOIN main_customer ON main_customer.m_c_id = customer.refrence_by  where customer.deleted=0 and attestation.deleted=0 and details.deleted=0 and service_type=10 group by customer.c_id 
      UNION SELECT customer.login_u_id,customer.city,customer.pincode,customer.c_id,customer.c_prefix,customer.c_name,customer.c_remark,customer.c_date,customer.created_id,customer.under_process_date,customer.mode,customer.awb_no,customer.d_p_name,customer.o_mode,customer.l_id,customer.foreign_branchuser,customer.is_cancel,customer.is_block,customer.c_mo_no,customer.c_email,customer.c_address,customer.c_gst_no,customer.c_s_type,customer.c_total_customer,customer.branch_id,customer.u_id,customer.foreign_branch,customer.c_tax,customer.tracking_id,details.detail_id,details.service_id,u1.u_name AS branch_name,att_tbl.name AS state,b1.b_name AS branch_name,b2.b_name AS a_branch_name,u2.u_name AS a_user_name,u3.u_name AS createdBy,main_customer.m_c_name as reference_name  FROM customer LEFT JOIN apostille ON customer.c_id = apostille.c_id left join details ON apostille.a_id=details.service_id LEFT join users u1 ON u1.u_id = customer.foreign_branchuser LEFT JOIN attributes att_tbl ON att_tbl.attribute_id = customer.c_state LEFT JOIN branch b1 ON b1.branch_id = customer.foreign_branch LEFT JOIN branch b2 ON  b2.branch_id = customer.branch_id LEFT JOIN users u2 ON u2.u_id = customer.u_id  LEFT JOIN users u3 ON u3.u_id = customer.created_id LEFT JOIN main_customer ON main_customer.m_c_id = customer.refrence_by  where customer.deleted=0 and apostille.deleted=0 and details.deleted=0 and service_type=17 group by customer.c_id 
      UNION SELECT customer.login_u_id,customer.city,customer.pincode,customer.c_id,customer.c_prefix,customer.c_name,customer.c_remark,customer.c_date,customer.created_id,customer.under_process_date,customer.mode,customer.awb_no,customer.d_p_name,customer.o_mode,customer.l_id,customer.foreign_branchuser,customer.is_cancel,customer.is_block,customer.c_mo_no,customer.c_email,customer.c_address,customer.c_gst_no,customer.c_s_type,customer.c_total_customer,customer.branch_id,customer.u_id,customer.foreign_branch,customer.c_tax,customer.tracking_id,details.detail_id,details.service_id,u1.u_name AS branch_name,att_tbl.name AS state,b1.b_name AS branch_name,b2.b_name AS a_branch_name,u2.u_name AS a_user_name,u3.u_name AS createdBy,main_customer.m_c_name as reference_name  FROM customer LEFT JOIN translation ON customer.c_id = translation.c_id left join details ON translation.a_id=details.service_id LEFT join users u1 ON u1.u_id = customer.foreign_branchuser LEFT JOIN attributes att_tbl ON att_tbl.attribute_id = customer.c_state LEFT JOIN branch b1 ON b1.branch_id = customer.foreign_branch LEFT JOIN branch b2 ON  b2.branch_id = customer.branch_id LEFT JOIN users u2 ON u2.u_id = customer.u_id  LEFT JOIN users u3 ON u3.u_id = customer.created_id LEFT JOIN main_customer ON main_customer.m_c_id = customer.refrence_by  where customer.deleted=0 and translation.deleted=0 and details.deleted=0 and service_type=20 group by customer.c_id
       UNION SELECT customer.login_u_id,customer.city,customer.pincode,customer.c_id,customer.c_prefix,customer.c_name,customer.c_remark,customer.c_date,customer.created_id,customer.under_process_date,customer.mode,customer.awb_no,customer.d_p_name,customer.o_mode,customer.l_id,customer.foreign_branchuser,customer.is_cancel,customer.is_block,customer.c_mo_no,customer.c_email,customer.c_address,customer.c_gst_no,customer.c_s_type,customer.c_total_customer,customer.branch_id,customer.u_id,customer.foreign_branch,customer.c_tax,customer.tracking_id,details.detail_id,details.service_id,u1.u_name AS branch_name,att_tbl.name AS state,b1.b_name AS branch_name,b2.b_name AS a_branch_name,u2.u_name AS a_user_name,u3.u_name AS createdBy,main_customer.m_c_name as reference_name  FROM customer LEFT JOIN visa ON customer.c_id = visa.c_id left join details ON visa.v_id=details.service_id LEFT join users u1 ON u1.u_id = customer.foreign_branchuser LEFT JOIN attributes att_tbl ON att_tbl.attribute_id = customer.c_state LEFT JOIN branch b1 ON b1.branch_id = customer.foreign_branch LEFT JOIN branch b2 ON  b2.branch_id = customer.branch_id LEFT JOIN users u2 ON u2.u_id = customer.u_id  LEFT JOIN users u3 ON u3.u_id = customer.created_id LEFT JOIN main_customer ON main_customer.m_c_id = customer.refrence_by  where customer.deleted=0 and visa.deleted=0 and details.deleted=0 and service_type=8 group by customer.c_id ORDER by c_id DESC `;

      sql += ` limit ${(data.page - 1) * data.perpage},${data.perpage}`;
    } else if (response1.user_type == 1) {
      // sql = `SELECT customer.c_id,customer.c_prefix,customer.c_name,customer.c_date,customer.created_id,customer.under_process_date,customer.mode,customer.awb_no,customer.d_p_name,customer.o_mode,customer.l_id,customer.foreign_branchuser,customer.is_cancel,customer.is_block,customer.c_mo_no,customer.c_email,customer.c_address,customer.c_gst_no,customer.c_s_type,customer.c_total_customer,customer.branch_id,customer.u_id,customer.foreign_branch,customer.c_tax,customer.tracking_id,details.detail_id,details.service_id,u1.u_name AS username,(SELECT COUNT(*) FROM customer WHERE deleted =0 AND ((foreign_branch = ${data.bid}) OR (branch_id = ${data.bid})))as trows,att_tbl.name AS state,b1.b_name AS branch_name,b2.b_name AS a_branch_name,u2.u_name AS a_user_name,u3.u_name AS createdBy,main_customer.m_c_name as reference_name  FROM customer LEFT JOIN attestation ON customer.c_id = attestation.c_id left join details ON attestation.a_id=details.service_id LEFT join users u1 ON u1.u_id = customer.foreign_branchuser LEFT JOIN attributes att_tbl ON att_tbl.attribute_id = customer.c_state LEFT JOIN branch b1 ON b1.branch_id = customer.foreign_branch LEFT JOIN branch b2 ON  b2.branch_id = customer.branch_id LEFT JOIN users u2 ON u2.u_id = customer.u_id  LEFT JOIN users u3 ON u3.u_id = customer.created_id LEFT JOIN main_customer ON main_customer.m_c_id = customer.refrence_by  where customer.deleted=0 and attestation.deleted=0 and details.deleted=0 and service_type=10 AND (customer.foreign_branch = ${data.bid} OR customer.branch_id=${data.bid}) group by customer.c_id
      // UNION SELECT customer.c_id,customer.c_prefix,customer.c_name,customer.c_date,customer.created_id,customer.under_process_date,customer.mode,customer.awb_no,customer.d_p_name,customer.o_mode,customer.l_id,customer.foreign_branchuser,customer.is_cancel,customer.is_block,customer.c_mo_no,customer.c_email,customer.c_address,customer.c_gst_no,customer.c_s_type,customer.c_total_customer,customer.branch_id,customer.u_id,customer.foreign_branch,customer.c_tax,customer.tracking_id,details.detail_id,details.service_id,u1.u_name AS username,(SELECT COUNT(*) FROM customer WHERE deleted =0 AND ((foreign_branch = ${data.bid}) OR (branch_id = ${data.bid})))as trows,att_tbl.name AS state,b1.b_name AS branch_name,b2.b_name AS a_branch_name,u2.u_name AS a_user_name,u3.u_name AS createdBy,main_customer.m_c_name as reference_name  FROM customer LEFT JOIN apostille ON customer.c_id = apostille.c_id left join details ON apostille.a_id=details.service_id LEFT join users u1 ON u1.u_id = customer.foreign_branchuser LEFT JOIN attributes att_tbl ON att_tbl.attribute_id = customer.c_state LEFT JOIN branch b1 ON b1.branch_id = customer.foreign_branch LEFT JOIN branch b2 ON  b2.branch_id = customer.branch_id LEFT JOIN users u2 ON u2.u_id = customer.u_id  LEFT JOIN users u3 ON u3.u_id = customer.created_id LEFT JOIN main_customer ON main_customer.m_c_id = customer.refrence_by  where customer.deleted=0 and apostille.deleted=0 and details.deleted=0 and service_type=17 AND (customer.foreign_branch = ${data.bid} OR customer.branch_id=${data.bid}) group by customer.c_id
      //  UNION SELECT customer.c_id,customer.c_prefix,customer.c_name,customer.c_date,customer.created_id,customer.under_process_date,customer.mode,customer.awb_no,customer.d_p_name,customer.o_mode,customer.l_id,customer.foreign_branchuser,customer.is_cancel,customer.is_block,customer.c_mo_no,customer.c_email,customer.c_address,customer.c_gst_no,customer.c_s_type,customer.c_total_customer,customer.branch_id,customer.u_id,customer.foreign_branch,customer.c_tax,customer.tracking_id,details.detail_id,details.service_id,u1.u_name AS username,(SELECT COUNT(*) FROM customer WHERE deleted =0 AND ((foreign_branch = ${data.bid}) OR (branch_id = ${data.bid})))as trows,att_tbl.name AS state,b1.b_name AS branch_name,b2.b_name AS a_branch_name,u2.u_name AS a_user_name,u3.u_name AS createdBy,main_customer.m_c_name as reference_name  FROM customer LEFT JOIN translation ON customer.c_id = translation.c_id left join details ON translation.a_id=details.service_id LEFT join users u1 ON u1.u_id = customer.foreign_branchuser LEFT JOIN attributes att_tbl ON att_tbl.attribute_id = customer.c_state LEFT JOIN branch b1 ON b1.branch_id = customer.foreign_branch LEFT JOIN branch b2 ON  b2.branch_id = customer.branch_id LEFT JOIN users u2 ON u2.u_id = customer.u_id  LEFT JOIN users u3 ON u3.u_id = customer.created_id LEFT JOIN main_customer ON main_customer.m_c_id = customer.refrence_by  where customer.deleted=0 and translation.deleted=0 and details.deleted=0 and service_type=20 AND (customer.foreign_branch = ${data.bid} OR customer.branch_id=${data.bid}) group by customer.c_id
      //  UNION SELECT customer.c_id,customer.c_prefix,customer.c_name,customer.c_date,customer.created_id,customer.under_process_date,customer.mode,customer.awb_no,customer.d_p_name,customer.o_mode,customer.l_id,customer.foreign_branchuser,customer.is_cancel,customer.is_block,customer.c_mo_no,customer.c_email,customer.c_address,customer.c_gst_no,customer.c_s_type,customer.c_total_customer,customer.branch_id,customer.u_id,customer.foreign_branch,customer.c_tax,customer.tracking_id,details.detail_id,details.service_id,u1.u_name AS username,(SELECT COUNT(*) FROM customer WHERE deleted =0 AND ((foreign_branch = ${data.bid}) OR (branch_id = ${data.bid})))as trows,att_tbl.name AS state,b1.b_name AS branch_name,b2.b_name AS a_branch_name,u2.u_name AS a_user_name,u3.u_name AS createdBy,main_customer.m_c_name as reference_name  FROM customer LEFT JOIN visa ON customer.c_id = visa.c_id left join details ON visa.v_id=details.service_id LEFT join users u1 ON u1.u_id = customer.foreign_branchuser LEFT JOIN attributes att_tbl ON att_tbl.attribute_id = customer.c_state LEFT JOIN branch b1 ON b1.branch_id = customer.foreign_branch LEFT JOIN branch b2 ON  b2.branch_id = customer.branch_id LEFT JOIN users u2 ON u2.u_id = customer.u_id  LEFT JOIN users u3 ON u3.u_id = customer.created_id LEFT JOIN main_customer ON main_customer.m_c_id = customer.refrence_by  where customer.deleted=0 and visa.deleted=0 and details.deleted=0 and service_type=8 AND (customer.foreign_branch = ${data.bid} OR customer.branch_id=${data.bid}) group by customer.c_id ORDER by c_id DESC`;

      getCustomerPaginationQuery = `SELECT customer.c_id  FROM customer LEFT JOIN attestation ON customer.c_id = attestation.c_id left join details ON attestation.a_id=details.service_id where customer.deleted=0 and attestation.deleted=0 and details.deleted=0 and service_type=10 AND (customer.foreign_branch = ${data.bid} OR customer.branch_id=${data.bid}) group by customer.c_id 
      UNION SELECT customer.c_id  FROM customer LEFT JOIN apostille ON customer.c_id = apostille.c_id left join details ON apostille.a_id=details.service_id   where customer.deleted=0 and apostille.deleted=0 and details.deleted=0 and details.service_type=17 AND (customer.foreign_branch = ${data.bid} OR customer.branch_id=${data.bid}) group by customer.c_id 
      UNION SELECT customer.c_id FROM customer LEFT JOIN translation ON customer.c_id = translation.c_id left join details ON translation.a_id=details.service_id  where customer.deleted=0 and translation.deleted=0 and details.deleted=0 and details.service_type=20 AND (customer.foreign_branch = ${data.bid} OR customer.branch_id=${data.bid})group by customer.c_id
       UNION SELECT customer.c_id  FROM customer LEFT JOIN visa ON customer.c_id = visa.c_id left join details ON visa.v_id=details.service_id  where customer.deleted=0 and visa.deleted=0 and details.deleted=0 and details.service_type=8 AND (customer.foreign_branch = ${data.bid} OR customer.branch_id=${data.bid}) group by customer.c_id  `;

      sql = `SELECT customer.login_u_id,customer.city,customer.pincode,customer.c_id,customer.c_prefix,customer.c_name,customer.c_remark,customer.c_date,customer.created_id,customer.under_process_date,customer.mode,customer.awb_no,customer.d_p_name,customer.o_mode,customer.l_id,customer.foreign_branchuser,customer.is_cancel,customer.is_block,customer.c_mo_no,customer.c_email,customer.c_address,customer.c_gst_no,customer.c_s_type,customer.c_total_customer,customer.branch_id,customer.u_id,customer.foreign_branch,customer.c_tax,customer.tracking_id,details.detail_id,details.service_id,u1.u_name AS username,att_tbl.name AS state,b1.b_name AS branch_name,b2.b_name AS a_branch_name,u2.u_name AS a_user_name,u3.u_name AS createdBy,main_customer.m_c_name as reference_name  FROM customer LEFT JOIN attestation ON customer.c_id = attestation.c_id left join details ON attestation.a_id=details.service_id LEFT join users u1 ON u1.u_id = customer.foreign_branchuser LEFT JOIN attributes att_tbl ON att_tbl.attribute_id = customer.c_state LEFT JOIN branch b1 ON b1.branch_id = customer.foreign_branch LEFT JOIN branch b2 ON  b2.branch_id = customer.branch_id LEFT JOIN users u2 ON u2.u_id = customer.u_id  LEFT JOIN users u3 ON u3.u_id = customer.created_id LEFT JOIN main_customer ON main_customer.m_c_id = customer.refrence_by  where customer.deleted=0 and attestation.deleted=0 and details.deleted=0 and service_type=10 AND (customer.foreign_branch = ${data.bid} OR customer.branch_id=${data.bid}) group by customer.c_id 
      UNION SELECT customer.login_u_id,customer.city,customer.pincode,customer.c_id,customer.c_prefix,customer.c_name,customer.c_remark,customer.c_date,customer.created_id,customer.under_process_date,customer.mode,customer.awb_no,customer.d_p_name,customer.o_mode,customer.l_id,customer.foreign_branchuser,customer.is_cancel,customer.is_block,customer.c_mo_no,customer.c_email,customer.c_address,customer.c_gst_no,customer.c_s_type,customer.c_total_customer,customer.branch_id,customer.u_id,customer.foreign_branch,customer.c_tax,customer.tracking_id,details.detail_id,details.service_id,u1.u_name AS username,att_tbl.name AS state,b1.b_name AS branch_name,b2.b_name AS a_branch_name,u2.u_name AS a_user_name,u3.u_name AS createdBy,main_customer.m_c_name as reference_name  FROM customer LEFT JOIN apostille ON customer.c_id = apostille.c_id left join details ON apostille.a_id=details.service_id LEFT join users u1 ON u1.u_id = customer.foreign_branchuser LEFT JOIN attributes att_tbl ON att_tbl.attribute_id = customer.c_state LEFT JOIN branch b1 ON b1.branch_id = customer.foreign_branch LEFT JOIN branch b2 ON  b2.branch_id = customer.branch_id LEFT JOIN users u2 ON u2.u_id = customer.u_id  LEFT JOIN users u3 ON u3.u_id = customer.created_id LEFT JOIN main_customer ON main_customer.m_c_id = customer.refrence_by  where customer.deleted=0 and apostille.deleted=0 and details.deleted=0 and service_type=17 AND (customer.foreign_branch = ${data.bid} OR customer.branch_id=${data.bid}) group by customer.c_id
       UNION SELECT customer.login_u_id,customer.city,customer.pincode,customer.c_id,customer.c_prefix,customer.c_name,customer.c_remark,customer.c_date,customer.created_id,customer.under_process_date,customer.mode,customer.awb_no,customer.d_p_name,customer.o_mode,customer.l_id,customer.foreign_branchuser,customer.is_cancel,customer.is_block,customer.c_mo_no,customer.c_email,customer.c_address,customer.c_gst_no,customer.c_s_type,customer.c_total_customer,customer.branch_id,customer.u_id,customer.foreign_branch,customer.c_tax,customer.tracking_id,details.detail_id,details.service_id,u1.u_name AS username,att_tbl.name AS state,b1.b_name AS branch_name,b2.b_name AS a_branch_name,u2.u_name AS a_user_name,u3.u_name AS createdBy,main_customer.m_c_name as reference_name  FROM customer LEFT JOIN translation ON customer.c_id = translation.c_id left join details ON translation.a_id=details.service_id LEFT join users u1 ON u1.u_id = customer.foreign_branchuser LEFT JOIN attributes att_tbl ON att_tbl.attribute_id = customer.c_state LEFT JOIN branch b1 ON b1.branch_id = customer.foreign_branch LEFT JOIN branch b2 ON  b2.branch_id = customer.branch_id LEFT JOIN users u2 ON u2.u_id = customer.u_id  LEFT JOIN users u3 ON u3.u_id = customer.created_id LEFT JOIN main_customer ON main_customer.m_c_id = customer.refrence_by  where customer.deleted=0 and translation.deleted=0 and details.deleted=0 and service_type=20 AND (customer.foreign_branch = ${data.bid} OR customer.branch_id=${data.bid}) group by customer.c_id 
       UNION SELECT customer.login_u_id,customer.city,customer.pincode,customer.c_id,customer.c_prefix,customer.c_name,customer.c_remark,customer.c_date,customer.created_id,customer.under_process_date,customer.mode,customer.awb_no,customer.d_p_name,customer.o_mode,customer.l_id,customer.foreign_branchuser,customer.is_cancel,customer.is_block,customer.c_mo_no,customer.c_email,customer.c_address,customer.c_gst_no,customer.c_s_type,customer.c_total_customer,customer.branch_id,customer.u_id,customer.foreign_branch,customer.c_tax,customer.tracking_id,details.detail_id,details.service_id,u1.u_name AS username,att_tbl.name AS state,b1.b_name AS branch_name,b2.b_name AS a_branch_name,u2.u_name AS a_user_name,u3.u_name AS createdBy,main_customer.m_c_name as reference_name  FROM customer LEFT JOIN visa ON customer.c_id = visa.c_id left join details ON visa.v_id=details.service_id LEFT join users u1 ON u1.u_id = customer.foreign_branchuser LEFT JOIN attributes att_tbl ON att_tbl.attribute_id = customer.c_state LEFT JOIN branch b1 ON b1.branch_id = customer.foreign_branch LEFT JOIN branch b2 ON  b2.branch_id = customer.branch_id LEFT JOIN users u2 ON u2.u_id = customer.u_id  LEFT JOIN users u3 ON u3.u_id = customer.created_id LEFT JOIN main_customer ON main_customer.m_c_id = customer.refrence_by  where customer.deleted=0 and visa.deleted=0 and details.deleted=0 and service_type=8 AND (customer.foreign_branch = ${data.bid} OR customer.branch_id=${data.bid}) group by customer.c_id ORDER by c_id DESC `;

      sql += ` limit ${(data.page - 1) * data.perpage},${data.perpage}`;
    } else {
      // sql = `SELECT customer.c_id,customer.c_prefix,customer.c_name,customer.c_date,customer.created_id,customer.under_process_date,customer.mode,customer.awb_no,customer.d_p_name,customer.o_mode,customer.l_id,customer.foreign_branchuser,customer.is_cancel,customer.is_block,customer.c_mo_no,customer.c_email,customer.c_address,customer.c_gst_no,customer.c_s_type,customer.c_total_customer,customer.branch_id,customer.u_id,customer.foreign_branch,customer.c_tax,customer.tracking_id,details.detail_id,details.service_id,u1.u_name AS username,(SELECT COUNT(*) FROM customer WHERE deleted =0 and (u_id=${data.uid} OR marketing_user=${data.uid} OR customer.foreign_branchuser = ${data.uid}))as trows,att_tbl.name AS state,b1.b_name AS branch_name,b2.b_name AS a_branch_name,u2.u_name AS a_user_name,u3.u_name AS createdBy,main_customer.m_c_name as reference_name  FROM customer LEFT JOIN attestation ON customer.c_id = attestation.c_id left join details ON attestation.a_id=details.service_id LEFT join users u1 ON u1.u_id = customer.foreign_branchuser LEFT JOIN attributes att_tbl ON att_tbl.attribute_id = customer.c_state LEFT JOIN branch b1 ON b1.branch_id = customer.foreign_branch LEFT JOIN branch b2 ON  b2.branch_id = customer.branch_id LEFT JOIN users u2 ON u2.u_id = customer.u_id  LEFT JOIN users u3 ON u3.u_id = customer.created_id LEFT JOIN main_customer ON main_customer.m_c_id = customer.refrence_by  where customer.deleted=0 and (customer.u_id=${data.uid} OR customer.marketing_user=${data.uid} OR customer.foreign_branchuser = ${data.uid}) and attestation.deleted=0 and details.deleted=0 and service_type=10 group by customer.c_id
      // UNION SELECT customer.c_id,customer.c_prefix,customer.c_name,customer.c_date,customer.created_id,customer.under_process_date,customer.mode,customer.awb_no,customer.d_p_name,customer.o_mode,customer.l_id,customer.foreign_branchuser,customer.is_cancel,customer.is_block,customer.c_mo_no,customer.c_email,customer.c_address,customer.c_gst_no,customer.c_s_type,customer.c_total_customer,customer.branch_id,customer.u_id,customer.foreign_branch,customer.c_tax,customer.tracking_id,details.detail_id,details.service_id,u1.u_name AS username,(SELECT COUNT(*) FROM customer WHERE deleted =0 and (u_id=${data.uid} OR marketing_user=${data.uid} OR customer.foreign_branchuser = ${data.uid}))as trows,att_tbl.name AS state,b1.b_name AS branch_name,b2.b_name AS a_branch_name,u2.u_name AS a_user_name,u3.u_name AS createdBy,main_customer.m_c_name as reference_name  FROM customer LEFT JOIN apostille ON customer.c_id = apostille.c_id left join details ON apostille.a_id=details.service_id LEFT join users u1 ON u1.u_id = customer.foreign_branchuser LEFT JOIN attributes att_tbl ON att_tbl.attribute_id = customer.c_state LEFT JOIN branch b1 ON b1.branch_id = customer.foreign_branch LEFT JOIN branch b2 ON  b2.branch_id = customer.branch_id LEFT JOIN users u2 ON u2.u_id = customer.u_id  LEFT JOIN users u3 ON u3.u_id = customer.created_id LEFT JOIN main_customer ON main_customer.m_c_id = customer.refrence_by  where customer.deleted=0 and (customer.u_id=${data.uid} OR customer.marketing_user=${data.uid} OR customer.foreign_branchuser = ${data.uid}) and apostille.deleted=0 and details.deleted=0 and service_type=17 group by customer.c_id
      // UNION SELECT customer.c_id,customer.c_prefix,customer.c_name,customer.c_date,customer.created_id,customer.under_process_date,customer.mode,customer.awb_no,customer.d_p_name,customer.o_mode,customer.l_id,customer.foreign_branchuser,customer.is_cancel,customer.is_block,customer.c_mo_no,customer.c_email,customer.c_address,customer.c_gst_no,customer.c_s_type,customer.c_total_customer,customer.branch_id,customer.u_id,customer.foreign_branch,customer.c_tax,customer.tracking_id,details.detail_id,details.service_id,u1.u_name AS username,(SELECT COUNT(*) FROM customer WHERE deleted =0 and (u_id=${data.uid} OR marketing_user=${data.uid} OR customer.foreign_branchuser = ${data.uid}))as trows,att_tbl.name AS state,b1.b_name AS branch_name,b2.b_name AS a_branch_name,u2.u_name AS a_user_name,u3.u_name AS createdBy,main_customer.m_c_name as reference_name  FROM customer LEFT JOIN translation ON customer.c_id = translation.c_id left join details ON translation.a_id=details.service_id LEFT join users u1 ON u1.u_id = customer.foreign_branchuser LEFT JOIN attributes att_tbl ON att_tbl.attribute_id = customer.c_state LEFT JOIN branch b1 ON b1.branch_id = customer.foreign_branch LEFT JOIN branch b2 ON  b2.branch_id = customer.branch_id LEFT JOIN users u2 ON u2.u_id = customer.u_id  LEFT JOIN users u3 ON u3.u_id = customer.created_id LEFT JOIN main_customer ON main_customer.m_c_id = customer.refrence_by  where customer.deleted=0 and (customer.u_id=${data.uid} OR customer.marketing_user=${data.uid} OR customer.foreign_branchuser = ${data.uid}) and translation.deleted=0 and details.deleted=0 and service_type=20 group by customer.c_id
      // UNION SELECT customer.c_id,customer.c_prefix,customer.c_name,customer.c_date,customer.created_id,customer.under_process_date,customer.mode,customer.awb_no,customer.d_p_name,customer.o_mode,customer.l_id,customer.foreign_branchuser,customer.is_cancel,customer.is_block,customer.c_mo_no,customer.c_email,customer.c_address,customer.c_gst_no,customer.c_s_type,customer.c_total_customer,customer.branch_id,customer.u_id,customer.foreign_branch,customer.c_tax,customer.tracking_id,details.detail_id,details.service_id,u1.u_name AS username,(SELECT COUNT(*) FROM customer WHERE deleted =0 and (u_id=${data.uid} OR marketing_user=${data.uid} OR customer.foreign_branchuser = ${data.uid}))as trows,att_tbl.name AS state,b1.b_name AS branch_name,b2.b_name AS a_branch_name,u2.u_name AS a_user_name,u3.u_name AS createdBy,main_customer.m_c_name as reference_name  FROM customer LEFT JOIN visa ON customer.c_id = visa.c_id left join details ON visa.v_id=details.service_id LEFT join users u1 ON u1.u_id = customer.foreign_branchuser LEFT JOIN attributes att_tbl ON att_tbl.attribute_id = customer.c_state LEFT JOIN branch b1 ON b1.branch_id = customer.foreign_branch LEFT JOIN branch b2 ON  b2.branch_id = customer.branch_id LEFT JOIN users u2 ON u2.u_id = customer.u_id  LEFT JOIN users u3 ON u3.u_id = customer.created_id LEFT JOIN main_customer ON main_customer.m_c_id = customer.refrence_by  where customer.deleted=0 and (customer.u_id=${data.uid} OR marketing_user=${data.uid} OR customer.foreign_branchuser = ${data.uid}) and visa.deleted=0 and details.deleted=0 and service_type=8 group by customer.c_id ORDER by c_id DESC`;

      getCustomerPaginationQuery = `SELECT customer.c_id  FROM customer LEFT JOIN attestation ON customer.c_id = attestation.c_id left join details ON attestation.a_id=details.service_id where customer.deleted=0 and attestation.deleted=0 and details.deleted=0 and service_type=10 AND  (customer.u_id=${data.uid} OR customer.marketing_user=${data.uid} OR customer.foreign_branchuser = ${data.uid} OR customer.created_id = ${data.uid}) group by customer.c_id 
      UNION SELECT customer.c_id  FROM customer LEFT JOIN apostille ON customer.c_id = apostille.c_id left join details ON apostille.a_id=details.service_id   where customer.deleted=0 and apostille.deleted=0 and details.deleted=0 and details.service_type=17 AND  (customer.u_id=${data.uid} OR customer.marketing_user=${data.uid} OR customer.foreign_branchuser = ${data.uid} OR customer.created_id = ${data.uid}) group by customer.c_id 
      UNION SELECT customer.c_id FROM customer LEFT JOIN translation ON customer.c_id = translation.c_id left join details ON translation.a_id=details.service_id  where customer.deleted=0 and translation.deleted=0 and details.deleted=0 and details.service_type=20 AND  (customer.u_id=${data.uid} OR customer.marketing_user=${data.uid} OR customer.foreign_branchuser = ${data.uid} OR customer.created_id = ${data.uid}) group by customer.c_id
       UNION SELECT customer.c_id  FROM customer LEFT JOIN visa ON customer.c_id = visa.c_id left join details ON visa.v_id=details.service_id  where customer.deleted=0 and visa.deleted=0 and details.deleted=0 and details.service_type=8 AND  (customer.u_id=${data.uid} OR customer.marketing_user=${data.uid} OR customer.foreign_branchuser = ${data.uid} OR customer.created_id = ${data.uid}) group by customer.c_id  `;

      sql = `SELECT customer.login_u_id,customer.city,customer.pincode,customer.c_id,customer.c_prefix,customer.c_name,customer.c_remark,customer.c_date,customer.created_id,customer.under_process_date,customer.mode,customer.awb_no,customer.d_p_name,customer.o_mode,customer.l_id,customer.foreign_branchuser,customer.is_cancel,customer.is_block,customer.c_mo_no,customer.c_email,customer.c_address,customer.c_gst_no,customer.c_s_type,customer.c_total_customer,customer.branch_id,customer.u_id,customer.foreign_branch,customer.c_tax,customer.tracking_id,details.detail_id,details.service_id,u1.u_name AS username,att_tbl.name AS state,b1.b_name AS branch_name,b2.b_name AS a_branch_name,u2.u_name AS a_user_name,u3.u_name AS createdBy,main_customer.m_c_name as reference_name  FROM customer LEFT JOIN attestation ON customer.c_id = attestation.c_id left join details ON attestation.a_id=details.service_id LEFT join users u1 ON u1.u_id = customer.foreign_branchuser LEFT JOIN attributes att_tbl ON att_tbl.attribute_id = customer.c_state LEFT JOIN branch b1 ON b1.branch_id = customer.foreign_branch LEFT JOIN branch b2 ON  b2.branch_id = customer.branch_id LEFT JOIN users u2 ON u2.u_id = customer.u_id  LEFT JOIN users u3 ON u3.u_id = customer.created_id LEFT JOIN main_customer ON main_customer.m_c_id = customer.refrence_by  where customer.deleted=0 and (customer.u_id=${data.uid} OR customer.marketing_user=${data.uid} OR customer.foreign_branchuser = ${data.uid} OR customer.created_id = ${data.uid}) and attestation.deleted=0 and details.deleted=0 and service_type=10 group by customer.c_id
      UNION SELECT customer.login_u_id,customer.city,customer.pincode,customer.c_id,customer.c_prefix,customer.c_name,customer.c_remark,customer.c_date,customer.created_id,customer.under_process_date,customer.mode,customer.awb_no,customer.d_p_name,customer.o_mode,customer.l_id,customer.foreign_branchuser,customer.is_cancel,customer.is_block,customer.c_mo_no,customer.c_email,customer.c_address,customer.c_gst_no,customer.c_s_type,customer.c_total_customer,customer.branch_id,customer.u_id,customer.foreign_branch,customer.c_tax,customer.tracking_id,details.detail_id,details.service_id,u1.u_name AS username,att_tbl.name AS state,b1.b_name AS branch_name,b2.b_name AS a_branch_name,u2.u_name AS a_user_name,u3.u_name AS createdBy,main_customer.m_c_name as reference_name  FROM customer LEFT JOIN apostille ON customer.c_id = apostille.c_id left join details ON apostille.a_id=details.service_id LEFT join users u1 ON u1.u_id = customer.foreign_branchuser LEFT JOIN attributes att_tbl ON att_tbl.attribute_id = customer.c_state LEFT JOIN branch b1 ON b1.branch_id = customer.foreign_branch LEFT JOIN branch b2 ON  b2.branch_id = customer.branch_id LEFT JOIN users u2 ON u2.u_id = customer.u_id  LEFT JOIN users u3 ON u3.u_id = customer.created_id LEFT JOIN main_customer ON main_customer.m_c_id = customer.refrence_by  where customer.deleted=0 and (customer.u_id=${data.uid} OR customer.marketing_user=${data.uid} OR customer.foreign_branchuser = ${data.uid} OR customer.created_id = ${data.uid}) and apostille.deleted=0 and details.deleted=0 and service_type=17 group by customer.c_id 
      UNION SELECT customer.login_u_id,customer.city,customer.pincode,customer.c_id,customer.c_prefix,customer.c_name,customer.c_remark,customer.c_date,customer.created_id,customer.under_process_date,customer.mode,customer.awb_no,customer.d_p_name,customer.o_mode,customer.l_id,customer.foreign_branchuser,customer.is_cancel,customer.is_block,customer.c_mo_no,customer.c_email,customer.c_address,customer.c_gst_no,customer.c_s_type,customer.c_total_customer,customer.branch_id,customer.u_id,customer.foreign_branch,customer.c_tax,customer.tracking_id,details.detail_id,details.service_id,u1.u_name AS username,att_tbl.name AS state,b1.b_name AS branch_name,b2.b_name AS a_branch_name,u2.u_name AS a_user_name,u3.u_name AS createdBy,main_customer.m_c_name as reference_name  FROM customer LEFT JOIN translation ON customer.c_id = translation.c_id left join details ON translation.a_id=details.service_id LEFT join users u1 ON u1.u_id = customer.foreign_branchuser LEFT JOIN attributes att_tbl ON att_tbl.attribute_id = customer.c_state LEFT JOIN branch b1 ON b1.branch_id = customer.foreign_branch LEFT JOIN branch b2 ON  b2.branch_id = customer.branch_id LEFT JOIN users u2 ON u2.u_id = customer.u_id  LEFT JOIN users u3 ON u3.u_id = customer.created_id LEFT JOIN main_customer ON main_customer.m_c_id = customer.refrence_by  where customer.deleted=0 and (customer.u_id=${data.uid} OR customer.marketing_user=${data.uid} OR customer.foreign_branchuser = ${data.uid} OR customer.created_id = ${data.uid}) and translation.deleted=0 and details.deleted=0 and service_type=20 group by customer.c_id 
      UNION SELECT customer.login_u_id,customer.city,customer.pincode,customer.c_id,customer.c_prefix,customer.c_name,customer.c_remark,customer.c_date,customer.created_id,customer.under_process_date,customer.mode,customer.awb_no,customer.d_p_name,customer.o_mode,customer.l_id,customer.foreign_branchuser,customer.is_cancel,customer.is_block,customer.c_mo_no,customer.c_email,customer.c_address,customer.c_gst_no,customer.c_s_type,customer.c_total_customer,customer.branch_id,customer.u_id,customer.foreign_branch,customer.c_tax,customer.tracking_id,details.detail_id,details.service_id,u1.u_name AS username,att_tbl.name AS state,b1.b_name AS branch_name,b2.b_name AS a_branch_name,u2.u_name AS a_user_name,u3.u_name AS createdBy,main_customer.m_c_name as reference_name  FROM customer LEFT JOIN visa ON customer.c_id = visa.c_id left join details ON visa.v_id=details.service_id LEFT join users u1 ON u1.u_id = customer.foreign_branchuser LEFT JOIN attributes att_tbl ON att_tbl.attribute_id = customer.c_state LEFT JOIN branch b1 ON b1.branch_id = customer.foreign_branch LEFT JOIN branch b2 ON  b2.branch_id = customer.branch_id LEFT JOIN users u2 ON u2.u_id = customer.u_id  LEFT JOIN users u3 ON u3.u_id = customer.created_id LEFT JOIN main_customer ON main_customer.m_c_id = customer.refrence_by  where customer.deleted=0 and (customer.u_id=${data.uid} OR marketing_user=${data.uid} OR customer.foreign_branchuser = ${data.uid} OR customer.created_id = ${data.uid}) and visa.deleted=0 and details.deleted=0 and service_type=8 group by customer.c_id ORDER by c_id DESC `;
      countquery = sql;
      sql += ` limit ${(data.page - 1) * data.perpage},${data.perpage}`;
    }

    let resp = await new Promise((resolve, reject) => {
      con.query(getCustomerPaginationQuery, function (err1, cres1) {
        if (err1) {
          console.log(err1);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (cres1.length > 0) {
            resolve({
              status: 1,
              t_rows: cres1.length,
            });
          } else {
            resolve({
              status: 0,
              data: [],
            });
          }
        }
      });
    });

    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              cData: result,
              trows: resp.t_rows,
            });

            // resolve({
            //   status: 1,
            //   cData: result,
            //   // c_id: result.c_id,
            // });
          } else {
            resolve({ status: 1, cData: [] });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function getTotalDraft(cid) {
  try {
    draftpaymentSql = `SELECT receive_amt FROM draft_payment join customer on draft_payment.c_id = customer.c_id WHERE draft_payment.deleted=0 and draft_payment.receive_amt!=0 and customer.c_id = ${cid} and draft_payment.approved_status =0`;
    let draftRes = await new Promise((resolve, reject) => {
      con.query(draftpaymentSql, async function (err, result) {
        if (err) {
          console.log(err);
        } else {
          if (result.length > 0) {
            let totalDraft = 0;
            for (let i = 0; i < result.length; i++) {
              totalDraft =
                parseInt(totalDraft) + parseInt(result[i].receive_amt);
            }
            resolve({ status: 1, result: totalDraft });
          } else {
            resolve({ status: 1, result: 0 });
          }
        }
      });
    });
    return draftRes;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

//2803
async function getpayment(data) {
  try {
    let record = [];
    let sql = "";
    sql = `SELECT *,(SELECT c_s_type FROM customer WHERE customer.c_id = payment.c_id)as c_s_type,(SELECT c_gst FROM customer WHERE customer.c_id = payment.c_id)as c_gst,(SELECT c_state FROM customer WHERE customer.c_id = payment.c_id)as c_state ,(SELECT c_name FROM customer WHERE customer.c_id = payment.c_id)as c_name,(SELECT c_prefix FROM customer WHERE customer.c_id = payment.c_id)as c_prefix,(SELECT branch_id FROM customer WHERE customer.c_id = payment.c_id)as branch_id,(SELECT is_draft_taken FROM draft_payment WHERE draft_payment.deleted=0 and c_id=${data.id} ORDER by d_p_id DESC LIMIT 1)as is_drafttds_taken FROM payment WHERE c_id = ${data.id} AND deleted=0  ORDER BY payment_id DESC LIMIT 1;`;
    let response1 = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            result.forEach(function (result) {
              resolve({
                status: 1,
                c_s_type: result.c_s_type,
                payment: result,
              });
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    let sql1 = "";
    let statusSql = "";
    if (response1.c_s_type == 8) {
      sql1 = `SELECT *,(SELECT GROUP_CONCAT(attributes.name SEPARATOR ',') as name FROM attributes where FIND_IN_SET (attributes.attribute_id , visa.v_country)) as vcountry,(SELECT name FROM attributes WHERE attributes.attribute_id = visa.v_type)as visa_type FROM visa WHERE c_id = ${data.id} AND deleted = 0;`;
      statusSql = `Select att_table1.name AS status_name FROM details detail_table LEFT JOIN attributes att_table1 ON att_table1.attribute_id = detail_table.status_id LEFT JOIN visa visa_table ON visa_table.v_id=detail_table.service_id and detail_table.service_type = 8  LEFT JOIN customer customer_table ON visa_table.c_id =  customer_table.c_id AND customer_table.deleted = 0 AND customer_table.is_block = 1 and customer_table.is_cancel = 0 WHERE  customer_table.c_id =${data.id}  AND customer_table.c_s_type = 8  AND   visa_table.deleted = 0 and  detail_table.service_type = 8 AND customer_table.deleted = 0  AND customer_table.is_block = 1 AND customer_table.is_cancel = 0  ORDER BY STR_TO_DATE(detail_table.status_change_date,'%d-%m-%Y %H:%i:%s') DESC LIMIT 1;`;
    } else if (response1.c_s_type == 10) {
      sql1 = `SELECT *,(SELECT name FROM attributes WHERE attributes.attribute_id=attestation.a_country)as country,(SELECT name FROM attributes WHERE attributes.attribute_id = attestation.a_type)as attestation_type,(SELECT COUNT(name) FROM attributes WHERE FIND_IN_SET (attributes.attribute_id , attestation.a_certificate)) as total_certificate FROM attestation WHERE c_id = ${data.id}  AND deleted = 0`;
      statusSql = `Select att_table1.name AS status_name FROM details detail_table LEFT JOIN attributes att_table1 ON att_table1.attribute_id = detail_table.status_id LEFT JOIN attestation attestation_table ON attestation_table.a_id=detail_table.service_id and  detail_table.service_type = 10 LEFT JOIN customer customer_table ON attestation_table.c_id =  customer_table.c_id AND customer_table.deleted = 0 AND customer_table.is_block = 1 and customer_table.is_cancel = 0 WHERE detail_table.service_type = 10 and customer_table.c_id =${data.id} AND customer_table.c_s_type = 10  AND  attestation_table.deleted = 0 AND customer_table.deleted = 0  AND customer_table.is_block = 1 AND customer_table.is_cancel = 0  ORDER BY STR_TO_DATE(detail_table.status_change_date,'%d-%m-%Y %H:%i:%s') DESC LIMIT 1;`;
    } else if (response1.c_s_type == 17) {
      sql1 = `SELECT *,(SELECT name FROM attributes WHERE attributes.attribute_id=apostille.a_country)as country,(SELECT name FROM attributes WHERE attributes.attribute_id = apostille.a_type)as apostille_type,(SELECT COUNT(name) FROM attributes WHERE FIND_IN_SET (attributes.attribute_id , apostille.a_certificate)) as total_certificate FROM apostille WHERE c_id = ${data.id}  AND deleted = 0`;
      statusSql = `Select att_table1.name AS status_name FROM details detail_table LEFT JOIN attributes att_table1 ON att_table1.attribute_id = detail_table.status_id LEFT JOIN apostille apostille_table ON apostille_table.a_id=detail_table.service_id  and detail_table.service_type = 17  LEFT JOIN customer customer_table ON apostille_table.c_id =  customer_table.c_id AND customer_table.deleted = 0 AND customer_table.is_block = 1 and customer_table.is_cancel = 0 WHERE detail_table.service_type = 17 and  customer_table.c_id =${data.id}  AND  customer_table.c_s_type = 17  AND  apostille_table.deleted = 0 AND customer_table.deleted = 0  AND customer_table.is_block = 1 AND customer_table.is_cancel = 0   ORDER BY STR_TO_DATE(detail_table.status_change_date,'%d-%m-%Y %H:%i:%s') DESC LIMIT 1;`;
    } else {
      sql1 = `SELECT *,(SELECT name FROM attributes WHERE attributes.attribute_id=translation.a_country)as country,(SELECT name FROM attributes WHERE attributes.attribute_id = translation.a_type)as translation_type,(SELECT COUNT(name) FROM attributes WHERE FIND_IN_SET (attributes.attribute_id , translation.a_certificate)) as total_certificate FROM translation WHERE c_id = ${data.id}  AND deleted = 0`;
      statusSql = `Select att_table1.name AS status_name FROM details detail_table LEFT JOIN attributes att_table1 ON att_table1.attribute_id = detail_table.status_id LEFT JOIN translation translation_table ON translation_table.a_id=detail_table.service_id and detail_table.service_type = 20  LEFT JOIN customer customer_table ON translation_table.c_id =  customer_table.c_id AND customer_table.deleted = 0 AND customer_table.is_block = 1 and customer_table.is_cancel = 0 WHERE  customer_table.c_id =${data.id}  AND  customer_table.c_s_type = 20  AND  translation_table.deleted = 0 AND detail_table.service_type = 20 AND customer_table.deleted = 0  AND customer_table.is_block = 1 AND customer_table.is_cancel = 0  ORDER BY STR_TO_DATE(detail_table.status_change_date,'%d-%m-%Y %H:%i:%s') DESC LIMIT 1;`;
    }

    let resp = await new Promise((resolve, reject) => {
      con.query(statusSql, function (err11, result11) {
        if (err11) {
          console.log(err11);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result11.length > 0) {
            resolve({ status_name: result11[0].status_name });
          } else {
            resolve({ status_name: "" });
          }
        }
      });
    });
    let response = await new Promise((resolve, reject) => {
      con.query(sql1, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              payment: response1.payment,
              result: result,
            });
          } else {
            resolve({
              status: 0,
              payment: response1.payment,
              result: [],
            });
          }
        }
      });
    });
    let sql2 = "";
    if (response1.c_s_type == 8) {
      for (i = 0; i < response.result.length; i++) {
        let country = response.result[i].v_country.split(",");
        for (j = 0; j < country.length; j++) {
          sql2 += `SELECT s_amount FROM serviceprice WHERE service = ${response1.c_s_type}  AND country = ${country[j]} AND s_type = ${response.result[i].v_type}  AND deleted = 0;`;
        }
      }
    } else {
      for (i = 0; i < response.result.length; i++) {
        sql2 += `SELECT s_amount FROM serviceprice WHERE service = ${response1.c_s_type}  AND country = ${response.result[i].a_country} AND s_type = ${response.result[i].a_type} AND  deleted = 0;`;
      }
    }

    let response2 = await new Promise((resolve, reject) => {
      con.query(sql2, async function (err, results, fields) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went wrong" });
        } else {
          if (results == undefined) {
            resolve({
              result: [0],
            });
          } else {
            if (results.length == 1) {
              results.forEach(function (res) {
                record.push(res.s_amount);
                resolve({
                  status: 1,
                  amount: record,
                  result: response.result,
                  payment: response1.payment,
                });
              });
            }
            if (results.length > 0) {
              results.forEach(function (result) {
                if (result.length > 0) {
                  result.forEach(function (res) {
                    record.push(res.s_amount);
                    resolve({
                      status: 1,
                      amount: record,
                      result: response.result,
                      payment: response1.payment,
                    });
                  });
                } else {
                  record.push(0);
                  resolve({
                    status: 1,
                    amount: record,
                    result: response.result,
                    payment: response1.payment,
                  });
                }
              });
            } else {
              resolve({
                result: [0],
              });
            }
          }
        }
      });
    });

    sql3 = `SELECT * FROM refund WHERE c_id = ${data.id} `;
    let response3 = await new Promise((resolve, reject) => {
      con.query(sql3, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          let sum = 0;
          result.map((res) => {
            sum = sum + parseInt(res.refund_price);
          });

          if (result.length > 0) {
            resolve({ status: 1, refund_price: sum });
          } else {
            resolve({ status: 1, refund_price: 0 });
          }
        }
      });
    });

    const total_draft = await getTotalDraft(data.id);

    let sql4 = `SELECT * FROM payment WHERE c_id = ${data.id} AND deleted=0  `;

    let response4 = await new Promise((resolve, reject) => {
      con.query(sql4, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              amount: record,
              result: response.result,
              payment: { ...response1.payment, status_name: resp.status_name },
              payments: result,
              refund_price: response3.refund_price,
              totalDraft: total_draft.result,
              // payments1 : res.payment
            });
          } else {
            resolve({
              status: 0,
              amount: [],
              result: [],
              payment: [],
              payments: [],
              refund_price: [],
              totalDraft: 0,
              // payments1 : res.payment
            });
          }
        }
      });
    });
    return response4;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function searchpayment(data) {
  try {
    sql1 = `SELECT user_type FROM users WHERE u_id = ${data.uid} and deleted =0`;

    let response1 = await new Promise((resolve, reject) => {
      con.query(sql1, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            result.forEach(function (result) {
              resolve({
                status: 1,
                user_type: result.user_type,
              });
            });
          } else {
            resolve({
              status: 0,
              user_type: "Something went wrong...",
            });
          }
        }
      });
    });
    // sql = `SELECT *,(SELECT COUNT(*) FROM payment  WHERE deleted =0)as trows,(SELECT name FROM attributes WHERE attributes.attribute_id = p.mode_id)AS mode_name
    // FROM customer AS c
    // JOIN payment AS p
    //   ON c.c_id = p.payment_id WHERE p.deleted =0 `;

    // if (typeof data.mode_id != "undefined" && data.mode_id != "") {
    //   sql += ` and p.mode_id='${data.mode_id}'`;
    // }
    // if (typeof data.s_date != "undefined" && data.s_date != "") {
    //   sql += ` and STR_TO_DATE(p.payment_date,"%d-%m-%Y")>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y")`;
    // }
    // if (typeof data.e_date != "undefined" && data.e_date != "") {
    //   sql += ` and STR_TO_DATE(p.payment_date,"%d-%m-%Y")<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y")`;
    // }
    // if (typeof data.c_name != "undefined" && data.c_name != "") {
    //   sql += ` and c.c_name ='${data.c_name}'`;
    // }
    // sql1 = sql;

    // sql += ` order by p.payment_id DESC limit ${(data.page - 1) * data.perpage},${data.perpage}`;
    sql = `SELECT *,(SELECT name FROM attributes WHERE attributes.attribute_id = payment.mode_id)AS mode_name ,(SELECT b_name FROM branch WHERE branch.branch_id = customer.branch_id ) as branch_name FROM payment join customer on payment.c_id = customer.c_id WHERE payment.deleted=0 and payment.receive_amt!=0`;

    if (
      typeof data.mode_id != "undefined" &&
      data.mode_id != "" &&
      data.mode_id != 0
    ) {
      sql += ` and payment.mode_id='${data.mode_id}'`;
    }
    if (typeof data.s_date != "undefined" && data.s_date != "") {
      sql += ` and STR_TO_DATE(payment.payment_date,"%d-%m-%Y")>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y")`;
    }
    if (typeof data.e_date != "undefined" && data.e_date != "") {
      sql += ` and STR_TO_DATE(payment.payment_date,"%d-%m-%Y")<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y")`;
    }
    if (typeof data.c_name != "undefined" && data.c_name != "") {
      sql += ` and customer.c_name like '%${data.c_name}%'`;
    }
    if (
      typeof data.t_id != "undefined" &&
      data.t_id != "" &&
      data.t_id.length != 2
    ) {
      sql += ` and payment.tracking_id like '%${data.t_id}%'`;
    }
    if (
      typeof data.s_branch_id != "undefined" &&
      data.s_branch_id != "" &&
      data.s_branch_id != 0
    ) {
      sql += ` and (customer.branch_id='${data.s_branch_id}')`;
    }
    if (
      typeof data.allocate_id != "undefined" &&
      data.allocate_id != "" &&
      data.allocate_id != 0
    ) {
      sql += ` and payment.u_id=${data.allocate_id}`;
    }
    //2803
    if (
      typeof data.transaction_id != "undefined" &&
      data.transaction_id != "" &&
      data.transaction_id != 0
    ) {
      sql += ` and payment.chk_dd_no like '%${data.transaction_id}%'`;
    }
    if (response1.user_type == 3) {
      sql += ` and payment.u_id=${data.uid}`;
    }
    if (response1.user_type == 1) {
      sql += ` and customer.branch_id= ${data.bid}`;
    }
    sql1 = sql;
    sql += ` order by payment.payment_id DESC limit ${(data.page - 1) * data.perpage
      },${data.perpage}`;

    let response = await new Promise((resolve, reject) => {
      con.query(sql1, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            con.query(sql, function (err, res) {
              if (err) {
                console.log(err);
              } else {
                if (res.length > 0) {
                  resolve({
                    status: 1,
                    data: res,
                    t_rows: result.length,
                  });
                }
              }
            });
          } else {
            resolve({
              status: 0,
              data: [],
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

//2803
async function searchcustomer(data) {
  try {
    sql1 = `SELECT user_type,s_u_permission FROM users WHERE u_id = ${data.u_id} and deleted =0`;
    let response1 = await new Promise((resolve, reject) => {
      con.query(sql1, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            result.forEach(function (result) {
              resolve({
                status: 1,
                user_type: result.user_type,
                s_u_permission: result.s_u_permission,
              });
            });
          } else {
            resolve({
              status: 0,
              user_type: "Something went wrong...",
            });
          }
        }
      });
    });
    let sql = "";
    let getCustomerPaginationSql = "";
    if (response1.user_type == 0) {
      let tfuserid = "";
      let tuserid = "";
      if (
        typeof data.allocate_id != "undefined" &&
        data.allocate_id != "" &&
        data.allocate_id != 0 &&
        data.c_type == 1
      ) {
        tfuserid = ` and customer.foreign_branchuser='${data.allocate_id}'`;
      }
      if (
        typeof data.allocate_id != "undefined" &&
        data.allocate_id != "" &&
        data.allocate_id != 0 &&
        data.c_type == 2
      ) {
        tuserid = ` and customer.u_id='${data.allocate_id}'`;
      }
      getCustomerPaginationSql = `SELECT customer.c_id  FROM customer LEFT JOIN payment ON customer.c_id = payment.c_id LEFT JOIN attestation ON customer.c_id = attestation.c_id left join details ON attestation.a_id=details.service_id where customer.deleted=0 and attestation.deleted=0 and payment.deleted = 0 and details.deleted=0 and service_type=10 `;
      sql = `SELECT customer.login_u_id,customer.city,customer.pincode,customer.created_id,customer.under_process_date,customer.mode,customer.awb_no,customer.d_p_name,customer.o_mode,customer.l_id,customer.foreign_branchuser,customer.is_cancel,customer.is_block,customer.c_id as c_id,customer.c_prefix as c_prefix,customer.c_name,customer.c_date,customer.c_mo_no,customer.c_email,customer.c_address,customer.c_gst_no,customer.c_s_type,customer.c_total_customer,customer.branch_id,customer.u_id,customer.foreign_branch,customer.c_tax,customer.tracking_id,details.detail_id,details.service_id,payment.invoice_no,(SELECT u_name FROM users WHERE users.u_id = customer.foreign_branchuser)as username,(SELECT name FROM attributes WHERE attributes.attribute_id = customer.c_state)as state,(SELECT b_name FROM branch WHERE branch.branch_id = customer.foreign_branch)as branch_name,(SELECT b_name FROM branch WHERE branch.branch_id = customer.branch_id)as a_branch_name,(SELECT u_name FROM users WHERE users.u_id = customer.u_id)as a_user_name,(SELECT u_name FROM users WHERE users.u_id = customer.created_id)as createdBy,(SELECT m_c_name FROM main_customer WHERE main_customer.m_c_id = customer.refrence_by)as reference_name FROM customer LEFT JOIN payment ON customer.c_id = payment.c_id LEFT JOIN attestation ON customer.c_id = attestation.c_id left join details ON attestation.a_id=details.service_id where customer.deleted=0 and attestation.deleted=0 and details.deleted=0 and payment.deleted = 0 and service_type=10`;
      if (typeof data.c_name != "undefined" && data.c_name != "") {
        sql += ` and customer.c_name like '%${data.c_name}%'`;
        getCustomerPaginationSql += ` and customer.c_name like '%${data.c_name}%'`;
      }
      if (typeof data.c_mo_no != "undefined" && data.c_mo_no != "") {
        sql += ` and customer.c_mo_no like '%${data.c_mo_no}%'`;
        getCustomerPaginationSql += ` and customer.c_mo_no like '%${data.c_mo_no}%'`;
      }
      //grishma
      if (typeof data.c_email != "undefined" && data.c_email != "") {
        sql += ` and customer.c_email like '%${data.c_email}%'`;
        getCustomerPaginationSql += ` and customer.c_email like '%${data.c_email}%'`;
      }
      if (typeof data.c_date != "undefined" && data.c_date != "") {
        sql += ` and STR_TO_DATE(customer.c_date,"%y-%m-%d")=STR_TO_DATE('${data.c_date}',"%y-%m-%d")`;
        getCustomerPaginationSql += ` and STR_TO_DATE(customer.c_date,"%y-%m-%d")=STR_TO_DATE('${data.c_date}',"%y-%m-%d")`;
      }
      if (
        typeof data.service != "undefined" &&
        data.service != "" &&
        data.service != 0
      ) {
        sql += ` and customer.c_s_type='${data.service}'`;
        getCustomerPaginationSql += ` and customer.c_s_type='${data.service}'`;
      }
      if (
        typeof data.c_tax != "undefined" &&
        data.c_tax != "" &&
        data.c_tax != -1
      ) {
        sql += ` and customer.c_tax='${data.c_tax}'`;
        getCustomerPaginationSql += ` and customer.c_tax='${data.c_tax}'`;
      }
      if (
        typeof data.c_type != "undefined" &&
        data.c_type != "" &&
        data.c_type != 0 &&
        data.c_type == 1
      ) {
        sql += ` and customer.transfer_status=1 and customer.foreign_branch=${data.s_branch_id} ${tfuserid}`;
        getCustomerPaginationSql += ` and customer.transfer_status=1 and customer.foreign_branch=${data.s_branch_id} ${tfuserid}`;
      }
      if (
        typeof data.c_type != "undefined" &&
        data.c_type != "" &&
        data.c_type != 0 &&
        data.c_type == 2
      ) {
        sql += ` and customer.transfer_status=1 and customer.branch_id='${data.s_branch_id}' ${tuserid}`;
        getCustomerPaginationSql += ` and customer.transfer_status=1 and customer.branch_id='${data.s_branch_id}' ${tuserid}`;
      }
      if (
        typeof data.s_branch_id != "undefined" &&
        data.s_branch_id != "" &&
        data.s_branch_id != 0 &&
        data.c_type == 0
      ) {
        sql += ` and (customer.branch_id='${data.s_branch_id}' or customer.foreign_branch='${data.s_branch_id}')`;
        getCustomerPaginationSql += ` and (customer.branch_id='${data.s_branch_id}' or customer.foreign_branch='${data.s_branch_id}')`;
      }
      if (
        typeof data.allocate_id != "undefined" &&
        data.allocate_id != "" &&
        data.allocate_id != 0 &&
        data.c_type == 0
      ) {
        sql += ` and (customer.u_id='${data.allocate_id}' or foreign_branchuser = ${data.allocate_id})`;
        getCustomerPaginationSql += ` and (customer.u_id='${data.allocate_id}' or foreign_branchuser = ${data.allocate_id})`;
      }
      if (
        typeof data.t_id != "undefined" &&
        data.t_id != "" &&
        data.t_id.length != 2
      ) {
        sql += ` and customer.tracking_id like '%${data.t_id}%'`;
        getCustomerPaginationSql += ` and customer.tracking_id like '%${data.t_id}%'`;
      }
      if (typeof data.invoice_no != "undefined" && data.invoice_no != "") {
        sql += ` and payment.invoice_no like '%${data.invoice_no}%'`;
        getCustomerPaginationSql += ` and payment.invoice_no like '%${data.invoice_no}%'`;
      }
      getCustomerPaginationSql += `group by customer.c_id UNION SELECT customer.c_id  FROM customer LEFT JOIN payment ON customer.c_id = payment.c_id LEFT JOIN apostille ON customer.c_id = apostille.c_id left join details ON apostille.a_id=details.service_id where customer.deleted=0 and apostille.deleted=0 and payment.deleted = 0 and details.deleted=0 and service_type=17  `;
      sql += ` group by customer.c_id 
      UNION SELECT customer.login_u_id,customer.city,customer.pincode,customer.created_id,customer.under_process_date,customer.mode,customer.awb_no,customer.d_p_name,customer.o_mode,customer.l_id,customer.foreign_branchuser,customer.is_cancel,customer.is_block,customer.c_id as c_id,customer.c_prefix as c_prefix,customer.c_name,customer.c_date,customer.c_mo_no,customer.c_email,customer.c_address,customer.c_gst_no,customer.c_s_type,customer.c_total_customer,customer.branch_id,customer.u_id,customer.foreign_branch,customer.c_tax,customer.tracking_id,details.detail_id,details.service_id,payment.invoice_no,(SELECT u_name FROM users WHERE users.u_id = customer.foreign_branchuser)as username,(SELECT name FROM attributes WHERE attributes.attribute_id = customer.c_state)as state,(SELECT b_name FROM branch WHERE branch.branch_id = customer.foreign_branch)as branch_name,(SELECT b_name FROM branch WHERE branch.branch_id = customer.branch_id)as a_branch_name,(SELECT u_name FROM users WHERE users.u_id = customer.u_id)as a_user_name,(SELECT u_name FROM users WHERE users.u_id = customer.created_id)as createdBy,(SELECT m_c_name FROM main_customer WHERE main_customer.m_c_id = customer.refrence_by)as reference_name FROM customer LEFT JOIN payment ON customer.c_id = payment.c_id LEFT JOIN apostille ON customer.c_id = apostille.c_id left join details ON apostille.a_id=details.service_id where customer.deleted=0 and apostille.deleted=0 and details.deleted=0 and payment.deleted = 0 and service_type=17`;
      if (typeof data.c_name != "undefined" && data.c_name != "") {
        sql += ` and customer.c_name like '%${data.c_name}%'`;
        getCustomerPaginationSql += ` and customer.c_name like '%${data.c_name}%'`;
      }
      if (typeof data.c_mo_no != "undefined" && data.c_mo_no != "") {
        sql += ` and customer.c_mo_no like '%${data.c_mo_no}%'`;
        getCustomerPaginationSql += ` and customer.c_mo_no like '%${data.c_mo_no}%'`;
      }
      //grishma
      if (typeof data.c_email != "undefined" && data.c_email != "") {
        sql += ` and customer.c_email like '%${data.c_email}%'`;
        getCustomerPaginationSql += ` and customer.c_email like '%${data.c_email}%'`;
      }
      if (typeof data.c_date != "undefined" && data.c_date != "") {
        sql += ` and STR_TO_DATE(customer.c_date,"%y-%m-%d")=STR_TO_DATE('${data.c_date}',"%y-%m-%d")`;
        getCustomerPaginationSql += ` and STR_TO_DATE(customer.c_date,"%y-%m-%d")=STR_TO_DATE('${data.c_date}',"%y-%m-%d")`;
      }
      if (
        typeof data.service != "undefined" &&
        data.service != "" &&
        data.service != 0
      ) {
        sql += ` and customer.c_s_type='${data.service}'`;
        getCustomerPaginationSql += ` and customer.c_s_type='${data.service}'`;
      }
      if (
        typeof data.c_tax != "undefined" &&
        data.c_tax != "" &&
        data.c_tax != -1
      ) {
        sql += ` and customer.c_tax='${data.c_tax}'`;
        getCustomerPaginationSql += ` and customer.c_tax='${data.c_tax}'`;
      }
      if (
        typeof data.c_type != "undefined" &&
        data.c_type != "" &&
        data.c_type != 0 &&
        data.c_type == 1
      ) {
        sql += ` and customer.transfer_status=1 and customer.foreign_branch=${data.s_branch_id} ${tfuserid}`;
        getCustomerPaginationSql += ` and customer.transfer_status=1 and customer.foreign_branch=${data.s_branch_id} ${tfuserid}`;
      }
      if (
        typeof data.c_type != "undefined" &&
        data.c_type != "" &&
        data.c_type != 0 &&
        data.c_type == 2
      ) {
        sql += ` and customer.transfer_status=1 and customer.branch_id='${data.s_branch_id}'  ${tuserid}`;
        getCustomerPaginationSql += ` and customer.transfer_status=1 and customer.branch_id='${data.s_branch_id}'  ${tuserid}`;
      }
      if (
        typeof data.s_branch_id != "undefined" &&
        data.s_branch_id != "" &&
        data.s_branch_id != 0 &&
        data.c_type == 0
      ) {
        sql += ` and (customer.branch_id='${data.s_branch_id}' or customer.foreign_branch='${data.s_branch_id}')`;
        getCustomerPaginationSql += ` and (customer.branch_id='${data.s_branch_id}' or customer.foreign_branch='${data.s_branch_id}')`;
      }
      if (
        typeof data.allocate_id != "undefined" &&
        data.allocate_id != "" &&
        data.allocate_id != 0 &&
        data.c_type == 0
      ) {
        sql += ` and (customer.u_id='${data.allocate_id}' or foreign_branchuser = ${data.allocate_id})`;
        getCustomerPaginationSql += ` and (customer.u_id='${data.allocate_id}' or foreign_branchuser = ${data.allocate_id})`;
      }
      if (
        typeof data.t_id != "undefined" &&
        data.t_id != "" &&
        data.t_id.length != 2
      ) {
        sql += ` and customer.tracking_id like '%${data.t_id}%'`;
        getCustomerPaginationSql += ` and customer.tracking_id like '%${data.t_id}%'`;
      }
      if (typeof data.invoice_no != "undefined" && data.invoice_no != "") {
        sql += ` and payment.invoice_no like '%${data.invoice_no}%'`;
        getCustomerPaginationSql += ` and payment.invoice_no like '%${data.invoice_no}%'`;
      }
      //3003
      getCustomerPaginationSql += `group by customer.c_id  UNION SELECT customer.c_id FROM customer LEFT JOIN payment ON customer.c_id = payment.c_id LEFT JOIN translation ON customer.c_id = translation.c_id left join details ON translation.a_id=details.service_id  where customer.deleted=0 and translation.deleted=0 and details.deleted=0  and payment.deleted = 0 and details.service_type=20   `;
      sql += ` group by customer.c_id
      UNION select customer.login_u_id,customer.city,customer.pincode,customer.created_id,customer.under_process_date,customer.mode,customer.awb_no,customer.d_p_name,customer.o_mode,customer.l_id,customer.foreign_branchuser,customer.is_cancel,customer.is_block,customer.c_id as c_id,customer.c_prefix as c_prefix,customer.c_name,customer.c_date,customer.c_mo_no,customer.c_email,customer.c_address,customer.c_gst_no,customer.c_s_type,customer.c_total_customer,customer.branch_id,customer.u_id,customer.foreign_branch,customer.c_tax,customer.tracking_id,details.detail_id,details.service_id,payment.invoice_no,(SELECT u_name FROM users WHERE users.u_id = customer.foreign_branchuser)as username,(SELECT name FROM attributes WHERE attributes.attribute_id = customer.c_state)as state,(SELECT b_name FROM branch WHERE branch.branch_id = customer.foreign_branch)as branch_name,(SELECT b_name FROM branch WHERE branch.branch_id = customer.branch_id)as a_branch_name,(SELECT u_name FROM users WHERE users.u_id = customer.u_id)as a_user_name,(SELECT u_name FROM users WHERE users.u_id = customer.created_id)as createdBy,(SELECT m_c_name FROM main_customer WHERE main_customer.m_c_id = customer.refrence_by)as reference_name FROM customer LEFT JOIN payment ON customer.c_id = payment.c_id LEFT JOIN translation ON customer.c_id = translation.c_id left join details ON translation.a_id=details.service_id where customer.deleted=0 and translation.deleted=0 and details.deleted=0 and payment.deleted = 0 and service_type=20`;
      if (typeof data.c_name != "undefined" && data.c_name != "") {
        sql += ` and customer.c_name like '%${data.c_name}%'`;
        getCustomerPaginationSql += ` and customer.c_name like '%${data.c_name}%'`;
      }
      if (typeof data.c_mo_no != "undefined" && data.c_mo_no != "") {
        sql += ` and customer.c_mo_no like '%${data.c_mo_no}%'`;
        getCustomerPaginationSql += ` and customer.c_mo_no like '%${data.c_mo_no}%'`;
      }
      //grishma
      if (typeof data.c_email != "undefined" && data.c_email != "") {
        sql += ` and customer.c_email like '%${data.c_email}%'`;
        getCustomerPaginationSql += ` and customer.c_email like '%${data.c_email}%'`;
      }
      if (typeof data.c_date != "undefined" && data.c_date != "") {
        sql += ` and STR_TO_DATE(customer.c_date,"%y-%m-%d")=STR_TO_DATE('${data.c_date}',"%y-%m-%d")`;
        getCustomerPaginationSql += ` and STR_TO_DATE(customer.c_date,"%y-%m-%d")=STR_TO_DATE('${data.c_date}',"%y-%m-%d")`;
      }
      if (
        typeof data.service != "undefined" &&
        data.service != "" &&
        data.service != 0
      ) {
        sql += ` and customer.c_s_type='${data.service}'`;
        getCustomerPaginationSql += ` and customer.c_s_type='${data.service}'`;
      }
      if (
        typeof data.c_tax != "undefined" &&
        data.c_tax != "" &&
        data.c_tax != -1
      ) {
        sql += ` and customer.c_tax='${data.c_tax}'`;
        getCustomerPaginationSql += ` and customer.c_tax='${data.c_tax}'`;
      }
      if (
        typeof data.c_type != "undefined" &&
        data.c_type != "" &&
        data.c_type != 0 &&
        data.c_type == 1
      ) {
        sql += ` and customer.transfer_status=1 and customer.foreign_branch=${data.s_branch_id} ${tfuserid}`;
        getCustomerPaginationSql += ` and customer.transfer_status=1 and customer.foreign_branch=${data.s_branch_id} ${tfuserid}`;
      }
      if (
        typeof data.c_type != "undefined" &&
        data.c_type != "" &&
        data.c_type != 0 &&
        data.c_type == 2
      ) {
        sql += ` and customer.transfer_status=1 and customer.branch_id='${data.s_branch_id}' ${tuserid}`;
        getCustomerPaginationSql += ` and customer.transfer_status=1 and customer.branch_id='${data.s_branch_id}' ${tuserid}`;
      }
      if (
        typeof data.s_branch_id != "undefined" &&
        data.s_branch_id != "" &&
        data.s_branch_id != 0 &&
        data.c_type == 0
      ) {
        sql += ` and (customer.branch_id='${data.s_branch_id}' or customer.foreign_branch='${data.s_branch_id}')`;
        getCustomerPaginationSql += ` and (customer.branch_id='${data.s_branch_id}' or customer.foreign_branch='${data.s_branch_id}')`;
      }
      if (
        typeof data.allocate_id != "undefined" &&
        data.allocate_id != "" &&
        data.allocate_id != 0 &&
        data.c_type == 0
      ) {
        sql += ` and (customer.u_id='${data.allocate_id}' or foreign_branchuser = ${data.allocate_id})`;
        getCustomerPaginationSql += ` and (customer.u_id='${data.allocate_id}' or foreign_branchuser = ${data.allocate_id})`;
      }
      if (
        typeof data.t_id != "undefined" &&
        data.t_id != "" &&
        data.t_id.length != 2
      ) {
        sql += ` and customer.tracking_id like '%${data.t_id}%'`;
        getCustomerPaginationSql += ` and customer.tracking_id like '%${data.t_id}%'`;
      }
      if (typeof data.invoice_no != "undefined" && data.invoice_no != "") {
        sql += ` and payment.invoice_no like '%${data.invoice_no}%'`;
        getCustomerPaginationSql += ` and payment.invoice_no like '%${data.invoice_no}%'`;
      }
      getCustomerPaginationSql += `group by customer.c_id UNION SELECT customer.c_id  FROM customer LEFT JOIN payment ON customer.c_id = payment.c_id LEFT JOIN visa ON customer.c_id = visa.c_id left join details ON visa.v_id=details.service_id  where customer.deleted=0 and visa.deleted=0 and details.deleted=0 and payment.deleted = 0 and details.service_type=8   `;
      sql += ` group by customer.c_id
      UNION select customer.login_u_id,customer.city,customer.pincode,customer.created_id,customer.under_process_date,customer.mode,customer.awb_no,customer.d_p_name,customer.o_mode,customer.l_id,customer.foreign_branchuser,customer.is_cancel,customer.is_block,customer.c_id as c_id,customer.c_prefix as c_prefix,customer.c_name,customer.c_date,customer.c_mo_no,customer.c_email,customer.c_address,customer.c_gst_no,customer.c_s_type,customer.c_total_customer,customer.branch_id,customer.u_id,customer.foreign_branch,customer.c_tax,customer.tracking_id,details.detail_id,details.service_id,payment.invoice_no,(SELECT u_name FROM users WHERE users.u_id = customer.foreign_branchuser)as username,(SELECT name FROM attributes WHERE attributes.attribute_id = customer.c_state)as state,(SELECT b_name FROM branch WHERE branch.branch_id = customer.foreign_branch)as branch_name,(SELECT b_name FROM branch WHERE branch.branch_id = customer.branch_id)as a_branch_name,(SELECT u_name FROM users WHERE users.u_id = customer.u_id)as a_user_name,(SELECT u_name FROM users WHERE users.u_id = customer.created_id)as createdBy,(SELECT m_c_name FROM main_customer WHERE main_customer.m_c_id = customer.refrence_by)as reference_name FROM customer LEFT JOIN payment ON customer.c_id = payment.c_id LEFT JOIN visa ON customer.c_id = visa.c_id left join details ON visa.v_id=details.service_id where customer.deleted=0 and visa.deleted=0 and details.deleted=0 and payment.deleted = 0 and service_type=8`;
      if (typeof data.c_name != "undefined" && data.c_name != "") {
        sql += ` and customer.c_name like '%${data.c_name}%'`;
        getCustomerPaginationSql += ` and customer.c_name like '%${data.c_name}%'`;
      }
      if (typeof data.c_mo_no != "undefined" && data.c_mo_no != "") {
        sql += ` and customer.c_mo_no like '%${data.c_mo_no}%'`;
        getCustomerPaginationSql += ` and customer.c_mo_no like '%${data.c_mo_no}%'`;
      }
      //grishma
      if (typeof data.c_email != "undefined" && data.c_email != "") {
        sql += ` and customer.c_email like '%${data.c_email}%'`;
        getCustomerPaginationSql += ` and customer.c_email like '%${data.c_email}%'`;
      }
      if (typeof data.c_date != "undefined" && data.c_date != "") {
        sql += ` and STR_TO_DATE(customer.c_date,"%y-%m-%d")=STR_TO_DATE('${data.c_date}',"%y-%m-%d")`;
        getCustomerPaginationSql += ` and STR_TO_DATE(customer.c_date,"%y-%m-%d")=STR_TO_DATE('${data.c_date}',"%y-%m-%d")`;
      }
      if (
        typeof data.service != "undefined" &&
        data.service != "" &&
        data.service != 0
      ) {
        sql += ` and customer.c_s_type='${data.service}'`;
        getCustomerPaginationSql += ` and customer.c_s_type='${data.service}'`;
      }
      if (
        typeof data.c_tax != "undefined" &&
        data.c_tax != "" &&
        data.c_tax != -1
      ) {
        sql += ` and customer.c_tax='${data.c_tax}'`;
        getCustomerPaginationSql += ` and customer.c_tax='${data.c_tax}'`;
      }
      if (
        typeof data.c_type != "undefined" &&
        data.c_type != "" &&
        data.c_type != 0 &&
        data.c_type == 1
      ) {
        sql += ` and customer.transfer_status=1 and customer.foreign_branch=${data.s_branch_id} ${tfuserid}`;
        getCustomerPaginationSql += ` and customer.transfer_status=1 and customer.foreign_branch=${data.s_branch_id} ${tfuserid}`;
      }
      if (
        typeof data.c_type != "undefined" &&
        data.c_type != "" &&
        data.c_type != 0 &&
        data.c_type == 2
      ) {
        sql += ` and customer.transfer_status=1 and customer.branch_id='${data.s_branch_id}' ${tuserid}`;
        getCustomerPaginationSql += ` and customer.transfer_status=1 and customer.branch_id='${data.s_branch_id}' ${tuserid}`;
      }
      if (
        typeof data.s_branch_id != "undefined" &&
        data.s_branch_id != "" &&
        data.s_branch_id != 0 &&
        data.c_type == 0
      ) {
        sql += ` and (customer.branch_id='${data.s_branch_id}' or customer.foreign_branch='${data.s_branch_id}')`;
        getCustomerPaginationSql += ` and (customer.branch_id='${data.s_branch_id}' or customer.foreign_branch='${data.s_branch_id}')`;
      }
      if (
        typeof data.allocate_id != "undefined" &&
        data.allocate_id != "" &&
        data.allocate_id != 0 &&
        data.c_type == 0
      ) {
        sql += ` and (customer.u_id='${data.allocate_id}' or foreign_branchuser = ${data.allocate_id})`;
        getCustomerPaginationSql += ` and (customer.u_id='${data.allocate_id}' or foreign_branchuser = ${data.allocate_id})`;
      }
      if (
        typeof data.t_id != "undefined" &&
        data.t_id != "" &&
        data.t_id.length != 2
      ) {
        sql += ` and customer.tracking_id like '%${data.t_id}%'`;
        getCustomerPaginationSql += ` and customer.tracking_id like '%${data.t_id}%'`;
      }
      if (typeof data.invoice_no != "undefined" && data.invoice_no != "") {
        sql += ` and payment.invoice_no like '%${data.invoice_no}%'`;
        getCustomerPaginationSql += ` and payment.invoice_no like '%${data.invoice_no}%'`;
      }
      getCustomerPaginationSql += ` group by customer.c_id`;
      sql += ` group by customer.c_id`;
    } else if (
      response1.user_type == 1 ||
      (response1.user_type == 3 && response1.s_u_permission == 1)
    ) {
      let userid = "";
      let fuserid = "";
      let tuserid = "";
      let tfuserid = "";
      if (
        typeof data.allocate_id != "undefined" &&
        data.allocate_id != "" &&
        data.allocate_id != 0 &&
        data.c_type == 0
      ) {
        userid = ` and customer.u_id='${data.allocate_id}'`;
        fuserid = ` and customer.foreign_branchuser='${data.allocate_id}'`;
      }
      if (
        typeof data.allocate_id != "undefined" &&
        data.allocate_id != "" &&
        data.allocate_id != 0 &&
        data.c_type == 1
      ) {
        tfuserid = ` and customer.foreign_branchuser='${data.allocate_id}'`;
      }
      if (
        typeof data.allocate_id != "undefined" &&
        data.allocate_id != "" &&
        data.allocate_id != 0 &&
        data.c_type == 2
      ) {
        tuserid = ` and customer.u_id='${data.allocate_id}'`;
      }
      getCustomerPaginationSql = `SELECT customer.c_id  FROM customer LEFT JOIN payment ON customer.c_id = payment.c_id LEFT JOIN attestation ON customer.c_id = attestation.c_id left join details ON attestation.a_id=details.service_id where customer.deleted=0 and attestation.deleted=0 and payment.deleted = 0 and details.deleted=0 and details.service_type=10 AND ((customer.foreign_branch = ${data.branch_id} ${fuserid}) OR (customer.branch_id=${data.branch_id} ${userid})) `;
      sql = `SELECT customer.login_u_id,customer.city,customer.pincode,customer.created_id,customer.under_process_date,customer.mode,customer.awb_no,customer.d_p_name,customer.o_mode,customer.l_id,customer.foreign_branchuser,customer.is_cancel,customer.is_block,customer.c_id as c_id,customer.c_prefix as c_prefix,customer.c_name,customer.c_date,customer.c_mo_no,customer.c_email,customer.c_address,customer.c_gst_no,customer.c_s_type,customer.c_total_customer,customer.branch_id,customer.u_id,customer.foreign_branch,customer.c_tax,customer.tracking_id,details.detail_id,details.service_id,payment.invoice_no,(SELECT u_name FROM users WHERE users.u_id = customer.foreign_branchuser)as username,(SELECT name FROM attributes WHERE attributes.attribute_id = customer.c_state)as state,(SELECT b_name FROM branch WHERE branch.branch_id = customer.foreign_branch)as branch_name,(SELECT b_name FROM branch WHERE branch.branch_id = customer.branch_id)as a_branch_name,(SELECT u_name FROM users WHERE users.u_id = customer.u_id)as a_user_name,(SELECT u_name FROM users WHERE users.u_id = customer.created_id)as createdBy,(SELECT m_c_name FROM main_customer WHERE main_customer.m_c_id = customer.refrence_by)as reference_name FROM customer LEFT JOIN payment ON customer.c_id = payment.c_id LEFT JOIN attestation ON customer.c_id = attestation.c_id left join details ON attestation.a_id=details.service_id where customer.deleted=0 and attestation.deleted=0 and details.deleted=0 and payment.deleted = 0 and service_type=10 AND ((customer.foreign_branch = ${data.branch_id} ${fuserid}) OR (customer.branch_id=${data.branch_id} ${userid}))`;
      if (typeof data.c_name != "undefined" && data.c_name != "") {
        sql += ` and customer.c_name like '%${data.c_name}%'`;
        getCustomerPaginationSql += ` and customer.c_name like '%${data.c_name}%'`;
      }
      if (typeof data.c_mo_no != "undefined" && data.c_mo_no != "") {
        sql += ` and customer.c_mo_no like '%${data.c_mo_no}%'`;
        getCustomerPaginationSql += ` and customer.c_mo_no like '%${data.c_mo_no}%'`;
      }
      //grishma
      if (typeof data.c_email != "undefined" && data.c_email != "") {
        sql += ` and customer.c_email like '%${data.c_email}%'`;
        getCustomerPaginationSql += ` and customer.c_email like '%${data.c_email}%'`;
      }
      if (typeof data.c_date != "undefined" && data.c_date != "") {
        sql += ` and STR_TO_DATE(customer.c_date,"%y-%m-%d")=STR_TO_DATE('${data.c_date}',"%y-%m-%d")`;
        getCustomerPaginationSql += ` and STR_TO_DATE(customer.c_date,"%y-%m-%d")=STR_TO_DATE('${data.c_date}',"%y-%m-%d")`;
      }
      if (
        typeof data.service != "undefined" &&
        data.service != "" &&
        data.service != 0
      ) {
        sql += ` and customer.c_s_type='${data.service}'`;
        getCustomerPaginationSql += ` and customer.c_s_type='${data.service}'`;
      }
      if (
        typeof data.c_tax != "undefined" &&
        data.c_tax != "" &&
        data.c_tax != -1
      ) {
        sql += ` and customer.c_tax='${data.c_tax}'`;
        getCustomerPaginationSql += ` and customer.c_tax='${data.c_tax}'`;
      }
      if (
        typeof data.c_type != "undefined" &&
        data.c_type != "" &&
        data.c_type != 0 &&
        data.c_type == 1
      ) {
        sql += ` and customer.transfer_status=1 and customer.foreign_branch='${data.branch_id}' ${tfuserid}`;
        getCustomerPaginationSql += ` and customer.transfer_status=1 and customer.foreign_branch='${data.branch_id}' ${tfuserid}`;
      }
      if (
        typeof data.c_type != "undefined" &&
        data.c_type != "" &&
        data.c_type != 0 &&
        data.c_type == 2
      ) {
        sql += ` and customer.transfer_status=1 and customer.branch_id='${data.branch_id}' ${tuserid}`;
        getCustomerPaginationSql += ` and customer.transfer_status=1 and customer.branch_id='${data.branch_id}' ${tuserid}`;
      }
      if (
        typeof data.t_id != "undefined" &&
        data.t_id != "" &&
        data.t_id.length != 2
      ) {
        sql += ` and customer.tracking_id like '%${data.t_id}%'`;
        getCustomerPaginationSql += ` and customer.tracking_id like '%${data.t_id}%'`;
      }
      if (typeof data.invoice_no != "undefined" && data.invoice_no != "") {
        sql += ` and payment.invoice_no like '%${data.invoice_no}%'`;
        getCustomerPaginationSql += ` and payment.invoice_no like '%${data.invoice_no}%'`;
      }
      getCustomerPaginationSql += ` group by customer.c_id  UNION SELECT customer.c_id  FROM customer LEFT JOIN payment ON customer.c_id = payment.c_id LEFT JOIN apostille ON customer.c_id = apostille.c_id left join details ON apostille.a_id=details.service_id   where customer.deleted=0 and apostille.deleted=0 and details.deleted=0 and payment.deleted = 0 and details.service_type=17 AND ((customer.foreign_branch = ${data.branch_id} ${fuserid}) OR (customer.branch_id=${data.branch_id} ${userid})) `;
      sql += ` group by customer.c_id 
      UNION SELECT customer.login_u_id,customer.city,customer.pincode,customer.created_id,customer.under_process_date,customer.mode,customer.awb_no,customer.d_p_name,customer.o_mode,customer.l_id,customer.foreign_branchuser,customer.is_cancel,customer.is_block,customer.c_id as c_id,customer.c_prefix as c_prefix,customer.c_name,customer.c_date,customer.c_mo_no,customer.c_email,customer.c_address,customer.c_gst_no,customer.c_s_type,customer.c_total_customer,customer.branch_id,customer.u_id,customer.foreign_branch,customer.c_tax,customer.tracking_id,details.detail_id,details.service_id,payment.invoice_no,(SELECT u_name FROM users WHERE users.u_id = customer.foreign_branchuser)as username,(SELECT name FROM attributes WHERE attributes.attribute_id = customer.c_state)as state,(SELECT b_name FROM branch WHERE branch.branch_id = customer.foreign_branch)as branch_name,(SELECT b_name FROM branch WHERE branch.branch_id = customer.branch_id)as a_branch_name,(SELECT u_name FROM users WHERE users.u_id = customer.u_id)as a_user_name,(SELECT u_name FROM users WHERE users.u_id = customer.created_id)as createdBy,(SELECT m_c_name FROM main_customer WHERE main_customer.m_c_id = customer.refrence_by)as reference_name FROM customer LEFT JOIN payment ON customer.c_id = payment.c_id LEFT JOIN apostille ON customer.c_id = apostille.c_id left join details ON apostille.a_id=details.service_id where customer.deleted=0 and apostille.deleted=0 and details.deleted=0 and payment.deleted = 0 and service_type=17 AND ((customer.foreign_branch = ${data.branch_id} ${fuserid}) OR (customer.branch_id=${data.branch_id} ${userid}))`;
      if (typeof data.c_name != "undefined" && data.c_name != "") {
        sql += ` and customer.c_name like '%${data.c_name}%'`;
        getCustomerPaginationSql += ` and customer.c_name like '%${data.c_name}%'`;
      }
      if (typeof data.c_mo_no != "undefined" && data.c_mo_no != "") {
        sql += ` and customer.c_mo_no like '%${data.c_mo_no}%'`;
        getCustomerPaginationSql += ` and customer.c_mo_no like '%${data.c_mo_no}%'`;
      }
      //grishma
      if (typeof data.c_email != "undefined" && data.c_email != "") {
        sql += ` and customer.c_email like '%${data.c_email}%'`;
        getCustomerPaginationSql += ` and customer.c_email like '%${data.c_email}%'`;
      }
      if (typeof data.c_date != "undefined" && data.c_date != "") {
        sql += ` and STR_TO_DATE(customer.c_date,"%y-%m-%d")=STR_TO_DATE('${data.c_date}',"%y-%m-%d")`;
        getCustomerPaginationSql += ` and STR_TO_DATE(customer.c_date,"%y-%m-%d")=STR_TO_DATE('${data.c_date}',"%y-%m-%d")`;
      }
      if (
        typeof data.service != "undefined" &&
        data.service != "" &&
        data.service != 0
      ) {
        sql += ` and customer.c_s_type='${data.service}'`;
        getCustomerPaginationSql += ` and customer.c_s_type='${data.service}'`;
      }
      if (
        typeof data.c_tax != "undefined" &&
        data.c_tax != "" &&
        data.c_tax != -1
      ) {
        sql += ` and customer.c_tax='${data.c_tax}'`;
        getCustomerPaginationSql += ` and customer.c_tax='${data.c_tax}'`;
      }
      if (
        typeof data.c_type != "undefined" &&
        data.c_type != "" &&
        data.c_type != 0 &&
        data.c_type == 1
      ) {
        sql += ` and customer.transfer_status=1 and customer.foreign_branch='${data.branch_id}' ${tfuserid}`;
        getCustomerPaginationSql += ` and customer.transfer_status=1 and customer.foreign_branch='${data.branch_id}' ${tfuserid}`;
      }
      if (
        typeof data.c_type != "undefined" &&
        data.c_type != "" &&
        data.c_type != 0 &&
        data.c_type == 2
      ) {
        sql += ` and customer.transfer_status=1 and customer.branch_id='${data.branch_id}' ${tuserid}`;
        getCustomerPaginationSql += ` and customer.transfer_status=1 and customer.branch_id='${data.branch_id}' ${tuserid}`;
      }
      if (
        typeof data.t_id != "undefined" &&
        data.t_id != "" &&
        data.t_id.length != 2
      ) {
        sql += ` and customer.tracking_id like '%${data.t_id}%'`;
        getCustomerPaginationSql += ` and customer.tracking_id like '%${data.t_id}%'`;
      }
      if (typeof data.invoice_no != "undefined" && data.invoice_no != "") {
        sql += ` and payment.invoice_no like '%${data.invoice_no}%'`;
        getCustomerPaginationSql += ` and payment.invoice_no like '%${data.invoice_no}%'`;
      }
      getCustomerPaginationSql += ` group by customer.c_id UNION SELECT customer.c_id FROM customer LEFT JOIN payment ON customer.c_id = payment.c_id LEFT JOIN translation ON customer.c_id = translation.c_id left join details ON translation.a_id=details.service_id  where customer.deleted=0 and translation.deleted=0 and details.deleted=0  and payment.deleted = 0 and details.service_type=20 AND ((customer.foreign_branch = ${data.branch_id} ${fuserid}) OR (customer.branch_id=${data.branch_id} ${userid})) `;
      sql += ` group by customer.c_id
      UNION select customer.login_u_id,customer.city,customer.pincode,customer.created_id,customer.under_process_date,customer.mode,customer.awb_no,customer.d_p_name,customer.o_mode,customer.l_id,customer.foreign_branchuser,customer.is_cancel,customer.is_block,customer.c_id as c_id,customer.c_prefix as c_prefix,customer.c_name,customer.c_date,customer.c_mo_no,customer.c_email,customer.c_address,customer.c_gst_no,customer.c_s_type,customer.c_total_customer,customer.branch_id,customer.u_id,customer.foreign_branch,customer.c_tax,customer.tracking_id,details.detail_id,details.service_id,payment.invoice_no,(SELECT u_name FROM users WHERE users.u_id = customer.foreign_branchuser)as username,(SELECT name FROM attributes WHERE attributes.attribute_id = customer.c_state)as state,(SELECT b_name FROM branch WHERE branch.branch_id = customer.foreign_branch)as branch_name,(SELECT b_name FROM branch WHERE branch.branch_id = customer.branch_id)as a_branch_name,(SELECT u_name FROM users WHERE users.u_id = customer.u_id)as a_user_name,(SELECT u_name FROM users WHERE users.u_id = customer.created_id)as createdBy,(SELECT m_c_name FROM main_customer WHERE main_customer.m_c_id = customer.refrence_by)as reference_name FROM customer LEFT JOIN payment ON customer.c_id = payment.c_id LEFT JOIN translation ON customer.c_id = translation.c_id left join details ON translation.a_id=details.service_id where customer.deleted=0 and translation.deleted=0 and details.deleted=0 and payment.deleted = 0 and service_type=20 AND ((customer.foreign_branch = ${data.branch_id} ${fuserid}) OR (customer.branch_id=${data.branch_id} ${userid}))`;
      if (typeof data.c_name != "undefined" && data.c_name != "") {
        sql += ` and customer.c_name like '%${data.c_name}%'`;
        getCustomerPaginationSql += ` and customer.c_name like '%${data.c_name}%'`;
      }
      if (typeof data.c_mo_no != "undefined" && data.c_mo_no != "") {
        sql += ` and customer.c_mo_no like '%${data.c_mo_no}%'`;
        getCustomerPaginationSql += ` and customer.c_mo_no like '%${data.c_mo_no}%'`;
      }
      //grishma
      if (typeof data.c_email != "undefined" && data.c_email != "") {
        sql += ` and customer.c_email like '%${data.c_email}%'`;
        getCustomerPaginationSql += ` and customer.c_email like '%${data.c_email}%'`;
      }
      if (typeof data.c_date != "undefined" && data.c_date != "") {
        sql += ` and STR_TO_DATE(customer.c_date,"%y-%m-%d")=STR_TO_DATE('${data.c_date}',"%y-%m-%d")`;
        getCustomerPaginationSql += ` and STR_TO_DATE(customer.c_date,"%y-%m-%d")=STR_TO_DATE('${data.c_date}',"%y-%m-%d")`;
      }
      if (
        typeof data.service != "undefined" &&
        data.service != "" &&
        data.service != 0
      ) {
        sql += ` and customer.c_s_type='${data.service}'`;
        getCustomerPaginationSql += ` and customer.c_s_type='${data.service}'`;
      }
      if (
        typeof data.c_tax != "undefined" &&
        data.c_tax != "" &&
        data.c_tax != -1
      ) {
        sql += ` and customer.c_tax='${data.c_tax}'`;
        getCustomerPaginationSql += ` and customer.c_tax='${data.c_tax}'`;
      }
      if (
        typeof data.c_type != "undefined" &&
        data.c_type != "" &&
        data.c_type != 0 &&
        data.c_type == 1
      ) {
        sql += ` and customer.transfer_status=1 and customer.foreign_branch='${data.branch_id}' ${tfuserid}`;
        getCustomerPaginationSql += ` and customer.transfer_status=1 and customer.foreign_branch='${data.branch_id}' ${tfuserid}`;
      }
      if (
        typeof data.c_type != "undefined" &&
        data.c_type != "" &&
        data.c_type != 0 &&
        data.c_type == 2
      ) {
        sql += ` and customer.transfer_status=1 and customer.branch_id='${data.branch_id}' ${tuserid}`;
        getCustomerPaginationSql += ` and customer.transfer_status=1 and customer.branch_id='${data.branch_id}' ${tuserid}`;
      }
      if (
        typeof data.t_id != "undefined" &&
        data.t_id != "" &&
        data.t_id.length != 2
      ) {
        sql += ` and customer.tracking_id like '%${data.t_id}%'`;
        getCustomerPaginationSql += ` and customer.tracking_id like '%${data.t_id}%'`;
      }
      if (typeof data.invoice_no != "undefined" && data.invoice_no != "") {
        sql += ` and payment.invoice_no like '%${data.invoice_no}%'`;
        getCustomerPaginationSql += ` and payment.invoice_no like '%${data.invoice_no}%'`;
      }
      getCustomerPaginationSql += ` group by customer.c_id
      UNION SELECT customer.c_id  FROM customer LEFT JOIN payment ON customer.c_id = payment.c_id LEFT JOIN visa ON customer.c_id = visa.c_id left join details ON visa.v_id=details.service_id  where customer.deleted=0 and visa.deleted=0 and details.deleted=0 and payment.deleted = 0 and details.service_type=8 AND ((customer.foreign_branch = ${data.branch_id} ${fuserid}) OR (customer.branch_id=${data.branch_id} ${userid})) `;
      sql += ` group by customer.c_id
      UNION select customer.login_u_id,customer.city,customer.pincode,customer.created_id,customer.under_process_date,customer.mode,customer.awb_no,customer.d_p_name,customer.o_mode,customer.l_id,customer.foreign_branchuser,customer.is_cancel,customer.is_block,customer.c_id as c_id,customer.c_prefix as c_prefix,customer.c_name,customer.c_date,customer.c_mo_no,customer.c_email,customer.c_address,customer.c_gst_no,customer.c_s_type,customer.c_total_customer,customer.branch_id,customer.u_id,customer.foreign_branch,customer.c_tax,customer.tracking_id,details.detail_id,details.service_id,payment.invoice_no,(SELECT u_name FROM users WHERE users.u_id = customer.foreign_branchuser)as username,(SELECT name FROM attributes WHERE attributes.attribute_id = customer.c_state)as state,(SELECT b_name FROM branch WHERE branch.branch_id = customer.foreign_branch)as branch_name,(SELECT b_name FROM branch WHERE branch.branch_id = customer.branch_id)as a_branch_name,(SELECT u_name FROM users WHERE users.u_id = customer.u_id)as a_user_name,(SELECT u_name FROM users WHERE users.u_id = customer.created_id)as createdBy,(SELECT m_c_name FROM main_customer WHERE main_customer.m_c_id = customer.refrence_by)as reference_name FROM customer LEFT JOIN payment ON customer.c_id = payment.c_id LEFT JOIN visa ON customer.c_id = visa.c_id left join details ON visa.v_id=details.service_id where customer.deleted=0 and visa.deleted=0 and details.deleted=0 and payment.deleted = 0 and service_type=8 AND ((customer.foreign_branch = ${data.branch_id} ${fuserid}) OR (customer.branch_id=${data.branch_id} ${userid}))`;
      if (typeof data.c_name != "undefined" && data.c_name != "") {
        sql += ` and customer.c_name like '%${data.c_name}%'`;
        getCustomerPaginationSql += ` and customer.c_name like '%${data.c_name}%'`;
      }
      if (typeof data.c_mo_no != "undefined" && data.c_mo_no != "") {
        sql += ` and customer.c_mo_no like '%${data.c_mo_no}%'`;
        getCustomerPaginationSql += ` and customer.c_mo_no like '%${data.c_mo_no}%'`;
      }
      //grishma
      if (typeof data.c_email != "undefined" && data.c_email != "") {
        sql += ` and customer.c_email like '%${data.c_email}%'`;
        getCustomerPaginationSql += ` and customer.c_email like '%${data.c_email}%'`;
      }
      if (typeof data.c_date != "undefined" && data.c_date != "") {
        sql += ` and STR_TO_DATE(customer.c_date,"%y-%m-%d")=STR_TO_DATE('${data.c_date}',"%y-%m-%d")`;
        getCustomerPaginationSql += ` and STR_TO_DATE(customer.c_date,"%y-%m-%d")=STR_TO_DATE('${data.c_date}',"%y-%m-%d")`;
      }
      if (
        typeof data.service != "undefined" &&
        data.service != "" &&
        data.service != 0
      ) {
        sql += ` and customer.c_s_type='${data.service}'`;
        getCustomerPaginationSql += ` and customer.c_s_type='${data.service}'`;
      }
      if (
        typeof data.c_tax != "undefined" &&
        data.c_tax != "" &&
        data.c_tax != -1
      ) {
        sql += ` and customer.c_tax='${data.c_tax}'`;
        getCustomerPaginationSql += ` and customer.c_tax='${data.c_tax}'`;
      }
      if (
        typeof data.c_type != "undefined" &&
        data.c_type != "" &&
        data.c_type != 0 &&
        data.c_type == 1
      ) {
        sql += ` and customer.transfer_status=1 and customer.foreign_branch='${data.branch_id}' ${tfuserid}`;
        getCustomerPaginationSql += ` and customer.transfer_status=1 and customer.foreign_branch='${data.branch_id}' ${tfuserid}`;
      }
      if (
        typeof data.c_type != "undefined" &&
        data.c_type != "" &&
        data.c_type != 0 &&
        data.c_type == 2
      ) {
        sql += ` and customer.transfer_status=1 and customer.branch_id='${data.branch_id}' ${tuserid}`;
        getCustomerPaginationSql += ` and customer.transfer_status=1 and customer.branch_id='${data.branch_id}' ${tuserid}`;
      }
      if (
        typeof data.t_id != "undefined" &&
        data.t_id != "" &&
        data.t_id.length != 2
      ) {
        sql += ` and customer.tracking_id like '%${data.t_id}%'`;
        getCustomerPaginationSql += ` and customer.tracking_id like '%${data.t_id}%'`;
      }
      if (typeof data.invoice_no != "undefined" && data.invoice_no != "") {
        sql += ` and payment.invoice_no like '%${data.invoice_no}%'`;
        getCustomerPaginationSql += ` and payment.invoice_no like '%${data.invoice_no}%'`;
      }
      getCustomerPaginationSql += ` group by customer.c_id`;
      sql += ` group by customer.c_id`;
    } else {
      getCustomerPaginationSql = `SELECT customer.c_id  FROM customer LEFT JOIN payment ON customer.c_id = payment.c_id LEFT JOIN attestation ON customer.c_id = attestation.c_id left join details ON attestation.a_id=details.service_id where customer.deleted=0 and attestation.deleted=0 and payment.deleted = 0 and details.deleted=0 and details.service_type=10  AND (customer.u_id=${data.u_id} OR customer.marketing_user=${data.u_id} OR customer.foreign_branchuser = ${data.u_id} OR customer.created_id = ${data.u_id}) `;
      sql = `SELECT customer.login_u_id,customer.city,customer.pincode,customer.created_id,customer.under_process_date,customer.mode,customer.awb_no,customer.d_p_name,customer.o_mode,customer.l_id,customer.foreign_branchuser,customer.is_cancel,customer.is_block,customer.c_id as c_id,customer.c_prefix as c_prefix,customer.c_name,customer.c_date,customer.c_mo_no,customer.c_email,customer.c_address,customer.c_gst_no,customer.c_s_type,customer.c_total_customer,customer.branch_id,customer.u_id,customer.foreign_branch,customer.c_tax,customer.tracking_id,details.detail_id,details.service_id,payment.invoice_no,(SELECT u_name FROM users WHERE users.u_id = customer.foreign_branchuser)as username,(SELECT name FROM attributes WHERE attributes.attribute_id = customer.c_state)as state,(SELECT b_name FROM branch WHERE branch.branch_id = customer.foreign_branch)as branch_name,(SELECT b_name FROM branch WHERE branch.branch_id = customer.branch_id)as a_branch_name,(SELECT u_name FROM users WHERE users.u_id = customer.u_id)as a_user_name,(SELECT u_name FROM users WHERE users.u_id = customer.created_id)as createdBy,(SELECT m_c_name FROM main_customer WHERE main_customer.m_c_id = customer.refrence_by)as reference_name FROM customer LEFT JOIN payment ON customer.c_id = payment.c_id LEFT JOIN attestation ON customer.c_id = attestation.c_id left join details ON attestation.a_id=details.service_id where customer.deleted=0 and attestation.deleted=0 and details.deleted=0 and payment.deleted = 0 and service_type=10 AND (customer.u_id=${data.u_id} OR customer.marketing_user=${data.u_id} OR customer.foreign_branchuser = ${data.u_id} OR customer.created_id = ${data.u_id})`;
      if (typeof data.c_name != "undefined" && data.c_name != "") {
        sql += ` and customer.c_name like '%${data.c_name}%'`;
        getCustomerPaginationSql += ` and customer.c_name like '%${data.c_name}%'`;
      }
      if (typeof data.c_mo_no != "undefined" && data.c_mo_no != "") {
        sql += ` and customer.c_mo_no like '%${data.c_mo_no}%'`;
        getCustomerPaginationSql += ` and customer.c_mo_no like '%${data.c_mo_no}%'`;
      }
      //grishma
      if (typeof data.c_email != "undefined" && data.c_email != "") {
        sql += ` and customer.c_email like '%${data.c_email}%'`;
        getCustomerPaginationSql += ` and customer.c_email like '%${data.c_email}%'`;
      }
      if (typeof data.c_date != "undefined" && data.c_date != "") {
        sql += ` and STR_TO_DATE(customer.c_date,"%y-%m-%d")=STR_TO_DATE('${data.c_date}',"%y-%m-%d")`;
        getCustomerPaginationSql += ` and STR_TO_DATE(customer.c_date,"%y-%m-%d")=STR_TO_DATE('${data.c_date}',"%y-%m-%d")`;
      }
      if (
        typeof data.service != "undefined" &&
        data.service != "" &&
        data.service != 0
      ) {
        sql += ` and customer.c_s_type='${data.service}'`;
        getCustomerPaginationSql += ` and customer.c_s_type='${data.service}'`;
      }
      if (
        typeof data.c_tax != "undefined" &&
        data.c_tax != "" &&
        data.c_tax != -1
      ) {
        sql += ` and customer.c_tax='${data.c_tax}'`;
        getCustomerPaginationSql += ` and customer.c_tax='${data.c_tax}'`;
      }
      if (
        typeof data.c_type != "undefined" &&
        data.c_type != "" &&
        data.c_type != 0 &&
        data.c_type == 1
      ) {
        sql += ` and customer.transfer_status=1 and customer.foreign_branch='${data.branch_id}'`;
        getCustomerPaginationSql += ` and customer.transfer_status=1 and customer.foreign_branch='${data.branch_id}'`;
      }
      if (
        typeof data.c_type != "undefined" &&
        data.c_type != "" &&
        data.c_type != 0 &&
        data.c_type == 2
      ) {
        sql += ` and customer.transfer_status=1 and customer.branch_id='${data.branch_id}'`;
        getCustomerPaginationSql += ` and customer.transfer_status=1 and customer.branch_id='${data.branch_id}'`;
      }
      if (
        typeof data.t_id != "undefined" &&
        data.t_id != "" &&
        data.t_id.length != 2
      ) {
        sql += ` and customer.tracking_id like '%${data.t_id}%'`;
        getCustomerPaginationSql += ` and customer.tracking_id like '%${data.t_id}%'`;
      }
      if (typeof data.invoice_no != "undefined" && data.invoice_no != "") {
        sql += ` and payment.invoice_no like '%${data.invoice_no}%'`;
        getCustomerPaginationSql += ` and payment.invoice_no like '%${data.invoice_no}%'`;
      }
      getCustomerPaginationSql += ` group by customer.c_id 
      UNION SELECT customer.c_id  FROM customer LEFT JOIN payment ON customer.c_id = payment.c_id LEFT JOIN apostille ON customer.c_id = apostille.c_id left join details ON apostille.a_id=details.service_id   where customer.deleted=0 and apostille.deleted=0 and details.deleted=0 and payment.deleted = 0 and details.service_type=17 AND (customer.u_id=${data.u_id} OR customer.marketing_user=${data.u_id} OR customer.foreign_branchuser = ${data.u_id} OR customer.created_id = ${data.u_id})`;
      sql += ` group by customer.c_id 
      UNION SELECT customer.login_u_id,customer.city,customer.pincode,customer.created_id,customer.under_process_date,customer.mode,customer.awb_no,customer.d_p_name,customer.o_mode,customer.l_id,customer.foreign_branchuser,customer.is_cancel,customer.is_block,customer.c_id as c_id,customer.c_prefix as c_prefix,customer.c_name,customer.c_date,customer.c_mo_no,customer.c_email,customer.c_address,customer.c_gst_no,customer.c_s_type,customer.c_total_customer,customer.branch_id,customer.u_id,customer.foreign_branch,customer.c_tax,customer.tracking_id,details.detail_id,details.service_id,payment.invoice_no,(SELECT u_name FROM users WHERE users.u_id = customer.foreign_branchuser)as username,(SELECT name FROM attributes WHERE attributes.attribute_id = customer.c_state)as state,(SELECT b_name FROM branch WHERE branch.branch_id = customer.foreign_branch)as branch_name,(SELECT b_name FROM branch WHERE branch.branch_id = customer.branch_id)as a_branch_name,(SELECT u_name FROM users WHERE users.u_id = customer.u_id)as a_user_name,(SELECT u_name FROM users WHERE users.u_id = customer.created_id)as createdBy,(SELECT m_c_name FROM main_customer WHERE main_customer.m_c_id = customer.refrence_by)as reference_name FROM customer LEFT JOIN payment ON customer.c_id = payment.c_id LEFT JOIN apostille ON customer.c_id = apostille.c_id left join details ON apostille.a_id=details.service_id where customer.deleted=0 and apostille.deleted=0 and details.deleted=0 and payment.deleted = 0 and service_type=17 AND (customer.u_id=${data.u_id} OR customer.marketing_user=${data.u_id} OR customer.foreign_branchuser = ${data.u_id} OR customer.created_id = ${data.u_id})`;
      if (typeof data.c_name != "undefined" && data.c_name != "") {
        sql += ` and customer.c_name like '%${data.c_name}%'`;
        getCustomerPaginationSql += ` and customer.c_name like '%${data.c_name}%'`;
      }
      if (typeof data.c_mo_no != "undefined" && data.c_mo_no != "") {
        sql += ` and customer.c_mo_no like '%${data.c_mo_no}%'`;
        getCustomerPaginationSql += ` and customer.c_mo_no like '%${data.c_mo_no}%'`;
      }
      //grishma
      if (typeof data.c_email != "undefined" && data.c_email != "") {
        sql += ` and customer.c_email like '%${data.c_email}%'`;
        getCustomerPaginationSql += ` and customer.c_email like '%${data.c_email}%'`;
      }
      if (typeof data.c_date != "undefined" && data.c_date != "") {
        sql += ` and STR_TO_DATE(customer.c_date,"%y-%m-%d")=STR_TO_DATE('${data.c_date}',"%y-%m-%d")`;
        getCustomerPaginationSql += ` and STR_TO_DATE(customer.c_date,"%y-%m-%d")=STR_TO_DATE('${data.c_date}',"%y-%m-%d")`;
      }
      if (
        typeof data.service != "undefined" &&
        data.service != "" &&
        data.service != 0
      ) {
        sql += ` and customer.c_s_type='${data.service}'`;
        getCustomerPaginationSql += ` and customer.c_s_type='${data.service}'`;
      }
      if (
        typeof data.c_tax != "undefined" &&
        data.c_tax != "" &&
        data.c_tax != -1
      ) {
        sql += ` and customer.c_tax='${data.c_tax}'`;
        getCustomerPaginationSql += ` and customer.c_tax='${data.c_tax}'`;
      }
      if (
        typeof data.c_type != "undefined" &&
        data.c_type != "" &&
        data.c_type != 0 &&
        data.c_type == 1
      ) {
        sql += ` and customer.transfer_status=1 and customer.foreign_branch='${data.branch_id}'`;
        getCustomerPaginationSql += ` and customer.transfer_status=1 and customer.foreign_branch='${data.branch_id}'`;
      }
      if (
        typeof data.c_type != "undefined" &&
        data.c_type != "" &&
        data.c_type != 0 &&
        data.c_type == 2
      ) {
        sql += ` and customer.transfer_status=1 and customer.branch_id='${data.branch_id}'`;
        getCustomerPaginationSql += ` and customer.transfer_status=1 and customer.branch_id='${data.branch_id}'`;
      }
      if (
        typeof data.t_id != "undefined" &&
        data.t_id != "" &&
        data.t_id.length != 2
      ) {
        sql += ` and customer.tracking_id like '%${data.t_id}%'`;
        getCustomerPaginationSql += ` and customer.tracking_id like '%${data.t_id}%'`;
      }
      if (typeof data.invoice_no != "undefined" && data.invoice_no != "") {
        sql += ` and payment.invoice_no like '%${data.invoice_no}%'`;
        getCustomerPaginationSql += ` and payment.invoice_no like '%${data.invoice_no}%'`;
      }
      getCustomerPaginationSql += ` group by customer.c_id 
      UNION SELECT customer.c_id FROM customer LEFT JOIN payment ON customer.c_id = payment.c_id LEFT JOIN translation ON customer.c_id = translation.c_id left join details ON translation.a_id=details.service_id  where customer.deleted=0 and translation.deleted=0 and details.deleted=0  and payment.deleted = 0 and details.service_type=20 AND (customer.u_id=${data.u_id} OR customer.marketing_user=${data.u_id} OR customer.foreign_branchuser = ${data.u_id} OR customer.created_id = ${data.u_id})`;
      sql += ` group by customer.c_id
      UNION select customer.login_u_id,customer.city,customer.pincode,customer.created_id,customer.under_process_date,customer.mode,customer.awb_no,customer.d_p_name,customer.o_mode,customer.l_id,customer.foreign_branchuser,customer.is_cancel,customer.is_block,customer.c_id as c_id,customer.c_prefix as c_prefix,customer.c_name,customer.c_date,customer.c_mo_no,customer.c_email,customer.c_address,customer.c_gst_no,customer.c_s_type,customer.c_total_customer,customer.branch_id,customer.u_id,customer.foreign_branch,customer.c_tax,customer.tracking_id,details.detail_id,details.service_id,payment.invoice_no,(SELECT u_name FROM users WHERE users.u_id = customer.foreign_branchuser)as username,(SELECT name FROM attributes WHERE attributes.attribute_id = customer.c_state)as state,(SELECT b_name FROM branch WHERE branch.branch_id = customer.foreign_branch)as branch_name,(SELECT b_name FROM branch WHERE branch.branch_id = customer.branch_id)as a_branch_name,(SELECT u_name FROM users WHERE users.u_id = customer.u_id)as a_user_name,(SELECT u_name FROM users WHERE users.u_id = customer.created_id)as createdBy,(SELECT m_c_name FROM main_customer WHERE main_customer.m_c_id = customer.refrence_by)as reference_name FROM customer LEFT JOIN payment ON customer.c_id = payment.c_id LEFT JOIN translation ON customer.c_id = translation.c_id left join details ON translation.a_id=details.service_id where customer.deleted=0 and translation.deleted=0 and details.deleted=0 and payment.deleted = 0 and service_type=20 AND (customer.u_id=${data.u_id} OR customer.marketing_user=${data.u_id} OR customer.foreign_branchuser = ${data.u_id} OR customer.created_id = ${data.u_id})`;
      if (typeof data.c_name != "undefined" && data.c_name != "") {
        sql += ` and customer.c_name like '%${data.c_name}%'`;
        getCustomerPaginationSql += ` and customer.c_name like '%${data.c_name}%'`;
      }
      if (typeof data.c_mo_no != "undefined" && data.c_mo_no != "") {
        sql += ` and customer.c_mo_no like '%${data.c_mo_no}%'`;
        getCustomerPaginationSql += ` and customer.c_mo_no like '%${data.c_mo_no}%'`;
      }
      //grishma
      if (typeof data.c_email != "undefined" && data.c_email != "") {
        sql += ` and customer.c_email like '%${data.c_email}%'`;
        getCustomerPaginationSql += ` and customer.c_email like '%${data.c_email}%'`;
      }
      if (typeof data.c_date != "undefined" && data.c_date != "") {
        sql += ` and STR_TO_DATE(customer.c_date,"%y-%m-%d")=STR_TO_DATE('${data.c_date}',"%y-%m-%d")`;
        getCustomerPaginationSql += ` and STR_TO_DATE(customer.c_date,"%y-%m-%d")=STR_TO_DATE('${data.c_date}',"%y-%m-%d")`;
      }
      if (
        typeof data.service != "undefined" &&
        data.service != "" &&
        data.service != 0
      ) {
        sql += ` and customer.c_s_type='${data.service}'`;
        getCustomerPaginationSql += ` and customer.c_s_type='${data.service}'`;
      }
      if (
        typeof data.c_tax != "undefined" &&
        data.c_tax != "" &&
        data.c_tax != -1
      ) {
        sql += ` and customer.c_tax='${data.c_tax}'`;
        getCustomerPaginationSql += ` and customer.c_tax='${data.c_tax}'`;
      }
      if (
        typeof data.c_type != "undefined" &&
        data.c_type != "" &&
        data.c_type != 0 &&
        data.c_type == 1
      ) {
        sql += ` and customer.transfer_status=1 and customer.foreign_branch='${data.branch_id}'`;
        getCustomerPaginationSql += ` and customer.transfer_status=1 and customer.foreign_branch='${data.branch_id}'`;
      }
      if (
        typeof data.c_type != "undefined" &&
        data.c_type != "" &&
        data.c_type != 0 &&
        data.c_type == 2
      ) {
        sql += ` and customer.transfer_status=1 and customer.branch_id='${data.branch_id}'`;
        getCustomerPaginationSql += ` and customer.transfer_status=1 and customer.branch_id='${data.branch_id}'`;
      }
      if (
        typeof data.t_id != "undefined" &&
        data.t_id != "" &&
        data.t_id.length != 2
      ) {
        sql += ` and customer.tracking_id like '%${data.t_id}%'`;
        getCustomerPaginationSql += ` and customer.tracking_id like '%${data.t_id}%'`;
      }
      if (typeof data.invoice_no != "undefined" && data.invoice_no != "") {
        sql += ` and payment.invoice_no like '%${data.invoice_no}%'`;
        getCustomerPaginationSql += ` and payment.invoice_no like '%${data.invoice_no}%'`;
      }
      getCustomerPaginationSql += ` group by customer.c_id
      UNION SELECT customer.c_id  FROM customer LEFT JOIN payment ON customer.c_id = payment.c_id LEFT JOIN visa ON customer.c_id = visa.c_id left join details ON visa.v_id=details.service_id  where customer.deleted=0 and visa.deleted=0 and details.deleted=0 and payment.deleted = 0 and details.service_type=8 AND (customer.u_id=${data.u_id} OR customer.marketing_user=${data.u_id} OR customer.foreign_branchuser = ${data.u_id} OR customer.created_id = ${data.u_id})`;
      sql += ` group by customer.c_id
      UNION select customer.login_u_id,customer.city,customer.pincode,customer.created_id,customer.under_process_date,customer.mode,customer.awb_no,customer.d_p_name,customer.o_mode,customer.l_id,customer.foreign_branchuser,customer.is_cancel,customer.is_block,customer.c_id as c_id,customer.c_prefix as c_prefix,customer.c_name,customer.c_date,customer.c_mo_no,customer.c_email,customer.c_address,customer.c_gst_no,customer.c_s_type,customer.c_total_customer,customer.branch_id,customer.u_id,customer.foreign_branch,customer.c_tax,customer.tracking_id,details.detail_id,details.service_id,payment.invoice_no,(SELECT u_name FROM users WHERE users.u_id = customer.foreign_branchuser)as username,(SELECT name FROM attributes WHERE attributes.attribute_id = customer.c_state)as state,(SELECT b_name FROM branch WHERE branch.branch_id = customer.foreign_branch)as branch_name,(SELECT b_name FROM branch WHERE branch.branch_id = customer.branch_id)as a_branch_name,(SELECT u_name FROM users WHERE users.u_id = customer.u_id)as a_user_name,(SELECT u_name FROM users WHERE users.u_id = customer.created_id)as createdBy,(SELECT m_c_name FROM main_customer WHERE main_customer.m_c_id = customer.refrence_by)as reference_name FROM customer LEFT JOIN payment ON customer.c_id = payment.c_id LEFT JOIN visa ON customer.c_id = visa.c_id left join details ON visa.v_id=details.service_id where customer.deleted=0 and visa.deleted=0 and details.deleted=0 and payment.deleted = 0 and service_type=8 AND (customer.u_id=${data.u_id} OR customer.marketing_user=${data.u_id} OR customer.foreign_branchuser = ${data.u_id} OR customer.created_id = ${data.u_id})`;
      if (typeof data.c_name != "undefined" && data.c_name != "") {
        sql += ` and customer.c_name like '%${data.c_name}%'`;
        getCustomerPaginationSql += ` and customer.c_name like '%${data.c_name}%'`;
      }
      if (typeof data.c_mo_no != "undefined" && data.c_mo_no != "") {
        sql += ` and customer.c_mo_no like '%${data.c_mo_no}%'`;
        getCustomerPaginationSql += ` and customer.c_mo_no like '%${data.c_mo_no}%'`;
      }
      //grishma
      if (typeof data.c_email != "undefined" && data.c_email != "") {
        sql += ` and customer.c_email like '%${data.c_email}%'`;
        getCustomerPaginationSql += ` and customer.c_email like '%${data.c_email}%'`;
      }
      if (typeof data.c_date != "undefined" && data.c_date != "") {
        sql += ` and STR_TO_DATE(customer.c_date,"%y-%m-%d")=STR_TO_DATE('${data.c_date}',"%y-%m-%d")`;
        getCustomerPaginationSql += ` and STR_TO_DATE(customer.c_date,"%y-%m-%d")=STR_TO_DATE('${data.c_date}',"%y-%m-%d")`;
      }
      if (
        typeof data.service != "undefined" &&
        data.service != "" &&
        data.service != 0
      ) {
        sql += ` and customer.c_s_type='${data.service}'`;
        getCustomerPaginationSql += ` and customer.c_s_type='${data.service}'`;
      }
      if (
        typeof data.c_tax != "undefined" &&
        data.c_tax != "" &&
        data.c_tax != -1
      ) {
        sql += ` and customer.c_tax='${data.c_tax}'`;
        getCustomerPaginationSql += ` and customer.c_tax='${data.c_tax}'`;
      }
      if (
        typeof data.c_type != "undefined" &&
        data.c_type != "" &&
        data.c_type != 0 &&
        data.c_type == 1
      ) {
        sql += ` and customer.transfer_status=1 and customer.foreign_branch='${data.branch_id}'`;
        getCustomerPaginationSql += ` and customer.transfer_status=1 and customer.foreign_branch='${data.branch_id}'`;
      }
      if (
        typeof data.c_type != "undefined" &&
        data.c_type != "" &&
        data.c_type != 0 &&
        data.c_type == 2
      ) {
        sql += ` and customer.transfer_status=1 and customer.branch_id='${data.branch_id}'`;
        getCustomerPaginationSql += ` and customer.transfer_status=1 and customer.branch_id='${data.branch_id}'`;
      }
      if (
        typeof data.t_id != "undefined" &&
        data.t_id != "" &&
        data.t_id.length != 2
      ) {
        sql += ` and customer.tracking_id like '%${data.t_id}%'`;
        getCustomerPaginationSql += ` and customer.tracking_id like '%${data.t_id}%'`;
      }
      if (typeof data.invoice_no != "undefined" && data.invoice_no != "") {
        sql += ` and payment.invoice_no like '%${data.invoice_no}%'`;
        getCustomerPaginationSql += ` and payment.invoice_no like '%${data.invoice_no}%'`;
      }
      sql += ` group by customer.c_id`;
      getCustomerPaginationSql += ` group by customer.c_id`;
    }
    sql += ` ORDER by c_id DESC limit ${(data.page - 1) * data.perpage},${data.perpage
      }`;
    let resp = await new Promise((resolve, reject) => {
      con.query(getCustomerPaginationSql, function (err1, cres1) {
        if (err1) {
          console.log(err1);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (cres1.length > 0) {
            resolve({
              status: 1,
              t_rows: cres1.length,
            });
          } else {
            resolve({
              status: 0,
              data: [],
            });
          }
        }
      });
    });
    console.log(resp.t_rows, "t_rowst_rowst_rows");
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              data: result,
              t_rows: resp.t_rows,
            });
          } else {
            resolve({
              status: 0,
              data: [],
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

// async function updatecustomer(data) {
//   try {
//     sql1 = `UPDATE customer SET c_prefix='${data.c_prefix}',c_name='${data.c_name}',c_state=${data.c_state},c_mo_no='${data.c_mo_no}',c_email='${data.c_email}',c_address='${data.c_address}',c_gst_no='${data.c_gst_no}',c_remark='${data.c_remark}',c_date='${data.c_date}' WHERE c_id=${data.c_id} `;
//     let response = await new Promise((resolve, reject) => {
//       con.query(sql1, function (err, result) {
//         if (result.affectedRows > 0) {
//           resolve({
//             status: 1,
//             result: result,
//             message: "Customer Updated Successfully...",
//           });
//         } else {
//           resolve({ status: 0, message: "Something went to wrong" });
//         }
//       });
//     });
//     return response;
//   } catch (error) {
//     return { status: 0, message: "Invalid Call Try Again" };
//   }
// }

async function updatecustomer(data) {
  try {
    paymentrecord = `SELECT * FROM payment WHERE c_id = ${data.c_id} and deleted = 0 ORDER BY payment_id DESC limit 1;`;
    let payment = await new Promise((resolve, reject) => {
      con.query(paymentrecord, async function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Customer Not Updated" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              result: result[0],
              result1: result[0].payment_id,
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    sql12 = `SELECT b_name FROM branch WHERE branch_id = ${data.branch_id} `;
    let res = await new Promise((resolve, reject) => {
      con.query(sql12, async function (err1, result1) {
        if (err1) {
          console.log(err1);
          resolve({ status: 0, message: "Customer Not Updated" });
        } else {
          if (result1.length > 0) {
            resolve({ status: 1, result: result1[0].b_name });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });

    sql123 = `SELECT c_tax FROM customer WHERE c_id = ${data.c_id} `;
    let res123 = await new Promise((resolve, reject) => {
      con.query(sql123, async function (err1, result1) {
        if (err1) {
          console.log(err1);
          resolve({ status: 0, message: "Customer Not Updated" });
        } else {
          if (result1.length > 0) {
            resolve({ status: 1, result: result1[0].c_tax });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    //1003
    let responseinvoice = await new Promise((resolve, reject) => {
      if (data.c_tax == "1" && data.c_tax != res123.result) {
        // let getinvoiceno = `SELECT *,invoice_no FROM payment,customer WHERE payment.c_id=customer.c_id and payment.c_tax = "1" and customer.branch_id=${data.branch_id} and payment.deleted=0 ORDER BY customer.c_id DESC limit 1;`;
        let getinvoiceno = `SELECT *,invoice_no FROM payment JOIN customer ON payment.c_id=customer.c_id and payment.c_tax = "1" and customer.branch_id=${data.branch_id} and payment.deleted=0 ORDER BY payment.payment_id DESC,customer.c_id DESC limit 1;`;
        console.log("getinvoicenoA", getinvoiceno);
        // const now = new Date();
        // const cvalue = date.format(now, "YY");
        // const currentYear = new Date().getFullYear().toString().slice(-2);
        // const previousYear = currentYear - 1;
        const cvalue = moment().format("MM");
        const last2 = new Date().getFullYear().toString().substring(2);
        const last2Num = Number(last2);
        var today = new Date();
        if (today.getMonth() + 1 <= 3) {
          fiscalyear = last2Num - 1 + "-" + last2Num;
        } else {
          fiscalyear = last2Num + "-" + (last2Num + 1);
        }

        let invoice_no = 0;
        con.query(getinvoiceno, async function (errino, inoresult) {
          if (errino) {
            console.log(errino);
            resolve({ status: 0, message: "Something went wrong" });
          } else {
            if (inoresult.length > 0 && inoresult[0].invoice_no != 0) {
              let sql = `UPDATE payment SET invoice_status = 1 WHERE payment_id=${payment.result1
                } AND deleted = 0  `;
              console.log("sqlA", sql);
              con.query(sql, async function (err, result) {
                if (err) {
                  console.log(err);
                  resolve({ status: 0, message: "Something went to wrong" });
                } else {
                  if (result.affectedRows > 0) {
                    resolve({
                      status: 1,
                      message: "Payment Updated successfully",
                    });
                  } else {
                    resolve({
                      status: 0,
                      message: "Something went to wrong",
                    });
                  }
                }
              });
              //1003
              let ino = inoresult[0].invoice_no;
              let n_ino = ino.split("/");
              if (fiscalyear == n_ino[1]) {
                invoice_no =
                  res.result.substring(0, 2) +
                  "/" +
                  fiscalyear +
                  "/" +
                  "g" +
                  cvalue +
                  "/" +
                  ++n_ino[3];
              } else {
                invoice_no =
                  res.result.substring(0, 2) +
                  "/" +
                  fiscalyear +
                  "/" +
                  "g" +
                  cvalue +
                  "/" +
                  1;
              }
            } else {
              let sql = `UPDATE payment SET invoice_status = 1 WHERE payment_id=${payment.result1
                } AND deleted = 0  `;
              console.log("sqlB", sql);
              con.query(sql, async function (err, result) {
                if (err) {
                  console.log(err);
                  resolve({ status: 0, message: "Something went to wrong" });
                } else {
                  if (result.affectedRows > 0) {
                    resolve({
                      status: 1,
                      message: "Payment Updated successfully",
                    });
                  }
                }
              });
              invoice_no =
                res.result.substring(0, 2) +
                "/" +
                fiscalyear +
                "/" +
                "g" +
                cvalue +
                "/" +
                1;
            }
            resolve({ status: 1, ino: invoice_no });
          }
        });
        //1003
      } else if (data.c_tax == "0" && data.c_tax != res123.result) {
        // getinvoiceno = `SELECT *,invoice_no FROM payment,customer WHERE payment.c_id=customer.c_id and payment.c_tax = "0" and customer.branch_id=${data.branch_id} and payment.deleted=0 ORDER BY customer.c_id DESC limit 1;`;
        let getinvoiceno = `SELECT *,invoice_no FROM payment JOIN customer ON payment.c_id=customer.c_id and payment.c_tax = "0" and customer.branch_id=${data.branch_id} and payment.deleted=0 ORDER BY payment.payment_id DESC,customer.c_id DESC limit 1;`;

        console.log("getinvoicenoZ", getinvoiceno);
        // const now = new Date();
        // const cvalue = date.format(now, "YY");
        // const currentYear = new Date().getFullYear().toString().slice(-2);
        // const previousYear = currentYear - 1;
        const cvalue = moment().format("MM");
        const last2 = new Date().getFullYear().toString().substring(2);
        const last2Num = Number(last2);
        var today = new Date();
        if (today.getMonth() + 1 <= 3) {
          fiscalyear = last2Num - 1 + "-" + last2Num;
        } else {
          fiscalyear = last2Num + "-" + (last2Num + 1);
        }
        let invoice_no = 0;
        con.query(getinvoiceno, async function (errino, inoresult) {
          if (errino) {
            console.log(errino);
            resolve({ status: 0, message: "Something went wrong" });
          } else {
            if (inoresult.length > 0 && inoresult[0].invoice_no != 0) {
              let sql = `UPDATE payment SET invoice_status = 1 WHERE payment_id=${payment.result1
                } AND deleted = 0  `;
              console.log("sqlqwe", sql);
              con.query(sql, async function (err, result) {
                if (err) {
                  console.log(err);
                  resolve({ status: 0, message: "Something went to wrong" });
                } else {
                  if (result.affectedRows > 0) {
                    resolve({
                      status: 1,
                      message: "Payment Updated successfully",
                    });
                  } else {
                    resolve({
                      status: 0,
                      message: "Something went to wrong",
                    });
                  }
                }
              });
              //1003
              let ino = inoresult[0].invoice_no;
              let n_ino = ino.split("/");
              if (fiscalyear == n_ino[1]) {
                invoice_no =
                  res.result.substring(0, 2) +
                  "/" +
                  fiscalyear +
                  "/" +
                  cvalue +
                  "/" +
                  ++n_ino[3];
              } else {
                invoice_no =
                  res.result.substring(0, 2) +
                  "/" +
                  fiscalyear +
                  "/" +
                  cvalue +
                  "/" +
                  1;
              }
            } else {
              let sql = `UPDATE payment SET invoice_status = 1 WHERE payment_id=${payment.result1
                } AND deleted = 0  `;
              console.log("sqlx", sql);
              con.query(sql, async function (err, result) {
                if (err) {
                  console.log(err);
                  resolve({ status: 0, message: "Something went to wrong" });
                } else {
                  if (result.affectedRows > 0) {
                    resolve({
                      status: 1,
                      message: "Payment Updated successfully",
                    });
                  } else {
                    resolve({
                      status: 0,
                      message: "Something went to wrong",
                    });
                  }
                }
              });
              invoice_no =
                res.result.substring(0, 2) +
                "/" +
                fiscalyear +
                "/" +
                cvalue +
                "/" +
                1;
            }
            resolve({ status: 1, ino: invoice_no });
          }
        });
      } else {
        resolve({ status: 0, message: "No Data" });
      }
    });

    sql1 = `UPDATE customer SET c_prefix='${data.c_prefix
      }',c_name='${mysql_real_escape_string(data.c_name)}',c_state=${data.c_state
      },c_mo_no='${data.c_mo_no}',c_email='${mysql_real_escape_string(
        data.c_email
      )}',c_address='${mysql_real_escape_string(data.c_address)}',c_gst_no='${data.c_gst_no
      }',c_remark='${mysql_real_escape_string(data.c_remark)}',c_date='${data.c_date
      }',c_tax='${data.c_tax}',d_address="${mysql_real_escape_string(
        data.d_address
      )}",arn_no="${data.arn_no}",f_z_type=${data.f_z_type},c_gst=${data.c_gst
      },c_total_customer=${data.c_total_customer},city='${typeof data.city == "undefined" ||
        data.city == "undefined" ||
        data.city == null ||
        data.city == ""
        ? ""
        : data.city
      }',pincode='${typeof data.pincode == "undefined" ||
        data.pincode == "undefined" ||
        data.pincode == null ||
        data.pincode == ""
        ? ""
        : data.pincode
      }' WHERE c_id=${data.c_id} `;
    let response = await new Promise((resolve, reject) => {
      con.query(sql1, function (err, result) {
        if (err) {
          console.log(err);
        } else {
          if (result.affectedRows > 0) {
            resolve({
              status: 1,
              result: result,
              message: "Customer Updated Successfully...",
            });
          } else {
            resolve({ status: 0, message: "Something went to wrong" });
          }
        }
      });
    });

    sql123 = `SELECT m_c_id FROM main_customer WHERE m_c_email = '${data.c_email}'`;
    let response123 = await new Promise((resolve, reject) => {
      con.query(sql123, async function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0 && data.check == 1) {
            sql1 = `UPDATE main_customer SET m_c_prefix='${data.c_prefix
              }',m_c_name='${mysql_real_escape_string(data.c_name)}',m_c_state='${data.c_state
              }',m_c_mo_no='${data.c_mo_no
              }',m_c_email='${mysql_real_escape_string(
                data.c_email
              )}',m_c_address='${mysql_real_escape_string(
                data.c_address
              )}',m_c_gst='${data.c_gst_no}',m_c_state='${data.c_state
              }',created_id= ${data.created_id} WHERE m_c_id=${data.m_c_id} `;
            con.query(sql1, async function (err1, result1) {
              if (err1) {
                console.log(err1);
                resolve({ status: 0, message: "Customer Not Updated" });
              } else {
                resolve({ status: 1, m_c_id: data.m_c_id });
              }
            });
          } else {
            resolve({ status: 1, m_c_id: data.m_c_id });
          }
        }
      });
    });

    if (data.c_tax != res123.result) {
      let response4 = new Promise(async (resolve, reject) => {
        let c_gst = 0;
        let s_gst = 0;
        let i_gst = 0;
        let netamt = 0;

        let s1 =
          parseInt(payment.result.total_amount) +
          parseInt(payment.result.courier) +
          parseInt(payment.result.exp_charge) -
          parseInt(payment.result.dis_amt) -
          parseInt(payment.result.coupon_amt);
        if (data.c_tax == 1) {
          if (data.c_gst == 1) {
            if (data.branch_state_id == data.c_state) {
              c_gst =
                (s1 *
                  parseInt(data.s_c_gst)) /
                100;
              s_gst =
                (s1 *
                  parseInt(data.s_s_gst)) /
                100;
              netamt =
                s1 +
                c_gst +
                s_gst +
                parseInt(payment.result.embassy_fees);
              // parseInt(payment.result.courier);
            } else {
              i_gst =
                (s1 *
                  parseInt(data.s_i_gst)) /
                100;
              netamt =
                s1 +
                i_gst +
                parseInt(payment.result.embassy_fees);
              // parseInt(payment.result.courier);
            }
          } else {
            netamt =
              s1 +
              parseInt(payment.result.embassy_fees);
            // parseInt(payment.result.courier);
          }
        } else {
          netamt =
            s1 +
            parseInt(payment.result.embassy_fees);
          // parseInt(payment.result.courier);
        }
        sql1 = `INSERT INTO payment(payment_date,c_id,total_amount,extra_amt,courier,service_tax,mode_id,payment_desc,chk_dd_no,chk_dd_date,embassy_fees,dis_amt,net_amt,paid_amt,due_amt,sgst,cgst,igst,created_id,receive_amt,u_id,is_tds,tds_amt,invoice_no,tracking_id,bank_name,coupon_amt,exp_charge,p_receipt_no,c_tax,created_branch_id,is_draft_taken) VALUES ('${payment.result.payment_date
          }',${data.c_id},'${payment.result.total_amount}','${payment.result.extra_amt
          }',
      '${payment.result.courier}','${payment.result.service_tax}',${payment.result.mode_id
          },'${payment.result.payment_desc != "null"
            ? payment.result.payment_desc
            : ""
          }','${payment.result.chk_dd_no != "null" ? payment.result.chk_dd_no : ""
          }','${payment.result.chk_dd_date != "null" ? payment.result.chk_dd_date : ""
          }','${payment.result.embassy_fees}','${payment.result.dis_amt
          }','${netamt}','${payment.result.paid_amt}','${netamt -
          parseInt(payment.result.paid_amt) -
          parseInt(payment.result.tds_amt)
          }','${s_gst}','${c_gst}','${i_gst}',${payment.result.created_id},'${payment.result.receive_amt
          }',${payment.result.u_id},${payment.result.is_tds},'${payment.result.tds_amt
          }','${responseinvoice.ino}','${mysql_real_escape_string(
            payment.result.tracking_id
          )}','${payment.result.bank_name != "null" ? payment.result.bank_name : ""
          }','${payment.result.coupon_amt}','${payment.result.exp_charge}','${payment.result.p_receipt_no
          }','${data.c_tax}',${payment.result.created_branch_id},${payment.result.is_draft_taken
          })`;
        con.query(sql1, async function (err4, result4) {
          if (err4) {
            console.log(err4);
            resolve({ status: 0, message: "Something went wrong" });
          } else {
            if (result4.affectedRows > 0) {
              resolve({
                status: 1,
                message: "Customer Updated Successfully....",
              });
            } else {
              resolve({
                status: 0,
                message: "Something went to wrong",
              });
            }
          }
        });
      });
      return response4;
    } else {
      return response;
    }
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function getcustomerbyId(data) {
  try {
    sql = `SELECT  * FROM customer WHERE c_id=${data.id} AND deleted = 0 `;

    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            result.forEach(function (res) {
              resolve({
                status: 1,
                result: res,
              });
            });
          } else {
            resolve({ status: 1, message: "No Records to Display..." });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function getVisaCustomer(data) {
  try {
    let record = [];
    getuserquery = `select * from users where u_id=${data.u_id} and deleted=0`;
    let response = await new Promise((resolve, reject) => {
      con.query(getuserquery, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            if (result[0].user_type == 1) {
              getallchilduser = `select * from users where (p_u_id=${data.u_id} and branch_id=${result[0].branch_id}) and deleted=0`;
              con.query(getallchilduser, function (err, res) {
                if (err) {
                  console.log(err);
                  resolve({ status: 0, message: "Something went to wrong" });
                } else {
                  res.forEach(function (r) {
                    record.push(r.u_id);
                  });
                  resolve({
                    record: record,
                    type: result[0].user_type,
                  });
                }
              });
            } else {
              resolve({
                type: result[0].user_type,
              });
            }
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    //2903

    let getVisaPaginationQuery = "";
    let sql = "";
    if (response.type == 1) {
      sql = `SELECT *,(SELECT SUM(receive_amt) FROM draft_payment  WHERE draft_payment.c_id = customer.c_id and draft_payment.deleted=0 and draft_payment.receive_amt!=0  and draft_payment.approved_status =0 and draft_payment.deleted = 0 ) as total_draft,(SELECT COUNT(*) FROM details,visa,customer WHERE customer.c_id=visa.c_id AND details.service_id=visa.v_id AND details.service_type=8 AND  details.deleted = 0  AND visa.deleted = 0  AND customer.deleted = 0 AND customer.is_cancel = 0 AND (customer.branch_id =${data.branch_id} OR (customer.foreign_branch = ${data.branch_id} ))) as trows,details.under_process_date AS process_date,(SELECT name FROM attributes WHERE attributes.attribute_id  =visa.v_type)as visa_type,(SELECT name FROM attributes WHERE attributes.attribute_id  =details.d_c_id)as visa_country,(SELECT GROUP_CONCAT(attributes.name SEPARATOR ',') as name FROM attributes where FIND_IN_SET (attributes.attribute_id , visa.v_supporting_doc)) as supporting_doc,(SELECT c_prefix FROM customer WHERE customer.c_id=visa.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=visa.c_id) AS customer_name,
      (SELECT c_id FROM customer WHERE customer.c_id=visa.c_id) as my_C_id,
      (SELECT branch_id FROM customer WHERE customer.c_id=visa.c_id) AS branch_id,(SELECT u_id FROM customer WHERE customer.c_id=visa.c_id) AS cuid,(SELECT user_type FROM users where users.u_id  = (SELECT u_id FROM customer WHERE customer.c_id=visa.c_id)) as cutype,
      (SELECT payment.due_amt FROM payment where payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=visa.c_id) ORDER BY payment.payment_id DESC LIMIT 1) as my_Due_Amt,
      (SELECT payment.paid_amt FROM payment where payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=visa.c_id) ORDER BY payment.payment_id DESC LIMIT 1) as my_paid_amt,
      (SELECT payment.net_amt FROM payment where payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=visa.c_id) ORDER BY payment.payment_id DESC LIMIT 1) as my_net_amt,
      (SELECT payment.tds_amt FROM payment where payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=visa.c_id) ORDER BY payment.payment_id DESC LIMIT 1) as my_tds_amt,
      (SELECT draft_payment.d_p_id FROM draft_payment where draft_payment.deleted=0 and draft_payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=visa.c_id) and draft_payment.approved_status=0 and draft_payment.due_amt=0 ORDER BY draft_payment.d_p_id DESC LIMIT 1) as Draf_payment
      FROM details,visa,customer WHERE customer.c_id=visa.c_id AND details.service_id=visa.v_id AND details.service_type=8 AND details.deleted = 0  AND visa.deleted = 0  AND customer.deleted = 0 AND customer.is_cancel = 0 AND (customer.branch_id =${data.branch_id} OR (customer.foreign_branch = ${data.branch_id} ))`;

      getVisaPaginationQuery = `SELECT COUNT(details.detail_id) as trows
      FROM details,visa,customer WHERE customer.c_id=visa.c_id AND details.service_id=visa.v_id AND details.service_type=8 AND details.deleted = 0  AND visa.deleted = 0  AND customer.deleted = 0 AND customer.is_cancel = 0 AND (customer.branch_id =${data.branch_id} OR (customer.foreign_branch = ${data.branch_id} ))`;
    } else {
      if (data.u_id != 1) {
        sql = `SELECT *,(SELECT SUM(receive_amt) FROM draft_payment  WHERE draft_payment.c_id = customer.c_id and draft_payment.deleted=0 and draft_payment.receive_amt!=0  and draft_payment.approved_status =0 and draft_payment.deleted = 0 ) as total_draft,(SELECT COUNT(*) FROM details,visa,customer WHERE customer.c_id=visa.c_id AND details.service_id=visa.v_id AND details.service_type=8 AND (customer.u_id=${data.u_id} or customer.foreign_branchuser=${data.u_id} OR customer.created_id = ${data.u_id}) AND details.deleted = 0  AND visa.deleted = 0 AND customer.deleted = 0 AND customer.is_cancel = 0 ) as trows,details.under_process_date AS process_date,(SELECT name FROM attributes WHERE attributes.attribute_id  =visa.v_type)as visa_type,(SELECT GROUP_CONCAT(attributes.name SEPARATOR ',') as name FROM attributes where FIND_IN_SET (attributes.attribute_id , visa.v_supporting_doc)) as supporting_doc,(SELECT name FROM attributes WHERE attributes.attribute_id  =details.d_c_id)as visa_country,(SELECT c_prefix FROM customer WHERE customer.c_id=visa.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=visa.c_id) AS customer_name,
        (SELECT c_id FROM customer WHERE customer.c_id=visa.c_id) as my_C_id,
        (SELECT branch_id FROM customer WHERE customer.c_id=visa.c_id) AS branch_id,(SELECT u_id FROM customer WHERE customer.c_id=visa.c_id) AS cuid,(SELECT user_type FROM users where users.u_id  = (SELECT u_id FROM customer WHERE customer.c_id=visa.c_id)) as cutype,
        (SELECT payment.due_amt FROM payment where payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=visa.c_id) ORDER BY payment.payment_id DESC LIMIT 1) as my_Due_Amt,
        (SELECT payment.paid_amt FROM payment where payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=visa.c_id) ORDER BY payment.payment_id DESC LIMIT 1) as my_paid_amt,
        (SELECT payment.net_amt FROM payment where payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=visa.c_id) ORDER BY payment.payment_id DESC LIMIT 1) as my_net_amt,
        (SELECT payment.tds_amt FROM payment where payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=visa.c_id) ORDER BY payment.payment_id DESC LIMIT 1) as my_tds_amt,
        (SELECT draft_payment.d_p_id FROM draft_payment where draft_payment.deleted=0 and draft_payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=visa.c_id) and draft_payment.approved_status=0 and draft_payment.due_amt=0 ORDER BY draft_payment.d_p_id DESC LIMIT 1) as Draf_payment
        FROM details,visa,customer WHERE visa.c_id=customer.c_id AND details.service_id=visa.v_id AND (customer.u_id=${data.u_id} or customer.foreign_branchuser=${data.u_id} OR customer.created_id = ${data.u_id}) AND details.service_type=8 AND details.deleted = 0  AND visa.deleted = 0 AND customer.deleted = 0 AND customer.is_cancel = 0`;

        getVisaPaginationQuery = `SELECT COUNT(details.detail_id) as trows
        FROM details,visa,customer WHERE visa.c_id=customer.c_id AND details.service_id=visa.v_id AND (customer.u_id=${data.u_id} or customer.foreign_branchuser=${data.u_id} OR customer.created_id = ${data.u_id}) AND details.service_type=8 AND details.deleted = 0  AND visa.deleted = 0 AND customer.deleted = 0 AND customer.is_cancel = 0`;
      } else {
        sql = `SELECT *,(SELECT SUM(receive_amt) FROM draft_payment  WHERE draft_payment.c_id = customer.c_id and draft_payment.deleted=0 and draft_payment.receive_amt!=0  and draft_payment.approved_status =0 and draft_payment.deleted = 0 ) as total_draft,(SELECT COUNT(*) FROM details where details.service_type=8 AND details.deleted = 0 AND details.status_id != 259 ) as trows,details.under_process_date AS process_date,(SELECT name FROM attributes WHERE attributes.attribute_id  =visa.v_type)as visa_type,(SELECT name FROM attributes WHERE attributes.attribute_id  =details.d_c_id)as visa_country,(SELECT c_prefix FROM customer WHERE customer.c_id=visa.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=visa.c_id) AS customer_name,
        (SELECT c_id FROM customer WHERE customer.c_id=visa.c_id) as my_C_id,
        (SELECT branch_id FROM customer WHERE customer.c_id=visa.c_id) AS branch_id,(SELECT GROUP_CONCAT(attributes.name SEPARATOR ',') as name FROM attributes where FIND_IN_SET (attributes.attribute_id , visa.v_supporting_doc)) as supporting_doc,(SELECT u_id FROM customer WHERE customer.c_id=visa.c_id) AS cuid,(SELECT user_type FROM users where users.u_id  = (SELECT u_id FROM customer WHERE customer.c_id=visa.c_id)) as cutype,
        (SELECT payment.due_amt FROM payment where payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=visa.c_id) ORDER BY payment.payment_id DESC LIMIT 1) as my_Due_Amt,
        (SELECT payment.paid_amt FROM payment where payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=visa.c_id) ORDER BY payment.payment_id DESC LIMIT 1) as my_paid_amt,
        (SELECT payment.net_amt FROM payment where payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=visa.c_id) ORDER BY payment.payment_id DESC LIMIT 1) as my_net_amt,
        (SELECT payment.tds_amt FROM payment where payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=visa.c_id) ORDER BY payment.payment_id DESC LIMIT 1) as my_tds_amt,
        (SELECT draft_payment.d_p_id FROM draft_payment where draft_payment.deleted=0 and draft_payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=visa.c_id) and draft_payment.approved_status=0 and draft_payment.due_amt=0 ORDER BY draft_payment.d_p_id DESC LIMIT 1) as Draf_payment
        FROM details,visa,customer WHERE customer.c_id=visa.c_id AND details.service_id=visa.v_id AND details.service_type=8  AND details.deleted = 0 AND visa.deleted = 0  AND customer.deleted = 0 AND customer.is_cancel = 0`;
        getVisaPaginationQuery = `SELECT COUNT(details.detail_id) as trows
        FROM details,visa,customer WHERE customer.c_id=visa.c_id AND details.service_id=visa.v_id AND details.service_type=8  AND details.deleted = 0 AND visa.deleted = 0  AND customer.deleted = 0 AND customer.is_cancel = 0`;
      }
    }
    sql += ` ORDER BY detail_id  DESC limit ${(data.page - 1) * data.perPage},${data.perPage
      }`;
    let resp = await new Promise((resolve, reject) => {
      con.query(getVisaPaginationQuery, function (err1, lres1) {
        if (err1) {
          console.log(err1);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (lres1.length > 0) {
            resolve({
              status: 1,
              t_rows: lres1[0].trows,
            });
          } else {
            resolve({
              status: 0,
              data: [],
            });
          }
        }
      });
    });
    let response1 = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              data: result,
              trows: resp.t_rows,
            });
          } else {
            resolve({
              status: 0,
              data: [],
            });
          }
        }
      });
    });
    return response1;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

// async function getVisaCustomer(data) {
//   try {
//     // let vcustomer = [];
//     // let vcustomerList = [];
//     // sql = `SELECT *,(SELECT COUNT(*) FROM visa) as trows ,(SELECT c_name FROM customer WHERE customer.c_id =visa.c_id)as c_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =visa.v_type)as visa_type,(SELECT GROUP_CONCAT(attributes.name) as name FROM attributes where FIND_IN_SET (attributes.attribute_id , visa.v_country)) as countryname,(SELECT GROUP_CONCAT(attributes.name) as name FROM attributes where FIND_IN_SET (attributes.attribute_id , visa.v_supporting_doc)) as supporting_doc  FROM visa WHERE deleted=0`;
//     sql = `SELECT *,(SELECT COUNT(*) FROM visa) as trows ,(SELECT c_name FROM customer WHERE customer.c_id =visa.c_id)as c_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =visa.v_type)as visa_type,(SELECT name FROM attributes WHERE attributes.attribute_id  =visa.v_country)as visa_country,(SELECT GROUP_CONCAT(attributes.name) as name FROM attributes where FIND_IN_SET (attributes.attribute_id , visa.v_supporting_doc)) as supporting_doc  FROM visa WHERE deleted=0`;
//     if (data.id != 1) {
//       sql += ` and u_id=${data.u_id}`;
//     }
//     sql += ` limit ${(data.page - 1) * data.perPage},${data.perPage}`;
//     let response = await new Promise((resolve, reject) => {
//       con.query(sql, function (err, result) {
//         if (err) {
//           resolve({ status: 0, message: "Something went to wrong" });
//         }
//         if (result.length > 0) {
//           //  let i = 0;
//           //  for (; i < result.length; i += 1) {
//           //    task.push({
//           //      t_id: result[i].t_id,
//           //      subject: result[i].subject,
//           //      sdate: result[i].sdate,
//           //      edate: result[i].edate,
//           //      priority: result[i].priority,
//           //      description: result[i].description,
//           //      u_id: result[i].u_id,
//           //      allocate_id: result[i].allocate_id,
//           //      t_status: result[i].t_status,
//           //      t_branch_id: result[i].t_branch_id,
//           //      createdBy: result[i].createdBy,
//           //      allocateTo: result[i].allocateTo,
//           //      task_image: [],
//           //    });
//           //    taskList.push({
//           //      t_id: result[i].t_id,
//           //      subject: result[i].subject,
//           //      sdate: result[i].sdate,
//           //      edate: result[i].edate,
//           //      priority: result[i].priority,
//           //      description: result[i].description,
//           //      u_id: result[i].u_id,
//           //      allocate_id: result[i].allocate_id,
//           //      t_status: result[i].t_status,
//           //      t_branch_id: result[i].t_branch_id,
//           //      createdBy: result[i].createdBy,
//           //      allocateTo: result[i].allocateTo,
//           //      task_image: [],
//           //    });
//           //  }

//           //  Object.keys(task).map((kk) => {
//           //    sql1 = `SELECT * FROM task_attachment  WHERE  task_attachment.t_id = ${task[kk].t_id}`;

//           //    con.query(sql1, function (errsql1, sql1res) {
//           //      let taskimg = [];
//           //      Object.keys(sql1res).map((ak) => {
//           //        taskimg.push(sql1res[ak]);
//           //      });

//           //      taskList[kk].task_image = taskimg;
//           //      if (kk == task.length - 1) {
//           //        resolve({
//           //          status: 1,
//           //          data: taskList,
//           //        });
//           //      }
//           //    });
//           //  });
//           resolve({
//             status: 1,
//             data: result,
//           });
//         } else {
//           resolve({
//             status: 0,
//             data: [],
//           });
//         }
//       });
//     });
//     return response;
//   } catch (error) {
//     return { status: 0, message: "Invalid Call Try Again" };
//   }
// }

//2503
async function updateDetailsStatus(data, date) {
  console.log(data, date);
  try {
    sq9 = `SELECT name FROM attributes WHERE attribute_id = ${data.status_id}`;

    let resss = await new Promise((resolve, reject) => {
      con.query(sq9, async function (errr, resulttt) {
        if (errr) {
          console.log(errr);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (resulttt.length > 0) {
            resolve({ status: 1, result: resulttt[0].name });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    sqlll = `select *,(SELECT name FROM attributes WHERE attributes.attribute_id = details.status_id)as status_name from details where deleted=0 and detail_id= ${data.detail_id}`;
    let curr_date = moment().format("DD-MM-YYYY");
    let status_change_date = moment().format("DD-MM-YYYY HH:mm:ss");
    let cid = [];
    let email = [];
    let cname = [];
    let cprefix = [];
    let created = [];
    let d_address = [];
    let c_tax = [];
    let ress = await new Promise((resolve, reject) => {
      con.query(sqlll, async function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            if (result[0].service_type == "8") {
              sql1 = `select customer.* from visa,customer where visa.c_id = customer.c_id and customer.deleted=0 and visa.deleted=0 and visa.v_id = ${result[0].service_id}`;
            } else if (result[0].service_type == "10") {
              sql1 = `select customer.* from attestation,customer where attestation.c_id = customer.c_id and customer.deleted=0 and attestation.deleted=0 and attestation.a_id = ${result[0].service_id}`;
            } else if (result[0].service_type == "17") {
              sql1 = `select customer.* from apostille,customer where apostille.c_id = customer.c_id and customer.deleted=0 and apostille.deleted=0 and apostille.a_id = ${result[0].service_id}`;
            } else {
              sql1 = `select customer.* from translation,customer where translation.c_id = customer.c_id and customer.deleted=0 and translation.deleted=0 and translation.a_id = ${result[0].service_id}`;
            }
            con.query(sql1, function (err1, result1) {
              if (err1) {
                console.log(err1);
                resolve({ status: 0, message: "Something went to wrong" });
              } else {
                if (result1.length > 0) {
                  cid.push(result1[0].c_id);
                  email.push(result1[0].c_email);
                  cname.push(result1[0].c_name);
                  cprefix.push(result1[0].c_prefix);
                  created.push(result1[0].created_id);
                  d_address.push(result1[0].d_address);
                  c_tax.push(result1[0].c_tax);
                } else {
                  resolve({
                    status: 0,
                    message: "Something went to wrong",
                  });
                }
              }
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
          let c_id = cid;
          let c_email = email;
          let c_name = cname;
          let c_prefix = cprefix;
          let created_id = created;
          let daddress = d_address;
          let ctax = c_tax;
          resolve({
            status: 1,
            c_id: c_id,
            c_email: c_email,
            c_name: c_name,
            c_prefix: c_prefix,
            created_id: created_id,
            collector: result[0].collector,
            detail_id: result[0].detail_id,
            d_address: daddress,
            c_tax: ctax,
            service_type: result[0].service_type,
            service_id: result[0].service_id,
            d_c_id: result[0].d_c_id,
            old_status_id: result[0].status_id,
            old_status_name: result[0].status_name,
          });
        }
      });
    });
    if (data.status_id == 24) {
      if (
        data.refrence_c_id != 0 &&
        data.refrence_c_id != "undefined" &&
        data.check_status == 0 &&
        data.check_status != "undefined"
      ) {
        let mainCust = `Select created_id from main_customer where m_c_id = ${data.refrence_c_id} `;
        let mainCustres = await new Promise((resolve, reject) => {
          con.query(mainCust, async function (er, res) {
            if (er) {
              console.log(er);
              resolve({ status: 0, message: "Something went to wrong" });
            } else {
              let resultData;
              if (res.length > 0) {
                let mainCust = `Select branch_id from users where u_id = ${res[0].created_id} `;
                let mainCustBranchres = await new Promise((resolve, reject) => {
                  con.query(mainCust, function (errrr, ressss) {
                    if (errrr) {
                      console.log(errrr);
                      resolve({ status: 0, message: "Something went to wrong" });
                    } else {
                      if (ressss.length > 0) {
                        resultData = { u_id: res[0].created_id, branch_id: ressss[0].branch_id };
                        resolve({
                          status: 1,
                          data: { u_id: res[0].created_id, branch_id: ressss[0].branch_id }
                        });
                      }
                    }
                  });
                });
                resolve({
                  status: 1,
                  data: resultData
                });
              } else {
                resolve({
                  status: 0,
                  message: "Something went to wrong",
                });
              }
            }
          });
        });

        sq1 = `INSERT INTO customer_commision_payment(refrence_c_id,created_id,commision_date,c_amount,c_id,p_u_id,p_branch_id) VALUES(${data.refrence_c_id
          },${data.u_id},'${mysql_real_escape_string(data.commision_date)}',${data.std_commission
          },${data.cid},${mainCustres.data.u_id},${mainCustres.data.branch_id})`;
        let res11 = await new Promise((resolve, reject) => {
          con.query(sq1, function (er, res) {
            if (er) {
              console.log(er);
              resolve({ status: 0, message: "Something went to wrong" });
            } else {
              if (res.affectedRows > 0) {
                resolve({
                  status: 1,
                  message: "Customer commission inserted successfully...",
                });
              } else {
                resolve({
                  status: 0,
                  message: "Something went to wrong",
                });
              }
            }
          });
        });
        updateamt = `UPDATE main_customer SET total_commision=total_commision+${data.std_commission}  WHERE m_c_id=${data.refrence_c_id}`;
        let res12 = await new Promise((resolve, reject) => {
          con.query(updateamt, function (er, res) {
            if (er) {
              console.log(er);
              resolve({ status: 0, message: "Something went to wrong" });
            } else {
              if (res.affectedRows > 0) {
                resolve({
                  status: 1,
                  message: "Main customer commission updated successfully...",
                });
              } else {
                resolve({
                  status: 0,
                  message: "Something went to wrong",
                });
              }
            }
          });
        });

        sqlll = `SELECT * FROM customer WHERE c_id = ${data.cid}`;
        let ress = await new Promise((resolve, reject) => {
          con.query(sqlll, async function (err1, result1) {
            if (err1) {
              console.log(err1);
              resolve({ status: 0, message: "Customer Not Updated" });
            } else {
              if (result1.length > 0) {
                resolve({ status: 1, result: result1[0] });
              } else {
                resolve({
                  status: 0,
                  message: "Something went to wrong",
                });
              }
            }
          });
        });
        sql1 = `SELECT * FROM main_customer WHERE m_c_id=${data.refrence_c_id}`;
        con.query(sql1, async function (err1, result1) {
          if (err1) {
            console.log(err1);
            resolve({ status: 0, message: "Something went to wrong" });
          } else {
            if (result1.length > 0) {
              senderMailSetting = await sendmessage.getEmailSetting(data.u_id);

              sqlll = `SELECT u_email FROM users WHERE u_id = ${data.u_id} `;
              let ccmail = await new Promise((resolve, reject) => {
                con.query(sqlll, async function (err1, result1) {
                  if (err1) {
                    console.log(err1);
                    resolve({ status: 0, message: "Something went to wrong" });
                  } else {
                    if (result1.length > 0) {
                      resolve({ status: 1, result: result1[0].u_email });
                    } else {
                      resolve({
                        status: 0,
                        message: "Something went to wrong",
                      });
                    }
                  }
                });
              });

              let message = await sendmessage.getTemplate(143);
              if (message.status != 0) {
                message.template = message.template.replace(
                  "{:name:}",
                  result1[0].m_c_prefix + " " + result1[0].m_c_name
                );
                message.template = message.template.replace(
                  "{:cname:}",
                  ress.result.c_name
                );
                message.template = message.template.replace(
                  "{:mobileno:}",
                  ress.result.c_mo_no
                );
                message.template = message.template.replace(
                  "{:camount:}",
                  data.std_commission
                );
                let mess =
                  (message.header == 1
                    ? typeof senderMailSetting.email_template_header !=
                      undefined && senderMailSetting.email_template_header != undefined &&
                      senderMailSetting.email_template_header != null
                      ? senderMailSetting.email_template_header
                      : ""
                    : "") +
                  message.template +
                  (message.b_d_id != 0
                    ? message.b_d_id == 1
                      ? senderMailSetting.gst_bankdetails
                      : message.b_d_id == 2
                        ? senderMailSetting.ngst_bankdetails
                        : message.b_d_id == 3
                          ? senderMailSetting.general_bankdetails
                          : ""
                    : "") +
                  (message.footer == 1
                    ? senderMailSetting.email_template_footer
                    : "") +
                  (message.signature == 1
                    ? senderMailSetting.email_signature
                    : "");

                CCMailSetting = await sendmessage.getEmailSetting(1);
                sendmessagenow = sendmessage.customermessagesend(
                  senderMailSetting,
                  result1[0].m_c_email,
                  mess,
                  message.subject,
                  ccmail.result, //CCMailSetting.e_username,  // user mail
                  ccmail.result, // reply mail
                  1
                );
              }
            } else {
              resolve({
                status: 0,
                message: "Something went to wrong",
              });
            }
          }
        });
      }
      sql = `UPDATE details SET status_id=${data.status_id
        },delivery_date	='${mysql_real_escape_string(
          date
        )}',awb_no='${mysql_real_escape_string(data.awb_no)}',courier_id=${data.courier_id
        },updated_date ='${mysql_real_escape_string(
          curr_date
        )}',status_mail_date='${mysql_real_escape_string(
          curr_date
        )}',status_change_date='${mysql_real_escape_string(
          status_change_date
        )}' WHERE detail_id =${data.detail_id}`;
    } else if (data.status_id == 26) {
      sql = `UPDATE details SET status_id=${data.status_id
        },dispatching_date	='${mysql_real_escape_string(
          date
        )}',updated_date ='${mysql_real_escape_string(
          curr_date
        )}',status_mail_date='${mysql_real_escape_string(
          curr_date
        )}',courier_id=${data.courier_id
        },status_change_date='${mysql_real_escape_string(
          status_change_date
        )}' WHERE detail_id =${data.detail_id}`;
    } else if (data.status_id == 22) {
      sql = `UPDATE details SET status_id=${data.status_id
        },r_f_date	='${mysql_real_escape_string(
          date
        )}',updated_date ='${mysql_real_escape_string(
          curr_date
        )}',status_mail_date='${mysql_real_escape_string(
          curr_date
        )}',status_change_date='${mysql_real_escape_string(
          status_change_date
        )}' WHERE detail_id =${data.detail_id}`;
    } else if (data.status_id == 21) {
      sql = `UPDATE details SET status_id=${data.status_id
        },delivery_date=${null},awb_no=${null},courier_id=${null},under_process_date='${mysql_real_escape_string(
          date
        )}',updated_date ='${mysql_real_escape_string(
          curr_date
        )}',status_mail_date='${mysql_real_escape_string(
          curr_date
        )}',status_change_date='${mysql_real_escape_string(
          status_change_date
        )}' WHERE detail_id=${data.detail_id}`;
    } else if (data.status_id == 273) {
      //2503
      sql = `UPDATE details SET under_correction_date='${mysql_real_escape_string(
        date
      )}',reason ='${mysql_real_escape_string(data.reason)}',status_id=${data.status_id
        },updated_date ='${mysql_real_escape_string(
          curr_date
        )}',status_mail_date='${mysql_real_escape_string(
          curr_date
        )}',status_change_date='${mysql_real_escape_string(
          status_change_date
        )}' WHERE detail_id =${data.detail_id}`;
    } else if (data.status_id == 23) {
      if (data.cid != undefined) {
        sql1 = `SELECT * FROM customer WHERE c_id=${data.cid}`;
        con.query(sql1, async function (err1, result1) {
          if (err1) {
            console.log(err1);
            resolve({ status: 0, message: "Something went to wrong" });
          } else {
            if (result1.length > 0) {
              senderMailSetting = await sendmessage.getEmailSetting(data.u_id);

              sqlll = `SELECT u_email FROM users WHERE u_id = ${data.u_id} `;
              let ccmail = await new Promise((resolve, reject) => {
                con.query(sqlll, async function (err1, result1) {
                  if (err1) {
                    console.log(err1);
                    resolve({ status: 0, message: "Something went to wrong" });
                  } else {
                    if (result1.length > 0) {
                      resolve({ status: 1, result: result1[0].u_email });
                    } else {
                      resolve({
                        status: 0,
                        message: "Something went to wrong",
                      });
                    }
                  }
                });
              });

              let message = await sendmessage.getTemplate(33);
              if (message.status != 0) {
                message.template = message.template.replace(
                  "{:name:}",
                  result1[0].c_prefix + " " + result1[0].c_name
                );
                let mess =
                  (message.header == 1
                    ? typeof senderMailSetting.email_template_header !=
                      undefined && senderMailSetting.email_template_header != undefined &&
                      senderMailSetting.email_template_header != null
                      ? senderMailSetting.email_template_header
                      : ""
                    : "") +
                  message.template +
                  (message.b_d_id != 0
                    ? message.b_d_id == 1
                      ? senderMailSetting.gst_bankdetails
                      : message.b_d_id == 2
                        ? senderMailSetting.ngst_bankdetails
                        : message.b_d_id == 3
                          ? senderMailSetting.general_bankdetails
                          : ""
                    : "") +
                  (message.footer == 1
                    ? senderMailSetting.email_template_footer
                    : "") +
                  (message.signature == 1
                    ? senderMailSetting.email_signature
                    : "");

                CCMailSetting = await sendmessage.getEmailSetting(1);
                sendmessagenow = sendmessage.customermessagesend(
                  senderMailSetting,
                  result1[0].c_email,
                  mess,
                  message.subject,
                  ccmail.result, //CCMailSetting.e_username,  // user mail
                  ccmail.result, // reply mail
                  1
                );
              }
            } else {
              resolve({
                status: 0,
                message: "Something went to wrong",
              });
            }
          }
        });
      }
      if (
        data.refrence_c_id != 0 &&
        data.refrence_c_id != "undefined" &&
        data.check_status == 0 &&
        data.check_status != "undefined"
      ) {
        let mainCust = `Select created_id from main_customer where m_c_id = ${data.refrence_c_id} `;
        let mainCustres = await new Promise((resolve, reject) => {
          con.query(mainCust, async function (er, res) {
            if (er) {
              console.log(er);
              resolve({ status: 0, message: "Something went to wrong" });
            } else {
              let resultData;
              if (res.length > 0) {
                let mainCust = `Select branch_id from users where u_id = ${res[0].created_id} `;
                let mainCustBranchres = await new Promise((resolve, reject) => {
                  con.query(mainCust, function (errrr, ressss) {
                    if (errrr) {
                      console.log(errrr);
                      resolve({ status: 0, message: "Something went to wrong" });
                    } else {
                      if (ressss.length > 0) {
                        resultData = { u_id: res[0].created_id, branch_id: ressss[0].branch_id };
                        resolve({
                          status: 1,
                          data: { u_id: res[0].created_id, branch_id: ressss[0].branch_id }
                        });
                      }
                    }
                  });
                });
                resolve({
                  status: 1,
                  data: resultData
                });
              } else {
                resolve({
                  status: 0,
                  message: "Something went to wrong",
                });
              }
            }
          });
        });

        sq1 = `INSERT INTO customer_commision_payment(refrence_c_id,created_id,commision_date,c_amount,c_id,p_u_id,p_branch_id) VALUES(${data.refrence_c_id},${data.u_id},'${data.commision_date}',${data.std_commission},${data.cid},${mainCustres.data.u_id},${mainCustres.data.branch_id})`;
        console.log("sq1", sq1);
        let res11 = await new Promise((resolve, reject) => {
          con.query(sq1, function (er, res) {
            if (er) {
              console.log(er);
              resolve({ status: 0, message: "Something went to wrong" });
            } else {
              if (res.affectedRows > 0) {
                resolve({
                  status: 1,
                  message: "Customer commission inserted successfully...",
                });
              } else {
                resolve({
                  status: 0,
                  message: "Something went to wrong",
                });
              }
            }
          });
        });
        updateamt = `UPDATE main_customer SET total_commision = total_commision + ${data.std_commission}  WHERE m_c_id=${data.refrence_c_id}`;
        let res12 = await new Promise((resolve, reject) => {
          con.query(updateamt, function (er, res) {
            if (er) {
              console.log(er);
              resolve({ status: 0, message: "Something went to wrong" });
            } else {
              if (res.affectedRows > 0) {
                resolve({
                  status: 1,
                  message: "Main Customer commission updated successfully...",
                });
              } else {
                resolve({
                  status: 0,
                  message: "Something went to wrong",
                });
              }
            }
          });
        });

        sqlll = `SELECT * FROM customer WHERE c_id = ${data.cid}`;
        let ress = await new Promise((resolve, reject) => {
          con.query(sqlll, async function (err1, result1) {
            if (err1) {
              console.log(err1);
              resolve({ status: 0, message: "Customer Not Updated" });
            } else {
              if (result1.length > 0) {
                resolve({ status: 1, result: result1[0] });
              } else {
                resolve({
                  status: 0,
                  message: "Something went to wrong",
                });
              }
            }
          });
        });
        sql1 = `SELECT * FROM main_customer WHERE m_c_id=${data.refrence_c_id}`;
        con.query(sql1, async function (err1, result1) {
          if (err1) {
            console.log(err1);
            resolve({ status: 0, message: "Something went to wrong" });
          } else {
            if (result1.length > 0) {
              senderMailSetting = await sendmessage.getEmailSetting(data.u_id);

              sqlll = `SELECT u_email FROM users WHERE u_id = ${data.u_id} `;
              let ccmail = await new Promise((resolve, reject) => {
                con.query(sqlll, async function (err1, result1) {
                  if (err1) {
                    console.log(err1);
                    resolve({ status: 0, message: "Something went to wrong" });
                  } else {
                    if (result1.length > 0) {
                      resolve({ status: 1, result: result1[0].u_email });
                    } else {
                      resolve({
                        status: 0,
                        message: "Something went to wrong",
                      });
                    }
                  }
                });
              });

              let message = await sendmessage.getTemplate(143);
              if (message.status != 0) {
                message.template = message.template.replace(
                  "{:name:}",
                  result1[0].m_c_prefix + " " + result1[0].m_c_name
                );
                message.template = message.template.replace(
                  "{:cname:}",
                  ress.result.c_name
                );
                message.template = message.template.replace(
                  "{:mobileno:}",
                  ress.result.c_mo_no
                );
                message.template = message.template.replace(
                  "{:camount:}",
                  data.std_commission
                );
                let mess =
                  (message.header == 1
                    ? typeof senderMailSetting.email_template_header !=
                      undefined && senderMailSetting.email_template_header != undefined &&
                      senderMailSetting.email_template_header != null
                      ? senderMailSetting.email_template_header
                      : ""
                    : "") +
                  message.template +
                  (message.b_d_id != 0
                    ? message.b_d_id == 1
                      ? senderMailSetting.gst_bankdetails
                      : message.b_d_id == 2
                        ? senderMailSetting.ngst_bankdetails
                        : message.b_d_id == 3
                          ? senderMailSetting.general_bankdetails
                          : ""
                    : "") +
                  (message.footer == 1
                    ? senderMailSetting.email_template_footer
                    : "") +
                  (message.signature == 1
                    ? senderMailSetting.email_signature
                    : "");

                CCMailSetting = await sendmessage.getEmailSetting(1);
                sendmessagenow = sendmessage.customermessagesend(
                  senderMailSetting,
                  result1[0].m_c_email,
                  mess,
                  message.subject,
                  ccmail.result, //CCMailSetting.e_username,  // user mail
                  ccmail.result, // reply mail
                  1
                );
              }
            } else {
              resolve({
                status: 0,
                message: "Something went to wrong",
              });
            }
          }
        });
      }
      sql = `UPDATE details SET status_id=${data.status_id},collector='${data.collector ? data.collector : ress.collector
        }',updated_date ='${curr_date}',status_mail_date="${curr_date}",collection_date="${data.collection_date
        }",status_change_date='${status_change_date}' WHERE detail_id=${data.detail_id
        }`;
    } else {
      sql = `UPDATE details SET status_id=${data.status_id
        },delivery_date	=${null},awb_no=${null},courier_id=${null},updated_date ='${curr_date}',status_mail_date='${curr_date}',status_change_date='${status_change_date}' WHERE detail_id=${data.detail_id
        }`;
    }
    let response = await new Promise((resolve, reject) => {
      con.query(sql, async function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.affectedRows > 0) {
            if (data.status_id == 21) {
              let updatecust = `Update customer SET under_process_date='${mysql_real_escape_string(
                date
              )}' WHERE c_id = ${ress.c_id[0]} and deleted =0`;
              let updatecustres = await new Promise((resolve, reject) => {
                con.query(updatecust, async function (err1, resul) {
                  if (err1) {
                    console.log(err1);
                    resolve({
                      status: 0,
                      message: "Something went to wrong",
                    });
                  } else {
                    if (resul.affectedRows > 0) {
                      resolve({
                        status: 1,
                        message: "Customer updated successfully....",
                      });
                    }
                  }
                });
              });
            }

            //0903
            const updated_date = moment().format("DD-MM-YYYY HH:mm:ss");
            sq1 = `INSERT INTO status_activity_log(old_status_id,new_status_id,updated_date,detail_id,u_id) VALUES(${ress.old_status_id},${data.status_id},'${updated_date}',${ress.detail_id},${data.u_id})`;
            let res11 = await new Promise((resolve, reject) => {
              con.query(sq1, function (er, res) {
                if (er) {
                  console.log(er);
                  resolve({ status: 0, message: "Something went to wrong" });
                } else {
                  if (res.affectedRows > 0) {
                    resolve({
                      status: 1,
                      message: "Activity log inserted successfully...",
                    });
                  } else {
                    resolve({
                      status: 0,
                      message: "Something went to wrong",
                    });
                  }
                }
              });
            });
            sqlllll = `select due_amt from payment where deleted=0 and c_id=${ress.c_id[0]} order by payment_id DESC limit 1`;
            let responsee = await new Promise((resolve, reject) => {
              con.query(sqlllll, async function (errr, resulttt) {
                if (errr) {
                  console.log(errr);
                  resolve({ status: 0, message: "Something went to wrong" });
                } else {
                  if (resulttt.length > 0) {
                    resolve({ status: 1, result: resulttt[0].due_amt });
                  } else {
                    resolve({
                      status: 0,
                      message: "Something went to wrong",
                    });
                  }
                }
              });
            });
            sql123 = `select awb_no,courier_id,(select name from attributes where attributes.attribute_id= details.courier_id)as courier_name  from details where deleted=0 and  detail_id = ${ress.detail_id}`;

            let res123 = await new Promise((resolve, reject) => {
              con.query(sql123, async function (errr, resulttt) {
                if (errr) {
                  console.log(errr);
                  resolve({ status: 0, message: "Something went to wrong" });
                } else {
                  if (resulttt.length > 0) {
                    resolve({
                      status: 1,
                      awb_no: resulttt[0].awb_no,
                      courier_name: resulttt[0].courier_name,
                    });
                  } else {
                    resolve({
                      status: 0,
                      message: "Something went to wrong",
                    });
                  }
                }
              });
            });
            let etemp = 0;
            if (data.status_id == 13) {
              etemp = parseInt(18);
            } else if (data.status_id == 14) {
              etemp = parseInt(19);
            } else if (data.status_id == 15) {
              etemp = parseInt(20);
            } else if (data.status_id == 16) {
              etemp = parseInt(21);
            } else if (data.status_id == 17) {
              etemp = parseInt(22);
            } else if (data.status_id == 18) {
              etemp = parseInt(23);
            } else if (data.status_id == 19) {
              etemp = parseInt(24);
            } else if (data.status_id == 20) {
              if (data.c_tax == 0) {
                etemp = parseInt(25);
              } else {
                etemp = parseInt(281);
              }
            } else if (data.status_id == 21) {
              etemp = parseInt(26);
            } else if (data.status_id == 22) {
              // if (responsee.result != "0") {
              //   etemp = parseInt(27);
              // } else {
              //   etemp = parseInt(28);
              // }

              //1603
              if (responsee.result == "0") {
                if (
                  ress.d_address[0] != "" &&
                  ress.d_address[0] != null &&
                  ress.d_address[0] != undefined
                ) {
                  etemp = parseInt(230);
                } else {
                  etemp = parseInt(231);
                }
              } else {
                if (data.c_tax == 0) {
                  if (
                    ress.d_address[0] != "" &&
                    ress.d_address[0] != null &&
                    ress.d_address[0] != undefined
                  ) {
                    etemp = parseInt(223);
                  } else {
                    etemp = parseInt(277);
                    // etemp = parseInt(161);
                  }
                } else {
                  if (
                    ress.d_address[0] != "" &&
                    ress.d_address[0] != null &&
                    ress.d_address[0] != undefined
                  ) {
                    etemp = parseInt(27);
                    // etemp = parseInt(163);
                  } else {
                    etemp = parseInt(28);
                    // etemp = parseInt(164);
                  }
                }
              }
            } else if (data.status_id == 23) {
              etemp = parseInt(29);
            } else if (data.status_id == 24) {
              etemp = parseInt(30);
            } else if (data.status_id == 25) {
              etemp = parseInt(31);
            } else if (data.status_id == 26) {
              etemp = parseInt(32);
            } else if (data.status_id == 273) {
              etemp = parseInt(236);
            } else if (data.status_id == 259) {
              if (ress.service_type == "8") {
                sqlll1 = `select details.detail_id from visa,details where visa.v_id=details.service_id AND details.deleted=0 AND visa.deleted=0 AND visa.c_id = ${ress.c_id[0]} AND details.service_type=8`;
              } else if (ress.service_type == "10") {
                sqlll1 = `select details.detail_id from attestation,details where attestation.a_id=details.service_id AND details.deleted=0 AND attestation.deleted=0 AND attestation.c_id = ${ress.c_id[0]} AND details.service_type=10`;
              } else if (ress.service_type == "17") {
                sqlll1 = `select details.detail_id from apostille,details where apostille.a_id=details.service_id AND details.deleted=0 AND apostille.deleted=0 AND apostille.c_id = ${ress.c_id[0]} AND details.service_type=17`;
              } else {
                sqlll1 = `select details.detail_id from translation,details where translation.a_id=details.service_id AND details.deleted=0 AND translation.deleted=0 AND translation.c_id = ${ress.c_id[0]} AND details.service_type=20`;
              }

              let responsee1 = await new Promise((resolve, reject) => {
                con.query(sqlll1, async function (errr, resulttt) {
                  if (errr) {
                    console.log(errr);
                    resolve({ status: 0, message: "Something went to wrong" });
                  } else {
                    let sqlll2 = "";
                    if (resulttt.length > 0) {
                      resulttt.map((d) => {
                        sqlll2 += `UPDATE details SET status_id=${data.status_id
                          },delivery_date=${null},awb_no=${null},courier_id=${null},updated_date ='${mysql_real_escape_string(
                            curr_date
                          )}',status_mail_date='${mysql_real_escape_string(
                            curr_date
                          )}',status_change_date='${mysql_real_escape_string(
                            status_change_date
                          )}' WHERE detail_id=${d.detail_id};`;
                      });
                      con.query(sqlll2, function (errr2, resultt2) {
                        if (errr2) {
                          console.log(errr2);
                          resolve({
                            status: 0,
                            message: "Something went to wrong",
                          });
                        } else {
                          if (Array.isArray(resultt2)) {
                            if (resultt2.length > 0) {
                              sql5 = `Update customer SET is_cancel = 1 WHERE c_id = ${ress.c_id[0]
                                } and deleted =0`;

                              con.query(sql5, async function (err1, resul) {
                                if (err1) {
                                  console.log(err1);
                                  resolve({
                                    status: 0,
                                    message: "Something went to wrong",
                                  });
                                } else {
                                  if (resul.affectedRows > 0) {
                                    resolve({
                                      status: 1,
                                      message:
                                        "Customer updated successfully....",
                                    });
                                  } else {
                                    resolve({
                                      status: 0,
                                      message: "Something went to wrong",
                                    });
                                  }
                                }
                              });
                            }
                          } else if (resultt2.affectedRows > 0) {
                            sql5 = `Update customer SET is_cancel = 1 WHERE c_id = ${ress.c_id[0]
                              } and deleted =0`;

                            con.query(sql5, async function (err1, resul) {
                              if (err1) {
                                console.log(err1);
                                resolve({
                                  status: 0,
                                  message: "Something went to wrong",
                                });
                              } else {
                                if (resul.affectedRows > 0) {
                                  resolve({
                                    status: 1,
                                    message:
                                      "Customer updated successfully....",
                                  });
                                } else {
                                  resolve({
                                    status: 0,
                                    message: "Something went to wrong",
                                  });
                                }
                              }
                            });
                          }
                        }

                        // else{
                        //   resolve({
                        //     status: 1,
                        //     message: "Customer updated successfully....",
                        //   });
                        // }
                      });
                    } else {
                      resolve({
                        status: 0,
                        message: "Something went to wrong",
                      });
                    }
                  }
                });
              });
              sql123 = `SELECT * FROM payment WHERE deleted=0 AND c_id = ${ress.c_id[0]} ORDER BY payment_id DESC LIMIT 1`;
              let resp = await new Promise((resolve, reject) => {
                con.query(sql123, async function (errr, resulttt) {
                  if (errr) {
                    console.log(errr);
                    resolve({ status: 0, message: "Something went to wrong" });
                  } else {
                    if (resulttt.length > 0) {
                      resolve({ status: 1, result: resulttt[0] });
                    } else {
                      resolve({
                        status: 0,
                        message: "Something went to wrong",
                      });
                    }
                  }
                });
              });
              sqll = `Update payment SET invoice_status = 1 WHERE payment_id=${resp.result.payment_id} AND deleted = 0`;
              let resp1 = await new Promise((resolve, reject) => {
                con.query(sqll, async function (err11, resultttttt) {
                  if (err11) {
                    console.log(err11);
                    resolve({ status: 0, message: "Something went to wrong" });
                  } else {
                    //grishma [net amount 0 change]
                    if (resultttttt.affectedRows > 0) {
                      resolve({ status: 1 });
                    }
                  }
                });
              });
            }
            resolve({
              status: 1,
              message: "Status update successfully",
            });
            if (data.status_id != 259) {
              let senderMailSetting = await sendmessage.getEmailSetting(
                ress.created_id[0]
              );

              sqlll = `SELECT u_email FROM users WHERE u_id = ${ress.created_id[0]}`;
              let ccmail = await new Promise((resolve, reject) => {
                con.query(sqlll, async function (err1, result1) {
                  if (err1) {
                    console.log(err1);
                    resolve({ status: 0, message: "Something went to wrong" });
                  } else {
                    if (result1.length > 0) {
                      resolve({ status: 1, result: result1[0].u_email });
                    } else {
                      resolve({
                        status: 0,
                        message: "Something went to wrong",
                      });
                    }
                  }
                });
              });

              if (ress.service_type == 10) {
                sqll = `Select attestation.*,details.d_c_id,details.service_type,(SELECT name FROM attributes WHERE attribute_id=details.status_id)as status_name ,(SELECT name FROM attributes WHERE attribute_id=details.d_c_id)as certificate_name,(SELECT name FROM attributes WHERE attribute_id=attestation.a_country)as country_name,(SELECT name FROM attributes WHERE attribute_id=attestation.a_type)as type FROM attestation RIGHT JOIN details ON  attestation.a_id=details.service_id WHERE  details.service_type=10 AND attestation.c_id = ${ress.c_id[0]} and attestation.deleted = 0 `;
              } else if (ress.service_type == 8) {
                sqll = `Select visa.*,details.d_c_id,details.service_type,(SELECT name FROM attributes WHERE attribute_id=details.status_id)as status_name,(SELECT name FROM attributes WHERE attribute_id=details.d_c_id)as country_name,(SELECT name FROM attributes WHERE attribute_id=visa.v_type)as type,(SELECT GROUP_CONCAT(attributes.name SEPARATOR ',') as name FROM attributes where FIND_IN_SET (attributes.attribute_id , visa.v_supporting_doc)) as certificate_name  FROM visa RIGHT JOIN details ON  visa.v_id=details.service_id   WHERE   details.service_type=8 AND visa.c_id = ${ress.c_id[0]} and visa.deleted = 0`;
              } else if (ress.service_type == 17) {
                sqll = `Select apostille.*,details.d_c_id,details.service_type,(SELECT name FROM attributes WHERE attribute_id=details.status_id)as status_name,(SELECT name FROM attributes WHERE attribute_id=details.d_c_id)as certificate_name,(SELECT name FROM attributes WHERE attribute_id=apostille.a_country)as country_name,(SELECT name FROM attributes WHERE attribute_id=apostille.a_type)as type  FROM apostille RIGHT JOIN details ON apostille.a_id=details.service_id  WHERE  details.service_type=17 AND apostille.c_id = ${ress.c_id[0]} and apostille.deleted = 0`;
              } else {
                sqll = `Select translation.*,details.d_c_id,details.service_type,(SELECT name FROM attributes WHERE attribute_id=details.status_id)as status_name,(SELECT name FROM attributes WHERE attribute_id=details.d_c_id)as certificate_name,(SELECT name FROM attributes WHERE attribute_id=translation.a_country)as country_name,(SELECT name FROM attributes WHERE attribute_id=translation.a_type)as type  FROM translation RIGHT JOIN details ON translation.a_id=details.service_id  WHERE  details.service_type=20 AND translation.c_id = ${ress.c_id[0]} and translation.deleted = 0`;
              }
              con.query(sqll, async function (errr, resultss) {
                if (errr) {
                  console.log("Something went wrong");
                }
                if (resultss.length > 0) {
                  //                 const getrow = () => {
                  //                   let rows = "";
                  //                   resultss.map((a) => {
                  //                     a.service_type == 8
                  //                       ? (rows =
                  //                           rows +
                  //                           `<tr><td style="border: 1px solid #333;padding:5px;"> ${a.v_name} </td>
                  //         <td style="border: 1px solid #333;padding:5px;"> ${a.type} </td>
                  //         <td style="border: 1px solid #333;padding:5px;"> ${a.country_name} </td>
                  //         <td style="border: 1px solid #333;padding:5px;"> ${a.certificate_name} </td>
                  //         <td style="border: 1px solid #333;padding:5px;"> ${a.status_name} </td></tr>`)
                  //                       : (rows =
                  //                           rows +
                  //                           `<tr><td style="border: 1px solid #333;padding:5px;"> ${a.a_name} </td>
                  //         <td style="border: 1px solid #333;padding:5px;"> ${a.type} </td>
                  //         <td style="border: 1px solid #333;padding:5px;"> ${a.country_name} </td>
                  //         <td style="border: 1px solid #333;padding:5px;"> ${a.certificate_name} </td>
                  //         <td style="border: 1px solid #333;padding:5px;"> ${a.status_name} </td></tr>`);
                  //                   });
                  //                   return rows;
                  //                 };
                  //                 let table1 = `<div>
                  // <table style="border-collapse: collapse;" >
                  //   <tr>
                  //     <th style="border: 1px solid #333;padding:5px;"> Name </th>
                  //     <th style="border: 1px solid #333;padding:5px;"> Type </th>
                  //     <th style="border: 1px solid #333;padding:5px;"> Country </th>
                  //     <th style="border: 1px solid #333;padding:5px;"> Certificate </th>
                  //     <th style="border: 1px solid #333;padding:5px;"> Status </th>
                  //   </tr>
                  //   ${getrow()}
                  // </table>
                  // </div>`;
                  //                 let message = await sendmessage.getTemplate(etemp);
                  //                 if (message.status != 0) {
                  //                   message.template = message.template.replace(
                  //                     "{:name:}",
                  //                     ress.c_prefix[0] + " " + ress.c_name[0]
                  //                   );
                  //                   message.template = message.template.replace(
                  //                     "{:table:}",
                  //                     table1
                  //                   );
                  //                   message.template = message.template.replace(
                  //                     "{:d_address:}",
                  //                     ress.d_address
                  //                   );
                  //                   message.template = message.template.replace(
                  //                     "{:due_amt:}",
                  //                     responsee.result
                  //                   );
                  //                   message.template = message.template.replace(
                  //                     "{:awb_no:}",
                  //                     res123.awb_no
                  //                   );
                  //                   message.template = message.template.replace(
                  //                     "{:courier:}",
                  //                     res123.courier_name
                  //                   );
                  //                   let mess =
                  //                     (message.header == 1
                  //                       ? senderMailSetting.email_template_header
                  //                       : "") +
                  //                     message.template +
                  //                     (message.b_d_id != 0
                  //                       ? message.b_d_id == 1
                  //                         ? senderMailSetting.gst_bankdetails
                  //                         : message.b_d_id == 2
                  //                         ? senderMailSetting.ngst_bankdetails
                  //                         : message.b_d_id == 3
                  //                         ? senderMailSetting.general_bankdetails
                  //                         : ""
                  //                       : "") +
                  //                     // (ress.created_id[0] == 1
                  //                     //   ? ress.c_tax[0] == 0
                  //                     //     ? senderMailSetting.bank_details
                  //                     //     : senderMailSetting.nongst_bank_details
                  //                     //   : ress.c_tax[0] == 0
                  //                     //     ? senderMailSetting.b_bank_details
                  //                     //     : senderMailSetting.b_nongst_bank_deatils) +
                  //                     (message.footer == 1
                  //                       ? senderMailSetting.email_template_footer
                  //                       : "") +
                  //                     (message.signature == 1
                  //                       ? senderMailSetting.email_signature
                  //                       : "");
                  //                   CCMailSetting = await sendmessage.getEmailSetting(1);
                  //                   console.log("fgfhg", data.status_id);
                  //                   sendmessagenow = sendmessage.customermessagesend(
                  //                     senderMailSetting,
                  //                     ress.c_email[0],
                  //                     mess,
                  //                     message.subject,
                  //                     data.status_id != 16 &&
                  //                       data.status_id != 21 &&
                  //                       data.status_id != 24
                  //                       ? ccmail.result
                  //                       : "", //CCMailSetting.e_username,  // user mail
                  //                     ccmail.result, // reply mail
                  //                     1
                  //                   );
                  //                   if (data.status_id == 24) {
                  //                     console.log("if 24", CCMailSetting.cc_email);
                  //                     sendmessagenow = sendmessage.customermessagesend(
                  //                       senderMailSetting,
                  //                       CCMailSetting.cc_email,
                  //                       mess,
                  //                       message.subject,
                  //                       "", //CCMailSetting.e_username,  // user mail
                  //                       ccmail.result, // reply mail
                  //                       1
                  //                     );
                  //                   }
                  //                 }
                }
              });
            }
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}
// async function updateDetailsStatus(data, date) {
//   try {
//     if (data.status_id == 24) {
//       sql = `UPDATE details SET status_id=${data.status_id},delivery_date	='${date}',awb_no='${data.awb_no}',courier_id=${data.courier_id} WHERE detail_id =${data.detail_id}`;
//     }
//     else if (data.status_id == 26) {
//       sql = `UPDATE details SET status_id=${data.status_id},delivery_date	='${date}' WHERE detail_id =${data.detail_id}`;
//     }
//     else if (data.status_id == 21 && data.service_type == 10) {
//       sql = `UPDATE details SET status_id=${data.status_id},delivery_date=${null},awb_no=${null},courier_id=${null},under_process_date='${date}' WHERE detail_id=${data.detail_id}`;
//     }
//     else {
//       sql = `UPDATE details SET status_id=${data.status_id},delivery_date	=${null},awb_no=${null},courier_id=${null} WHERE detail_id=${data.detail_id}`;
//     }
//     let response = await new Promise((resolve, reject) => {
//       con.query(sql, function (err, result) {
//         if (err) {
//           resolve({ status: 0, message: "Something went to wrong" });
//         }
//         if (result.affectedRows > 0) {
//           resolve({
//             status: 1,
//             message: "Status update successfully",
//           });
//         }
//       });
//     });
//     return response;
//   } catch (error) {
//     return { status: 0, message: "Invalid Call Try Again" };
//   }
// }

async function updateVisaStatus(data, date) {
  try {
    if (data.v_status == 24) {
      sql = `UPDATE visa SET v_status=${data.v_status
        },dispatch_date='${mysql_real_escape_string(date)}' WHERE v_id=${data.v_id
        }`;
    } else {
      sql = `UPDATE visa SET v_status=${data.v_status
        },dispatch_date=${null} WHERE v_id=${data.v_id}`;
    }
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.affectedRows > 0) {
            resolve({
              status: 1,
              message: "Visa Status update successfully",
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function deleteVisaCustomer(data) {
  try {
    sql = `UPDATE details SET deleted=1 WHERE detail_id=${data.id}`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.affectedRows > 0) {
            resolve({
              status: 1,
              message: "Visa Customer deleted successfully",
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function updateVisaCustomer(data1) {
  try {
    sql4 = `SELECT * FROM visa INNER JOIN payment ON visa.c_id = payment.c_id INNER JOIN customer ON visa.c_id = customer.c_id WHERE visa.c_id = ${data1.c_id} ORDER BY payment_id DESC LIMIT 1 `;

    let response3 = await new Promise((resolve, reject) => {
      con.query(sql4, async function (err4, result4) {
        if (err4) {
          console.log(err4);
          resolve({ status: 0, message: "Something went wrong" });
        } else {
          if (result4.length > 0) {
            result4.forEach(function (result) {
              resolve({
                result: result,
              });
            });
          } else {
            resolve({
              result: 0,
            });
          }
        }
      });
    });
    let sum = 0;
    let sum1 = [];
    let embassy = parseInt(response3.result.embassy_fees);

    paymentrecord = `SELECT * FROM payment WHERE c_id = ${data1.c_id} and deleted = 0 ORDER BY payment_id DESC limit 1;`;
    let payment = await new Promise((resolve, reject) => {
      con.query(paymentrecord, async function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Customer Not Updated" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              result: result[0],
              result1: result[0].payment_id,
              result2: result[0].invoice_no,
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    sql12 = `SELECT b_name FROM branch WHERE branch_id = ${data1.branch_id} `;
    let res = await new Promise((resolve, reject) => {
      con.query(sql12, async function (err1, result1) {
        if (err1) {
          console.log(err1);
          resolve({ status: 0, message: "Customer Not Updated" });
        } else {
          if (result1.length > 0) {
            resolve({ status: 1, result: result1[0].b_name });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    let responseinvoice = await new Promise((resolve, reject) => {
      //1003
      if (data1.c_tax == "1") {
        // let getinvoiceno = `SELECT *,invoice_no FROM payment,customer WHERE payment.c_id=customer.c_id and payment.c_tax = "1" and customer.branch_id=${data1.branch_id} and payment.deleted=0 ORDER BY customer.c_id DESC limit 1;`;
        let getinvoiceno = `SELECT *,invoice_no FROM payment JOIN customer ON payment.c_id=customer.c_id and payment.c_tax = "1" and customer.branch_id=${data1.branch_id} and payment.deleted=0 ORDER BY payment.payment_id DESC,customer.c_id DESC limit 1;`;

        // const now = new Date();
        // const cvalue = date.format(now, "YY");
        // const currentYear = new Date().getFullYear().toString().slice(-2);
        // const previousYear = currentYear - 1;
        const cvalue = moment().format("MM");
        const last2 = new Date().getFullYear().toString().substring(2);
        const last2Num = Number(last2);
        var today = new Date();
        if (today.getMonth() + 1 <= 3) {
          fiscalyear = last2Num - 1 + "-" + last2Num;
        } else {
          fiscalyear = last2Num + "-" + (last2Num + 1);
        }
        let invoice_no = 0;
        con.query(getinvoiceno, async function (errino, inoresult) {
          if (errino) {
            console.log(errino);
            resolve({ status: 0, message: "Something went wrong" });
          } else {
            if (inoresult.length > 0 && inoresult[0].invoice_no != 0) {
              let sql = `UPDATE payment SET invoice_status = 1 WHERE payment_id=${payment.result1
                } AND deleted = 0  `;
              con.query(sql, async function (err, result) {
                if (err) {
                  console.log(err);
                  resolve({ status: 0, message: "Something went to wrong" });
                } else {
                  if (result.affectedRows > 0) {
                    resolve({
                      status: 1,
                      message: "Payment Updated successfully",
                    });
                  } else {
                    resolve({
                      status: 0,
                      message: "Something went to wrong",
                    });
                  }
                }
              });
              //1003
              let ino = inoresult[0].invoice_no;
              let n_ino = ino.split("/");
              if (fiscalyear == n_ino[1]) {
                invoice_no =
                  res.result.substring(0, 2) +
                  "/" +
                  fiscalyear +
                  "/" +
                  "g" +
                  cvalue +
                  "/" +
                  ++n_ino[3];
              } else {
                invoice_no =
                  res.result.substring(0, 2) +
                  "/" +
                  fiscalyear +
                  "/" +
                  "g" +
                  cvalue +
                  "/" +
                  1;
              }
            } else {
              let sql = `UPDATE payment SET invoice_status = 1 WHERE payment_id=${payment.result1
                } AND deleted = 0  `;
              con.query(sql, async function (err, result) {
                if (err) {
                  console.log(err);
                  resolve({ status: 0, message: "Something went to wrong" });
                } else {
                  if (result.affectedRows > 0) {
                    resolve({
                      status: 1,
                      message: "Payment Updated successfully",
                    });
                  } else {
                    resolve({
                      status: 0,
                      message: "Something went to wrong",
                    });
                  }
                }
              });
              invoice_no =
                res.result.substring(0, 2) +
                "/" +
                fiscalyear +
                "/" +
                "g" +
                cvalue +
                "/" +
                1;
            }
            resolve({ status: 1, ino: invoice_no });
          }
        });
      } else {
        //1003
        // getinvoiceno = `SELECT *,invoice_no FROM payment,customer WHERE payment.c_id=customer.c_id and payment.c_tax = "0" and customer.branch_id=${data1.branch_id} and payment.deleted=0 ORDER BY customer.c_id DESC limit 1;`;
        let getinvoiceno = `SELECT *,invoice_no FROM payment JOIN customer ON payment.c_id=customer.c_id and payment.c_tax = "0" and customer.branch_id=${data1.branch_id} and payment.deleted=0 ORDER BY payment.payment_id DESC,customer.c_id DESC limit 1;`;

        // const now = new Date();
        // const cvalue = date.format(now, "YY");
        // const currentYear = new Date().getFullYear().toString().slice(-2);
        // const previousYear = currentYear - 1;
        const cvalue = moment().format("MM");
        const last2 = new Date().getFullYear().toString().substring(2);
        const last2Num = Number(last2);
        var today = new Date();
        if (today.getMonth() + 1 <= 3) {
          fiscalyear = last2Num - 1 + "-" + last2Num;
        } else {
          fiscalyear = last2Num + "-" + (last2Num + 1);
        }
        let invoice_no = 0;
        con.query(getinvoiceno, async function (errino, inoresult) {
          if (errino) {
            console.log(errino);
            resolve({ status: 0, message: "Something went wrong" });
          } else {
            if (inoresult.length > 0 && inoresult[0].invoice_no != 0) {
              let sql = `UPDATE payment SET invoice_status = 1 WHERE payment_id=${payment.result1
                } AND deleted = 0  `;
              con.query(sql, async function (err, result) {
                if (err) {
                  console.log(err);
                  resolve({ status: 0, message: "Something went to wrong" });
                } else {
                  if (result.affectedRows > 0) {
                    resolve({
                      status: 1,
                      message: "Payment Updated successfully",
                    });
                  } else {
                    resolve({
                      status: 0,
                      message: "Something went to wrong",
                    });
                  }
                }
              });
              //1003
              let ino = inoresult[0].invoice_no;
              let n_ino = ino.split("/");
              if (fiscalyear == n_ino[1]) {
                invoice_no =
                  res.result.substring(0, 2) +
                  "/" +
                  fiscalyear +
                  "/" +
                  cvalue +
                  "/" +
                  ++n_ino[3];
              } else {
                invoice_no =
                  res.result.substring(0, 2) +
                  "/" +
                  fiscalyear +
                  "/" +
                  cvalue +
                  "/" +
                  1;
              }
            } else {
              let sql = `UPDATE payment SET invoice_status = 1 WHERE payment_id=${payment.result1
                } AND deleted = 0  `;
              con.query(sql, async function (err, result) {
                if (err) {
                  console.log(err);
                  resolve({ status: 0, message: "Something went to wrong" });
                } else {
                  if (result.affectedRows > 0) {
                    resolve({
                      status: 1,
                      message: "Payment Updated successfully",
                    });
                  } else {
                    resolve({
                      status: 0,
                      message: "Something went to wrong",
                    });
                  }
                }
              });
              invoice_no =
                res.result.substring(0, 2) +
                "/" +
                fiscalyear +
                "/" +
                cvalue +
                "/" +
                1;
            }
            resolve({ status: 1, ino: invoice_no });
          }
        });
      }
    });
    //0304
    let response = await new Promise((resolve, reject) => {
      data1.applicationdata.map(async (data, index) => {
        if (data1.old_total_customer > index) {
          sql = `UPDATE visa SET v_prefix='${data.v_prefix
            }',v_name='${mysql_real_escape_string(data.v_name)}',v_passport='${data.v_passport
            }',v_country='${data.v_country}',v_type=${data.v_type
            },v_supporting_doc='${data.v_supporting_doc}',process_limit_date='${data.process_limit_date
            }',v_code='${data.v_code}',process_limit_mail_date='${data.process_limit_date
            }' WHERE v_id=${data.v_id}`;
          con.query(sql, async function (err, result) {
            if (err) {
              console.log(err);
              resolve({ status: 0, message: "Something went to wrong" });
            } else {
              if (result.affectedRows > 0) {
                data.v_country.map(async (k) => {
                  sql1 = `SELECT detail_id FROM details WHERE d_c_id=${k} AND service_id=${data.v_id}`;
                  con.query(sql1, async function (err111, result111) {
                    if (err111) {
                      console.log(err111);
                      resolve({
                        status: 0,
                        message: "Something went to wrong",
                      });
                    } else {
                      sql2 = `SELECT s_amount FROM serviceprice WHERE service = 8  AND country = ${k} AND s_type = ${data.v_type} AND deleted = 0;`;

                      let response2 = await new Promise((resolve, reject) => {
                        con.query(sql2, async function (err2, result2) {
                          if (err2) {
                            console.log(err2);
                            resolve({
                              status: 0,
                              message: "Something went wrong",
                            });
                          } else {
                            if (result2.length > 0) {
                              result2.forEach(async function (result) {
                                resolve({
                                  result: result.s_amount,
                                });
                              });
                            } else {
                              resolve({
                                result: parseInt(0),
                              });
                            }
                          }
                        });
                      });
                      sql3 = `SELECT amount as embassy_fees FROM embassyfees WHERE service_type = 8  AND country = ${k} AND document = ${data.v_type} AND deleted = 0;`;
                      let response3 = await new Promise((resolve, reject) => {
                        con.query(sql3, async function (err2, result2) {
                          if (err2) {
                            console.log(err2);
                            resolve({
                              status: 0,
                              message: "Something went wrong",
                            });
                          } else {
                            if (result2.length > 0) {
                              result2.forEach(async function (result) {
                                resolve({
                                  embassy_fees: result.embassy_fees,
                                });
                              });
                            } else {
                              resolve({
                                embassy_fees: parseInt(0),
                              });
                            }
                          }
                        });
                      });
                      if (result111.length > 0 || result111.length == 0) {
                        if (result111.length > 0) {
                          sum = sum + parseInt(response2.result);
                          // embassy = embassy + parseInt(response2.embassy_fees);
                          sum1.push(parseInt(response2.result));

                          result111.forEach(async function (result1) {
                            sql3 = `UPDATE details SET amount = ${response2.result} WHERE deleted = 0 AND detail_id = ${result1.detail_id}`;

                            con.query(sql3, async function (err3, result3) {
                              if (err3) {
                                console.log(err3);
                                resolve({
                                  status: 0,
                                  message: "Something went Wrong",
                                });
                              } else {
                                if (result3.affectedRows > 0) {
                                  resolve({
                                    status: 1,
                                  });
                                } else {
                                  resolve({
                                    status: 0,
                                    message: "Something went to wrong",
                                  });
                                }
                              }
                            });
                          });
                        } else {
                          sum = sum + parseInt(response2.result);
                          embassy =
                            parseInt(embassy) +
                            parseInt(response3.embassy_fees);
                          sum1.push(parseInt(response2.result));
                          let status_change_date = moment().format(
                            "DD-MM-YYYY HH:mm:ss"
                          );
                          // result1.forEach(async function (result1) {
                          sqlll = `INSERT INTO details (service_type,service_id,d_c_id,amount,tracking_id,status_change_date) VALUES ('${data1.c_s_type}' , ${data.v_id} ,${k},${response2.result},'${data.tracking_id}','${status_change_date}')`;

                          con.query(sqlll, async function (err3, result3) {
                            if (err3) {
                              console.log(err3);
                              resolve({
                                status: 0,
                                message: "Something went Wrong",
                              });
                            } else {
                              if (result3.affectedRows > 0) {
                                resolve({
                                  status: 1,
                                  result: result3,
                                });
                              } else {
                                resolve({
                                  status: 0,
                                  message: "Something went to wrong",
                                });
                              }
                            }
                          });
                        }
                      } else {
                        resolve({
                          status: 0,
                          message: "Something went Wrong...",
                        });
                      }
                    }
                  });
                });
              } else {
                resolve({
                  status: 0,
                  message: "Something went to wrong",
                });
              }
            }
          });
        } else {
          sql = `INSERT INTO visa (c_id,v_prefix,v_name,v_code,v_passport,v_type,v_country,v_supporting_doc,created_id,pg_no,tracking_id,process_limit_date,process_limit_mail_date) VALUES (${data1.c_id
            },'${data.v_prefix}','${mysql_real_escape_string(data.v_name)}',${data.v_code
            },'${data.v_passport}',${data.v_type},'${data.v_country
              .sort()
              .toString()}','${data.v_supporting_doc.toString()}',${data1.created_id
            },${data.pg_no},'${data1.tracking_id}','${data.process_limit_date
            }','${data.process_limit_date}')`;
          con.query(sql, async function (err, result) {
            if (err) {
              console.log(err);
              resolve({ status: 0, message: "Something went to wrong" });
            } else {
              if (result.affectedRows > 0) {
                data.v_country.map(async (k) => {
                  sql1 = `SELECT detail_id FROM details WHERE d_c_id=${k} AND service_id=${result.insertId}`;
                  con.query(sql1, async function (err111, result111) {
                    if (err111) {
                      console.log(err111);
                      resolve({
                        status: 0,
                        message: "Something went to wrong",
                      });
                    } else {
                      sql2 = `SELECT s_amount FROM serviceprice WHERE service = 8  AND country = ${k} AND s_type = ${data.v_type} AND deleted = 0;`;

                      let response2 = await new Promise((resolve, reject) => {
                        con.query(sql2, async function (err2, result2) {
                          if (err2) {
                            console.log(err2);
                            resolve({
                              status: 0,
                              message: "Something went wrong",
                            });
                          } else {
                            if (result2.length > 0) {
                              result2.forEach(async function (result) {
                                resolve({
                                  result: result.s_amount,
                                });
                              });
                            } else {
                              resolve({
                                result: parseInt(0),
                              });
                            }
                          }
                        });
                      });
                      sql3 = `SELECT amount as embassy_fees FROM embassyfees WHERE service_type = 8  AND country = ${k} AND document = ${data.v_type} AND deleted = 0;`;
                      let response3 = await new Promise((resolve, reject) => {
                        con.query(sql3, async function (err2, result2) {
                          if (err2) {
                            console.log(err2);
                            resolve({
                              status: 0,
                              message: "Something went wrong",
                            });
                          } else {
                            if (result2.length > 0) {
                              result2.forEach(async function (result) {
                                resolve({
                                  embassy_fees: result.embassy_fees,
                                });
                              });
                            } else {
                              resolve({
                                embassy_fees: parseInt(0),
                              });
                            }
                          }
                        });
                      });
                      if (result111.length > 0 || result111.length == 0) {
                        if (result111.length > 0) {
                          sum = sum + parseInt(response2.result);
                          // embassy = embassy + parseInt(response2.embassy_fees);
                          sum1.push(parseInt(response2.result));

                          result111.forEach(async function (result1) {
                            sql3 = `UPDATE details SET amount = ${response2.result} WHERE deleted = 0 AND detail_id = ${result1.detail_id}`;

                            con.query(sql3, async function (err3, result3) {
                              if (err3) {
                                console.log(err3);
                                resolve({
                                  status: 0,
                                  message: "Something went Wrong",
                                });
                              } else {
                                if (result3.affectedRows > 0) {
                                  resolve({
                                    status: 1,
                                  });
                                } else {
                                  resolve({
                                    status: 0,
                                    message: "Something went to wrong",
                                  });
                                }
                              }
                            });
                          });
                        } else {
                          sum = sum + parseInt(response2.result);
                          embassy =
                            parseInt(embassy) +
                            parseInt(response3.embassy_fees);
                          sum1.push(parseInt(response2.result));
                          let status_change_date = moment().format(
                            "DD-MM-YYYY HH:mm:ss"
                          );
                          // result1.forEach(async function (result1) {
                          sqlll = `INSERT INTO details (service_type,service_id,d_c_id,amount,tracking_id,status_change_date) VALUES ('${data1.c_s_type}' , ${result.insertId} ,${k},${response2.result},'${data1.tracking_id}','${status_change_date}')`;

                          con.query(sqlll, async function (err3, result3) {
                            if (err3) {
                              console.log(err3);
                              resolve({
                                status: 0,
                                message: "Something went Wrong",
                              });
                            } else {
                              if (result3.affectedRows > 0) {
                                resolve({
                                  status: 1,
                                  result: result3,
                                });
                              } else {
                                resolve({
                                  status: 0,
                                  message: "Something went to wrong",
                                });
                              }
                            }
                            // });
                          });
                        }
                      } else {
                        resolve({
                          status: 0,
                          message: "Something went Wrong...",
                        });
                      }
                    }
                  });
                });
              }
            }
          });
        }
      });
    });

    let response4 = new Promise((resolve, reject) => {
      let c_gst = 0;
      let s_gst = 0;
      let i_gst = 0;
      let netamt = 0;

      let s1 =
        sum +
        parseInt(response3.result.courier) +
        parseInt(response3.result.exp_charge) -
        parseInt(response3.result.dis_amt) -
        parseInt(response3.result.coupon_amt);

      if (response3.result.c_tax == 1) {
        if (response3.result.c_gst == 1) {
          if (data1.branch_state_id == response3.result.c_state) {
            c_gst = (s1 * data1.s_c_gst) / 100;
            s_gst = (s1 * data1.s_s_gst) / 100;
            netamt = s1 + c_gst + s_gst + parseInt(embassy);
          } else {
            i_gst = (s1 * data1.s_i_gst) / 100;
            netamt = s1 + i_gst + parseInt(embassy);
          }
        } else {
          netamt = s1 + parseInt(embassy);
        }
      } else {
        netamt = s1 + parseInt(embassy);
      }
      //1003
      sql5 = `INSERT INTO payment(payment_date,c_id,total_amount,courier,embassy_fees,dis_amt,net_amt,sgst,cgst,igst,created_id,paid_amt ,due_amt,u_id,is_tds,tds_amt,tracking_id,exp_charge,coupon_amt,c_tax,created_branch_id,p_receipt_no,invoice_no,is_draft_taken,payment_refund) VALUES ('${response3.result.payment_date
        }',${response3.result.c_id},'${sum}',
                  '${response3.result.courier}','${embassy}','${response3.result.dis_amt
        }','${netamt}','${s_gst}','${c_gst}','${i_gst}',${response3.result.created_id
        },'${response3.result.paid_amt}','${netamt - response3.result.paid_amt - response3.result.tds_amt
        }',${response3.result.u_id},${response3.result.is_tds} , '${response3.result.tds_amt
        }','${mysql_real_escape_string(response3.result.tracking_id)}','${response3.result.exp_charge
        }','${response3.result.coupon_amt}','${response3.result.c_tax}',${response3.result.created_branch_id
        },'${payment.result.p_receipt_no}','${response3.result.invoice_no}',${response3.result.is_draft_taken
        },'${response3.result.payment_refund}')`;

      con.query(sql5, async function (err5, result5) {
        if (err5) {
          console.log(err5);
          resolve({ status: 0, message: "Something went wrong" });
        } else {
          if (result5.affectedRows > 0) {
            resolve({
              status: 1,
              igst: i_gst,
              sgst: s_gst,
              cgst: c_gst,
              net_before: s1,
              serviceprice: response3.result,
              total_amt: sum,
              net_amt: netamt,
              amount: sum1,
              embassy_fees: embassy,
              message: "Visa Updated Successfully....",
            });
          } else {
            resolve({
              status: 0,
              result: 0,
              message: "Something went wrong..",
            });
          }
        }
      });
    });
    return response4;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function getvisacustomerbyid(data) {
  try {
    sql = `SELECT visa.c_id
  FROM details
  INNER JOIN visa ON visa.v_id=details.service_id WHERE details.detail_id = ${data.detail_id}`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            result.forEach(function (res) {
              resolve({
                status: 1,
                result: res.c_id,
              });
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    sql1 = ` SELECT * FROM visa WHERE deleted = 0 AND c_id = ${response.result}`;
    let response1 = await new Promise((resolve, reject) => {
      con.query(sql1, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              result: result,
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    return response1;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function getAttestationCustomer(data) {
  try {
    let record = [];
    getuserquery = `select * from users where u_id=${data.u_id} and deleted=0`;
    let response = await new Promise((resolve, reject) => {
      con.query(getuserquery, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            if (result[0].user_type == 1) {
              getallchilduser = `select * from users where (p_u_id=${data.u_id} and branch_id=${result[0].branch_id}) and deleted=0`;
              con.query(getallchilduser, function (err, res) {
                if (err) {
                  console.log(err);
                  resolve({ status: 0, message: "Something went to wrong" });
                } else {
                  res.forEach(function (r) {
                    record.push(r.u_id);
                  });
                  resolve({
                    record: record,
                    type: result[0].user_type,
                  });
                }
              });
            } else {
              resolve({
                type: result[0].user_type,
              });
            }
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    let getAttestationPaginationQuery = "";
    let sql = "";
    if (response.type == 1) {
      sql = `SELECT *,(SELECT SUM(receive_amt) FROM draft_payment  WHERE draft_payment.c_id = customer.c_id and draft_payment.deleted=0 and draft_payment.receive_amt!=0  and draft_payment.approved_status =0 and draft_payment.deleted = 0 ) as total_draft,details.under_process_date AS process_date,(SELECT name FROM attributes WHERE attributes.attribute_id  =attestation.a_type)as attestation_type,(SELECT c_date FROM customer WHERE customer.c_id =attestation.c_id)as r_date,(SELECT name FROM attributes WHERE attributes.attribute_id =attestation.a_country)as attestation_country,(SELECT name FROM attributes WHERE attributes.attribute_id =details.d_c_id)as attestation_certificate,(SELECT c_prefix FROM customer WHERE customer.c_id=attestation.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=attestation.c_id) AS customer_name,(SELECT c_s_type FROM customer WHERE customer.c_id=attestation.c_id) AS c_s_type,
      (SELECT c_id FROM customer WHERE customer.c_id=attestation.c_id) as my_C_id,(SELECT u_id FROM customer WHERE customer.c_id=attestation.c_id) AS cuid,(SELECT user_type FROM users where users.u_id  = (SELECT u_id FROM customer WHERE customer.c_id=attestation.c_id)) as cutype,
      (SELECT payment.due_amt FROM payment where payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=attestation.c_id) ORDER BY payment.payment_id DESC LIMIT 1) as my_Due_Amt,
      (SELECT payment.paid_amt FROM payment where payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=attestation.c_id) ORDER BY payment.payment_id DESC LIMIT 1) as my_paid_amt,
      (SELECT payment.net_amt FROM payment where payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=attestation.c_id) ORDER BY payment.payment_id DESC LIMIT 1) as my_net_amt,
      (SELECT payment.tds_amt FROM payment where payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=attestation.c_id) ORDER BY payment.payment_id DESC LIMIT 1) as my_tds_amt,
      (SELECT draft_payment.d_p_id FROM draft_payment where draft_payment.deleted=0 and draft_payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=attestation.c_id) and draft_payment.approved_status=0 and draft_payment.due_amt=0 ORDER BY draft_payment.d_p_id DESC LIMIT 1) as Draf_payment
      FROM details,attestation,customer WHERE customer.c_id=attestation.c_id AND details.service_id=attestation.a_id AND details.service_type=10 AND details.deleted = 0  AND attestation.deleted = 0  AND  customer.is_cancel = 0 AND  customer.deleted = 0 AND (customer.branch_id =${data.branch_id} OR customer.foreign_branch = ${data.branch_id})`;

      getAttestationPaginationQuery = `SELECT COUNT(details.detail_id) as trows
      FROM details,attestation,customer WHERE customer.c_id=attestation.c_id AND details.service_id=attestation.a_id AND details.service_type=10 AND details.deleted = 0  AND attestation.deleted = 0  AND  customer.is_cancel = 0 AND  customer.deleted = 0 AND (customer.branch_id =${data.branch_id} OR customer.foreign_branch = ${data.branch_id})`;
    } else {
      if (data.u_id != 1) {
        sql = `SELECT *,(SELECT SUM(receive_amt) FROM draft_payment  WHERE draft_payment.c_id = customer.c_id and draft_payment.deleted=0 and draft_payment.receive_amt!=0  and draft_payment.approved_status =0 and draft_payment.deleted = 0 ) as total_draft,details.under_process_date AS process_date,(SELECT name FROM attributes WHERE attributes.attribute_id  =attestation.a_type)as attestation_type,(SELECT c_date FROM customer WHERE customer.c_id =attestation.c_id)as r_date,(SELECT name FROM attributes WHERE attributes.attribute_id =attestation.a_country)as attestation_country,(SELECT name FROM attributes WHERE attributes.attribute_id =details.d_c_id)as attestation_certificate,(SELECT c_prefix FROM customer WHERE customer.c_id=attestation.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=attestation.c_id) AS customer_name,(SELECT c_s_type FROM customer WHERE customer.c_id=attestation.c_id) AS c_s_type,
        (SELECT c_id FROM customer WHERE customer.c_id=attestation.c_id) as my_C_id,
        (SELECT branch_id FROM customer WHERE customer.c_id=attestation.c_id) AS branch_id,(SELECT u_id FROM customer WHERE customer.c_id=attestation.c_id) AS cuid,(SELECT user_type FROM users where users.u_id  = (SELECT u_id FROM customer WHERE customer.c_id=attestation.c_id)) as cutype,
        (SELECT payment.due_amt FROM payment where payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=attestation.c_id) ORDER BY payment.payment_id DESC LIMIT 1) as my_Due_Amt,
        (SELECT payment.paid_amt FROM payment where payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=attestation.c_id) ORDER BY payment.payment_id DESC LIMIT 1) as my_paid_amt,
        (SELECT payment.net_amt FROM payment where payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=attestation.c_id) ORDER BY payment.payment_id DESC LIMIT 1) as my_net_amt,
        (SELECT payment.tds_amt FROM payment where payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=attestation.c_id) ORDER BY payment.payment_id DESC LIMIT 1) as my_tds_amt,
        (SELECT draft_payment.d_p_id FROM draft_payment where draft_payment.deleted=0 and draft_payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=attestation.c_id) and draft_payment.approved_status=0 and draft_payment.due_amt=0 ORDER BY draft_payment.d_p_id DESC LIMIT 1) as Draf_payment
         FROM details,attestation,customer WHERE attestation.c_id=customer.c_id AND details.service_id=attestation.a_id and (customer.u_id=${data.u_id} or customer.foreign_branchuser=${data.u_id} OR customer.created_id = ${data.u_id}) AND details.service_type=10 AND details.deleted = 0 AND attestation.deleted = 0 AND customer.is_cancel = 0 AND  customer.deleted = 0`;
        getAttestationPaginationQuery = `SELECT COUNT(details.detail_id) as trows
          FROM details,attestation,customer WHERE attestation.c_id=customer.c_id AND details.service_id=attestation.a_id and (customer.u_id=${data.u_id} or customer.foreign_branchuser=${data.u_id} OR customer.created_id = ${data.u_id}) AND details.service_type=10 AND details.deleted = 0 AND attestation.deleted = 0 AND customer.is_cancel = 0 AND  customer.deleted = 0`;
      } else {
        sql = `SELECT *,(SELECT SUM(receive_amt) FROM draft_payment  WHERE draft_payment.c_id = customer.c_id and draft_payment.deleted=0 and draft_payment.receive_amt!=0  and draft_payment.approved_status =0 and draft_payment.deleted = 0 ) as total_draft,details.under_process_date AS process_date,(SELECT name FROM attributes WHERE attributes.attribute_id  =attestation.a_type)as attestation_type,(SELECT c_date FROM customer WHERE customer.c_id =attestation.c_id)as r_date,(SELECT name FROM attributes WHERE attributes.attribute_id =attestation.a_country)as attestation_country,(SELECT name FROM attributes WHERE attributes.attribute_id =details.d_c_id)as attestation_certificate,(SELECT c_prefix FROM customer WHERE customer.c_id=attestation.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=attestation.c_id) AS customer_name,(SELECT c_s_type FROM customer WHERE customer.c_id=attestation.c_id) AS c_s_type,
        (SELECT c_id FROM customer WHERE customer.c_id=attestation.c_id) as my_C_id,
        (SELECT branch_id FROM customer WHERE customer.c_id=attestation.c_id) AS branch_id,(SELECT u_id FROM customer WHERE customer.c_id=attestation.c_id) AS cuid,(SELECT user_type FROM users where users.u_id  = (SELECT u_id FROM customer WHERE customer.c_id=attestation.c_id)) as cutype,
        (SELECT payment.due_amt FROM payment where payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=attestation.c_id) ORDER BY payment.payment_id DESC LIMIT 1) as my_Due_Amt,
        (SELECT payment.paid_amt FROM payment where payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=attestation.c_id) ORDER BY payment.payment_id DESC LIMIT 1) as my_paid_amt,
        (SELECT payment.net_amt FROM payment where payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=attestation.c_id) ORDER BY payment.payment_id DESC LIMIT 1) as my_net_amt,
        (SELECT payment.tds_amt FROM payment where payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=attestation.c_id) ORDER BY payment.payment_id DESC LIMIT 1) as my_tds_amt,
        (SELECT draft_payment.d_p_id FROM draft_payment where draft_payment.deleted=0 and draft_payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=attestation.c_id) and draft_payment.approved_status=0 and draft_payment.due_amt=0 ORDER BY draft_payment.d_p_id DESC LIMIT 1) as Draf_payment
        FROM details,attestation,customer WHERE customer.c_id=attestation.c_id and details.service_id=attestation.a_id  AND details.service_type=10 AND details.deleted = 0 AND attestation.deleted = 0 AND customer.is_cancel = 0 AND  customer.deleted = 0`;

        getAttestationPaginationQuery = `SELECT COUNT(details.detail_id) as trows
        FROM details,attestation,customer WHERE customer.c_id=attestation.c_id and details.service_id=attestation.a_id  AND details.service_type=10 AND details.deleted = 0 AND attestation.deleted = 0 AND customer.is_cancel = 0 AND  customer.deleted = 0`;
      }
    }
    sql += ` ORDER BY detail_id  DESC limit ${(data.page - 1) * data.perPage},${data.perPage
      }`;
    let resp = await new Promise((resolve, reject) => {
      con.query(getAttestationPaginationQuery, function (err1, lres1) {
        if (err1) {
          console.log(err1);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (lres1.length > 0) {
            resolve({
              status: 1,
              t_rows: lres1[0].trows,
            });
          } else {
            resolve({
              status: 0,
              data: [],
            });
          }
        }
      });
    });
    let response1 = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              data: result,
              trows: resp.t_rows,
            });
          } else {
            resolve({
              status: 0,
              data: [],
            });
          }
        }
      });
    });
    return response1;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function getattestationcustomerbyid(data) {
  try {
    sql = `SELECT attestation.c_id
  FROM details
  INNER JOIN attestation ON attestation.a_id=details.service_id WHERE details.detail_id = ${data.detail_id}`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            result.forEach(function (res) {
              resolve({
                status: 1,
                result: res.c_id,
              });
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    sql1 = ` SELECT * FROM attestation  WHERE deleted = 0 AND c_id = ${response.result}`;
    let response1 = await new Promise((resolve, reject) => {
      con.query(sql1, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              result: result,
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    return response1;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function updateAttestationStatus(data, date) {
  try {
    if (data.a_status == 24) {
      sql = `UPDATE attestation SET a_status=${data.a_status},dispatch_date='${date}' WHERE a_id =${data.a_id}`;
    } else if (data.a_status == 21) {
      sql = `UPDATE attestation SET a_status=${data.a_status},process_date='${date}' WHERE a_id =${data.a_id}`;
    } else {
      sql = `UPDATE attestation SET a_status=${data.a_status
        },dispatch_date=${null} WHERE a_id =${data.a_id}`;
    }
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.affectedRows > 0) {
            resolve({
              status: 1,
              message: "Attestation Status update successfully",
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function deleteAttestationCustomer(data, date) {
  try {
    //details deleted 1
    let sql = `UPDATE details SET deleted=1 WHERE detail_id =${data.id}`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.affectedRows > 0) {
            //get attestation id of deleted record
            sql1 = `SELECT service_id,d_c_id FROM details WHERE detail_id =${data.id}`;

            con.query(sql1, function (err1, result1) {
              if (err1) {
                console.log(err1);
                resolve({ status: 0, message: "Something went to wrong" });
              } else {
                if (result1.length > 0) {
                  resolve({
                    status: 1,
                    result: result1[0],
                  });
                } else {
                  resolve({
                    status: 0,
                    message: "Something went to wrong",
                  });
                }
              }
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });

    //get ceritificate of customer
    let sql2 = `SELECT a_certificate FROM attestation WHERE a_id=${response.result.service_id}`;
    let response2 = await new Promise((resolve, reject) => {
      con.query(sql2, function (err2, result2) {
        if (err2) {
          console.log(err2);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result2.length > 0) {
            resolve({
              result: result2[0].a_certificate,
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });

    //certificate covert string to array and only not deleted ceritificate push in array
    let crecord = [];
    response2.result.split(",").map(async (k) => {
      if (response.result.d_c_id != parseInt(k)) {
        crecord.push(parseInt(k));
      }
    });

    //update new certificate record in attestation table
    let sql3 = `UPDATE attestation SET a_certificate='${crecord.toString()}'  WHERE a_id=${response.result.service_id
      } `;
    let response3 = await new Promise((resolve, reject) => {
      con.query(sql3, function (err3, result3) {
        if (err3) {
          console.log(err3);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result3.affectedRows > 0) {
            //get attestation customer record which is updated
            sql4 = `SELECT * FROM attestation WHERE a_id=${response.result.service_id}`;
            con.query(sql4, function (err4, result4) {
              if (err4) {
                resolve({ status: 0, message: "Something went to wrong" });
              } else {
                if (result4.length > 0) {
                  resolve({
                    result: result4,
                  });
                }
              }
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    let sqll = `SELECT document_type FROM attributes Where attribute_id=${response.result.d_c_id}`;
    let resp = await new Promise((resolve, reject) => {
      con.query(sqll, async function (err1, result1) {
        if (err1) {
          console.log(err1);
          resolve({ status: 0, message: "Something went wrong" });
        } else {
          if (result1.length > 0) {
            resolve({ status: 1, result: result1[0].document_type });
          } else {
            resolve({ status: 0, result: [] });
          }
        }
      });
    });

    let sqlll = `SELECT amount as embassy_fees FROM embassyfees WHERE service_type = 10  AND country = ${response3.result[0].a_country} AND document = ${resp.result} AND deleted = 0;`;
    let resp1 = await new Promise(async (resolve, reject) => {
      con.query(sqlll, async function (err2, result2) {
        if (err2) {
          console.log(err2);
          resolve({ status: 0, message: "Something went wrong" });
        } else {
          if (result2.length > 0) {
            result2.forEach(async function (result) {
              resolve({
                embassy_fees: result.embassy_fees,
              });
            });
          } else {
            resolve({
              embassy_fees: parseInt(0),
            });
          }
        }
      });
    });

    //if all certificate was deleted then update attestation customer  deleted 1
    if (response3.result[0].a_certificate == []) {
      sql10 = `UPDATE attestation SET deleted=1 WHERE a_id=${response.result.service_id}`;
      let res10 = await new Promise((resolve, reject) => {
        con.query(sql10, function (err10, result10) {
          if (err10) {
            console.log(err10);
            resolve({ status: 0, message: "Something went to wrong" });
          } else {
            if (result10.affectedRows > 0) {
              resolve({ status: 1 });
            } else {
              resolve({
                status: 0,
                message: "Something went to wrong",
              });
            }
          }
        });
      });
    }

    //get last record of payment
    sql6 = `SELECT * FROM payment WHERE c_id=${response3.result[0].c_id} ORDER BY payment_id DESC LIMIT 1`;
    let response6 = await new Promise((resolve, reject) => {
      con.query(sql6, function (err6, result6) {
        if (err6) {
          console.log(err6);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result6.length > 0) {
            resolve({ status: 1, result: result6 });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });

    //get amount of 1 certificate and calculate new total amount as well as net amount
    let sql8 = `SELECT s_amount FROM serviceprice WHERE service = 10  AND country = ${response3.result[0].a_country} AND s_type = ${response3.result[0].a_type} and deleted = 0;`;
    let response5 = await new Promise((resolve, reject) => {
      con.query(sql8, function (err8, result8) {
        if (err8) {
          console.log(err8);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          let samount;
          if (result8.length <= 0) {
            samount = 0;
          } else {
            samount = result8[0].s_amount;
          }
          //last total amount of payment - 1 certificate amount
          let embassy =
            response6.result[0].embassy_fees > parseInt(resp1.embassy_fees)
              ? response6.result[0].embassy_fees - parseInt(resp1.embassy_fees)
              : response6.result[0].embassy_fees;

          let total_amt = response6.result[0].total_amount - samount;
          let c_gst = 0;
          let s_gst = 0;
          let i_gst = 0;
          let netamt = 0;

          //if total amount 0 then automatically netamount is 0
          if (total_amt != 0) {
            let s1 =
              total_amt +
              parseInt(response6.result[0].courier) +
              parseInt(response6.result[0].exp_charge) -
              parseInt(response6.result[0].dis_amt) -
              parseInt(response6.result[0].coupon_amt);

            if (response6.result[0].c_tax == 1) {
              if (response6.result[0].c_gst == 1) {
                if (data.branch_state_id == response6.result[0].c_state) {
                  c_gst = (s1 * data.s_c_gst) / 100;
                  s_gst = (s1 * data.s_s_gst) / 100;
                  netamt = s1 + c_gst + s_gst + parseInt(embassy);
                } else {
                  i_gst = (s1 * data.s_i_gst) / 100;
                  netamt = s1 + i_gst + parseInt(embassy);
                }
              } else {
                netamt = s1 + parseInt(embassy);
              }
            } else {
              netamt = s1 + parseInt(embassy);
            }
          } else {
            embassy = 0;
          }

          if (result8.length > 0) {
            //insert update payment record which is generated after delete 1  certificate
            sql9 = `INSERT INTO payment (payment_date,c_id,total_amount,courier,dis_amt,mode_id,chk_dd_no,chk_dd_date,bank_name,net_amt,paid_amt,embassy_fees,due_amt,u_id,service_tax,igst,cgst,sgst,exp_charge,coupon_amt,c_tax,is_draft_taken,is_tds,tds_amt,p_receipt_no,invoice_no,payment_refund) VALUES ('${date}',${response6.result[0].c_id
              },'${total_amt}','${response6.result[0].courier}','${response6.result[0].dis_amt
              }',${response6.result[0].mode_id},'${response6.result[0].chk_dd_no != null
                ? response6.result[0].chk_dd_no
                : ""
              }','${response6.result[0].chk_dd_date != null
                ? response6.result[0].chk_dd_date
                : ""
              }','${response6.result[0].bank_name != null
                ? response6.result[0].bank_name
                : ""
              }','${netamt}','${response6.result[0].paid_amt}','${embassy}','${parseInt(netamt) -
              parseInt(response6.result[0].paid_amt) -
              parseInt(response6.result[0].tds_amt)
              }',${response6.result[0].u_id},'${response6.result[0].service_tax
              }','${i_gst}','${c_gst}','${s_gst}','${response6.result[0].exp_charge
              }',
             '${response6.result[0].coupon_amt}','${response6.result[0].c_tax
              }',${response6.result[0].is_draft_taken},${response6.result[0].is_tds
              },'${response6.result[0].tds_amt}','${response6.result[0].p_receipt_no
              }','${response6.result[0].invoice_no}','${response6.result[0].payment_refund
              }' )`;

            con.query(sql9, function (err9, result9) {
              if (err9) {
                console.log(err9);
                resolve({ status: 0, message: "Something went to wrong" });
              } else {
                if (result9.affectedRows > 0) {
                  resolve({ status: 1, message: "Delete Successfully...." });
                } else {
                  resolve({
                    status: 0,
                    message: "Something went to wrong",
                  });
                }
              }
            });
          } else {
            resolve({ status: 1, message: "Delete Successfully...." });
          }
        }
      });
    });
    return response5;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function updateAttestationCustomer(data1) {
  try {
    let status_change_date = moment().format("DD-MM-YYYY HH:mm:ss");
    sql4 = `SELECT * FROM attestation INNER JOIN payment ON attestation.c_id = payment.c_id INNER JOIN customer ON attestation.c_id = customer.c_id WHERE attestation.c_id = ${data1.c_id} ORDER BY payment_id DESC LIMIT 1 `;

    let response3 = await new Promise((resolve, reject) => {
      con.query(sql4, async function (err4, result4) {
        if (err4) {
          console.log(err4);
          resolve({ status: 0, message: "Something went wrong" });
        } else {
          if (result4.length > 0) {
            result4.forEach(function (result) {
              resolve({
                result: result,
              });
            });
          } else {
            resolve({
              result: 0,
            });
          }
        }
      });
    });
    let sum = 0;
    let sum1 = [];
    let embassy = parseInt(response3.result.embassy_fees);

    paymentrecord = `SELECT * FROM payment WHERE c_id = ${data1.c_id} and deleted = 0 ORDER BY payment_id DESC limit 1;`;
    let payment = await new Promise((resolve, reject) => {
      con.query(paymentrecord, async function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Customer Not Updated" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              result: result[0],
              result1: result[0].payment_id,
              result2: result[0].invoice_no,
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    sql12 = `SELECT b_name FROM branch WHERE branch_id = ${data1.branch_id} `;
    let res = await new Promise((resolve, reject) => {
      con.query(sql12, async function (err1, result1) {
        if (err1) {
          console.log(err1);
          resolve({ status: 0, message: "Customer Not Updated" });
        } else {
          if (result1.length > 0) {
            resolve({ status: 1, result: result1[0].b_name });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    let responseinvoice = await new Promise((resolve, reject) => {
      if (data1.c_tax == "1") {
        // let getinvoiceno = `SELECT *,invoice_no FROM payment,customer WHERE payment.c_id=customer.c_id and payment.c_tax = "1" and customer.branch_id=${data1.branch_id} and payment.deleted=0 ORDER BY customer.c_id DESC limit 1;`;
        let getinvoiceno = `SELECT *,invoice_no FROM payment JOIN customer ON payment.c_id=customer.c_id and payment.c_tax = "1" and customer.branch_id=${data1.branch_id} and payment.deleted=0 ORDER BY payment.payment_id DESC,customer.c_id DESC limit 1;`;

        // const now = new Date();
        // const cvalue = date.format(now, "YY");
        // const currentYear = new Date().getFullYear().toString().slice(-2);
        // const previousYear = currentYear - 1;
        const cvalue = moment().format("MM");
        const last2 = new Date().getFullYear().toString().substring(2);
        const last2Num = Number(last2);
        var today = new Date();
        if (today.getMonth() + 1 <= 3) {
          fiscalyear = last2Num - 1 + "-" + last2Num;
        } else {
          fiscalyear = last2Num + "-" + (last2Num + 1);
        }
        let invoice_no = 0;
        con.query(getinvoiceno, async function (errino, inoresult) {
          if (errino) {
            console.log(errino);
            resolve({ status: 0, message: "Something went wrong" });
          } else {
            if (inoresult.length > 0 && inoresult[0].invoice_no != 0) {
              let sql = `UPDATE payment SET invoice_status = 1 WHERE payment_id=${payment.result1
                } AND deleted = 0  `;
              con.query(sql, async function (err, result) {
                if (err) {
                  console.log(err);
                  resolve({ status: 0, message: "Something went to wrong" });
                } else {
                  if (result.affectedRows > 0) {
                    resolve({
                      status: 1,
                      message: "Payment Updated successfully",
                    });
                  } else {
                    resolve({
                      status: 0,
                      message: "Something went to wrong",
                    });
                  }
                }
              });
              //1003
              let ino = inoresult[0].invoice_no;
              let n_ino = ino.split("/");
              if (fiscalyear == n_ino[1]) {
                invoice_no =
                  res.result.substring(0, 2) +
                  "/" +
                  fiscalyear +
                  "/" +
                  "g" +
                  cvalue +
                  "/" +
                  ++n_ino[3];
              } else {
                invoice_no =
                  res.result.substring(0, 2) +
                  "/" +
                  fiscalyear +
                  "/" +
                  "g" +
                  cvalue +
                  "/" +
                  1;
              }
            } else {
              let sql = `UPDATE payment SET invoice_status = 1 WHERE payment_id=${payment.result1
                } AND deleted = 0  `;
              con.query(sql, async function (err, result) {
                if (err) {
                  console.log(err);
                  resolve({ status: 0, message: "Something went to wrong" });
                } else {
                  if (result.affectedRows > 0) {
                    resolve({
                      status: 1,
                      message: "Payment Updated successfully",
                    });
                  } else {
                    resolve({
                      status: 0,
                      message: "Something went to wrong",
                    });
                  }
                }
              });
              invoice_no =
                res.result.substring(0, 2) +
                "/" +
                fiscalyear +
                "/" +
                "g" +
                cvalue +
                "/" +
                1;
            }
            resolve({ status: 1, ino: invoice_no });
          }
        });
      } else {
        //1003
        // getinvoiceno = `SELECT *,invoice_no FROM payment,customer WHERE payment.c_id=customer.c_id and payment.c_tax = "0" and customer.branch_id=${data1.branch_id} and payment.deleted=0 ORDER BY customer.c_id DESC limit 1;`;
        let getinvoiceno = `SELECT *,invoice_no FROM payment JOIN customer ON payment.c_id=customer.c_id and payment.c_tax = "0" and customer.branch_id=${data1.branch_id} and payment.deleted=0 ORDER BY payment.payment_id DESC,customer.c_id DESC limit 1;`;

        // const now = new Date();
        // const cvalue = date.format(now, "YY");
        // const currentYear = new Date().getFullYear().toString().slice(-2);
        // const previousYear = currentYear - 1;
        const cvalue = moment().format("MM");
        const last2 = new Date().getFullYear().toString().substring(2);
        const last2Num = Number(last2);
        var today = new Date();
        if (today.getMonth() + 1 <= 3) {
          fiscalyear = last2Num - 1 + "-" + last2Num;
        } else {
          fiscalyear = last2Num + "-" + (last2Num + 1);
        }
        let invoice_no = 0;
        con.query(getinvoiceno, async function (errino, inoresult) {
          if (errino) {
            console.log(errino);
            resolve({ status: 0, message: "Something went wrong" });
          } else {
            if (inoresult.length > 0 && inoresult[0].invoice_no != 0) {
              let sql = `UPDATE payment SET invoice_status = 1 WHERE payment_id=${payment.result1
                } AND deleted = 0  `;
              con.query(sql, async function (err, result) {
                if (err) {
                  console.log(err);
                  resolve({ status: 0, message: "Something went to wrong" });
                } else {
                  if (result.affectedRows > 0) {
                    resolve({
                      status: 1,
                      message: "Payment Updated successfully",
                    });
                  } else {
                    resolve({
                      status: 0,
                      message: "Something went to wrong",
                    });
                  }
                }
              });
              //1003
              let ino = inoresult[0].invoice_no;
              let n_ino = ino.split("/");
              if (fiscalyear == n_ino[1]) {
                invoice_no =
                  res.result.substring(0, 2) +
                  "/" +
                  fiscalyear +
                  "/" +
                  cvalue +
                  "/" +
                  ++n_ino[3];
              } else {
                invoice_no =
                  res.result.substring(0, 2) +
                  "/" +
                  fiscalyear +
                  "/" +
                  cvalue +
                  "/" +
                  1;
              }
            } else {
              let sql = `UPDATE payment SET invoice_status = 1 WHERE payment_id=${payment.result1
                } AND deleted = 0  `;
              con.query(sql, async function (err, result) {
                if (err) {
                  console.log(err);
                  resolve({ status: 0, message: "Something went to wrong" });
                } else {
                  if (result.affectedRows > 0) {
                    resolve({
                      status: 1,
                      message: "Payment Updated successfully",
                    });
                  } else {
                    resolve({
                      status: 0,
                      message: "Something went to wrong",
                    });
                  }
                }
              });
              invoice_no =
                res.result.substring(0, 2) +
                "/" +
                fiscalyear +
                "/" +
                cvalue +
                "/" +
                1;
            }
            resolve({ status: 1, ino: invoice_no });
          }
        });
      }
    });

    let response = await new Promise((resolve, reject) => {
      data1.applicationdata.map(async (data, index) => {
        if (data1.old_total_customer > index) {
          sql = `UPDATE attestation SET a_prefix='${data.a_prefix
            }',a_name='${mysql_real_escape_string(data.a_name)}',a_code=${data.a_code
            },a_certificate='${data.a_certificate}',a_type=${data.a_type
            },a_country='${data.a_country}',a_supporting_doc='${data.a_supporting_doc
            }',a_extra_doc = '${data.a_extra_doc}',process_limit_date='${data.process_limit_date
            }',process_limit_mail_date='${data.process_limit_date
            }',no_of_certificates=${data.no_of_certificates} WHERE a_id=${data.a_id
            }`;
          con.query(sql, async function (err, result) {
            if (err) {
              console.log(err);
              resolve({ status: 0, message: "Something went to wrong" });
            } else {
              if (result.affectedRows > 0) {
                if (data.no_of_certificates > 0) {
                  for (
                    let index = 0;
                    index < data.a_certificate.length;
                    index++
                  ) {
                    console.log(
                      index,
                      data.a_certificate[index],
                      "!ft45645234rgdfrgdfgsd35"
                    );
                    // data.a_certificate.map(async (k, index) => {
                    // console.log(k, "kkkkkkkkkkkkkkkkk");

                    let sql1 = `SELECT detail_id FROM details WHERE d_c_id=${data.a_certificate[index]} AND service_id=${data.a_id} AND service_type = 10`;
                    console.log(sql1, "***********");
                    con.query(sql1, async function (err111, result111) {
                      console.log(
                        result111,
                        "result111result111result111result111"
                      );
                      if (err111) {
                        console.log(err111);
                        resolve({
                          status: 0,
                          message: "Something went to wrong",
                        });
                      } else {
                        sql2 = `SELECT s_amount FROM serviceprice WHERE service = 10  AND country = ${data.a_country} AND s_type = ${data.a_type} and deleted = 0;`;

                        let response2 = await new Promise((resolve, reject) => {
                          con.query(sql2, async function (err2, result2) {
                            console.log(err2, result2, "((((((((((");
                            if (err2) {
                              console.log(err2);
                              resolve({
                                status: 0,
                                message: "Something went wrong",
                              });
                            } else {
                              if (result2.length > 0) {
                                result2.forEach(async function (result) {
                                  resolve({
                                    result: result.s_amount,
                                  });
                                });
                              } else {
                                resolve({
                                  result: parseInt(0),
                                });
                              }
                            }
                          });
                        });
                        let sqll = `SELECT document_type FROM attributes Where attribute_id=${data.a_certificate[index]}`;
                        let resp = await new Promise((resolve, reject) => {
                          con.query(sqll, async function (err1, result1) {
                            console.log(err1, result1, "fsdfsddfg(((");

                            if (err1) {
                              console.log(err1);
                              resolve({
                                status: 0,
                                message: "Something went wrong",
                              });
                            } else {
                              if (result1.length > 0) {
                                resolve({
                                  status: 1,
                                  result: result1[0].document_type,
                                });
                              } else {
                                resolve({ status: 0, result: [] });
                              }
                            }
                          });
                        });
                        sql3 = `SELECT amount as embassy_fees FROM embassyfees WHERE service_type = 10  AND country = ${data.a_country} AND document = ${resp.result} AND deleted = 0;`;
                        let response3 = await new Promise((resolve, reject) => {
                          con.query(sql3, async function (err2, result2) {
                            if (err2) {
                              console.log(err2);
                              resolve({
                                status: 0,
                                message: "Something went wrong",
                              });
                            } else {
                              if (result2 == undefined) {
                                resolve({
                                  embassy_fees: parseInt(0),
                                });
                              } else {
                                if (result2.length > 0) {
                                  result2.forEach(async function (result) {
                                    resolve({
                                      embassy_fees: result.embassy_fees,
                                    });
                                  });
                                } else {
                                  resolve({
                                    embassy_fees: parseInt(0),
                                  });
                                }
                              }
                            }
                          });
                        });
                        if (result111.length > 0 || result111.length == 0) {
                          if (
                            result111.length > 0 &&
                            index < result111.length
                          ) {
                            sum = sum + parseInt(response2.result);
                            // embassy = embassy + parseInt(response2.embassy_fees);
                            sum1.push(parseInt(response2.result));

                            result111.forEach(async function (result1) {
                              sql3 = `UPDATE details SET amount = ${response2.result} WHERE deleted = 0 AND detail_id = ${result1.detail_id} AND service_type = 10`;

                              con.query(sql3, async function (err3, result3) {
                                if (err3) {
                                  console.log(err3);
                                  resolve({
                                    status: 0,
                                    message: "Something went Wrong",
                                  });
                                } else {
                                  if (result3.affectedRows > 0) {
                                    resolve({
                                      status: 1,
                                    });
                                  } else {
                                    resolve({
                                      status: 0,
                                      message: "Something went to wrong",
                                    });
                                  }
                                }
                              });
                            });
                          } else {
                            sum = sum + parseInt(response2.result);
                            embassy =
                              parseInt(embassy) +
                              parseInt(response3.embassy_fees);

                            sum1.push(parseInt(response2.result));
                            let status_change_date = moment().format(
                              "DD-MM-YYYY HH:mm:ss"
                            );
                            // result1.forEach(async function (result1) {
                            sqlll = `INSERT INTO details (service_type,service_id,d_c_id,amount,tracking_id,status_change_date) VALUES ('${data1.c_s_type}',${data.a_id} ,${data.a_certificate[index]},${response2.result},'${data.tracking_id}','${status_change_date}')`;

                            con.query(sqlll, async function (err3, result3) {
                              if (err3) {
                                console.log(err3);
                                resolve({
                                  status: 0,
                                  message: "Something went Wrong",
                                });
                              } else {
                                if (result3 == undefined) {
                                  resolve({
                                    status: 0,
                                    result: [],
                                  });
                                } else {
                                  if (result3.affectedRows > 0) {
                                    resolve({
                                      status: 1,
                                      result: result3,
                                    });
                                  }
                                }
                              }
                              // });
                            });
                          }
                        } else {
                          resolve({
                            status: 0,
                            message: "Something went Wrong...",
                          });
                        }
                      }
                    });
                    // });
                  }
                } else {
                  for (
                    let index = 0;
                    index < data.a_certificate.length;
                    index++
                  ) {
                    // data.a_certificate.map(async (k) => {
                    // console.log(k, "kkkkkkkkkkkkkkkkk");
                    console.log(
                      index,
                      data.a_certificate[index],
                      "!@ssfsdfsd35"
                    );
                    let sql1 = `SELECT detail_id FROM details WHERE d_c_id=${data.a_certificate[index]} AND service_id=${data.a_id} AND service_type = 10`;
                    console.log(sql1, "***********");
                    con.query(sql1, async function (err111, result111) {
                      console.log(
                        result111,
                        "result111result111result111result111"
                      );
                      if (err111) {
                        console.log(err111);
                        resolve({
                          status: 0,
                          message: "Something went to wrong",
                        });
                      } else {
                        sql2 = `SELECT s_amount FROM serviceprice WHERE service = 10  AND country = ${data.a_country} AND s_type = ${data.a_type} and deleted = 0;`;

                        let response2 = await new Promise((resolve, reject) => {
                          con.query(sql2, async function (err2, result2) {
                            console.log(err2, result2, "((((((((((");
                            if (err2) {
                              console.log(err2);
                              resolve({
                                status: 0,
                                message: "Something went wrong",
                              });
                            } else {
                              if (result2.length > 0) {
                                result2.forEach(async function (result) {
                                  resolve({
                                    result: result.s_amount,
                                  });
                                });
                              } else {
                                resolve({
                                  result: parseInt(0),
                                });
                              }
                            }
                          });
                        });
                        let sqll = `SELECT document_type FROM attributes Where attribute_id=${data.a_certificate[index]}`;
                        let resp = await new Promise((resolve, reject) => {
                          con.query(sqll, async function (err1, result1) {
                            console.log(err1, result1, "fsdfsddfg(((");

                            if (err1) {
                              console.log(err1);
                              resolve({
                                status: 0,
                                message: "Something went wrong",
                              });
                            } else {
                              if (result1.length > 0) {
                                resolve({
                                  status: 1,
                                  result: result1[0].document_type,
                                });
                              } else {
                                resolve({ status: 0, result: [] });
                              }
                            }
                          });
                        });
                        sql3 = `SELECT amount as embassy_fees FROM embassyfees WHERE service_type = 10  AND country = ${data.a_country} AND document = ${resp.result} AND deleted = 0;`;
                        let response3 = await new Promise((resolve, reject) => {
                          con.query(sql3, async function (err2, result2) {
                            if (err2) {
                              console.log(err2);
                              resolve({
                                status: 0,
                                message: "Something went wrong",
                              });
                            } else {
                              if (result2 == undefined) {
                                resolve({
                                  embassy_fees: parseInt(0),
                                });
                              } else {
                                if (result2.length > 0) {
                                  result2.forEach(async function (result) {
                                    resolve({
                                      embassy_fees: result.embassy_fees,
                                    });
                                  });
                                } else {
                                  resolve({
                                    embassy_fees: parseInt(0),
                                  });
                                }
                              }
                            }
                          });
                        });
                        if (result111.length > 0 || result111.length == 0) {
                          if (result111.length > 0) {
                            sum = sum + parseInt(response2.result);
                            // embassy = embassy + parseInt(response2.embassy_fees);
                            sum1.push(parseInt(response2.result));

                            result111.forEach(async function (result1) {
                              sql3 = `UPDATE details SET amount = ${response2.result} WHERE deleted = 0 AND detail_id = ${result1.detail_id} AND service_type = 10`;

                              con.query(sql3, async function (err3, result3) {
                                if (err3) {
                                  console.log(err3);
                                  resolve({
                                    status: 0,
                                    message: "Something went Wrong",
                                  });
                                } else {
                                  if (result3.affectedRows > 0) {
                                    resolve({
                                      status: 1,
                                    });
                                  } else {
                                    resolve({
                                      status: 0,
                                      message: "Something went to wrong",
                                    });
                                  }
                                }
                              });
                            });
                          } else {
                            sum = sum + parseInt(response2.result);
                            embassy =
                              parseInt(embassy) +
                              parseInt(response3.embassy_fees);
                            sum1.push(parseInt(response2.result));
                            let status_change_date = moment().format(
                              "DD-MM-YYYY HH:mm:ss"
                            );
                            console.log(
                              embassy,
                              "embassyembassyembassyembassy"
                            );
                            // result1.forEach(async function (result1) {
                            sqlll = `INSERT INTO details (service_type,service_id,d_c_id,amount,tracking_id,status_change_date) VALUES ('${data1.c_s_type}',${data.a_id} ,${data.a_certificate[index]},${response2.result},'${data.tracking_id}','${status_change_date}')`;

                            con.query(sqlll, async function (err3, result3) {
                              if (err3) {
                                console.log(err3);
                                resolve({
                                  status: 0,
                                  message: "Something went Wrong",
                                });
                              } else {
                                if (result3 == undefined) {
                                  resolve({
                                    status: 0,
                                    result: [],
                                  });
                                } else {
                                  if (result3.affectedRows > 0) {
                                    resolve({
                                      status: 1,
                                      result: result3,
                                    });
                                  }
                                }
                              }
                              // });
                            });
                          }
                        } else {
                          resolve({
                            status: 0,
                            message: "Something went Wrong...",
                          });
                        }
                      }
                    });
                    // });
                  }
                }
              } else {
                resolve({
                  status: 0,
                  message: "Something went to wrong",
                });
              }
            }
          });
        } else {
          sql = `INSERT INTO attestation (c_id,a_prefix,a_name,a_code,a_country,a_type,a_certificate,a_supporting_doc,a_extra_doc,created_id,pg_no,tracking_id,process_limit_date,process_limit_mail_date,no_of_certificates) VALUES (${data1.c_id
            },'${data.a_prefix}','${mysql_real_escape_string(data.a_name)}',${data.a_code
            },${data.a_country},${data.a_type},
          '${data.a_certificate.sort().toString()}',
                        '${typeof data.a_supporting_doc == "undefined"
              ? ""
              : data.a_supporting_doc.toString()
            }',
                        '${typeof data.a_extra_doc == "undefined"
              ? ""
              : data.a_extra_doc.toString()
            }',${data1.created_id},${data.pg_no
            },'${mysql_real_escape_string(data1.tracking_id)}','${data.process_limit_date
            }','${data.process_limit_date}',${data.no_of_certificates})`;
          con.query(sql, async function (err, result) {
            if (err) {
              console.log(err);
              resolve({ status: 0, message: "Something went to wrong" });
            } else {
              if (result.affectedRows > 0) {
                if (data.no_of_certificates > 0) {
                  for (
                    let index = 0;
                    index < data.a_certificate.length;
                    index++
                  ) {
                    console.log(
                      index,
                      data.a_certificate[index],
                      "13423434335454335"
                    );
                    // data.a_certificate.map(async (k) => {
                    sql1 = `SELECT detail_id FROM details WHERE d_c_id=${data.a_certificate[index]} AND service_id=${result.insertId} AND service_type = 10`;
                    con.query(sql1, async function (err111, result111) {
                      if (err111) {
                        console.log(err111);
                        resolve({
                          status: 0,
                          message: "Something went to wrong",
                        });
                      } else {
                        sql2 = `SELECT s_amount FROM serviceprice WHERE service = 10  AND country = ${data.a_country} AND s_type = ${data.a_type} and deleted = 0;`;

                        let response2 = await new Promise((resolve, reject) => {
                          con.query(sql2, async function (err2, result2) {
                            if (err2) {
                              console.log(err2);
                              resolve({
                                status: 0,
                                message: "Something went wrong",
                              });
                            } else {
                              if (result2.length > 0) {
                                result2.forEach(async function (result) {
                                  resolve({
                                    result: result.s_amount,
                                  });
                                });
                              } else {
                                resolve({
                                  result: parseInt(0),
                                });
                              }
                            }
                          });
                        });

                        let sqll = `SELECT document_type FROM attributes Where attribute_id=${data.a_certificate[index]}`;

                        let resp = await new Promise((resolve, reject) => {
                          con.query(sqll, async function (err1, result1) {
                            if (err1) {
                              console.log(err1);
                              resolve({
                                status: 0,
                                message: "Something went wrong",
                              });
                            } else {
                              if (result1.length > 0) {
                                resolve({
                                  status: 1,
                                  result: result1[0].document_type,
                                });
                              } else {
                                resolve({ status: 0, result: [] });
                              }
                            }
                          });
                        });
                        sql3 = `SELECT amount as embassy_fees FROM embassyfees WHERE service_type = 10  AND country = ${data.a_country} AND document = ${resp.result} AND deleted = 0;`;
                        let response3 = await new Promise((resolve, reject) => {
                          con.query(sql3, async function (err2, result2) {
                            if (err2) {
                              console.log(err2);
                              resolve({
                                status: 0,
                                message: "Something went wrong",
                              });
                            } else {
                              if (result2.length > 0) {
                                result2.forEach(async function (result) {
                                  resolve({
                                    embassy_fees: result.embassy_fees,
                                  });
                                });
                              } else {
                                resolve({
                                  embassy_fees: parseInt(0),
                                });
                              }
                            }
                          });
                        });

                        if (result111.length > 0 || result111.length == 0) {
                          if (
                            result111.length > 0 &&
                            index < result111.length
                          ) {
                            sum = sum + parseInt(response2.result);
                            // embassy = embassy + parseInt(response2.embassy_fees);
                            sum1.push(parseInt(response2.result));

                            result111.forEach(async function (result1) {
                              sql3 = `UPDATE details SET amount = ${response2.result} WHERE deleted = 0 AND detail_id = ${result1.detail_id} AND service_type = 10`;

                              con.query(sql3, async function (err3, result3) {
                                if (err3) {
                                  console.log(err3);
                                  resolve({
                                    status: 0,
                                    message: "Something went Wrong",
                                  });
                                } else {
                                  if (result3.affectedRows > 0) {
                                    resolve({
                                      status: 1,
                                    });
                                  } else {
                                    resolve({
                                      status: 0,
                                      message: "Something went to wrong",
                                    });
                                  }
                                }
                              });
                            });
                          } else {
                            sum = sum + parseInt(response2.result);
                            embassy =
                              parseInt(embassy) +
                              parseInt(response3.embassy_fees);
                            sum1.push(parseInt(response2.result));
                            sqlll = `INSERT INTO details (service_type,service_id,d_c_id,amount,tracking_id,status_change_date) VALUES ('${data1.c_s_type}' , ${result.insertId} ,${data.a_certificate[index]},${response2.result},'${data1.tracking_id}','${status_change_date}')`;

                            con.query(sqlll, async function (err3, result3) {
                              if (err3) {
                                console.log(err3);
                                resolve({
                                  status: 0,
                                  message: "Something went Wrong",
                                });
                              } else {
                                if (result3.affectedRows > 0) {
                                  resolve({
                                    status: 1,
                                    result: result3,
                                  });
                                } else {
                                  resolve({
                                    status: 0,
                                    message: "Something went to wrong",
                                  });
                                }
                              }
                            });
                          }
                        } else {
                          resolve({
                            status: 0,
                            message: "Something went Wrong...",
                          });
                        }
                      }
                    });
                  }
                } else {
                  for (
                    let index = 0;
                    index < data.a_certificate.length;
                    index++
                  ) {
                    console.log(
                      index,
                      data.a_certificate[index],
                      "!@#@#@@@454335"
                    );
                    // data.a_certificate.map(async (k) => {
                    sql1 = `SELECT detail_id FROM details WHERE d_c_id=${data.a_certificate[index]} AND service_id=${result.insertId} AND service_type = 10`;
                    con.query(sql1, async function (err111, result111) {
                      if (err111) {
                        console.log(err111);
                        resolve({
                          status: 0,
                          message: "Something went to wrong",
                        });
                      } else {
                        sql2 = `SELECT s_amount FROM serviceprice WHERE service = 10  AND country = ${data.a_country} AND s_type = ${data.a_type} and deleted = 0;`;

                        let response2 = await new Promise((resolve, reject) => {
                          con.query(sql2, async function (err2, result2) {
                            if (err2) {
                              console.log(err2);
                              resolve({
                                status: 0,
                                message: "Something went wrong",
                              });
                            } else {
                              if (result2.length > 0) {
                                result2.forEach(async function (result) {
                                  resolve({
                                    result: result.s_amount,
                                  });
                                });
                              } else {
                                resolve({
                                  result: parseInt(0),
                                });
                              }
                            }
                          });
                        });

                        let sqll = `SELECT document_type FROM attributes Where attribute_id=${data.a_certificate[index]}`;

                        let resp = await new Promise((resolve, reject) => {
                          con.query(sqll, async function (err1, result1) {
                            if (err1) {
                              console.log(err1);
                              resolve({
                                status: 0,
                                message: "Something went wrong",
                              });
                            } else {
                              if (result1.length > 0) {
                                resolve({
                                  status: 1,
                                  result: result1[0].document_type,
                                });
                              } else {
                                resolve({ status: 0, result: [] });
                              }
                            }
                          });
                        });
                        sql3 = `SELECT amount as embassy_fees FROM embassyfees WHERE service_type = 10  AND country = ${data.a_country} AND document = ${resp.result} AND deleted = 0;`;
                        let response3 = await new Promise((resolve, reject) => {
                          con.query(sql3, async function (err2, result2) {
                            if (err2) {
                              console.log(err2);
                              resolve({
                                status: 0,
                                message: "Something went wrong",
                              });
                            } else {
                              if (result2.length > 0) {
                                result2.forEach(async function (result) {
                                  resolve({
                                    embassy_fees: result.embassy_fees,
                                  });
                                });
                              } else {
                                resolve({
                                  embassy_fees: parseInt(0),
                                });
                              }
                            }
                          });
                        });

                        if (result111.length > 0 || result111.length == 0) {
                          if (result111.length > 0) {
                            sum = sum + parseInt(response2.result);
                            // embassy = embassy + parseInt(response2.embassy_fees);
                            sum1.push(parseInt(response2.result));

                            result111.forEach(async function (result1) {
                              sql3 = `UPDATE details SET amount = ${response2.result} WHERE deleted = 0 AND detail_id = ${result1.detail_id} AND service_type = 10`;

                              con.query(sql3, async function (err3, result3) {
                                if (err3) {
                                  console.log(err3);
                                  resolve({
                                    status: 0,
                                    message: "Something went Wrong",
                                  });
                                } else {
                                  if (result3.affectedRows > 0) {
                                    resolve({
                                      status: 1,
                                    });
                                  } else {
                                    resolve({
                                      status: 0,
                                      message: "Something went to wrong",
                                    });
                                  }
                                }
                              });
                            });
                          } else {
                            sum = sum + parseInt(response2.result);
                            embassy =
                              parseInt(embassy) +
                              parseInt(response3.embassy_fees);
                            sum1.push(parseInt(response2.result));
                            sqlll = `INSERT INTO details (service_type,service_id,d_c_id,amount,tracking_id,status_change_date) VALUES ('${data1.c_s_type}' , ${result.insertId} ,${data.a_certificate[index]},${response2.result},'${data1.tracking_id}','${status_change_date}')`;

                            con.query(sqlll, async function (err3, result3) {
                              if (err3) {
                                console.log(err3);
                                resolve({
                                  status: 0,
                                  message: "Something went Wrong",
                                });
                              } else {
                                if (result3.affectedRows > 0) {
                                  resolve({
                                    status: 1,
                                    result: result3,
                                  });
                                } else {
                                  resolve({
                                    status: 0,
                                    message: "Something went to wrong",
                                  });
                                }
                              }
                            });
                          }
                        } else {
                          resolve({
                            status: 0,
                            message: "Something went Wrong...",
                          });
                        }
                      }
                    });
                  }
                }
              } else {
                resolve({
                  status: 0,
                  message: "Something went to wrong",
                });
              }
            }
          });
        }
      });
    });

    let response4 = new Promise((resolve, reject) => {
      let c_gst = 0;
      let s_gst = 0;
      let i_gst = 0;
      let netamt = 0;

      let s1 =
        sum +
        parseInt(response3.result.courier) +
        parseInt(response3.result.exp_charge) -
        parseInt(response3.result.dis_amt) -
        parseInt(response3.result.coupon_amt);

      if (response3.result.c_tax == 1) {
        if (response3.result.c_gst == 1) {
          if (data1.branch_state_id == response3.result.c_state) {
            c_gst = (s1 * data1.s_c_gst) / 100;
            s_gst = (s1 * data1.s_s_gst) / 100;
            netamt = s1 + c_gst + s_gst + parseInt(embassy);
          } else {
            i_gst = (s1 * data1.s_i_gst) / 100;
            netamt = s1 + i_gst + parseInt(embassy);
          }
        } else {
          netamt = s1 + parseInt(embassy);
        }
      } else {
        netamt = s1 + parseInt(embassy);
      }
      //1003
      sql5 = `INSERT INTO payment(payment_date,c_id,total_amount,courier,embassy_fees,dis_amt,net_amt,sgst,cgst,igst,created_id,paid_amt ,due_amt,u_id,is_tds,tds_amt,tracking_id,exp_charge,coupon_amt,c_tax,created_branch_id,p_receipt_no,invoice_no,is_draft_taken,payment_refund) VALUES ('${response3.result.payment_date
        }',${response3.result.c_id},'${sum}',
                    '${response3.result.courier}','${embassy}','${response3.result.dis_amt
        }','${netamt}','${s_gst}','${c_gst}','${i_gst}',${response3.result.created_id
        },'${response3.result.paid_amt}','${netamt - response3.result.paid_amt - response3.result.tds_amt
        }',${response3.result.u_id},${response3.result.is_tds} , '${response3.result.tds_amt
        }','${mysql_real_escape_string(response3.result.tracking_id)}','${response3.result.exp_charge
        }','${response3.result.coupon_amt}','${response3.result.c_tax}',${response3.result.created_branch_id
        },'${payment.result.p_receipt_no}','${response3.result.invoice_no}',${response3.result.is_draft_taken
        },'${response3.result.payment_refund}')`;
      con.query(sql5, async function (err5, result5) {
        if (err5) {
          console.log(err5);
          resolve({ status: 0, message: "Something went wrong" });
        } else {
          if (result5.affectedRows > 0) {
            resolve({
              status: 1,
              igst: i_gst,
              sgst: s_gst,
              cgst: c_gst,
              net_before: s1,
              serviceprice: response3.result,
              total_amt: sum,
              net_amt: netamt,
              amount: sum1,
              embassy_fees: embassy,
              message: "Attestation Updated Successfully....",
            });
          } else {
            resolve({
              status: 0,
              result: 0,
              message: "Something went wrong..",
            });
          }
        }
      });
    });
    return response4;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function searchVisaCustomer(data) {
  try {
    let record = [];
    getuserquery = `select * from users where u_id=${data.u_id} and deleted=0`;
    let response = await new Promise((resolve, reject) => {
      con.query(getuserquery, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            if (result[0].user_type == 1) {
              getallchilduser = `select * from users where (p_u_id=${data.u_id} and branch_id=${result[0].branch_id}) and deleted=0`;
              con.query(getallchilduser, function (err, res) {
                if (err) {
                  console.log(err);
                  resolve({ status: 0, message: "Something went to wrong" });
                } else {
                  res.forEach(function (r) {
                    record.push(r.u_id);
                  });
                  resolve({
                    record: record,
                    type: result[0].user_type,
                    s_u_permission: result[0].s_u_permission,
                  });
                }
              });
            } else {
              resolve({
                type: result[0].user_type,
                s_u_permission: result[0].s_u_permission,
              });
            }
          }
        }
      });
    });
    if (
      response.type == 1 ||
      (response.type == 3 && response.s_u_permission == 1)
    ) {
      sql = `SELECT *,(SELECT SUM(receive_amt) FROM draft_payment  WHERE draft_payment.c_id = customer.c_id and draft_payment.deleted=0 and draft_payment.receive_amt!=0  and draft_payment.approved_status =0 and draft_payment.deleted = 0 ) as total_draft,details.under_process_date AS process_date,(SELECT name FROM attributes WHERE attributes.attribute_id  =visa.v_type)as visa_type,(SELECT name FROM attributes WHERE attributes.attribute_id  =details.d_c_id)as visa_country,(SELECT c_prefix FROM customer WHERE customer.c_id=visa.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=visa.c_id) AS customer_name,(SELECT c_id FROM customer WHERE customer.c_id=visa.c_id) as my_C_id,(SELECT branch_id FROM customer WHERE customer.c_id=visa.c_id) AS branch_id,(SELECT u_id FROM customer WHERE customer.c_id=visa.c_id) AS cuid,(SELECT user_type FROM users where users.u_id  = (SELECT u_id FROM customer WHERE customer.c_id=visa.c_id)) as cutype,(SELECT payment.due_amt FROM payment where payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=visa.c_id) ORDER BY payment.payment_id DESC LIMIT 1) as my_Due_Amt, (SELECT payment.paid_amt FROM payment where payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=visa.c_id) ORDER BY payment.payment_id DESC LIMIT 1) as my_paid_amt,
      (SELECT payment.net_amt FROM payment where payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=visa.c_id) ORDER BY payment.payment_id DESC LIMIT 1) as my_net_amt,
      (SELECT payment.tds_amt FROM payment where payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=visa.c_id) ORDER BY payment.payment_id DESC LIMIT 1) as my_tds_amt,(SELECT draft_payment.d_p_id FROM draft_payment where draft_payment.deleted=0 and draft_payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=visa.c_id) and draft_payment.approved_status=0 and draft_payment.due_amt=0 ORDER BY draft_payment.d_p_id DESC LIMIT 1) as Draf_payment FROM details,visa,customer WHERE customer.c_id=visa.c_id AND details.service_id=visa.v_id AND (customer.branch_id =${data.branch_id} OR customer.foreign_branch = ${data.branch_id}) AND details.service_type=8 AND details.deleted = 0  AND visa.deleted = 0  AND customer.deleted = 0 AND customer.is_cancel = 0`;
    } else {
      if (data.u_id != 1) {
        sql = `SELECT *,(SELECT SUM(receive_amt) FROM draft_payment  WHERE draft_payment.c_id = customer.c_id and draft_payment.deleted=0 and draft_payment.receive_amt!=0  and draft_payment.approved_status =0 and draft_payment.deleted = 0 ) as total_draft,details.under_process_date AS process_date,(SELECT name FROM attributes WHERE attributes.attribute_id  =visa.v_type)as visa_type,(SELECT name FROM attributes WHERE attributes.attribute_id  =details.d_c_id)as visa_country,(SELECT c_prefix FROM customer WHERE customer.c_id=visa.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=visa.c_id) AS customer_name,(SELECT c_id FROM customer WHERE customer.c_id=visa.c_id) as my_C_id,
        (SELECT branch_id FROM customer WHERE customer.c_id=visa.c_id) AS branch_id,(SELECT u_id FROM customer WHERE customer.c_id=visa.c_id) AS cuid,(SELECT user_type FROM users where users.u_id  = (SELECT u_id FROM customer WHERE customer.c_id=visa.c_id)) as cutype,
        (SELECT payment.due_amt FROM payment where payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=visa.c_id) ORDER BY payment.payment_id DESC LIMIT 1) as my_Due_Amt,(SELECT payment.paid_amt FROM payment where payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=visa.c_id) ORDER BY payment.payment_id DESC LIMIT 1) as my_paid_amt,
        (SELECT payment.net_amt FROM payment where payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=visa.c_id) ORDER BY payment.payment_id DESC LIMIT 1) as my_net_amt,
        (SELECT payment.tds_amt FROM payment where payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=visa.c_id) ORDER BY payment.payment_id DESC LIMIT 1) as my_tds_amt,
        (SELECT draft_payment.d_p_id FROM draft_payment where draft_payment.deleted=0 and draft_payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=visa.c_id) and draft_payment.approved_status=0 and draft_payment.due_amt=0 ORDER BY draft_payment.d_p_id DESC LIMIT 1) as Draf_payment FROM details,visa,customer WHERE customer.c_id=visa.c_id AND details.service_id=visa.v_id AND (customer.u_id=${data.u_id} or customer.foreign_branchuser=${data.u_id} OR customer.created_id = ${data.u_id}) AND details.service_type=8 AND details.deleted = 0  AND visa.deleted = 0  AND  customer.deleted = 0 AND customer.is_cancel = 0`;
      } else {
        sql = `SELECT *,(SELECT SUM(receive_amt) FROM draft_payment  WHERE draft_payment.c_id = customer.c_id and draft_payment.deleted=0 and draft_payment.receive_amt!=0  and draft_payment.approved_status =0 and draft_payment.deleted = 0 ) as total_draft,details.under_process_date AS process_date,(SELECT name FROM attributes WHERE attributes.attribute_id  =visa.v_type)as visa_type,(SELECT name FROM attributes WHERE attributes.attribute_id  =details.d_c_id)as visa_country,(SELECT c_prefix FROM customer WHERE customer.c_id=visa.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=visa.c_id) AS customer_name,(SELECT c_id FROM customer WHERE customer.c_id=visa.c_id) as my_C_id,
        (SELECT branch_id FROM customer WHERE customer.c_id=visa.c_id) AS branch_id,(SELECT u_id FROM customer WHERE customer.c_id=visa.c_id) AS cuid,(SELECT user_type FROM users where users.u_id  = (SELECT u_id FROM customer WHERE customer.c_id=visa.c_id)) as cutype,
        (SELECT payment.due_amt FROM payment where payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=visa.c_id) ORDER BY payment.payment_id DESC LIMIT 1) as my_Due_Amt, (SELECT payment.paid_amt FROM payment where payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=visa.c_id) ORDER BY payment.payment_id DESC LIMIT 1) as my_paid_amt,
        (SELECT payment.net_amt FROM payment where payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=visa.c_id) ORDER BY payment.payment_id DESC LIMIT 1) as my_net_amt,
        (SELECT payment.tds_amt FROM payment where payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=visa.c_id) ORDER BY payment.payment_id DESC LIMIT 1) as my_tds_amt,
        (SELECT draft_payment.d_p_id FROM draft_payment where draft_payment.deleted=0 and draft_payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=visa.c_id) and draft_payment.approved_status=0 and draft_payment.due_amt=0 ORDER BY draft_payment.d_p_id DESC LIMIT 1) as Draf_payment FROM details,visa,customer WHERE customer.c_id=visa.c_id AND details.service_id=visa.v_id AND details.service_type=8 AND details.deleted = 0  AND visa.deleted = 0  AND  customer.deleted = 0 AND customer.is_cancel = 0`;
      }
    }
    // sql = `SELECT *,(SELECT COUNT(*) FROM visa) as trows ,(SELECT c_name FROM customer WHERE customer.c_id =visa.c_id)as c_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =visa.v_type)as visa_type,(SELECT GROUP_CONCAT(attributes.name) as name FROM attributes where FIND_IN_SET (attributes.attribute_id , visa.v_country)) as countryname,(SELECT GROUP_CONCAT(attributes.name) as name FROM attributes where FIND_IN_SET (attributes.attribute_id , visa.v_supporting_doc)) as supporting_doc  FROM visa,customer WHERE customer.c_id=visa.c_id and visa.deleted=0`;
    if (typeof data.c_name != "undefined" && data.c_name != "") {
      sql += ` and customer.c_name like '%${data.c_name}%'`;
    }
    if (typeof data.c_mo_no != "undefined" && data.c_mo_no != "") {
      sql += ` and customer.c_mo_no like '%${data.c_mo_no}%'`;
    }

    if (
      typeof data.status_id != "undefined" &&
      data.status_id != "" &&
      data.status_id != 0
    ) {
      sql += ` and details.status_id=${data.status_id}`;
    }

    if (
      typeof data.s_date != "undefined" &&
      data.s_date != "" &&
      typeof data.e_date != "undefined" &&
      data.e_date != ""
    ) {
      sql += ` and (STR_TO_DATE(customer.c_date,'%d-%m-%Y')>='${data.s_date}' AND STR_TO_DATE(customer.c_date,'%d-%m-%Y')<='${data.e_date}')`;
    }

    if (
      data.tracking_id != "undefined" &&
      data.tracking_id != "" &&
      data.tracking_id.length != 2
    ) {
      sql += ` and details.tracking_id like '%${data.tracking_id}%'`;
    }
    if (typeof data.c_email != "undefined" && data.c_email != "") {
      sql += ` and customer.c_email like '%${data.c_email}%'`;
    }
    sql123 = sql;
    sql += ` ORDER BY detail_id  DESC limit ${(data.page - 1) * data.perpage},${data.perpage
      }`;
    console.log("sql123", sql123);
    let response1 = await new Promise((resolve, reject) => {
      con.query(sql123, function (err, result1) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result1.length > 0) {
            con.query(sql, function (err, res) {
              if (err) {
                console.log(err);
              } else {
                if (res.length > 0) {
                  resolve({
                    status: 1,
                    data: res,
                    t_rows: result1.length,
                  });
                }
              }
            });
          } else {
            resolve({
              status: 0,
              data: [],
            });
          }
        }
      });
    });
    return response1;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function searchAttestationCustomer(data) {
  try {
    let record = [];
    getuserquery = `select * from users where u_id=${data.u_id} and deleted=0`;
    let response = await new Promise((resolve, reject) => {
      con.query(getuserquery, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            if (result[0].user_type == 1) {
              getallchilduser = `select * from users where (p_u_id=${data.u_id} or branch_id=${result[0].branch_id}) and deleted=0`;
              con.query(getallchilduser, function (err, res) {
                if (err) {
                  console.log(err);
                  resolve({ status: 0, message: "Something went to wrong" });
                } else {
                  res.forEach(function (r) {
                    record.push(r.u_id);
                  });
                  resolve({
                    record: record,
                    type: result[0].user_type,
                    s_u_permission: result[0].s_u_permission,
                  });
                }
              });
            } else {
              resolve({
                type: result[0].user_type,
                s_u_permission: result[0].s_u_permission,
              });
            }
          }
        }
      });
    });
    let sql = "";
    let searchAttestationPaginationQuery = "";
    if (
      response.type == 1 ||
      (response.type == 3 && response.s_u_permission == 1)
    ) {
      sql = `SELECT *,(SELECT SUM(receive_amt) FROM draft_payment  WHERE draft_payment.c_id = customer.c_id and draft_payment.deleted=0 and draft_payment.receive_amt!=0  and draft_payment.approved_status =0 and draft_payment.deleted = 0 ) as total_draft,details.under_process_date AS process_date,(SELECT name FROM attributes WHERE attributes.attribute_id  =attestation.a_type)as attestation_type,(SELECT c_date FROM customer WHERE customer.c_id =attestation.c_id)as r_date,(SELECT name FROM attributes WHERE attributes.attribute_id =attestation.a_country)as attestation_country,(SELECT name FROM attributes WHERE attributes.attribute_id =details.d_c_id)as attestation_certificate,(SELECT c_prefix FROM customer WHERE customer.c_id=attestation.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=attestation.c_id) AS customer_name,(SELECT c_s_type FROM customer WHERE customer.c_id=attestation.c_id) AS c_s_type,
      (SELECT c_id FROM customer WHERE customer.c_id=attestation.c_id) as my_C_id,(SELECT u_id FROM customer WHERE customer.c_id=attestation.c_id) AS cuid,(SELECT user_type FROM users where users.u_id  = (SELECT u_id FROM customer WHERE customer.c_id=attestation.c_id)) as cutype,
      (SELECT payment.due_amt FROM payment where payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=attestation.c_id) ORDER BY payment.payment_id DESC LIMIT 1) as my_Due_Amt,
      (SELECT payment.paid_amt FROM payment where payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=attestation.c_id) ORDER BY payment.payment_id DESC LIMIT 1) as my_paid_amt,
      (SELECT payment.net_amt FROM payment where payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=attestation.c_id) ORDER BY payment.payment_id DESC LIMIT 1) as my_net_amt,
      (SELECT payment.tds_amt FROM payment where payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=attestation.c_id) ORDER BY payment.payment_id DESC LIMIT 1) as my_tds_amt,
      (SELECT payment.due_amt FROM payment where payment.c_id = 
      (SELECT draft_payment.d_p_id FROM draft_payment where draft_payment.deleted=0 and draft_payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=attestation.c_id) and draft_payment.approved_status=0 and draft_payment.due_amt=0 ORDER BY draft_payment.d_p_id DESC LIMIT 1) as Draf_payment FROM details,attestation,customer WHERE customer.c_id=attestation.c_id AND details.service_id=attestation.a_id and (customer.branch_id =${data.branch_id} OR customer.foreign_branch = ${data.branch_id}) AND details.service_type=10 AND details.deleted = 0  AND attestation.deleted = 0  AND customer.deleted = 0 AND customer.is_cancel = 0`;

      searchAttestationPaginationQuery = `SELECT COUNT(details.detail_id) as trows FROM details,attestation,customer WHERE customer.c_id=attestation.c_id AND details.service_id=attestation.a_id and (customer.branch_id =${data.branch_id} OR customer.foreign_branch = ${data.branch_id}) AND details.service_type=10 AND details.deleted = 0  AND attestation.deleted = 0  AND customer.deleted = 0 AND customer.is_cancel = 0`;
    } else {
      if (data.u_id != 1) {
        sql = `SELECT *,(SELECT SUM(receive_amt) FROM draft_payment  WHERE draft_payment.c_id = customer.c_id and draft_payment.deleted=0 and draft_payment.receive_amt!=0  and draft_payment.approved_status =0 and draft_payment.deleted = 0 ) as total_draft,details.under_process_date AS process_date,(SELECT name FROM attributes WHERE attributes.attribute_id  =attestation.a_type)as attestation_type,(SELECT c_date FROM customer WHERE customer.c_id =attestation.c_id)as r_date,(SELECT name FROM attributes WHERE attributes.attribute_id =attestation.a_country)as attestation_country,(SELECT name FROM attributes WHERE attributes.attribute_id =details.d_c_id)as attestation_certificate,(SELECT c_prefix FROM customer WHERE customer.c_id=attestation.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=attestation.c_id) AS customer_name,(SELECT c_s_type FROM customer WHERE customer.c_id=attestation.c_id) AS c_s_type,
        (SELECT c_id FROM customer WHERE customer.c_id=attestation.c_id) as my_C_id,
        (SELECT branch_id FROM customer WHERE customer.c_id=attestation.c_id) AS branch_id,(SELECT u_id FROM customer WHERE customer.c_id=attestation.c_id) AS cuid,(SELECT user_type FROM users where users.u_id  = (SELECT u_id FROM customer WHERE customer.c_id=attestation.c_id)) as cutype,
        (SELECT payment.due_amt FROM payment where payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=attestation.c_id) ORDER BY payment.payment_id DESC LIMIT 1) as my_Due_Amt,
        (SELECT payment.paid_amt FROM payment where payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=attestation.c_id) ORDER BY payment.payment_id DESC LIMIT 1) as my_paid_amt,
        (SELECT payment.net_amt FROM payment where payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=attestation.c_id) ORDER BY payment.payment_id DESC LIMIT 1) as my_net_amt,
        (SELECT payment.tds_amt FROM payment where payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=attestation.c_id) ORDER BY payment.payment_id DESC LIMIT 1) as my_tds_amt,
        (SELECT draft_payment.d_p_id FROM draft_payment where draft_payment.deleted=0 and draft_payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=attestation.c_id) and draft_payment.approved_status=0 and draft_payment.due_amt=0 ORDER BY draft_payment.d_p_id DESC LIMIT 1) as Draf_payment FROM details,attestation,customer  WHERE customer.c_id=attestation.c_id and details.service_id=attestation.a_id AND (customer.u_id=${data.u_id} or customer.foreign_branchuser=${data.u_id} OR customer.created_id = ${data.u_id}) AND details.service_type=10 AND details.deleted = 0  AND attestation.deleted = 0  AND customer.deleted = 0 AND customer.is_cancel = 0`;

        searchAttestationPaginationQuery = `SELECT COUNT(details.detail_id) as trows FROM details,attestation,customer  WHERE customer.c_id=attestation.c_id and details.service_id=attestation.a_id AND (customer.u_id=${data.u_id} or customer.foreign_branchuser=${data.u_id} OR customer.created_id = ${data.u_id}) AND details.service_type=10 AND details.deleted = 0  AND attestation.deleted = 0  AND customer.deleted = 0 AND customer.is_cancel = 0`;
      } else {
        sql = `SELECT *,(SELECT SUM(receive_amt) FROM draft_payment  WHERE draft_payment.c_id = customer.c_id and draft_payment.deleted=0 and draft_payment.receive_amt!=0  and draft_payment.approved_status =0 and draft_payment.deleted = 0 ) as total_draft,details.under_process_date AS process_date,(SELECT name FROM attributes WHERE attributes.attribute_id  =attestation.a_type)as attestation_type,(SELECT c_date FROM customer WHERE customer.c_id =attestation.c_id)as r_date,(SELECT name FROM attributes WHERE attributes.attribute_id =attestation.a_country)as attestation_country,(SELECT name FROM attributes WHERE attributes.attribute_id =details.d_c_id)as attestation_certificate,(SELECT c_prefix FROM customer WHERE customer.c_id=attestation.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=attestation.c_id) AS customer_name,(SELECT c_s_type FROM customer WHERE customer.c_id=attestation.c_id) AS c_s_type,
        (SELECT c_id FROM customer WHERE customer.c_id=attestation.c_id) as my_C_id,
        (SELECT branch_id FROM customer WHERE customer.c_id=attestation.c_id) AS branch_id,(SELECT u_id FROM customer WHERE customer.c_id=attestation.c_id) AS cuid,(SELECT user_type FROM users where users.u_id  = (SELECT u_id FROM customer WHERE customer.c_id=attestation.c_id)) as cutype,
        (SELECT payment.due_amt FROM payment where payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=attestation.c_id) ORDER BY payment.payment_id DESC LIMIT 1) as my_Due_Amt,(SELECT payment.paid_amt FROM payment where payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=attestation.c_id) ORDER BY payment.payment_id DESC LIMIT 1) as my_paid_amt,
        (SELECT payment.net_amt FROM payment where payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=attestation.c_id) ORDER BY payment.payment_id DESC LIMIT 1) as my_net_amt,
        (SELECT payment.tds_amt FROM payment where payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=attestation.c_id) ORDER BY payment.payment_id DESC LIMIT 1) as my_tds_amt,
        (SELECT draft_payment.d_p_id FROM draft_payment where draft_payment.deleted=0 and draft_payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=attestation.c_id) and draft_payment.approved_status=0 and draft_payment.due_amt=0 ORDER BY draft_payment.d_p_id DESC LIMIT 1) as Draf_payment FROM details,attestation,customer  WHERE customer.c_id=attestation.c_id and details.service_id=attestation.a_id  AND details.service_type=10  AND details.deleted = 0  AND attestation.deleted = 0  AND customer.deleted = 0 AND customer.is_cancel = 0`;
        searchAttestationPaginationQuery = `SELECT COUNT(details.detail_id) as trows FROM details,attestation,customer  WHERE customer.c_id=attestation.c_id and details.service_id=attestation.a_id  AND details.service_type=10  AND details.deleted = 0  AND attestation.deleted = 0  AND customer.deleted = 0 AND customer.is_cancel = 0`;
      }
    }

    // sql = `SELECT *,(SELECT COUNT(*) FROM attestation) as trows,(SELECT c_name FROM customer WHERE customer.c_id =attestation.c_id)as customer_name,(SELECT c_date FROM customer WHERE customer.c_id =attestation.c_id)as r_date,(SELECT name FROM attributes WHERE attributes.attribute_id =attestation.a_type)as attestation_type,(SELECT name FROM attributes WHERE attributes.attribute_id =attestation.a_country)as country_name,(SELECT GROUP_CONCAT(attributes.name) as name FROM attributes where FIND_IN_SET (attributes.attribute_id , attestation.a_certificate)) as certificate FROM attestation,customer WHERE customer.c_id=attestation.c_id and attestation.deleted=0`;
    if (typeof data.c_name != "undefined" && data.c_name != "") {
      sql += ` and customer.c_name like '%${data.c_name}%'`;
      searchAttestationPaginationQuery += ` and customer.c_name like '%${data.c_name}%'`;
    }
    if (typeof data.c_mo_no != "undefined" && data.c_mo_no != "") {
      sql += ` and customer.c_mo_no like '%${data.c_mo_no}%'`;
      searchAttestationPaginationQuery += ` and customer.c_mo_no like '%${data.c_mo_no}%'`;
    }
    if (
      typeof data.status_id != "undefined" &&
      data.status_id != "" &&
      data.status_id != 0
    ) {
      sql += ` and details.status_id=${data.status_id}`;
      searchAttestationPaginationQuery += ` and details.status_id=${data.status_id}`;
    }

    if (
      typeof data.s_date != "undefined" &&
      data.s_date != "" &&
      typeof data.e_date != "undefined" &&
      data.e_date != ""
    ) {
      sql += ` and (STR_TO_DATE(customer.c_date,'%d-%m-%Y')>='${data.s_date}' AND STR_TO_DATE(customer.c_date,'%d-%m-%Y')<='${data.e_date}')`;
      searchAttestationPaginationQuery += ` and (STR_TO_DATE(customer.c_date,'%d-%m-%Y')>='${data.s_date}' AND STR_TO_DATE(customer.c_date,'%d-%m-%Y')<='${data.e_date}')`;
    }

    if (
      typeof data.a_country != "undefined" &&
      data.a_country != "" &&
      data.a_country != 0
    ) {
      sql += ` and attestation.a_country=${data.a_country}`;
      searchAttestationPaginationQuery += ` and attestation.a_country=${data.a_country}`;
    }
    if (
      data.tracking_id != "undefined" &&
      data.tracking_id != "" &&
      data.tracking_id.length != 2
    ) {
      sql += ` and details.tracking_id like '%${data.tracking_id}%'`;
      searchAttestationPaginationQuery += ` and details.tracking_id like '%${data.tracking_id}%'`;
    }
    if (typeof data.c_email != "undefined" && data.c_email != "") {
      sql += ` and customer.c_email like '%${data.c_email}%'`;
      searchAttestationPaginationQuery += ` and customer.c_email like '%${data.c_email}%'`;
    }

    sql += ` ORDER BY detail_id DESC limit ${(data.page - 1) * data.perpage},${data.perpage
      }`;
    let resp = await new Promise((resolve, reject) => {
      con.query(searchAttestationPaginationQuery, function (err1, lres1) {
        if (err1) {
          console.log(err1);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (lres1.length > 0) {
            resolve({
              status: 1,
              t_rows: lres1[0].trows,
            });
          } else {
            resolve({
              status: 0,
              data: [],
            });
          }
        }
      });
    });
    let response1 = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              data: result,
              t_rows: resp.t_rows,
            });
          } else {
            resolve({
              status: 0,
              data: [],
            });
          }
        }
      });
    });
    return response1;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function insertCustomerConversation(data, filename) {
  try {
    if (filename != undefined) {
      sql = `INSERT INTO customer_comment (c_id,u_id,comment,c_attachment,cc_date) VALUES (${data.c_id
        },'${data.u_id}','${mysql_real_escape_string(
          data.comment
        )}','${filename}','${data.cc_date}')`;
    } else {
      sql = `INSERT INTO customer_comment (c_id,u_id,comment,cc_date) VALUES (${data.c_id
        },'${data.u_id}','${mysql_real_escape_string(data.comment)}','${data.cc_date
        }')`;
    }
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.affectedRows > 0) {
            resolve({
              status: 1,
              message: "Customer Conversation Insert successfully",
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}
async function getCustomerComment(data) {
  try {
    sql = `SELECT * FROM customer_comment WHERE c_id =${data.id} ORDER BY c_c_id DESC`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              data: result,
            });
          } else {
            resolve({
              status: 0,
              data: [],
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}
//3103
async function uploadCustomerFile(data, name) {
  try {
    let response = await new Promise((resolve, reject) => {
      if (name != undefined) {
        let record = [];
        for (i = 0; i < name.length; i++) {
          record.push([data.c_id, name[i]]);
        }
        sql1 = `INSERT INTO customer_file (c_id,file_url) VALUES ?`;
        con.query(sql1, [record], function (err1, result1) {
          if (err1) {
            console.log(err1);
            resolve({ status: 0, message: "Something went to wrong" });
          } else {
            if (result1.affectedRows > 0) {
              resolve({
                status: 1,
                message: "File Uploaded Successfully",
              });
            } else {
              resolve({
                status: 0,
                message: "Something went to wrong",
              });
            }
          }
        });
      } else {
        resolve({
          status: 0,
          message: "Please Select a File then 5 MB",
        });
      }
    });
    return response;
  } catch (error) {
    console.log(error);
    return {
      status: 0,
      message: "Invalid Call Try Again",
    };
  }
}

async function getallfilesbyid(data) {
  try {
    sql = `SELECT * FROM customer_file  WHERE  deleted=0 AND customer_file.c_id = ${data.id}`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              data: result,
            });
          } else {
            resolve({
              status: 0,
              data: [],
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function deleteFile(data) {
  try {
    sql = `UPDATE customer_file SET deleted=1 WHERE  c_f_id=${data.id}`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.affectedRows > 0) {
            resolve({
              status: 1,
              message: "Customer File deleted Successfully",
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function getPaymentDetails(data) {
  try {
    sql = `SELECT net_amt,paid_amt,invoice_no,c_id,u_id,(select SUM(payment_refund) from payment where c_id = ${data.id})as total_refund  FROM payment  WHERE  c_id = ${data.id} ORDER BY payment_id DESC LIMIT 1`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              data: result[0],
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function insertRefundPayment(data, date) {
  try {
    lastrefund = `SELECT receipt_no FROM refund ORDER BY r_id DESC LIMIT 1`;
    const rlast2 = new Date().getFullYear().toString().substring(2);
    const rlast2Num = Number(rlast2);
    var rtoday = new Date();
    let financialYear;
    if (rtoday.getMonth() + 1 <= 3) {
      financialYear = rlast2Num - 1 + "-" + rlast2Num;
    } else {
      financialYear = rlast2Num + "-" + (rlast2Num + 1);
    }
    let rec_no = 0;
    let response1 = await new Promise((resolve, reject) => {
      con.query(lastrefund, function (err1, result1) {
        if (err1) {
          console.log(err1);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result1.length > 0 && result1[0].receipt_no != 0) {
            let rno = result1[0].receipt_no;
            let n_rno = rno.split("_");
            if (financialYear == n_rno[1]) {
              rec_no = `r_${financialYear}` + "_" + ++n_rno[2];
            } else {
              rec_no = `r_${financialYear}` + "_" + 1;
            }
          } else {
            rec_no = `r_${financialYear}` + "_" + 1;
          }
          resolve({
            status: 1,
            result: rec_no,
          });
        }
      });
    });
    // let rec_no = parseInt(response1.result) + 1;
    sql = `INSERT INTO refund (receipt_no,c_id,r_date,p_mode,chk_dd_no,chk_dd_date,bank_name,refund_price,created_id,u_id,created_branch_id) VALUES ('${rec_no}',${data.c_id},'${data.r_date}',${data.p_mode},'${data.chk_dd_no}','${data.chk_dd_date}','${data.bank_name}','${data.refund_price}',${data.created_id},${data.u_id},${data.created_branch_id}) `;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.affectedRows > 0) {
            getpayment = `SELECT * FROM payment WHERE c_id=${data.c_id} ORDER BY payment_id DESC LIMIT 1`;
            con.query(getpayment, function (err1, result1) {
              if (err1) {
                console.log(err1);
                resolve({ status: 0, message: "Something went to wrong" });
              } else {
                if (result1.length > 0) {
                  let new_paid_amt =
                    parseInt(result1[0].paid_amt) - parseInt(data.refund_price);
                  let new_due_amt =
                    parseInt(result1[0].net_amt) -
                    new_paid_amt -
                    parseInt(result1[0].tds_amt);
                  newpayment = `INSERT INTO payment (payment_date,c_id,total_amount,extra_amt,courier,service_tax,mode_id,chk_dd_no,chk_dd_date,bank_name,dis_amt,net_amt,paid_amt,due_amt,igst,invoice_no,created_id,u_id,payment_refund,p_receipt_no,c_tax,is_draft_taken,is_tds,tds_amt) VALUES ('${date}',${data.c_id
                    },'${result1[0].total_amount}','${result1[0].extra_amt}','${result1[0].courier
                    }','${result1[0].service_tax}',${data.p_mode},'${data.chk_dd_no
                    }','${data.chk_dd_date}','${data.bank_name}','${result1[0].dis_amt
                    }','${result1[0].net_amt
                    }','${new_paid_amt}','${new_due_amt}','${result1[0].igst}','${result1[0].invoice_no
                    }',${data.u_id},${data.u_id},'${parseInt(result1[0].payment_refund) +
                    parseInt(data.refund_price)
                    }','${result1[0].p_receipt_no}','${result1[0].c_tax}',${result1[0].is_draft_taken
                    },${result1[0].is_tds},'${result1[0].tds_amt}')`;

                  con.query(newpayment, async function (err2, result2) {
                    if (err2) {
                      console.log(err2);
                      resolve({
                        status: 0,
                        message: "Something went to wrong",
                      });
                    } else {
                      if (result2.affectedRows > 0) {
                        sql12 = `SELECT * FROM refund WHERE r_id = ${result.insertId} `;
                        let res = await new Promise((resolve, reject) => {
                          con.query(sql12, async function (err1, result1) {
                            if (err1) {
                              console.log(err1);
                              resolve({
                                status: 0,
                                message: "something went wrong",
                              });
                            } else {
                              if (result1.length > 0) {
                                resolve({ status: 1, result: result1 });
                              } else {
                                resolve({
                                  status: 0,
                                  message: "No data found",
                                });
                              }
                            }
                          });
                        });
                        resolve({
                          status: 1,
                          data: res.result[0],
                          message: "Refund Payment Inserted Successfully",
                        });
                      } else {
                        resolve({
                          status: 0,
                          message: "Something went to wrong",
                        });
                      }
                    }
                  });
                } else {
                  resolve({
                    status: 0,
                    message: "Something went to wrong",
                  });
                }
              }
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function getPaymentRefund(data, date) {
  try {
    if (data.u_id != 1) {
      sql = `SELECT *,(SELECT COUNT(r_id) FROM refund WHERE r_date='${date}' AND u_id=${data.u_id}) as trows,(SELECT SUM(refund_price) FROM refund WHERE r_date='${date}' AND u_id=${data.u_id} )AS refund_amount ,(SELECT c_name FROM customer WHERE customer.c_id =refund.c_id) AS customer_name,(SELECT name from attributes WHERE attributes.attribute_id =refund.p_mode)AS payment_mode FROM refund WHERE r_date='${date}' AND u_id=${data.u_id}`;
    } else {
      sql = `SELECT *,(SELECT COUNT(r_id) FROM refund WHERE r_date='${date}') as trows,(SELECT SUM(refund_price) FROM refund WHERE r_date='${date}')AS refund_amount ,(SELECT c_name FROM customer WHERE customer.c_id =refund.c_id) AS customer_name,(SELECT name from attributes WHERE attributes.attribute_id =refund.p_mode)AS payment_mode FROM refund WHERE r_date='${date}'`;
    }

    // if (data.u_id != 1) {
    //   sql += ` AND u_id=${data.u_id}`;
    // }
    sql += ` limit ${(data.page - 1) * data.perPage},${data.perPage}`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              data: result,
            });
          } else {
            resolve({
              status: 1,
              data: [],
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function searchRefundData(data) {
  try {
    sql = `SELECT *,(SELECT COUNT(*) FROM refund) as trows,(SELECT c_name FROM customer WHERE customer.c_id =refund.c_id) AS customer_name,(SELECT name from attributes WHERE attributes.attribute_id =refund.p_mode)AS payment_mode FROM refund where r_date='${data.r_date}'`;
    if (data.u_id != 1) {
      sql += `  and u_id=${data.u_id}`;
    }
    sql1 = sql;
    sql += ` limit ${(data.page - 1) * data.perpage},${data.perpage}`;

    let response = await new Promise((resolve, reject) => {
      con.query(sql1, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            con.query(sql, function (err, res) {
              if (err) {
                console.log(err);
              } else {
                if (res.length > 0) {
                  resolve({
                    status: 1,
                    data: res,
                    t_rows: result.length,
                  });
                }
              }
            });
          } else {
            resolve({
              status: 0,
              data: [],
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function getEmailSetting(id) {
  let find_mailer_detail = "";
  let getemailsettingsql = ``;
  let memberbranch = null;
  try {
    if (id.id == 1) {
      // allocated to admin so get admin header footer
      find_mailer_detail = 0; // if 0 so get admin detail
      memberbranch = await new Promise((resolve, reject) => {
        getemailsettingsql = `SELECT * FROM gsetting WHERE gsetting.s_id = 1`;
        con.query(getemailsettingsql, function (esettingerr, esettingres) {
          if (esettingerr) {
            console.log(esettingerr);
            resolve({ status: 0, message: "Something went to wrong" });
          } else {
            if (esettingres.length > 0) {
              resolve({ ...esettingres[0] });
            } else {
              resolve({ status: 0, message: "Something went to wrong" });
            }
          }
        });
      });

      return memberbranch;
    } else {
      // Lead allocated to branch so get branch header footer
      find_mailer_detail = id.id; // if get any branch so get branch detail
      //   Get User Branch Id
      getmemberbranchsql = `SELECT branch_id FROM users WHERE u_id = ${id.id}`;
      memberbranch = await new Promise((resolve, reject) => {
        con.query(
          getmemberbranchsql,
          function (memberbrancherr, memberbrancherrresult) {
            if (memberbrancherr) {
              console.log(memberbrancherr);
              resolve({ status: 0, message: "Something went to wrong" });
            } else {
              if (memberbrancherrresult) {
                getemailsettingsql = `SELECT branch.*,b_e_host as e_host, b_e_port as e_port , b_e_username as e_username , b_e_password as e_password , b_email_template_header as email_template_header , b_email_template_footer as email_template_footer , b_email_signature as email_signature FROM branch WHERE branch_id = ${memberbrancherrresult[0].branch_id}`;
                con.query(
                  getemailsettingsql,
                  function (esettingerr, esettingres) {
                    if (esettingerr) {
                      console.log(esettingerr);
                      resolve({
                        status: 0,
                        message: "Something went to wrong",
                      });
                    } else {
                      if (esettingres.length > 0) {
                        resolve({ ...esettingres[0] });
                      } else {
                        resolve({
                          status: 0,
                          message: "Something went to wrong",
                        });
                      }
                    }
                  }
                );
              } else {
                resolve({
                  status: 0,
                  message: "Something went to wrong",
                });
              }
            }
          }
        );
      });
      return memberbranch;
    }
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function getUnderProcessList(data) {
  try {
    // sql = `SELECT *,(SELECT COUNT(*) FROM details where details.service_type=10) as trows,(SELECT name FROM attributes WHERE attributes.attribute_id  =attestation.a_type)as attestation_type,(SELECT c_date FROM customer WHERE customer.c_id =attestation.c_id)as r_date,(SELECT name FROM attributes WHERE attributes.attribute_id =attestation.a_country)as attestation_country,(SELECT name FROM attributes WHERE attributes.attribute_id =details.d_c_id)as attestation_certificate,(SELECT c_prefix FROM customer WHERE customer.c_id=attestation.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=attestation.c_id) AS customer_name FROM details,attestation WHERE details.service_id=attestation.a_id  AND details.service_type=10 AND details.status_id=21`;

    if (data.user_type == 0) {
      sql = `SELECT detail_table.*,attestation_table.a_name,attestation_table.a_prefix,customer_table.c_name AS customer_name,customer_table.c_prefix AS customer_prefix,customer_table.c_date AS r_date,att_table.name AS attestation_type,att_table2.name AS attestation_country,att_table3.name AS attestation_certificate  From details detail_table LEFT join attestation attestation_table ON attestation_table.a_id =detail_table.service_id  LEFT join customer customer_table  ON customer_table.c_id = attestation_table.c_id LEFT join attributes att_table ON att_table.attribute_id  = attestation_table.a_type  LEFT join attributes att_table2 ON att_table2.attribute_id  = attestation_table.a_country LEFT join attributes att_table3 ON att_table3.attribute_id  = detail_table.d_c_id  Where  detail_table.service_type = 10 AND detail_table.deleted = 0  AND customer_table.deleted = 0 AND customer_table.is_block = 1 AND customer_table.is_cancel = 0 AND attestation_table.deleted = 0 AND detail_table.status_id = 21 `;
    } else if (data.user_type == 1) {
      sql = `SELECT detail_table.*,attestation_table.a_name,attestation_table.a_prefix,customer_table.c_name AS customer_name,customer_table.c_prefix AS customer_prefix,customer_table.c_date AS r_date,att_table.name AS attestation_type,att_table2.name AS attestation_country,att_table3.name AS attestation_certificate  From details detail_table LEFT join attestation attestation_table ON attestation_table.a_id =detail_table.service_id  LEFT join customer customer_table  ON customer_table.c_id = attestation_table.c_id LEFT join attributes att_table ON att_table.attribute_id  = attestation_table.a_type  LEFT join attributes att_table2 ON att_table2.attribute_id  = attestation_table.a_country LEFT join attributes att_table3 ON att_table3.attribute_id  = detail_table.d_c_id  Where detail_table.service_type=10 AND detail_table.deleted = 0  AND customer_table.deleted = 0 AND customer_table.is_block = 1 AND customer_table.is_cancel = 0 AND attestation_table.deleted = 0 AND detail_table.status_id = 21 AND (customer_table.branch_id = ${data.branch_id} OR customer_table.foreign_branch =${data.branch_id}) UNION SELECT detail_table.*,apostille_table.a_name,apostille_table.a_prefix,customer_table.c_name AS customer_name,customer_table.c_prefix AS customer_prefix,customer_table.c_date AS r_date,att_table.name AS apostille_type,att_table2.name AS apostille_country,att_table3.name AS apostille_certificate  From details detail_table LEFT join apostille apostille_table ON apostille_table.a_id =detail_table.service_id  LEFT join customer customer_table  ON customer_table.c_id = apostille_table.c_id LEFT join attributes att_table ON att_table.attribute_id  = apostille_table.a_type  LEFT join attributes att_table2 ON att_table2.attribute_id  = apostille_table.a_country LEFT join attributes att_table3 ON att_table3.attribute_id  = detail_table.d_c_id  Where  detail_table.service_type=17 AND detail_table.deleted = 0 AND customer_table.deleted = 0 AND customer_table.is_block = 1 AND customer_table.is_cancel = 0 AND apostille_table.deleted = 0 AND detail_table.status_id = 21 AND (customer_table.branch_id = ${data.branch_id} OR customer_table.foreign_branch =${data.branch_id})
       UNION SELECT detail_table.*,translation_table.a_name,translation_table.a_prefix,customer_table.c_name AS customer_name,customer_table.c_prefix AS customer_prefix,customer_table.c_date AS r_date,att_table.name AS translation_type,att_table2.name AS translation_country,att_table2.name AS translation_certificate  From details detail_table LEFT join translation translation_table ON translation_table.a_id =detail_table.service_id  LEFT join customer customer_table  ON customer_table.c_id = translation_table.c_id LEFT join attributes att_table ON att_table.attribute_id  = translation_table.a_type  LEFT join attributes att_table2 ON att_table2.attribute_id  = translation_table.a_country LEFT join attributes att_table3 ON att_table3.attribute_id  = detail_table.d_c_id  Where detail_table.service_type=20 AND detail_table.deleted = 0 AND customer_table.deleted = 0 AND customer_table.is_block = 1 AND customer_table.is_cancel = 0 AND translation_table.deleted = 0 AND detail_table.status_id = 21 AND (customer_table.branch_id = ${data.branch_id} OR customer_table.foreign_branch =${data.branch_id})
      UNION  SELECT detail_table.*,visa_table.v_name as a_name,visa_table.v_prefix as a_prefix,customer_table.c_name AS customer_name,customer_table.c_prefix AS customer_prefix,customer_table.c_date AS r_date,att_table.name AS visa_type,att_table2.name AS visa_country,att_table3.name AS visa_certificate  From details detail_table LEFT join visa visa_table ON visa_table.v_id =detail_table.service_id  LEFT join customer customer_table  ON customer_table.c_id = visa_table.c_id LEFT join attributes att_table ON att_table.attribute_id  = visa_table.v_type  LEFT join attributes att_table2 ON att_table2.attribute_id  = visa_table.v_country LEFT join attributes att_table3 ON att_table3.attribute_id  = detail_table.d_c_id  Where detail_table.service_type=8 AND  detail_table.deleted = 0 AND customer_table.deleted = 0 AND customer_table.is_block = 1 AND customer_table.is_cancel = 0 AND visa_table.deleted = 0 AND detail_table.status_id = 21 AND (customer_table.branch_id = ${data.branch_id} OR customer_table.foreign_branch =${data.branch_id})`;
    } else {
      sql = `SELECT detail_table.*,attestation_table.a_name,attestation_table.a_prefix,customer_table.c_name AS customer_name,customer_table.c_prefix AS customer_prefix,customer_table.c_date AS r_date,att_table.name AS attestation_type,att_table2.name AS attestation_country,att_table3.name AS attestation_certificate  From details detail_table LEFT join attestation attestation_table ON attestation_table.a_id =detail_table.service_id  LEFT join customer customer_table  ON customer_table.c_id = attestation_table.c_id LEFT join attributes att_table ON att_table.attribute_id  = attestation_table.a_type  LEFT join attributes att_table2 ON att_table2.attribute_id  = attestation_table.a_country LEFT join attributes att_table3 ON att_table3.attribute_id  = detail_table.d_c_id  Where detail_table.service_type=10 AND detail_table.deleted = 0  AND customer_table.deleted = 0 AND customer_table.is_block = 1 AND customer_table.is_cancel = 0 AND attestation_table.deleted = 0 AND detail_table.status_id = 21 AND (customer_table.u_id = ${data.u_id} OR customer_table.foreign_branchuser =${data.u_id}) 
      UNION SELECT detail_table.*,apostille_table.a_name,apostille_table.a_prefix,customer_table.c_name AS customer_name,customer_table.c_prefix AS customer_prefix,customer_table.c_date AS r_date,att_table.name AS apostille_type,att_table2.name AS apostille_country,att_table3.name AS apostille_certificate  From details detail_table LEFT join apostille apostille_table ON apostille_table.a_id =detail_table.service_id  LEFT join customer customer_table  ON customer_table.c_id = apostille_table.c_id LEFT join attributes att_table ON att_table.attribute_id  = apostille_table.a_type  LEFT join attributes att_table2 ON att_table2.attribute_id  = apostille_table.a_country LEFT join attributes att_table3 ON att_table3.attribute_id  = detail_table.d_c_id  Where  detail_table.service_type=17 AND detail_table.deleted = 0 AND customer_table.deleted = 0 AND customer_table.is_block = 1 AND customer_table.is_cancel = 0 AND apostille_table.deleted = 0 AND detail_table.status_id = 21 AND (customer_table.u_id = ${data.u_id} OR customer_table.foreign_branchuser =${data.u_id})
       UNION SELECT detail_table.*,translation_table.a_name,translation_table.a_prefix,customer_table.c_name AS customer_name,customer_table.c_prefix AS customer_prefix,customer_table.c_date AS r_date,att_table.name AS translation_type,att_table2.name AS translation_country,att_table2.name AS translation_certificate  From details detail_table LEFT join translation translation_table ON translation_table.a_id =detail_table.service_id  LEFT join customer customer_table  ON customer_table.c_id = translation_table.c_id LEFT join attributes att_table ON att_table.attribute_id  = translation_table.a_type  LEFT join attributes att_table2 ON att_table2.attribute_id  = translation_table.a_country LEFT join attributes att_table3 ON att_table3.attribute_id  = detail_table.d_c_id  Where detail_table.service_type=20 AND detail_table.deleted = 0 AND customer_table.deleted = 0 AND customer_table.is_block = 1 AND customer_table.is_cancel = 0 AND translation_table.deleted = 0 AND detail_table.status_id = 21 AND (customer_table.u_id = ${data.u_id} OR customer_table.foreign_branchuser =${data.u_id}) UNION  SELECT detail_table.*,visa_table.v_name as a_name,visa_table.v_prefix as a_prefix,customer_table.c_name AS customer_name,customer_table.c_prefix AS customer_prefix,customer_table.c_date AS r_date,att_table.name AS visa_type,att_table2.name AS visa_country,att_table3.name AS visa_certificate  From details detail_table LEFT join visa visa_table ON visa_table.v_id =detail_table.service_id  LEFT join customer customer_table  ON customer_table.c_id = visa_table.c_id LEFT join attributes att_table ON att_table.attribute_id  = visa_table.v_type  LEFT join attributes att_table2 ON att_table2.attribute_id  = visa_table.v_country LEFT join attributes att_table3 ON att_table3.attribute_id  = detail_table.d_c_id  Where detail_table.service_type=8 AND  detail_table.deleted = 0 AND customer_table.deleted = 0 AND customer_table.is_block = 1 AND customer_table.is_cancel = 0 AND visa_table.deleted = 0 AND detail_table.status_id = 21 AND (customer_table.u_id = ${data.u_id} OR customer_table.foreign_branchuser =${data.u_id})`;
    }

    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              data: result,
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

// async function getdispatch(data) {
//   try {
//     if (data.u_id == 1) {
//       sql = `select * from gsetting`;
//     } else {
//       sql = `SELECT *,branch.b_hsn_code as hsn_code,b_bank_details as bank_details,company_name as c_name,branch.b_gstno as c_gstno FROM users,branch WHERE users.branch_id=branch.branch_id AND u_id=${data.u_id} AND users.deleted=0 AND branch.deleted=0`;
//     }
//     let responsee = await new Promise((resolve, reject) => {
//       con.query(sql, function (err, result) {
//         if (err) {
//           console.log(err);
//           resolve({ status: 0, message: "Something went to wrong" });
//         } else {
//           if (result.length > 0) {
//             con.query(sql, function (err, res) {
//               if (err) {
//                 console.log(err);
//               } else {
//                 if (res.length > 0) {
//                   resolve({
//                     settingdata: res[0],
//                   });
//                 }
//               }
//             });
//           } else {
//             resolve({
//               status: 0,
//               message: "Something went to wrong",
//             });
//           }
//         }
//       });
//     });

//     sqll = `SELECT * FROM users WHERE u_id = ${data.u_id}`;

//     let response = await new Promise((resolve, reject) => {
//       con.query(sqll, function (err, result) {
//         if (err) {
//           console.log(err);
//           resolve({ status: 0, message: "Something went to wrong" });
//         } else {
//           if (result.length > 0) {
//             result.forEach(function (result) {
//               resolve({
//                 status: 1,
//                 user_type: result.user_type,
//                 user_data: result,
//               });
//             });
//           } else {
//             resolve({
//               status: 0,
//               user_type: "Something went wrong...",
//             });
//           }
//         }
//       });
//     });
//     let doc = "";
//     if (data.status == 26) {
//       doc = ` and STR_TO_DATE(details.dispatching_date,"%y-%m-%d")= STR_TO_DATE('${data.c_date}',"%y-%m-%d") and  details.status_id = 26`;
//     } else {
//       doc = ` and STR_TO_DATE(details.delivery_date,"%y-%m-%d")= STR_TO_DATE('${data.c_date}',"%y-%m-%d") and  details.status_id = 24`;
//     }
//     let user = "";
//     if (response.user_type == 0) {
//       user = ` and customer.branch_id=${data.branch_name}`;
//     } else if (response.user_type == 1) {
//       user = ` and (customer.foreign_branch = ${data.branch_id} OR customer.branch_id = ${data.branch_id})`;
//     } else {
//       user = ` and (customer.u_id=${data.u_id} or customer.foreign_branchuser=${data.u_id})`;
//     }
//     if (data.c_s_type == 10) {
//       sql2 = `SELECT customer.c_prefix,customer.c_name,customer.c_mo_no,customer.c_s_type,customer.d_address,attestation.a_prefix,attestation.a_name,(SELECT GROUP_CONCAT(attributes.name SEPARATOR ',') as name FROM attributes where FIND_IN_SET (attributes.attribute_id , attestation.a_certificate)) as a_certificate_name,(SELECT GROUP_CONCAT(attributes.name SEPARATOR ',') as name FROM attributes where FIND_IN_SET (attributes.attribute_id , attestation.a_supporting_doc)) as supporting_doc_name,(SELECT GROUP_CONCAT(attributes.name SEPARATOR ',') as name FROM attributes where FIND_IN_SET (attributes.attribute_id , attestation.a_extra_doc)) as extra_doc_name FROM customer INNER JOIN attestation ON attestation.c_id = customer.c_id  INNER JOIN details ON details.service_id = attestation.a_id   WHERE customer.deleted=0 ${user} ${doc}`;
//     } else if (data.c_s_type == 8) {
//       sql2 = `SELECT customer.c_prefix,customer.c_name,customer.c_mo_no,customer.c_s_type,customer.d_address,visa.v_prefix as a_prefix,visa.v_name as a_name,visa.v_passport as a_certificate_name,(SELECT GROUP_CONCAT(attributes.name SEPARATOR ',') as name FROM attributes where FIND_IN_SET (attributes.attribute_id , visa.v_supporting_doc)) as supporting_doc_name,(SELECT GROUP_CONCAT(attributes.name SEPARATOR ',') as name FROM attributes where FIND_IN_SET (attributes.attribute_id , visa.v_country)) as extra_doc_name FROM customer INNER JOIN visa ON visa.c_id = customer.c_id  INNER JOIN details ON details.service_id = visa.v_id  WHERE customer.deleted=0 ${user} ${doc}`;
//     } else if (data.c_s_type == 17) {
//       sql2 = `SELECT customer.c_prefix,customer.c_name,customer.c_mo_no,customer.c_s_type,customer.d_address,apostille.a_prefix,apostille.a_name,(SELECT GROUP_CONCAT(attributes.name SEPARATOR ',') as name FROM attributes where FIND_IN_SET (attributes.attribute_id , apostille.a_certificate)) as a_certificate_name,(SELECT GROUP_CONCAT(attributes.name SEPARATOR ',') as name FROM attributes where FIND_IN_SET (attributes.attribute_id , apostille.a_supporting_doc)) as supporting_doc_name,(SELECT GROUP_CONCAT(attributes.name SEPARATOR ',') as name FROM attributes where FIND_IN_SET (attributes.attribute_id , apostille.a_extra_doc)) as extra_doc_name FROM customer INNER JOIN apostille ON apostille.c_id = customer.c_id  INNER JOIN details ON details.service_id = apostille.a_id   WHERE customer.deleted=0 ${user} ${doc}`;
//     } else if (data.c_s_type == 20) {
//       sql2 = `SELECT customer.c_prefix,customer.c_name,customer.c_mo_no,customer.c_s_type,customer.d_address,translation.a_prefix,translation.a_name,(SELECT GROUP_CONCAT(attributes.name SEPARATOR ',') as name FROM attributes where FIND_IN_SET (attributes.attribute_id , translation.a_certificate)) as a_certificate_name,(SELECT GROUP_CONCAT(attributes.name SEPARATOR ',') as name FROM attributes where FIND_IN_SET (attributes.attribute_id , translation.a_supporting_doc)) as supporting_doc_name,(SELECT GROUP_CONCAT(attributes.name SEPARATOR ',') as name FROM attributes where FIND_IN_SET (attributes.attribute_id , translation.a_extra_doc)) as extra_doc_name FROM customer INNER JOIN translation ON translation.c_id = customer.c_id  INNER JOIN details ON details.service_id = translation.a_id   WHERE customer.deleted=0 ${user} ${doc}`;
//     } else {
//       sql2 = `SELECT customer.c_prefix,customer.c_name,customer.c_mo_no,customer.c_s_type,customer.d_address,attestation.a_prefix,attestation.a_name,(SELECT GROUP_CONCAT(attributes.name SEPARATOR ',') as name FROM attributes where FIND_IN_SET (attributes.attribute_id , attestation.a_certificate)) as a_certificate_name,(SELECT GROUP_CONCAT(attributes.name SEPARATOR ',') as name FROM attributes where FIND_IN_SET (attributes.attribute_id , attestation.a_supporting_doc)) as supporting_doc_name,(SELECT GROUP_CONCAT(attributes.name SEPARATOR ',') as name FROM attributes where FIND_IN_SET (attributes.attribute_id , attestation.a_extra_doc)) as extra_doc_name FROM customer INNER JOIN attestation ON attestation.c_id = customer.c_id  INNER JOIN details ON details.service_id = attestation.a_id   WHERE customer.deleted=0 ${user} ${doc} UNION SELECT customer.c_prefix,customer.c_name,customer.c_mo_no,customer.c_s_type,customer.d_address,visa.v_prefix as a_prefix,visa.v_name as a_name,visa.v_passport as extra_doc_name,(SELECT GROUP_CONCAT(attributes.name SEPARATOR ',') as name FROM attributes where FIND_IN_SET (attributes.attribute_id , visa.v_supporting_doc)) as supporting_doc_name,(SELECT GROUP_CONCAT(attributes.name SEPARATOR ',') as name FROM attributes where FIND_IN_SET (attributes.attribute_id , visa.v_country)) as a_certificate_name FROM customer INNER JOIN visa ON visa.c_id = customer.c_id  INNER JOIN details ON details.service_id = visa.v_id  WHERE customer.deleted=0 ${user} ${doc} UNION SELECT customer.c_prefix,customer.c_name,customer.c_mo_no,customer.c_s_type,customer.d_address,apostille.a_prefix,apostille.a_name,(SELECT GROUP_CONCAT(attributes.name SEPARATOR ',') as name FROM attributes where FIND_IN_SET (attributes.attribute_id , apostille.a_certificate)) as a_certificate_name,(SELECT GROUP_CONCAT(attributes.name SEPARATOR ',') as name FROM attributes where FIND_IN_SET (attributes.attribute_id , apostille.a_supporting_doc)) as supporting_doc_name,(SELECT GROUP_CONCAT(attributes.name SEPARATOR ',') as name FROM attributes where FIND_IN_SET (attributes.attribute_id , apostille.a_extra_doc)) as extra_doc_name FROM customer INNER JOIN apostille ON apostille.c_id = customer.c_id  INNER JOIN details ON details.service_id = apostille.a_id WHERE customer.deleted=0 ${user} ${doc} UNION SELECT customer.c_prefix,customer.c_name,customer.c_mo_no,customer.c_s_type,customer.d_address,translation.a_prefix,translation.a_name,(SELECT GROUP_CONCAT(attributes.name SEPARATOR ',') as name FROM attributes where FIND_IN_SET (attributes.attribute_id , translation.a_certificate)) as a_certificate_name,(SELECT GROUP_CONCAT(attributes.name SEPARATOR ',') as name FROM attributes where FIND_IN_SET (attributes.attribute_id , translation.a_supporting_doc)) as supporting_doc_name,(SELECT GROUP_CONCAT(attributes.name SEPARATOR ',') as name FROM attributes where FIND_IN_SET (attributes.attribute_id , translation.a_extra_doc)) as extra_doc_name FROM customer INNER JOIN translation ON translation.c_id = customer.c_id  INNER JOIN details ON details.service_id = translation.a_id   WHERE customer.deleted=0 ${user} ${doc}`;
//     }

//     let i_no = Math.floor(Math.random() * 1000);
//     let response2 = await new Promise((resolve, reject) => {
//       con.query(sql2, function (err, result) {
//         if (err) {
//           console.log(err);
//           resolve({ status: 0, message: "Something went to wrong" });
//         } else {
//           if (result.length > 0) {
//             resolve({
//               status: 1,
//               result: result,
//               user_data: response.user_data,
//               settingdata: responsee.settingdata,
//               i_no: i_no,
//               c_s_type: data.c_s_type,
//             });
//           } else {
//             resolve({
//               status: 0,
//               user_type: "Something went wrong...",
//               user_data: response.user_data,
//               settingdata: responsee.settingdata,
//               i_no: i_no,
//               c_s_type: data.c_s_type,
//             });
//           }
//         }
//       });
//     });
//     return response2;
//   } catch (error) {
//     console.log(error);
//     return { status: 0, message: "Invalid Call Try Again" };
//   }
// }
//2103
async function getDispatchApplicate(c_s_type, c_id, doc) {
  try {
    let sql3;
    if (c_s_type == 10) {
      sql3 = `SELECT d1.courier_id,d1.awb_no,a1.a_id,d1.d_c_id,a1.a_prefix,a1.a_name,(SELECT GROUP_CONCAT(attributes.name SEPARATOR ',') as name FROM attributes,details d1 where d1.service_type=${c_s_type} and a1.a_id = d1.service_id and d1.d_c_id = attributes.attribute_id ${doc}) as a_certificate_name,(SELECT GROUP_CONCAT(d1.detail_id SEPARATOR ',') as detail_id FROM details d1 where d1.service_type=${c_s_type} and a1.a_id = d1.service_id ${doc}) as detail,(SELECT GROUP_CONCAT(attributes.name SEPARATOR ',') as name FROM attributes where FIND_IN_SET (attributes.attribute_id , a1.a_supporting_doc)) as supporting_doc_name, (SELECT GROUP_CONCAT(attributes.name SEPARATOR ',') as name FROM attributes where FIND_IN_SET (attributes.attribute_id , a1.a_extra_doc)) as extra_doc_name,(SELECT attributes.name FROM attributes where attributes.attribute_id =d1.courier_id) as courier_company_name FROM attestation a1 LEFT JOIN details d1 ON d1.service_id = a1.a_id WHERE a1.c_id = ${c_id} 
      ${doc}
      GROUP by a1.a_id`;
    } else if (c_s_type == 17) {
      sql3 = `SELECT d1.courier_id,d1.awb_no,a1.a_id,d1.d_c_id,a1.a_prefix,a1.a_name,(SELECT GROUP_CONCAT(attributes.name SEPARATOR ',') as name FROM attributes,details d1 where d1.service_type=${c_s_type} and a1.a_id = d1.service_id and d1.d_c_id = attributes.attribute_id  ${doc} ) as a_certificate_name,(SELECT GROUP_CONCAT(d1.detail_id SEPARATOR ',') as detail_id FROM details d1 where d1.service_type=${c_s_type} and a1.a_id = d1.service_id ${doc}) as detail,(SELECT GROUP_CONCAT(attributes.name SEPARATOR ',') as name FROM attributes where FIND_IN_SET (attributes.attribute_id , a1.a_supporting_doc)) as supporting_doc_name, (SELECT GROUP_CONCAT(attributes.name SEPARATOR ',') as name FROM attributes where FIND_IN_SET (attributes.attribute_id , a1.a_extra_doc)) as extra_doc_name,(SELECT attributes.name FROM attributes where attributes.attribute_id =d1.courier_id) as courier_company_name FROM apostille a1 LEFT JOIN details d1 ON d1.service_id = a1.a_id WHERE a1.c_id = ${c_id} 
      ${doc}
      GROUP by a1.a_id`;
    } else if (c_s_type == 20) {
      sql3 = `SELECT d1.courier_id,d1.awb_no,a1.a_id,d1.d_c_id,a1.a_prefix,a1.a_name,(SELECT GROUP_CONCAT(attributes.name SEPARATOR ',') as name FROM attributes,details d1 where d1.service_type=${c_s_type} and a1.a_id = d1.service_id and d1.d_c_id = attributes.attribute_id ${doc} ) as a_certificate_name,(SELECT GROUP_CONCAT(d1.detail_id SEPARATOR ',') as detail_id FROM details d1 where d1.service_type=${c_s_type} and a1.a_id = d1.service_id ${doc}) as detail,(SELECT GROUP_CONCAT(attributes.name SEPARATOR ',') as name FROM attributes where FIND_IN_SET (attributes.attribute_id , a1.a_supporting_doc)) as supporting_doc_name, (SELECT GROUP_CONCAT(attributes.name SEPARATOR ',') as name FROM attributes where FIND_IN_SET (attributes.attribute_id , a1.a_extra_doc)) as extra_doc_name,(SELECT attributes.name FROM attributes where attributes.attribute_id =d1.courier_id) as courier_company_name FROM translation a1 LEFT JOIN details d1 ON d1.service_id = a1.a_id WHERE a1.c_id = ${c_id} 
      ${doc}
      GROUP by a1.a_id`;
    } else if (c_s_type == 8) {
      sql3 = `SELECT d1.courier_id,d1.awb_no,a1.v_id,d1.d_c_id,a1.v_prefix as a_prefix,a1.v_name as a_name,(SELECT GROUP_CONCAT(attributes.name SEPARATOR ',') as name FROM attributes,details d1 where d1.service_type=${c_s_type} and a1.v_id = d1.service_id and d1.d_c_id = attributes.attribute_id ${doc} ) as a_certificate_name,(SELECT GROUP_CONCAT(d1.detail_id SEPARATOR ',') as detail_id FROM details d1 where d1.service_type=${c_s_type} and a1.v_id = d1.service_id ${doc}) as detail,(SELECT GROUP_CONCAT(attributes.name SEPARATOR ',') as name FROM attributes where FIND_IN_SET (attributes.attribute_id , a1.v_supporting_doc)) as supporting_doc_name, a1.v_passport as extra_doc_name,(SELECT attributes.name FROM attributes where attributes.attribute_id =d1.courier_id) as courier_company_name FROM visa a1 LEFT JOIN details d1 ON d1.service_id = a1.v_id WHERE a1.c_id = ${c_id}  ${doc}
      GROUP by a1.v_id`;
    }

    let response3 = await new Promise((resolve, reject) => {
      con.query(sql3, async function (err3, result3) {
        if (err3) {
          console.log(err3);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result3.length > 0) {
            console.log("resultresult", result3);
            let a_prefix = [];
            let a_name = [];
            let a_certificate_name = [];
            let supporting_doc_name = [];
            let extra_doc_name = [];
            let detailId = [];
            let awb_no;
            let courier_id;
            let courier_company_name;
            for (let j = 0; j < result3.length; j++) {
              console.log(
                result3[j].a_certificate_name,
                result3[j].extra_doc_name,
                "truelidvne@gmail.com"
              );
              a_prefix.push(result3[j].a_prefix);
              a_name.push(result3[j].a_name);
              if (result3[j].a_certificate_name) {
                a_certificate_name.push(result3[j].a_certificate_name);
              }
              if (result3[j].supporting_doc_name) {
                supporting_doc_name.push(result3[j].supporting_doc_name);
              }
              if (result3[j].extra_doc_name) {
                extra_doc_name.push(result3[j].extra_doc_name);
              }
              awb_no = result3[j].awb_no;
              if (result3[j].courier_id) {
                courier_id = result3[j].courier_id;
              }
              if (result3[j].courier_company_name) {
                courier_company_name = result3[j].courier_company_name;
              }
              if (result3[j].detail) {
                detailId.push(result3[j].detail);
              }
            }
            console.log(a_certificate_name, "str");
            resolve({
              a_prefix: a_prefix.join(","),
              a_name: a_name.join(","),
              a_certificate_name: a_certificate_name.join(","),
              supporting_doc_name: supporting_doc_name.join(","),
              extra_doc_name: extra_doc_name.join(","),
              detailId: detailId.join(","),
              awb_no: awb_no,
              courier_id: courier_id,
              courier_company_name: courier_company_name,
            });
          } else {
            console.log(err3);
            resolve({ status: 1, message: "No data found" });
          }
        }
      });
    });
    console.log("response3response3response3", response3);
    return response3;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}
//2103
async function getdispatch(data) {
  try {
    if (data.u_id == 1) {
      sql = `select * from gsetting`;
    } else {
      sql = `SELECT *,branch.b_hsn_code as hsn_code,b_bank_details as bank_details,company_name as c_name,branch.b_gstno as c_gstno FROM users,branch WHERE users.branch_id=branch.branch_id AND u_id=${data.u_id} AND users.deleted=0 AND branch.deleted=0`;
    }

    let responsee = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            con.query(sql, function (err, res) {
              if (err) {
                console.log(err);
              } else {
                if (res.length > 0) {
                  resolve({
                    settingdata: res[0],
                  });
                }
              }
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });

    sqll = `SELECT * FROM users WHERE u_id = ${data.u_id}`;

    let response = await new Promise((resolve, reject) => {
      con.query(sqll, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            result.forEach(function (result) {
              resolve({
                status: 1,
                user_type: result.user_type,
                user_data: result,
              });
            });
          } else {
            resolve({
              status: 0,
              user_type: "Something went wrong...",
            });
          }
        }
      });
    });
    let courier_id = "";
    if (
      typeof data.courier_id != "undefined" &&
      data.courier_id != "" &&
      data.courier_id != 0
    ) {
      courier_id = ` and d1.courier_id = ${data.courier_id}`;
    }
    let doc = "";
    if (data.status == 26) {
      doc = ` and STR_TO_DATE(d1.dispatching_date,"%y-%m-%d")= STR_TO_DATE('${data.c_date}',"%y-%m-%d") and  d1.status_id = 26`;
    } else {
      doc = ` and STR_TO_DATE(d1.delivery_date,"%y-%m-%d")= STR_TO_DATE('${data.c_date}',"%y-%m-%d") and  d1.status_id = 24`;
    }
    let user = "";
    if (response.user_type == 0) {
      user = ` and c1.branch_id=${data.branch_name}`;
    } else if (response.user_type == 1) {
      user = ` and (c1.foreign_branch = ${data.branch_id} OR c1.branch_id = ${data.branch_id})`;
    } else if (
      response.user_type == 3 &&
      response.user_data.d_a_permission != 0
    ) {
      user = ` and (c1.foreign_branch = ${data.branch_id} OR c1.branch_id = ${data.branch_id})`;
    } else {
      user = ` and (c1.u_id=${data.u_id} or c1.foreign_branchuser=${data.u_id})`;
    }
    if (data.c_s_type == 10) {
      sql2 = `SELECT c1.city,c1.pincode,c1.c_id,c1.c_prefix,c1.c_name,c1.c_mo_no,c1.c_s_type,c1.d_address,c1.c_s_type,c1.tracking_id
              FROM customer c1
              INNER JOIN attestation a1 ON a1.c_id = c1.c_id 
              INNER JOIN details d1 ON d1.service_id = a1.a_id and d1.service_type = 10
            WHERE c1.deleted=0 and c1.is_cancel = 0 and c1.is_block = 1 ${user} ${doc} ${courier_id} group by c1.c_id`;
      // and c1.branch_id=1 and STR_TO_DATE(d1.delivery_date,"%y-%m-%d")= STR_TO_DATE('01-03-2023',"%y-%m-%d") and d1.status_id = 24 group by c1.c_id`;
    } else if (data.c_s_type == 17) {
      sql2 = `SELECT c1.city,c1.pincode,c1.c_id,c1.c_prefix,c1.c_name,c1.c_mo_no,c1.c_s_type,c1.d_address,c1.c_s_type,c1.tracking_id 
      FROM customer c1
      INNER JOIN apostille a1 ON a1.c_id = c1.c_id 
      INNER JOIN details d1 ON d1.service_id = a1.a_id and d1.service_type = 17
      WHERE c1.deleted=0 and c1.is_cancel = 0 and c1.is_block = 1 ${user} ${doc} ${courier_id} group by c1.c_id`;
      // and c1.branch_id=1 and STR_TO_DATE(d1.delivery_date,"%y-%m-%d")= STR_TO_DATE('01-03-2023',"%y-%m-%d") and d1.status_id = 24 group by c1.c_id`;
    } else if (data.c_s_type == 20) {
      sql2 = `SELECT c1.city,c1.pincode,c1.c_id,c1.c_prefix,c1.c_name,c1.c_mo_no,c1.c_s_type,c1.d_address,c1.c_s_type,c1.tracking_id 
        FROM customer c1
        INNER JOIN translation a1 ON a1.c_id = c1.c_id 
        INNER JOIN details d1 ON d1.service_id = a1.a_id and d1.service_type = 20
        WHERE c1.deleted=0 and c1.is_cancel = 0 and c1.is_block = 1 ${user} ${doc} ${courier_id} group by c1.c_id`;
      // and c1.branch_id=1 and STR_TO_DATE(d1.delivery_date,"%y-%m-%d")= STR_TO_DATE('01-03-2023',"%y-%m-%d") and d1.status_id = 24 group by c1.c_id`;
    } else if (data.c_s_type == 8) {
      // sql2 = `SELECT c1.c_id,c1.c_prefix,c1.c_name,c1.c_mo_no,c1.c_s_type,c1.d_address,
      //     (SELECT GROUP_CONCAT(visa.v_prefix SEPARATOR ',') as name FROM visa,details where visa.c_id = c1.c_id  AND details.service_id = visa.v_id and details.status_id = 24 and STR_TO_DATE(details.delivery_date,"%y-%m-%d")= STR_TO_DATE('01-03-2023',"%y-%m-%d")) as applicate_prefix,
      //     (SELECT GROUP_CONCAT(visa.v_name SEPARATOR ',') as name FROM visa,details where visa.c_id = c1.c_id  AND details.service_id = visa.v_id and details.status_id = 24 and STR_TO_DATE(details.delivery_date,"%y-%m-%d")= STR_TO_DATE('01-03-2023',"%y-%m-%d")) as applicate_name
      //     FROM customer c1
      //     INNER JOIN visa a1 ON a1.c_id = c1.c_id
      //     INNER JOIN details d1 ON d1.service_id = a1.v_id
      //     WHERE c1.deleted=0 and c1.branch_id=1 and STR_TO_DATE(d1.delivery_date,"%y-%m-%d")= STR_TO_DATE('01-03-2023',"%y-%m-%d") and d1.status_id = 24 group by c1.c_id`;
      sql2 = `SELECT c1.city,c1.pincode,c1.c_id,c1.c_prefix,c1.c_name,c1.c_mo_no,c1.c_s_type,c1.d_address,c1.c_s_type,c1.tracking_id
      FROM customer c1
      INNER JOIN visa a1 ON a1.c_id = c1.c_id 
      INNER JOIN details d1 ON d1.service_id = a1.v_id  and d1.service_type = 8
      WHERE c1.deleted=0 and c1.is_cancel = 0 and c1.is_block = 1 ${user} ${doc} ${courier_id} group by c1.c_id`;
      // and c1.branch_id=1 and STR_TO_DATE(d1.delivery_date,"%y-%m-%d")= STR_TO_DATE('01-03-2023',"%y-%m-%d") and d1.status_id = 24 group by c1.c_id`;
    } else {
      sql2 = `SELECT c1.city,c1.pincode,c1.c_id,c1.c_prefix,c1.c_name,c1.c_mo_no,c1.c_s_type,c1.d_address,c1.c_s_type,c1.tracking_id
      FROM customer c1
      INNER JOIN attestation a1 ON a1.c_id = c1.c_id 
      INNER JOIN details d1 ON d1.service_id = a1.a_id and d1.service_type = 10
    WHERE c1.deleted=0 and c1.is_cancel = 0 and c1.is_block = 1 ${user} ${doc} ${courier_id} group by c1.c_id 
    UNION 
    SELECT c1.city,c1.pincode,c1.c_id,c1.c_prefix,c1.c_name,c1.c_mo_no,c1.c_s_type,c1.d_address,c1.c_s_type,c1.tracking_id 
      FROM customer c1
      INNER JOIN apostille a1 ON a1.c_id = c1.c_id 
      INNER JOIN details d1 ON d1.service_id = a1.a_id and d1.service_type = 17
      WHERE c1.deleted=0 and c1.is_cancel = 0 and c1.is_block = 1 ${user} ${doc} ${courier_id} group by c1.c_id
      UNION
      SELECT c1.city,c1.pincode,c1.c_id,c1.c_prefix,c1.c_name,c1.c_mo_no,c1.c_s_type,c1.d_address,c1.c_s_type,c1.tracking_id 
        FROM customer c1
        INNER JOIN translation a1 ON a1.c_id = c1.c_id 
        INNER JOIN details d1 ON d1.service_id = a1.a_id and d1.service_type = 20
        WHERE c1.deleted=0 and c1.is_cancel = 0 and c1.is_block = 1 ${user} ${doc} ${courier_id} group by c1.c_id
        UNION
        SELECT c1.city,c1.pincode,c1.c_id,c1.c_prefix,c1.c_name,c1.c_mo_no,c1.c_s_type,c1.d_address,c1.c_s_type,c1.tracking_id
      FROM customer c1
      INNER JOIN visa a1 ON a1.c_id = c1.c_id 
      INNER JOIN details d1 ON d1.service_id = a1.v_id  and d1.service_type = 8
      WHERE c1.deleted=0 and c1.is_cancel = 0 and c1.is_block = 1 ${user} ${doc} ${courier_id} group by c1.c_id
    `;
    }

    let i_no = Math.floor(Math.random() * 1000);
    let response2 = await new Promise((resolve, reject) => {
      let customer = [];
      con.query(sql2, async function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            customer = result;
            let res = await new Promise(async (resolve, reject) => {
              for (let i = 0; i < customer.length; i++) {
                let resss = await getDispatchApplicate(
                  customer[i].c_s_type,
                  customer[i].c_id,
                  doc
                );
                customer[i] = {
                  ...customer[i],
                  applicate_prefix: resss.a_prefix,
                  applicate_name: resss.a_name,
                  a_certificate_name: resss.a_certificate_name,
                  supporting_doc_name: resss.supporting_doc_name,
                  extra_doc_name: resss.extra_doc_name,
                  detailId: resss.detailId,
                  awb_no: resss.awb_no,
                  courier_id: resss.courier_id,
                  courier_company_name: resss.courier_company_name,
                };

                if (customer.length - 1 == i) {
                  resolve({
                    result: customer,
                  });
                }
              }
            });
            resolve({
              status: 1,
              result: res.result,
              user_data: response.user_data,
              settingdata: responsee.settingdata,
              i_no: i_no,
              c_s_type: data.c_s_type,
            });
          } else {
            resolve({
              status: 0,
              user_type: "No data Found",
              user_data: response.user_data,
              settingdata: responsee.settingdata,
              i_no: i_no,
              c_s_type: data.c_s_type,
            });
          }
        }
      });
    });

    return response2;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function dispatchreportspdf(data) {
  try {
    let response = await new Promise(async (resolve, reject) => {
      let newobj = {
        c_date: data.c_date,
        branch_name: data.branch_name,
        branch_id: data.branch_id,
        u_id: data.u_id,
        c_s_type: data.c_s_type,
        created_id: data.created_id,
        status: data.status,
      };
      let dispatch_data = await getdispatch(newobj);

      let imageAsBase64;
      if (
        fs.existsSync(
          `./public/Assets/images/${dispatch_data.user_data.u_id == 1 ? "adminlogo" : "branchlogo"
          }/${dispatch_data.settingdata.logo}`
        )
      ) {
        imageAsBase64 = fs.readFileSync(
          `./public/Assets/images/${dispatch_data.user_data.u_id == 1 ? "adminlogo" : "branchlogo"
          }/${dispatch_data.settingdata.logo}`,
          { encoding: "base64" }
        );
      }

      pdf
        .create(pdfTemplate4({ ...dispatch_data, data: data }, imageAsBase64), {
          childProcessOptions: {
            env: {
              OPENSSL_CONF: "/dev/null",
            },
            pageFormat: "A4",
          },
        })
        .toFile(
          `${__dirname}/public/Assets/dispatchreports_pdf/dispatchreports_${data.i_no}.pdf`,
          (err) => {
            if (err) {
              return console.log("error", err);
            }
            resolve({
              ino: data.i_no,
              message: "done",
            });
          }
        );
    });

    return response;
  } catch (err) {
    return { status: 0, message: "Invalid Call Try Again" };
  }
}


async function getCashflowDetailsPdf(data) {
  try {
    let response = await new Promise(async (resolve, reject) => {
      let cashflow_data = await getpaymentDataByCashflow({ cashflow_id: data.cashflow_id });

      pdf
        .create(pdfCashflowDetail({ cashflow_data: cashflow_data.data, data: data }), {
          childProcessOptions: {
            env: {
              OPENSSL_CONF: "/dev/null"
            },
            pageFormat: "A4"
          }
        })
        .toFile(
          `${__dirname}/public/Assets/cashflowreports_pdf/cashflow_${data.cashflow_id}.pdf`,
          (err) => {
            if (err) {
              return console.log("error", err);
            }
            resolve({
              ino: data.cashflow_id,
              message: "done"
            });
          }
        );
    });

    return response;
  } catch (err) {
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

//cash-flow
async function getbranchuser(data) {
  try {
    sql = `SELECT u_name,u_id,user_type FROM users WHERE users.branch_id =${data.id} and deleted = 0 ORDER BY u_name ASC`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              result: result,
            });
          } else {
            resolve({
              status: 0,
              result: [],
            });
          }
        }
      });
    });
    return response;
  } catch (err) {
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function getcashpaymentamount(data) {
  try {
    // sql = `SELECT receive_amt FROM payment WHERE deleted=0 AND mode_id = 160 AND created_id = ${data.u_id};`;
    sql = `SELECT payment.*,users.u_name as paymentBy,customer.c_name,customer.c_prefix FROM payment left join users on users.u_id = payment.created_id left join customer on customer.c_id = payment.c_id WHERE payment.deleted=0 AND payment.mode_id = 160 AND payment.created_id = ${data.u_id} and payment.is_cashflow_approved=0;`;

    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          let sum = 0;
          if (result.length > 0) {
            result.forEach(function (result) {
              sum += parseInt(result.receive_amt);
            });

            resolve({
              status: 1,
              result: sum,
              data: result,
            });
          } else {
            resolve({
              status: 0,
              result: 0,
              data: [],
            });
          }
        }
      });
    });
    // sql1 = `SELECT amount FROM cash_flow WHERE deleted = 0 AND u_id = ${data.u_id} AND branch_id= ${data.b_id}`;

    // let response1 = await new Promise((resolve, reject) => {
    //   con.query(sql1, function (err, result) {
    //     if (err) {
    //       console.log(err);
    //       resolve({ status: 0, message: "Something went to wrong" });
    //     } else {
    //       let sum = 0;
    //       if (result.length >= 0) {
    //         result.forEach(function (result) {
    //           sum += parseInt(result.amount);
    //         });

    //         resolve({
    //           status: 1,
    //           result: response.result - sum,
    //           message: "done...",
    //         });
    //       } else {
    //         resolve({
    //           status: 0,
    //           result: 0,
    //         });
    //       }
    //     }
    //   });
    // });
    return response;
  } catch (err) {
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function insertcashflow(data) {
  try {
    sql = `INSERT INTO cash_flow(branch_id,u_id,date,t_type,amount,remark,login_u_id,login_b_id,payment_id) VALUES (${data.branch_id
      },${data.u_id},'${data.date}','${data.t_type}','${data.amount
      }','${mysql_real_escape_string(data.remark)}',${data.login_u_id},${data.login_b_id
      },'${data.paymentId.toString()}')`;

    let response = await new Promise((resolve, reject) => {
      con.query(sql, async function (err, result) {
        if (err) {
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.affectedRows > 0) {
            for (let i = 0; i < data.paymentId.length; i++) {
              let updatepayment = `update payment set is_cashflow_approved = 1 where payment_id = ${data.paymentId[i]}`;
              let res = await new Promise((resolve, reject) => {
                con.query(
                  updatepayment,
                  async function (updatepayment_err11, updatepayment_result11) {
                    if (updatepayment_err11) {
                      console.log(updatepayment_err11);
                      resolve({
                        status: 0,
                        message: "Something went to wrong",
                      });
                    } else {
                      if (updatepayment_result11.affectedRows > 0) {
                        resolve({
                          status: 1,
                          message: "Payment updated successfully...",
                        });
                      } else {
                        resolve({
                          status: 0,
                          message: "Something went to wrong",
                        });
                      }
                    }
                  }
                );
              });
            }
            if (data.user_type != 0) {
              let senderMailSetting = await sendmessage.getEmailSetting(
                data.u_id
              );
              let sql1 = `select u_name FROM users WHERE u_id = ${data.login_u_id}`;
              let loginUser = await new Promise((resolve, reject) => {
                con.query(sql1, async function (err11, result11) {
                  if (err11) {
                    console.log(err11);
                    resolve({
                      status: 0,
                      message: "Something went to wrong",
                    });
                  } else {
                    if (result11.length > 0) {
                      resolve({ status: 1, result: result11[0].u_name });
                    } else {
                      resolve({
                        status: 0,
                        message: "Something went to wrong",
                      });
                    }
                  }
                });
              });
              let sql2 = `select u_name FROM users WHERE u_id = ${data.u_id}`;
              let userName = await new Promise((resolve, reject) => {
                con.query(sql2, async function (err2, result2) {
                  if (err2) {
                    console.log(err2);
                    resolve({
                      status: 0,
                      message: "Something went to wrong",
                    });
                  } else {
                    if (result2.length > 0) {
                      resolve({ status: 1, result: result2[0].u_name });
                    } else {
                      resolve({
                        status: 0,
                        message: "Something went to wrong",
                      });
                    }
                  }
                });
              });
              let sqlll = `SELECT u_email,u_name FROM users WHERE u_id = 1 `;
              let adminmail = await new Promise((resolve, reject) => {
                con.query(sqlll, async function (err1, result1) {
                  if (err1) {
                    console.log(err1);
                    resolve({
                      status: 0,
                      message: "Something went to wrong",
                    });
                  } else {
                    if (result1.length > 0) {
                      resolve({ status: 1, result: result1[0] });
                    } else {
                      resolve({
                        status: 0,
                        message: "Something went to wrong",
                      });
                    }
                  }
                });
              });
              let table = `<div>
              <table style="border-collapse: collapse;" >
              <tr>
              <th style="border: 1px solid #333;padding:5px;"> Date </th>
                <th style="border: 1px solid #333;padding:5px;">  User Name </th>
                <th style="border: 1px solid #333;padding:5px;"> Amount </th>
                <th style="border: 1px solid #333;padding:5px;"> Transaction Type </th>
                <th style="border: 1px solid #333;padding:5px;"> Remark </th>
              </tr>
              ${`<tr><td style="border: 1px solid #333;padding:5px;"> ${data.date} </td>
                <td style="border: 1px solid #333;padding:5px;"> ${userName.result} </td>
                <td style="border: 1px solid #333;padding:5px;"> ${data.amount} </td>
                <td style="border: 1px solid #333;padding:5px;"> ${data.t_name} </td>
                <td style="border: 1px solid #333;padding:5px;"> ${data.remark} </td>`}
              </table>
              </div>`;
              let message = await sendmessage.getTemplate(292);

              message.template = message.template.replace(
                "{:name:}",
                adminmail.result.u_name
              );

              message.template = message.template.replace(
                "{:loginuser:}",
                loginUser.result
              );

              message.template = message.template.replace("{:table:}", table);
              if (message.status != 0) {
                let mess =
                  (message.header == 1
                    ? typeof senderMailSetting.email_template_header !=
                      undefined && senderMailSetting.email_template_header != undefined &&
                      senderMailSetting.email_template_header != null
                      ? senderMailSetting.email_template_header
                      : ""
                    : "") +
                  message.template +
                  (message.b_d_id != 0
                    ? message.b_d_id == 1
                      ? senderMailSetting.gst_bankdetails
                      : message.b_d_id == 2
                        ? senderMailSetting.ngst_bankdetails
                        : message.b_d_id == 3
                          ? senderMailSetting.general_bankdetails
                          : ""
                    : "") +
                  (message.footer == 1
                    ? senderMailSetting.email_template_footer
                    : "") +
                  (message.signature == 1
                    ? senderMailSetting.email_signature
                    : "");

                let sendmessagenow = sendmessage.customermessagesend(
                  senderMailSetting,
                  adminmail.result.u_email,
                  mess,
                  message.subject,
                  "", //CCMailSetting.e_username,  // user mail
                  "", // reply mail
                  1
                );

                resolve({
                  status: 1,
                  message: "Cash flow inserted successfully",
                });
              }
            } else {
              resolve({
                status: 1,
                message: "Cash flow inserted successfully",
              });
            }
          } else {
            resolve({
              status: 0,
              result: 0,
            });
          }
        }
      });
    });
    return response;
  } catch (err) {
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function getpaymentDataByCashflow(data) {
  try {
    sql = `Select payment_id from cash_flow where cashflow_id =${data.cashflow_id}`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, async function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            let paymentIds = result[0].payment_id.split(",");
            console.log(paymentIds, "%%%%%%%%%%%%%%");
            let record = [];
            let paymentdata = "";
            if (paymentIds != "") {
              for (j = 0; j < paymentIds.length; j++) {
                paymentdata += `select payment.*,users.u_name as paymentBy,customer.c_name,customer.c_prefix from payment left join users on users.u_id = payment.created_id left join customer on customer.c_id = payment.c_id WHERE payment.deleted=0 AND payment_id = ${paymentIds[j]};`;
              }
              con.query(
                paymentdata,
                function (paymentdata_err, paymentdata_result) {
                  if (paymentdata_err) {
                    console.log(paymentdata_err);
                    resolve({ status: 0, message: "Something went to wrong" });
                  } else {
                    if (paymentdata_result.length == 1) {
                      paymentdata_result.forEach(function (res) {
                        record.push(res);
                        resolve({
                          status: 1,
                          data: record,
                        });
                      });
                    }
                    if (paymentdata_result.length > 0) {
                      paymentdata_result.forEach(function (result) {
                        if (result.length > 0) {
                          result.forEach(function (res) {
                            record.push(res);
                            resolve({
                              status: 1,
                              data: record,
                            });
                          });
                        } else {
                          resolve({
                            status: 1,
                            data: record,
                          });
                        }
                      });
                    } else {
                      resolve({
                        status: 0,
                        data: record,
                      });
                    }
                  }
                }
              );
            } else {
              resolve({
                status: 0,
                data: [],
                message: "This cashflow is from Old Cashflow.",
              });
            }
          } else {
            resolve({
              status: 0,
              result: [],
            });
          }
        }
      });
    });
    return response;
  } catch (err) {
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function searchcashflow(data) {
  try {
    sql = `SELECT *,(select name from attributes where attributes.attribute_id = cash_flow.t_type )as t_name,(SELECT COUNT(*) FROM cash_flow WHERE deleted =0)as trows,(SELECT b_name FROM branch WHERE branch_id = ${data.branch_id} AND deleted =0 )as b_name,(SELECT u_name FROM users WHERE users.u_id = cash_flow.u_id AND deleted =0)as u_name FROM cash_flow WHERE deleted=0 `;

    if (typeof data.branch_id != "undefined" && data.branch_id != "") {
      sql += ` and cash_flow.branch_id=${data.branch_id}`;
    }
    if (typeof data.u_id != "undefined" && data.u_id != "" && data.u_id != 0) {
      sql += ` and cash_flow.u_id=${data.u_id}`;
    }
    if (typeof data.s_date != "undefined" && data.s_date != "") {
      sql += ` and STR_TO_DATE(cash_flow.date,"%d-%m-%Y")>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y")`;
    }
    if (typeof data.e_date != "undefined" && data.e_date != "") {
      sql += ` and STR_TO_DATE(cash_flow.date,"%d-%m-%Y")<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y")`;
    }

    sql1 = sql;
    sql += ` order by cashflow_id DESC limit ${(data.page - 1) * data.perpage
      },${data.perpage}`;

    let response = await new Promise((resolve, reject) => {
      con.query(sql1, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            con.query(sql, function (err, res) {
              if (err) {
                console.log(err);
              } else {
                if (res.length > 0) {
                  resolve({
                    status: 1,
                    result: res,
                    t_rows: result.length,
                  });
                }
              }
            });
          } else {
            resolve({
              status: 0,
              result: [],
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function getallcashflow() {
  try {
    sql = `SELECT *,(select name from attributes where attributes.attribute_id = cash_flow.t_type )as t_name,(SELECT u_name FROM users WHERE users.u_id = cash_flow.u_id AND deleted =0)as u_name FROM cash_flow WHERE deleted=0 and read_status = 0`;

    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              counter: result.length,
              data: result,
            });
          } else {
            resolve({
              status: 0,
              counter: 0,
              data: [],
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function readCashflowNotification(data) {
  try {
    sql = `Update cash_flow set read_status = 1 WHERE cashflow_id = ${data.cashflow_id} and deleted=0 and read_status = 0 `;

    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.affectedRows > 0) {
            resolve({
              status: 1,
            });
          } else {
            resolve({
              status: 0,
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function deletecashflow(data) {
  try {
    sql = `UPDATE cash_flow SET deleted = 1 WHERE cashflow_id = ${data.id}`;

    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.affectedRows > 0) {
            resolve({
              status: 1,
              message: "Cashflow Deleted Successfully...",
            });
          } else {
            resolve({
              status: 0,
              result: 0,
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function searchTaskData(data) {
  try {
    let task = [];
    let taskList = [];
    let record = [];
    getuserquery = `select * from users where u_id=${data.u_id} and deleted=0`;
    let response = await new Promise((resolve, reject) => {
      con.query(getuserquery, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            if (result[0].user_type == 1) {
              getallchilduser = `select * from users where ((p_u_id=${data.u_id} OR p_u_id=1) and branch_id=${result[0].branch_id}) and deleted=0`;
              con.query(getallchilduser, function (err, res) {
                if (err) {
                  console.log(err);
                  resolve({ status: 0, message: "Something went to wrong" });
                } else {
                  res.forEach(function (r) {
                    record.push(r.u_id);
                  });
                  resolve({
                    record: record,
                    type: result[0].user_type,
                  });
                }
              });
            } else {
              resolve({
                type: result[0].user_type,
              });
            }
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    if (response.type == 1) {
      sql = `SELECT *,(SELECT COUNT(*) FROM task where (task.u_id IN(${record}) or task.allocate_id IN(${record})) and task.deleted=0 and users.deleted=0) as trows,(SELECT u_name FROM users WHERE users.u_id=task.u_id)as createdBy,(SELECT u_name FROM users WHERE users.u_id=task.allocate_id)as allocateTo FROM task ,users WHERE task.deleted=0 and users.deleted=0 and (task.u_id IN(${record}) or task.allocate_id IN(${record})) `;
    } else {
      sql = `SELECT *,(SELECT COUNT(*) FROM task where task.deleted=0) as trows,(SELECT u_name FROM users WHERE users.u_id=task.u_id)as createdBy,(SELECT u_name FROM users WHERE users.u_id=task.allocate_id)as allocateTo FROM task WHERE deleted = 0`;
      if (response.type == 3) {
        sql += ` and (u_id=${data.u_id} OR allocate_id=${data.u_id})`;
      }
    }
    if (
      typeof data.t_status != "undefined" &&
      data.t_status != "" &&
      data.t_status != 5
    ) {
      sql += ` and task.t_status=${data.t_status}`;
    }
    if (
      typeof data.priority != "undefined" &&
      data.priority != "" &&
      data.priority != 5 &&
      data.priority != 0
    ) {
      sql += ` and task.priority=${data.priority}`;
    }

    sql1 = sql;
    if (response.type == 1) {
      sql += ` GROUP by task.t_id`;
    }
    countsql = sql;
    sql += ` ORDER BY priority DESC limit ${(data.page - 1) * data.perpage},${data.perpage
      }`;

    let response1 = await new Promise((resolve, reject) => {
      con.query(sql, function (err, lres) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (lres.length > 0) {
            let i = 0;
            for (; i < lres.length; i += 1) {
              task.push({
                t_id: lres[i].t_id,
                subject: lres[i].subject,
                sdate: lres[i].sdate,
                edate: lres[i].edate,
                priority: lres[i].priority,
                description: lres[i].description,
                u_id: lres[i].u_id,
                allocate_id: lres[i].allocate_id,
                t_status: lres[i].t_status,
                t_branch_id: lres[i].t_branch_id,
                createdBy: lres[i].createdBy,
                allocateTo: lres[i].allocateTo,
                trows: lres[i].trows,
                task_image: [],
              });
              taskList.push({
                t_id: lres[i].t_id,
                subject: lres[i].subject,
                sdate: lres[i].sdate,
                edate: lres[i].edate,
                priority: lres[i].priority,
                description: lres[i].description,
                u_id: lres[i].u_id,
                allocate_id: lres[i].allocate_id,
                t_status: lres[i].t_status,
                t_branch_id: lres[i].t_branch_id,
                createdBy: lres[i].createdBy,
                allocateTo: lres[i].allocateTo,
                trows: lres[i].trows,
                task_image: [],
              });
            }

            Object.keys(task).map((kk) => {
              sql1 = `SELECT * FROM task_attachment  WHERE  task_attachment.t_id = ${task[kk].t_id}`;

              con.query(sql1, function (errsql1, sql1res) {
                if (errsql1) {
                  console.log(errsql1);
                } else {
                  let taskimg = [];
                  Object.keys(sql1res).map((ak) => {
                    taskimg.push(sql1res[ak]);
                  });

                  taskList[kk].task_image = taskimg;
                  if (kk == task.length - 1) {
                    con.query(countsql, function (err, cres) {
                      if (err) {
                        console.log(err);
                      } else {
                        if (cres.length > 0) {
                          resolve({
                            status: 1,
                            data: taskList,
                            t_rows: cres.length,
                          });
                        }
                      }
                    });
                  }
                }
              });
            });
          } else {
            resolve({
              status: 0,
              data: [],
            });
          }
        }
      });
    });
    return response1;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

//Invoice
//1803
async function getinvoicedata(data) {
  try {
    // if (data.u_id == 1) {
    //   sql = `select * from gsetting`;
    // } else {
    sql = `SELECT *,attributes.name as state_name,attributes.TIN_number,branch.b_hsn_code as hsn_code,b_bank_details as bank_details,b_nongst_bank_deatils as nongst_bank_details,company_name as c_name,branch.b_gstno as c_gstno FROM users,branch,attributes WHERE attributes.attribute_id = branch.state_id AND users.branch_id=branch.branch_id AND u_id=${data.uid} AND users.deleted=0 AND branch.deleted=0`;
    // }
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              settingdata: result[0],
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    getuserdata = `select * from users where u_id=${data.uid} and deleted=0`;
    let userdata = await new Promise((resolve, reject) => {
      con.query(getuserdata, function (err, userres) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (userres.length > 0) {
            if (userres[0].user_type == 3) {
              getnuserquery = `select * from users where u_id=${userres[0].p_u_id} and deleted=0`;
            } else {
              getnuserquery = `select * from users where u_id=${data.uid} and deleted=0`;
            }
            con.query(getnuserquery, function (err, nuserres) {
              if (err) {
                console.log(err);
                resolve({ status: 0, message: "Something went to wrong" });
              } else {
                resolve({
                  // userdata: nuserres[0],
                  userdata: userres[0],
                });
              }
            });
          }
        }
      });
    });
    // sql1 = `SELECT  *,(SELECT name FROM attributes WHERE attributes.attribute_id = customer.c_state)as state,(SELECT TIN_number FROM attributes WHERE attributes.attribute_id = customer.c_state)as TIN_number,(SELECT b_name FROM branch WHERE branch.branch_id = customer.branch_id)as bname,(SELECT u_name FROM users WHERE users.u_id = customer.created_id)as cname,(SELECT b_name FROM branch WHERE branch.branch_id = customer.created_branch_id)as cbname,(SELECT invoice_signature FROM users WHERE users.u_id = ${data.uid})as invoice_signature FROM customer WHERE deleted = 0 AND c_id=${data.id}`;

    sql1 = `select customer.*,a1.name as state,a1.TIN_number as TIN_number,b1.b_name as bname,u1.u_name as cname,b2.b_name as cbname,u2.invoice_signature as invoice_signature from customer left join attributes a1 on a1.attribute_id = customer.c_state left join branch b1 on b1.branch_id = customer.branch_id left join users u1 on u1.u_id = customer.created_id left join branch b2 on b2.branch_id = customer.created_branch_id left join users u2 on u2.u_id =  ${data.uid} where customer.deleted = 0 and customer.c_id = ${data.id};`;
    let response1 = await new Promise((resolve, reject) => {
      con.query(sql1, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            result.forEach(async function (result) {
              sql = `SELECT * FROM branch WHERE branch_id=${result.branch_id}`;
              let branchIdRes = await new Promise((resolve, reject) => {
                con.query(sql, function (err, result) {
                  if (err) {
                    console.log(err);
                    resolve({ status: 0, message: "Something went to wrong" });
                  } else {
                    if (result.length > 0) {
                      resolve({
                        status: 1,
                        branchid: result[0].state_id,
                      });
                    } else {
                      resolve({
                        status: 0,
                        branchid: 0,
                        message: "Something went to wrong",
                      });
                    }
                  }
                });
              });
              resolve({
                c_s_type: result.c_s_type,
                customerdata: { ...result, b_state_id: branchIdRes.branchid },
              });
            });
          } else {
            resolve({
              c_s_type: 0,
              customerdata: [],
            });
          }
        }
      });
    });
    //1503
    if (response1.c_s_type == 10) {
      //1603
      // sql2 = `SELECT *,(SELECT GROUP_CONCAT(attributes.name SEPARATOR ',') as name FROM attributes where FIND_IN_SET (attributes.attribute_id , attestation.a_certificate)) as cerficates,(SELECT name FROM attributes WHERE attributes.attribute_id =attestation.a_type)as attestation_type,(SELECT name FROM attributes WHERE attributes.attribute_id =attestation.a_country) as country_name,(SELECT c_name FROM customer WHERE customer.c_id =attestation.c_id)as customer_name,(SELECT c_date FROM customer WHERE customer.c_id =attestation.c_id)as r_date FROM attestation RIGHT JOIN details ON attestation.a_id=details.service_id WHERE attestation.c_id=${data.id} AND details.service_type=10 AND details.deleted=0 AND attestation.deleted=0 GROUP by attestation.a_id;`;

      sql2 = `Select attestation.*,details.*,(SELECT GROUP_CONCAT(attributes.name SEPARATOR ',') as name FROM attributes where FIND_IN_SET (attributes.attribute_id , attestation.a_certificate)) as cerficates,a2.name as attestation_type,customer.c_name as customer_name,customer.c_date as r_date,a3.name as country_name from attestation left join details on details.service_id = attestation.a_id  left join attributes a2 on a2.attribute_id =attestation.a_type left join attributes a3 on a3.attribute_id = attestation.a_country left join customer on customer.c_id = attestation.c_id where attestation.c_id=${data.id} AND details.service_type=10 AND details.deleted=0 AND attestation.deleted=0 GROUP by attestation.a_id;`;
    } else if (response1.c_s_type == 8) {
      //2303
      sql2 = `SELECT *,(SELECT name FROM attributes WHERE attributes.attribute_id =details.d_c_id) as v_country,(SELECT GROUP_CONCAT(attributes.name SEPARATOR ',') as name FROM attributes where FIND_IN_SET (attributes.attribute_id , visa.v_supporting_doc)) as v_supporting_doc,(SELECT name FROM attributes WHERE attributes.attribute_id =visa.v_type)as visa_type,(SELECT c_name FROM customer WHERE customer.c_id =visa.c_id)as customer_name,(SELECT c_date FROM customer WHERE customer.c_id =visa.c_id)as r_date FROM visa RIGHT JOIN details ON visa.v_id=details.service_id WHERE visa.c_id=${data.id} AND details.service_type=8 AND details.deleted=0 AND visa.deleted=0;`;
    } else if (response1.c_s_type == 17) {
      // sql2 = `SELECT *,(SELECT GROUP_CONCAT(attributes.name SEPARATOR ',') as name FROM attributes where FIND_IN_SET (attributes.attribute_id , apostille.a_certificate)) as cerficates,(SELECT name FROM attributes WHERE attributes.attribute_id =apostille.a_type)as apostille_type,(SELECT name FROM attributes WHERE attributes.attribute_id =apostille.a_country) as country_name,(SELECT c_name FROM customer WHERE customer.c_id =apostille.c_id)as customer_name,(SELECT c_date FROM customer WHERE customer.c_id =apostille.c_id)as r_date FROM apostille RIGHT JOIN details ON apostille.a_id=details.service_id WHERE apostille.c_id=${data.id} AND details.service_type=17 AND details.deleted=0 AND apostille.deleted=0 GROUP by apostille.a_id;`;
      sql2 = `Select apostille.*,details.*,(SELECT GROUP_CONCAT(attributes.name SEPARATOR ',') as name FROM attributes where FIND_IN_SET (attributes.attribute_id , apostille.a_certificate)) as cerficates,a2.name as apostille_type,customer.c_name as customer_name,customer.c_date as r_date,a3.name as country_name from apostille left join details on details.service_id = apostille.a_id left join attributes a2 on a2.attribute_id =apostille.a_type left join attributes a3 on a3.attribute_id = apostille.a_country left join customer on customer.c_id = apostille.c_id where apostille.c_id=${data.id} AND details.service_type=17 AND details.deleted=0 AND apostille.deleted=0 GROUP by apostille.a_id`;
    } else {
      // sql2 = `SELECT *,(SELECT GROUP_CONCAT(attributes.name SEPARATOR ',') as name FROM attributes where FIND_IN_SET (attributes.attribute_id , translation.a_certificate)) as cerficates,(SELECT name FROM attributes WHERE attributes.attribute_id =translation.a_type)as translation_type,(SELECT name FROM attributes WHERE attributes.attribute_id =translation.a_country) as country_name,(SELECT c_name FROM customer WHERE customer.c_id =translation.c_id)as customer_name,(SELECT c_date FROM customer WHERE customer.c_id =translation.c_id)as r_date FROM translation RIGHT JOIN details ON translation.a_id=details.service_id WHERE translation.c_id=${data.id} AND details.service_type=20 AND details.deleted=0 AND translation.deleted=0  GROUP by translation.a_id;`;
      sql2 = `Select translation.*,details.*,(SELECT GROUP_CONCAT(attributes.name SEPARATOR ',') as name FROM attributes where FIND_IN_SET (attributes.attribute_id , translation.a_certificate)) as cerficates,a2.name as translation_type,customer.c_name as customer_name,customer.c_date as r_date,a3.name as country_name from translation left join details on details.service_id = translation.a_id  left join attributes a2 on a2.attribute_id =translation.a_type left join attributes a3 on a3.attribute_id = translation.a_country left join customer on customer.c_id = translation.c_id where translation.c_id=${data.id} AND details.service_type=20 AND details.deleted=0 AND translation.deleted=0 GROUP by translation.a_id`;
    }
    let response2 = await new Promise((resolve, reject) => {
      con.query(sql2, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            paymentquery = `SELECT *,(SELECT c_s_type FROM customer WHERE customer.c_id = payment.c_id)as c_s_type,(SELECT c_state FROM customer WHERE customer.c_id = payment.c_id)as c_state FROM payment WHERE c_id = ${data.id} AND deleted=0 ORDER BY payment_id DESC LIMIT 1;`;
            con.query(paymentquery, function (err, paymentres) {
              if (err) {
                console.log(err);
                resolve({ status: 0, message: "Something went to wrong" });
              } else {
                if (paymentres.length > 0) {
                  paymentres.forEach(function (presult) {
                    resolve({
                      status: 1,
                      list: result,
                      paymentres: presult,
                      settingdata: response.settingdata,
                      customerdata: response1.customerdata,
                      userdata: userdata.userdata,
                    });
                  });
                } else {
                  resolve({
                    status: 0,
                    list: [],
                    paymentres: [],
                    settingdata: response.settingdata,
                    customerdata: [],
                    userdata: userdata.userdata,
                  });
                }
              }
            });
          } else {
            resolve({
              status: 0,
              list: [],
              paymentres: [],
              settingdata: response.settingdata,
              customerdata: [],
              userdata: userdata.userdata,
            });
          }
        }
      });
    });
    // console.log(response2, "response2response2response2response2");
    return response2;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

//2903
async function updatecustomeraddress(a_data) {
  try {
    let p_data = JSON.parse(a_data.addressdata);
    let convert_data = JSON.parse(a_data.convertdata);
    sql = "";
    if (
      typeof p_data.n_d_address != "undefined" &&
      typeof p_data.c_address != "undefined"
    ) {
      sql = `UPDATE customer SET c_address='${mysql_real_escape_string(
        p_data.c_address
      )}',d_address='${mysql_real_escape_string(p_data.n_d_address)}',city ='${p_data.city
        }',pincode = '${p_data.pincode}' WHERE customer.c_id = ${p_data.customerdata.c_id
        };`;
    } else if (typeof p_data.n_d_address != "undefined") {
      sql = `UPDATE customer SET d_address='${mysql_real_escape_string(
        p_data.n_d_address
      )}',city ='${p_data.city}',pincode = '${p_data.pincode}' WHERE c_id=${p_data.customerdata.c_id
        };`;
    } else if (typeof p_data.c_address != "undefined") {
      sql = `UPDATE customer SET c_address='${mysql_real_escape_string(
        p_data.c_address
      )}' WHERE customer.c_id=${p_data.customerdata.c_id};`;
    }
    let newobj = {
      id: p_data.customerdata.c_id,
      uid: p_data.uid,
    };
    let response = await new Promise(async (resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err && err.message == "Query was empty") {
          console.log(
            "There is no changes in the update, lets continue the progress..."
          );
          next();
        }
        if (typeof result !== "undefined") {
          if (result.affectedRows > 0) {
            console.log("SUCCESS");
          }
        }
      });
      let invoice_data = await getinvoicedata(newobj);
      let n_ino = invoice_data.paymentres.invoice_no.split("/");
      let imageAsBase64;
      if (
        fs.existsSync(
          `./public/Assets/images/branchlogo/${invoice_data.settingdata.logo}`
        )
      ) {
        imageAsBase64 = fs.readFileSync(
          `./public/Assets/images/branchlogo/${invoice_data.settingdata.logo}`,
          { encoding: "base64" }
        );
      }
      let signatureAsBase64;
      if (
        fs.existsSync(
          `./public/Assets/images/invoicesignature/${invoice_data.customerdata.invoice_signature}`
        )
      ) {
        signatureAsBase64 = fs.readFileSync(
          `./public/Assets/images/invoicesignature/${invoice_data.customerdata.invoice_signature}`,
          { encoding: "base64" }
        );
      }
      pdf
        .create(
          pdfTemplate(
            invoice_data,
            p_data.userdata,
            p_data.b_state_id,
            p_data.generalsetting,
            convert_data,
            imageAsBase64,
            signatureAsBase64
          ),
          {
            childProcessOptions: {
              env: {
                OPENSSL_CONF: "/dev/null",
              },
            },
          }
        )
        .toFile(
          `${__dirname}/public/Assets/invoice_pdf/invoice_${n_ino[3]}.pdf`,
          (err) => {
            if (err) {
              return console.log("errorrrrrr");
            }
            resolve({
              status: 1,
              message: "Save Successfully",
              ino: n_ino[3],
            });
          }
        );
    });
    return response;
  } catch (err) {
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

//0703
async function sendinvoicemail(data) {
  try {
    let addressdata = JSON.parse(data.addressdata);
    let convert_data = JSON.parse(data.convertdata);
    let newobj = {
      id: addressdata.customerdata.c_id,
      uid: addressdata.uid,
    };
    let response1 = await new Promise(async (resolve, reject) => {
      let invoice_data = await getinvoicedata(newobj);
      let n_ino = invoice_data.paymentres.invoice_no.split("/");
      let imageAsBase64;
      if (
        fs.existsSync(
          `./public/Assets/images/${invoice_data.customerdata.u_id == 1 ? "adminlogo" : "branchlogo"
          }/${invoice_data.settingdata.logo}`
        )
      ) {
        imageAsBase64 = fs.readFileSync(
          `./public/Assets/images/${invoice_data.customerdata.u_id == 1 ? "adminlogo" : "branchlogo"
          }/${invoice_data.settingdata.logo}`,
          { encoding: "base64" }
        );
      }
      let signatureAsBase64;
      if (
        fs.existsSync(
          `./public/Assets/images/invoicesignature/${invoice_data.customerdata.invoice_signature}`
        )
      ) {
        signatureAsBase64 = fs.readFileSync(
          `./public/Assets/images/invoicesignature/${invoice_data.customerdata.invoice_signature}`,
          { encoding: "base64" }
        );
      }
      pdf
        .create(
          pdfTemplate(
            invoice_data,
            addressdata.userdata,
            addressdata.b_state_id,
            addressdata.generalsetting,
            convert_data,
            imageAsBase64,
            signatureAsBase64
          ),
          {
            childProcessOptions: {
              env: {
                OPENSSL_CONF: "/dev/null",
              },
            },
          }
        )
        .toFile(
          `${__dirname}/public/Assets/invoice_pdf/invoice_${n_ino[3]}.pdf`,
          (err) => {
            if (err) {
              return console.log("error");
            }
            resolve({
              ino: n_ino[3],
            });
          }
        );
    });
    sql = `SELECT * FROM customer WHERE c_id=${data.cid}`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, async function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            senderMailSetting = await sendmessage.getEmailSetting(data.uid);

            sqlll = `SELECT u_email FROM users WHERE u_id = ${data.uid} `;
            let ccmail = await new Promise((resolve, reject) => {
              con.query(sqlll, async function (err1, result1) {
                if (err1) {
                  console.log(err1);
                  resolve({ status: 0, message: "Something went to wrong" });
                } else {
                  if (result1.length > 0) {
                    resolve({ status: 1, result: result1[0].u_email });
                  } else {
                    resolve({
                      status: 0,
                      message: "Something went to wrong",
                    });
                  }
                }
              });
            });

            console.log("*******senderMailSetting*****");
            console.log(senderMailSetting);
            let message = await sendmessage.getTemplate(data.e_t_id);
            if (message.status != 0) {
              message.template = message.template.replace(
                "{:name:}",
                result[0].c_prefix + "" + result[0].c_name
              );
              let mess =
                (message.header == 1
                  ? typeof senderMailSetting.email_template_header !=
                    undefined && senderMailSetting.email_template_header != undefined &&
                    senderMailSetting.email_template_header != null
                    ? senderMailSetting.email_template_header
                    : ""
                  : "") +
                message.template +
                (message.b_d_id != 0
                  ? message.b_d_id == 1
                    ? senderMailSetting.gst_bankdetails
                    : message.b_d_id == 2
                      ? senderMailSetting.ngst_bankdetails
                      : message.b_d_id == 3
                        ? senderMailSetting.general_bankdetails
                        : ""
                  : "") +
                (message.footer == 1
                  ? senderMailSetting.email_template_footer
                  : "") +
                (message.signature == 1
                  ? senderMailSetting.email_signature
                  : "");

              CCMailSetting = await sendmessage.getEmailSetting(1);

              let att = [];
              let ino = data.ino.split("/");
              att.push({ url: `invoice_${ino[3]}.pdf` });
              let pathname = __dirname + "/public/Assets/invoice_pdf";
              sendmessagenow = sendmessage.messagesend(
                senderMailSetting,
                result[0].c_email,
                mess,
                message.subject,
                att,
                // CCMailSetting.cc_email, //cc mail// CCMailSetting.e_username,
                ccmail.result, // reply mail
                1,
                pathname
              );
              sendmessagenow = sendmessage.messagesend(
                senderMailSetting,
                CCMailSetting.cc_email,
                mess,
                message.subject,
                att,
                // CCMailSetting.cc_email, //cc mail// CCMailSetting.e_username,
                ccmail.result, // reply mail
                1,
                pathname
              );
              resolve({
                status: 1,
                message: "Send Mail successfully",
              });
            }
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function fetchbranchdatabyid(data) {
  try {
    sql = `SELECT * FROM branch WHERE branch_id =${data.bid} and deleted=0`;

    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
        } else {
          if (result.length > 0) {
            generalsetting = `SELECT * FROM gsetting where s_id=1`;
            con.query(generalsetting, function (gerr, g_result) {
              if (gerr) {
                console.log(gerr);
                resolve({ status: 0, message: "Something went to wrong" });
              } else {
                if (g_result.length > 0) {
                  resolve({
                    status: 1,
                    data: result[0],
                    generalsetting: g_result[0],
                  });
                } else {
                  resolve({
                    status: 0,
                    message: "Something went to wrong",
                  });
                }
              }
            });
          }
        }
      });
    });
    return response;
  } catch (err) {
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

// async function searchTaskData(data) {
//   try {
//     sql = `SELECT *,(SELECT COUNT(*) FROM task where task.deleted=0) as trows,(SELECT u_name FROM users WHERE users.u_id=task.u_id)as createdBy,(SELECT u_name FROM users WHERE users.u_id=task.allocate_id)as allocateTo FROM task WHERE deleted = 0`;
//     if (
//       typeof data.t_status != "undefined" &&
//       data.t_status != "" &&
//       data.t_status != 5
//     ) {
//       sql += ` and task.t_status=${data.t_status}`;
//     }
//     if (
//       typeof data.priority != "undefined" &&
//       data.priority != "" &&
//       data.priority != 5 &&
//       data.priority != 0
//     ) {
//       sql += ` and task.priority=${data.priority}`;
//     }
//     if (data.u_id != 1) {
//       sql += ` and (u_id=${data.u_id} OR allocate_id=${data.u_id})`
//     }
//     sql1 = sql;
//     sql += ` ORDER BY priority DESC limit ${(data.page - 1) * data.perpage},${data.perpage}`;
//     let response = await new Promise((resolve, reject) => {
//       con.query(sql1, function (err, result) {
//         if (err) {
//           resolve({ status: 0, message: "Something went to wrong" });
//         }
//         if (result.length > 0) {
//           con.query(sql, function (err, res) {
//             if (res.length > 0) {
//               resolve({
//                 status: 1,
//                 data: res,
//                 t_rows: result.length,
//               });
//             }
//           });
//         } else {
//           resolve({
//             status: 0,
//             data: [],
//           });
//         }
//       });
//     });
//     return response;
//   } catch (error) {
//     return { status: 0, message: "Invalid Call Try Again" };
//   }
// }

async function getApostilleCustomer(data) {
  try {
    let record = [];
    getuserquery = `select * from users where u_id=${data.u_id} and deleted=0`;
    let response = await new Promise((resolve, reject) => {
      con.query(getuserquery, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            if (result[0].user_type == 1) {
              getallchilduser = `select * from users where (p_u_id=${data.u_id} or branch_id=${result[0].branch_id}) and deleted=0`;
              con.query(getallchilduser, function (err, res) {
                if (err) {
                  console.log(err);
                  resolve({ status: 0, message: "Something went to wrong" });
                } else {
                  res.forEach(function (r) {
                    record.push(r.u_id);
                  });
                  resolve({
                    record: record,
                    type: result[0].user_type,
                  });
                }
              });
            } else {
              resolve({
                type: result[0].user_type,
              });
            }
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    let getApostillePaginationQuery = "";
    let sql = "";
    if (response.type == 1) {
      sql = `SELECT *,(SELECT SUM(receive_amt) FROM draft_payment  WHERE draft_payment.c_id = customer.c_id and draft_payment.deleted=0 and draft_payment.receive_amt!=0  and draft_payment.approved_status =0 and draft_payment.deleted = 0 ) as total_draft,details.under_process_date AS process_date,(SELECT name FROM attributes WHERE attributes.attribute_id  =apostille.a_type)as apostille_type,(SELECT c_date FROM customer WHERE customer.c_id =apostille.c_id)as r_date,(SELECT name FROM attributes WHERE attributes.attribute_id =apostille.a_country)as apostille_country,(SELECT name FROM attributes WHERE attributes.attribute_id =details.d_c_id)as apostille_certificate,(SELECT c_prefix FROM customer WHERE customer.c_id=apostille.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=apostille.c_id) AS customer_name,(SELECT c_s_type FROM customer WHERE customer.c_id=apostille.c_id) AS c_s_type,
      (SELECT c_id FROM customer WHERE customer.c_id=apostille.c_id) as my_C_id,
      (SELECT u_id FROM customer WHERE customer.c_id=apostille.c_id) AS cuid,(SELECT user_type FROM users where users.u_id  = (SELECT u_id FROM customer WHERE customer.c_id=apostille.c_id)) as cutype,
      (SELECT payment.due_amt FROM payment where payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=apostille.c_id) ORDER BY payment.payment_id DESC LIMIT 1) as my_Due_Amt,
      (SELECT payment.paid_amt FROM payment where payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=apostille.c_id) ORDER BY payment.payment_id DESC LIMIT 1) as my_paid_amt,
      (SELECT payment.net_amt FROM payment where payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=apostille.c_id) ORDER BY payment.payment_id DESC LIMIT 1) as my_net_amt,
      (SELECT payment.tds_amt FROM payment where payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=apostille.c_id) ORDER BY payment.payment_id DESC LIMIT 1) as my_tds_amt,
      (SELECT draft_payment.d_p_id FROM draft_payment where draft_payment.deleted=0 and draft_payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=apostille.c_id) and draft_payment.approved_status=0 and draft_payment.due_amt=0 ORDER BY draft_payment.d_p_id DESC LIMIT 1) as Draf_payment
      FROM details,apostille,customer WHERE customer.c_id=apostille.c_id AND details.service_id=apostille.a_id  AND details.service_type=17 AND details.deleted = 0 AND apostille.deleted = 0  AND customer.deleted = 0  AND  customer.is_cancel = 0 AND (customer.branch_id =${data.branch_id} OR customer.foreign_branch = ${data.branch_id})`;

      getApostillePaginationQuery = `SELECT COUNT(details.detail_id) as trows
      FROM details,apostille,customer WHERE customer.c_id=apostille.c_id AND details.service_id=apostille.a_id  AND details.service_type=17 AND details.deleted = 0 AND apostille.deleted = 0  AND customer.deleted = 0  AND  customer.is_cancel = 0 AND (customer.branch_id =${data.branch_id} OR customer.foreign_branch = ${data.branch_id})`;
    } else {
      if (data.u_id != 1) {
        sql = `SELECT *,(SELECT SUM(receive_amt) FROM draft_payment  WHERE draft_payment.c_id = customer.c_id and draft_payment.deleted=0 and draft_payment.receive_amt!=0  and draft_payment.approved_status =0 and draft_payment.deleted = 0 ) as total_draft,details.under_process_date AS process_date,(SELECT name FROM attributes WHERE attributes.attribute_id  =apostille.a_type)as apostille_type,(SELECT c_date FROM customer WHERE customer.c_id =apostille.c_id)as r_date,(SELECT name FROM attributes WHERE attributes.attribute_id =apostille.a_country)as apostille_country,(SELECT name FROM attributes WHERE attributes.attribute_id =details.d_c_id)as apostille_certificate,(SELECT c_prefix FROM customer WHERE customer.c_id=apostille.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=apostille.c_id) AS customer_name,(SELECT c_s_type FROM customer WHERE customer.c_id=apostille.c_id) AS c_s_type,
        (SELECT c_id FROM customer WHERE customer.c_id=apostille.c_id) as my_C_id,
        (SELECT branch_id FROM customer WHERE customer.c_id=apostille.c_id) AS branch_id,(SELECT u_id FROM customer WHERE customer.c_id=apostille.c_id) AS cuid,(SELECT user_type FROM users where users.u_id  = (SELECT u_id FROM customer WHERE customer.c_id=apostille.c_id)) as cutype,
        (SELECT payment.due_amt FROM payment where payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=apostille.c_id) ORDER BY payment.payment_id DESC LIMIT 1) as my_Due_Amt,
        (SELECT payment.paid_amt FROM payment where payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=apostille.c_id) ORDER BY payment.payment_id DESC LIMIT 1) as my_paid_amt,
      (SELECT payment.net_amt FROM payment where payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=apostille.c_id) ORDER BY payment.payment_id DESC LIMIT 1) as my_net_amt,
      (SELECT payment.tds_amt FROM payment where payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=apostille.c_id) ORDER BY payment.payment_id DESC LIMIT 1) as my_tds_amt,
        (SELECT draft_payment.d_p_id FROM draft_payment where draft_payment.deleted=0 and draft_payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=apostille.c_id) and draft_payment.approved_status=0 and draft_payment.due_amt=0 ORDER BY draft_payment.d_p_id DESC LIMIT 1) as Draf_payment
        FROM details,apostille,customer WHERE apostille.c_id=customer.c_id AND details.service_id=apostille.a_id and (customer.u_id=${data.u_id} or customer.foreign_branchuser=${data.u_id} OR customer.created_id = ${data.u_id}) AND details.service_type=17 AND details.deleted = 0  AND apostille.deleted = 0 AND customer.deleted = 0  AND  customer.is_cancel = 0`;

        getApostillePaginationQuery = `SELECT COUNT(details.detail_id) as trows
        FROM details,apostille,customer WHERE apostille.c_id=customer.c_id AND details.service_id=apostille.a_id and (customer.u_id=${data.u_id} or customer.foreign_branchuser=${data.u_id} OR customer.created_id = ${data.u_id}) AND details.service_type=17 AND details.deleted = 0  AND apostille.deleted = 0 AND customer.deleted = 0  AND  customer.is_cancel = 0`;
      } else {
        sql = `SELECT *,(SELECT SUM(receive_amt) FROM draft_payment  WHERE draft_payment.c_id = customer.c_id and draft_payment.deleted=0 and draft_payment.receive_amt!=0  and draft_payment.approved_status =0 and draft_payment.deleted = 0 ) as total_draft,details.under_process_date AS process_date,(SELECT name FROM attributes WHERE attributes.attribute_id  = apostille.a_type)as apostille_type,(SELECT c_date FROM customer WHERE customer.c_id =apostille.c_id)as r_date,(SELECT name FROM attributes WHERE attributes.attribute_id =apostille.a_country)as apostille_country,(SELECT name FROM attributes WHERE attributes.attribute_id =details.d_c_id)as apostille_certificate,(SELECT c_prefix FROM customer WHERE customer.c_id=apostille.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=apostille.c_id) AS customer_name,(SELECT c_s_type FROM customer WHERE customer.c_id=apostille.c_id) AS c_s_type,
        (SELECT c_id FROM customer WHERE customer.c_id=apostille.c_id) as my_C_id,
        (SELECT branch_id FROM customer WHERE customer.c_id=apostille.c_id) AS branch_id,(SELECT u_id FROM customer WHERE customer.c_id=apostille.c_id) AS cuid,(SELECT user_type FROM users where users.u_id  = (SELECT u_id FROM customer WHERE customer.c_id=apostille.c_id)) as cutype,
        (SELECT payment.due_amt FROM payment where payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=apostille.c_id) ORDER BY payment.payment_id DESC LIMIT 1) as my_Due_Amt,(SELECT payment.paid_amt FROM payment where payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=apostille.c_id) ORDER BY payment.payment_id DESC LIMIT 1) as my_paid_amt,
        (SELECT payment.net_amt FROM payment where payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=apostille.c_id) ORDER BY payment.payment_id DESC LIMIT 1) as my_net_amt,
        (SELECT payment.tds_amt FROM payment where payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=apostille.c_id) ORDER BY payment.payment_id DESC LIMIT 1) as my_tds_amt,
        (SELECT draft_payment.d_p_id FROM draft_payment where draft_payment.deleted=0 and draft_payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=apostille.c_id) and draft_payment.approved_status=0 and draft_payment.due_amt=0 ORDER BY draft_payment.d_p_id DESC LIMIT 1) as Draf_payment
        FROM details,apostille,customer WHERE customer.c_id=apostille.c_id and details.service_id=apostille.a_id  AND details.service_type=17 AND details.deleted = 0  AND apostille.deleted = 0 AND customer.deleted = 0  AND  customer.is_cancel = 0`;

        getApostillePaginationQuery = `SELECT COUNT(details.detail_id) as trows
        FROM details,apostille,customer WHERE customer.c_id=apostille.c_id and details.service_id=apostille.a_id  AND details.service_type=17 AND details.deleted = 0  AND apostille.deleted = 0 AND customer.deleted = 0  AND  customer.is_cancel = 0`;
      }
    }
    sql += ` ORDER BY detail_id  DESC limit ${(data.page - 1) * data.perPage},${data.perPage
      }`;
    let resp = await new Promise((resolve, reject) => {
      con.query(getApostillePaginationQuery, function (err1, lres1) {
        if (err1) {
          console.log(err1);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (lres1.length > 0) {
            resolve({
              status: 1,
              t_rows: lres1[0].trows,
            });
          } else {
            resolve({
              status: 0,
              data: [],
            });
          }
        }
      });
    });
    let response1 = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              data: result,
              trows: resp.t_rows,
            });
          } else {
            resolve({
              status: 0,
              data: [],
            });
          }
        }
      });
    });
    return response1;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function updateApostilleStatus(data, date) {
  try {
    if (data.a_status == 24) {
      sql = `UPDATE apostille SET a_status=${data.a_status},dispatch_date='${date}' WHERE a_id =${data.a_id}`;
    } else if (data.a_status == 21) {
      sql = `UPDATE apostille SET a_status=${data.a_status},process_date='${date}' WHERE a_id =${data.a_id}`;
    } else {
      sql = `UPDATE apostille SET a_status=${data.a_status
        },dispatch_date=${null} WHERE a_id =${data.a_id}`;
    }
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.affectedRows > 0) {
            resolve({
              status: 1,
              message: "Apostille Status update successfully",
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function updateApostilleCustomer(data1) {
  try {
    let status_change_date = moment().format("DD-MM-YYYY HH:mm:ss");
    sql4 = `SELECT * FROM apostille INNER JOIN payment ON apostille.c_id = payment.c_id INNER JOIN customer ON apostille.c_id = customer.c_id WHERE apostille.c_id = ${data1.c_id} ORDER BY payment_id DESC LIMIT 1 `;

    let response3 = await new Promise((resolve, reject) => {
      con.query(sql4, async function (err4, result4) {
        if (err4) {
          console.log(err4);
          resolve({ status: 0, message: "Something went wrong" });
        } else {
          if (result4.length > 0) {
            result4.forEach(function (result) {
              resolve({
                result: result,
              });
            });
          } else {
            resolve({
              result: 0,
            });
          }
        }
      });
    });
    let sum = 0;
    let sum1 = [];
    let embassy = parseInt(response3.result.embassy_fees);

    paymentrecord = `SELECT * FROM payment WHERE c_id = ${data1.c_id} and deleted = 0 ORDER BY payment_id DESC limit 1;`;
    let payment = await new Promise((resolve, reject) => {
      con.query(paymentrecord, async function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Customer Not Updated" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              result: result[0],
              result1: result[0].payment_id,
              result2: result[0].invoice_no,
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    sql12 = `SELECT b_name FROM branch WHERE branch_id = ${data1.branch_id} `;
    let res = await new Promise((resolve, reject) => {
      con.query(sql12, async function (err1, result1) {
        if (err1) {
          console.log(err1);
          resolve({ status: 0, message: "Customer Not Updated" });
        } else {
          if (result1.length > 0) {
            resolve({ status: 1, result: result1[0].b_name });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    let responseinvoice = await new Promise((resolve, reject) => {
      if (data1.c_tax == "1") {
        // let getinvoiceno = `SELECT *,invoice_no FROM payment,customer WHERE payment.c_id=customer.c_id and payment.c_tax = "1" and customer.branch_id=${data1.branch_id} and payment.deleted=0 ORDER BY customer.c_id DESC limit 1;`;
        let getinvoiceno = `SELECT *,invoice_no FROM payment JOIN customer ON payment.c_id=customer.c_id and payment.c_tax = "1" and customer.branch_id=${data1.branch_id} and payment.deleted=0 ORDER BY payment.payment_id DESC,customer.c_id DESC limit 1;`;

        // const now = new Date();
        // const cvalue = date.format(now, "YY");
        // const currentYear = new Date().getFullYear().toString().slice(-2);
        // const previousYear = currentYear - 1;
        const cvalue = moment().format("MM");
        const last2 = new Date().getFullYear().toString().substring(2);
        const last2Num = Number(last2);
        var today = new Date();
        if (today.getMonth() + 1 <= 3) {
          fiscalyear = last2Num - 1 + "-" + last2Num;
        } else {
          fiscalyear = last2Num + "-" + (last2Num + 1);
        }
        let invoice_no = 0;
        con.query(getinvoiceno, async function (errino, inoresult) {
          if (errino) {
            console.log(errino);
            resolve({ status: 0, message: "Something went wrong" });
          } else {
            if (inoresult.length > 0 && inoresult[0].invoice_no != 0) {
              let sql = `UPDATE payment SET invoice_status = 1 WHERE payment_id=${payment.result1
                } AND deleted = 0  `;
              con.query(sql, async function (err, result) {
                if (err) {
                  console.log(err);
                  resolve({ status: 0, message: "Something went to wrong" });
                } else {
                  if (result.affectedRows > 0) {
                    resolve({
                      status: 1,
                      message: "Payment Updated successfully",
                    });
                  } else {
                    resolve({
                      status: 0,
                      message: "Something went to wrong",
                    });
                  }
                }
              });
              //1003
              let ino = inoresult[0].invoice_no;
              let n_ino = ino.split("/");
              if (fiscalyear == n_ino[1]) {
                invoice_no =
                  res.result.substring(0, 2) +
                  "/" +
                  fiscalyear +
                  "/" +
                  "g" +
                  cvalue +
                  "/" +
                  ++n_ino[3];
              } else {
                invoice_no =
                  res.result.substring(0, 2) +
                  "/" +
                  fiscalyear +
                  "/" +
                  "g" +
                  cvalue +
                  "/" +
                  1;
              }
            } else {
              let sql = `UPDATE payment SET invoice_status = 1 WHERE payment_id=${payment.result1
                } AND deleted = 0  `;
              con.query(sql, async function (err, result) {
                if (err) {
                  console.log(err);
                  resolve({ status: 0, message: "Something went to wrong" });
                } else {
                  if (result.affectedRows > 0) {
                    resolve({
                      status: 1,
                      message: "Payment Updated successfully",
                    });
                  } else {
                    resolve({
                      status: 0,
                      message: "Something went to wrong",
                    });
                  }
                }
              });
              invoice_no =
                res.result.substring(0, 2) +
                "/" +
                fiscalyear +
                "/" +
                "g" +
                cvalue +
                "/" +
                1;
            }
            resolve({ status: 1, ino: invoice_no });
          }
        });
      } else {
        //1003
        // getinvoiceno = `SELECT *,invoice_no FROM payment,customer WHERE payment.c_id=customer.c_id and payment.c_tax = "0" and customer.branch_id=${data1.branch_id} and payment.deleted=0 ORDER BY customer.c_id DESC limit 1;`;
        let getinvoiceno = `SELECT *,invoice_no FROM payment JOIN customer ON payment.c_id=customer.c_id and payment.c_tax = "0" and customer.branch_id=${data1.branch_id} and payment.deleted=0 ORDER BY payment.payment_id DESC,customer.c_id DESC limit 1;`;

        // const now = new Date();
        // const cvalue = date.format(now, "YY");
        // const currentYear = new Date().getFullYear().toString().slice(-2);
        // const previousYear = currentYear - 1;
        const cvalue = moment().format("MM");
        const last2 = new Date().getFullYear().toString().substring(2);
        const last2Num = Number(last2);
        var today = new Date();
        if (today.getMonth() + 1 <= 3) {
          fiscalyear = last2Num - 1 + "-" + last2Num;
        } else {
          fiscalyear = last2Num + "-" + (last2Num + 1);
        }
        let invoice_no = 0;
        con.query(getinvoiceno, async function (errino, inoresult) {
          if (errino) {
            console.log(errino);
            resolve({ status: 0, message: "Something went wrong" });
          } else {
            if (inoresult.length > 0 && inoresult[0].invoice_no != 0) {
              let sql = `UPDATE payment SET invoice_status = 1 WHERE payment_id=${payment.result1
                } AND deleted = 0  `;
              con.query(sql, async function (err, result) {
                if (err) {
                  console.log(err);
                  resolve({ status: 0, message: "Something went to wrong" });
                } else {
                  if (result.affectedRows > 0) {
                    resolve({
                      status: 1,
                      message: "Payment Updated successfully",
                    });
                  } else {
                    resolve({
                      status: 0,
                      message: "Something went to wrong",
                    });
                  }
                }
              });
              //1003
              let ino = inoresult[0].invoice_no;
              let n_ino = ino.split("/");
              if (fiscalyear == n_ino[1]) {
                invoice_no =
                  res.result.substring(0, 2) +
                  "/" +
                  fiscalyear +
                  "/" +
                  cvalue +
                  "/" +
                  ++n_ino[3];
              } else {
                invoice_no =
                  res.result.substring(0, 2) +
                  "/" +
                  fiscalyear +
                  "/" +
                  cvalue +
                  "/" +
                  1;
              }
            } else {
              let sql = `UPDATE payment SET invoice_status = 1 WHERE payment_id=${payment.result1
                } AND deleted = 0  `;
              con.query(sql, async function (err, result) {
                if (err) {
                  console.log(err);
                  resolve({ status: 0, message: "Something went to wrong" });
                } else {
                  if (result.affectedRows > 0) {
                    resolve({
                      status: 1,
                      message: "Payment Updated successfully",
                    });
                  } else {
                    resolve({
                      status: 0,
                      message: "Something went to wrong",
                    });
                  }
                }
              });
              invoice_no =
                res.result.substring(0, 2) +
                "/" +
                fiscalyear +
                "/" +
                cvalue +
                "/" +
                1;
            }
            resolve({ status: 1, ino: invoice_no });
          }
        });
      }
    });

    let response = await new Promise((resolve, reject) => {
      data1.applicationdata.map(async (data, index) => {
        if (data1.old_total_customer > index) {
          sql = `UPDATE apostille SET a_prefix='${data.a_prefix
            }',a_name='${mysql_real_escape_string(data.a_name)}',a_code=${data.a_code
            },a_certificate='${data.a_certificate}',a_type=${data.a_type
            },a_country='${data.a_country}',a_supporting_doc='${data.a_supporting_doc
            }',a_extra_doc = '${data.a_extra_doc}',process_limit_date='${data.process_limit_date
            }',process_limit_mail_date='${data.process_limit_date
            }',no_of_certificates=${data.no_of_certificates} WHERE a_id=${data.a_id
            }`;
          con.query(sql, async function (err, result) {
            if (err) {
              console.log(err);
              resolve({ status: 0, message: "Something went to wrong" });
            } else {
              if (result.affectedRows > 0) {
                if (data.no_of_certificates > 0) {
                  for (
                    let index = 0;
                    index < data.a_certificate.length;
                    index++
                  ) {
                    console.log(
                      index,
                      data.a_certificate[index],
                      "!ft45645234rgdfrgdfgsd35"
                    );
                    // data.a_certificate.map(async (k, index) => {
                    // console.log(k, "kkkkkkkkkkkkkkkkk");

                    let sql1 = `SELECT detail_id FROM details WHERE d_c_id=${data.a_certificate[index]} AND service_id=${data.a_id} AND service_type = 17`;
                    con.query(sql1, async function (err111, result111) {
                      if (err111) {
                        console.log(err111);
                        resolve({
                          status: 0,
                          message: "Something went to wrong",
                        });
                      } else {
                        sql2 = `SELECT s_amount FROM serviceprice WHERE service = 17  AND country = ${data.a_country} AND s_type = ${data.a_type} and deleted = 0;`;

                        let response2 = await new Promise((resolve, reject) => {
                          con.query(sql2, async function (err2, result2) {
                            if (err2) {
                              console.log(err2);
                              resolve({
                                status: 0,
                                message: "Something went wrong",
                              });
                            } else {
                              if (result2.length > 0) {
                                result2.forEach(async function (result) {
                                  resolve({
                                    result: result.s_amount,
                                  });
                                });
                              } else {
                                resolve({
                                  result: parseInt(0),
                                });
                              }
                            }
                          });
                        });
                        let sqll = `SELECT document_type FROM attributes Where attribute_id=${data.a_certificate[index]}`;
                        let resp = await new Promise((resolve, reject) => {
                          con.query(sqll, async function (err1, result1) {
                            if (err1) {
                              console.log(err1);
                              resolve({
                                status: 0,
                                message: "Something went wrong",
                              });
                            } else {
                              if (result1.length > 0) {
                                resolve({
                                  status: 1,
                                  result: result1[0].document_type,
                                });
                              } else {
                                resolve({ status: 0, result: [] });
                              }
                            }
                          });
                        });
                        sql3 = `SELECT amount as embassy_fees FROM embassyfees WHERE service_type = 17  AND country = ${data.a_country} AND document = ${resp.result} AND deleted = 0;`;
                        let response3 = await new Promise((resolve, reject) => {
                          con.query(sql3, async function (err2, result2) {
                            if (err2) {
                              console.log(err2);
                              resolve({
                                status: 0,
                                message: "Something went wrong",
                              });
                            } else {
                              if (result2 == undefined) {
                                resolve({
                                  embassy_fees: parseInt(0),
                                });
                              } else {
                                if (result2.length > 0) {
                                  result2.forEach(async function (result) {
                                    resolve({
                                      embassy_fees: result.embassy_fees,
                                    });
                                  });
                                } else {
                                  resolve({
                                    embassy_fees: parseInt(0),
                                  });
                                }
                              }
                            }
                          });
                        });
                        if (result111.length > 0 || result111.length == 0) {
                          if (
                            result111.length > 0 &&
                            index < result111.length
                          ) {
                            sum = sum + parseInt(response2.result);
                            // embassy = embassy + parseInt(response2.embassy_fees);
                            sum1.push(parseInt(response2.result));

                            result111.forEach(async function (result1) {
                              sql3 = `UPDATE details SET amount = ${response2.result} WHERE deleted = 0 AND detail_id = ${result1.detail_id} AND service_type = 17`;

                              con.query(sql3, async function (err3, result3) {
                                if (err3) {
                                  console.log(err3);
                                  resolve({
                                    status: 0,
                                    message: "Something went Wrong",
                                  });
                                } else {
                                  if (result3.affectedRows > 0) {
                                    resolve({
                                      status: 1,
                                    });
                                  } else {
                                    resolve({
                                      status: 0,
                                      message: "Something went to wrong",
                                    });
                                  }
                                }
                              });
                            });
                          } else {
                            sum = sum + parseInt(response2.result);
                            embassy =
                              parseInt(embassy) +
                              parseInt(response3.embassy_fees);
                            sum1.push(parseInt(response2.result));
                            let status_change_date = moment().format(
                              "DD-MM-YYYY HH:mm:ss"
                            );
                            // result1.forEach(async function (result1) {
                            sqlll = `INSERT INTO details (service_type,service_id,d_c_id,amount,tracking_id,status_change_date) VALUES ('${data1.c_s_type}',${data.a_id} ,${data.a_certificate[index]},${response2.result},'${data.tracking_id}','${status_change_date}')`;

                            con.query(sqlll, async function (err3, result3) {
                              if (err3) {
                                console.log(err3);
                                resolve({
                                  status: 0,
                                  message: "Something went Wrong",
                                });
                              } else {
                                if (result3 == undefined) {
                                  resolve({
                                    status: 0,
                                    result: [],
                                  });
                                } else {
                                  if (result3.affectedRows > 0) {
                                    resolve({
                                      status: 1,
                                      result: result3,
                                    });
                                  }
                                }
                              }
                              // });
                            });
                          }
                        } else {
                          resolve({
                            status: 0,
                            message: "Something went Wrong...",
                          });
                        }
                      }
                    });
                    // });
                  }
                } else {
                  for (
                    let index = 0;
                    index < data.a_certificate.length;
                    index++
                  ) {
                    // data.a_certificate.map(async (k) => {
                    console.log(
                      index,
                      data.a_certificate[index],
                      "!@ssfsdfsd35"
                    );
                    sql1 = `SELECT detail_id FROM details WHERE d_c_id=${data.a_certificate[index]} AND service_id=${data.a_id}    AND service_type = 17`;
                    con.query(sql1, async function (err111, result111) {
                      console.log(
                        result111,
                        "result111result111result111result111"
                      );
                      if (err111) {
                        console.log(err111);
                        resolve({
                          status: 0,
                          message: "Something went to wrong",
                        });
                      } else {
                        sql2 = `SELECT s_amount FROM serviceprice WHERE service = 17  AND country = ${data.a_country} AND s_type = ${data.a_type} and deleted = 0;`;

                        let response2 = await new Promise((resolve, reject) => {
                          con.query(sql2, async function (err2, result2) {
                            if (err2) {
                              console.log(err2);
                              resolve({
                                status: 0,
                                message: "Something went wrong",
                              });
                            } else {
                              if (result2.length > 0) {
                                result2.forEach(async function (result) {
                                  resolve({
                                    result: result.s_amount,
                                  });
                                });
                              } else {
                                resolve({
                                  result: parseInt(0),
                                });
                              }
                            }
                          });
                        });
                        let sqll = `SELECT document_type FROM attributes Where attribute_id=${data.a_certificate[index]}`;
                        let resp = await new Promise((resolve, reject) => {
                          con.query(sqll, async function (err1, result1) {
                            if (err1) {
                              console.log(err1);
                              resolve({
                                status: 0,
                                message: "Something went wrong",
                              });
                            } else {
                              if (result1.length > 0) {
                                resolve({
                                  status: 1,
                                  result: result1[0].document_type,
                                });
                              } else {
                                resolve({ status: 0, result: [] });
                              }
                            }
                          });
                        });
                        sql3 = `SELECT amount as embassy_fees FROM embassyfees WHERE service_type = 17  AND country = ${data.a_country} AND document = ${resp.result} AND deleted = 0;`;
                        let response3 = await new Promise((resolve, reject) => {
                          con.query(sql3, async function (err2, result2) {
                            if (err2) {
                              console.log(err2);
                              resolve({
                                status: 0,
                                message: "Something went wrong",
                              });
                            } else {
                              if (result2 == undefined) {
                                resolve({
                                  embassy_fees: parseInt(0),
                                });
                              } else {
                                if (result2.length > 0) {
                                  result2.forEach(async function (result) {
                                    resolve({
                                      embassy_fees: result.embassy_fees,
                                    });
                                  });
                                } else {
                                  resolve({
                                    embassy_fees: parseInt(0),
                                  });
                                }
                              }
                            }
                          });
                        });
                        if (result111.length > 0 || result111.length == 0) {
                          if (result111.length > 0) {
                            sum = sum + parseInt(response2.result);
                            // embassy = embassy + parseInt(response2.embassy_fees);
                            sum1.push(parseInt(response2.result));

                            result111.forEach(async function (result1) {
                              sql3 = `UPDATE details SET amount = ${response2.result} WHERE deleted = 0 AND detail_id = ${result1.detail_id} AND service_type = 17`;

                              con.query(sql3, async function (err3, result3) {
                                if (err3) {
                                  console.log(err3);
                                  resolve({
                                    status: 0,
                                    message: "Something went Wrong",
                                  });
                                } else {
                                  if (result3.affectedRows > 0) {
                                    resolve({
                                      status: 1,
                                    });
                                  } else {
                                    resolve({
                                      status: 0,
                                      message: "Something went to wrong",
                                    });
                                  }
                                }
                              });
                            });
                          } else {
                            sum = sum + parseInt(response2.result);
                            embassy =
                              parseInt(embassy) +
                              parseInt(response3.embassy_fees);
                            sum1.push(parseInt(response2.result));
                            let status_change_date = moment().format(
                              "DD-MM-YYYY HH:mm:ss"
                            );
                            // result1.forEach(async function (result1) {
                            sqlll = `INSERT INTO details (service_type,service_id,d_c_id,amount,tracking_id,status_change_date) VALUES ('${data1.c_s_type}',${data.a_id} ,${data.a_certificate[index]},${response2.result},'${data.tracking_id}','${status_change_date}')`;

                            con.query(sqlll, async function (err3, result3) {
                              if (err3) {
                                console.log(err3);
                                resolve({
                                  status: 0,
                                  message: "Something went Wrong",
                                });
                              } else {
                                if (result3 == undefined) {
                                  resolve({
                                    status: 0,
                                    result: [],
                                  });
                                } else {
                                  if (result3.affectedRows > 0) {
                                    resolve({
                                      status: 1,
                                      result: result3,
                                    });
                                  }
                                }
                              }
                              // });
                            });
                          }
                        } else {
                          resolve({
                            status: 0,
                            message: "Something went Wrong...",
                          });
                        }
                      }
                    });
                    // });
                  }
                }
              } else {
                resolve({
                  status: 0,
                  message: "Something went to wrong",
                });
              }
            }
          });
        } else {
          console.log("!!!!!!!!!!!!!!!!!!!!");
          sql = `INSERT INTO apostille (c_id,a_prefix,a_name,a_code,a_country,a_type,a_certificate,a_supporting_doc,a_extra_doc,created_id,pg_no,tracking_id,process_limit_date,process_limit_mail_date,no_of_certificates) VALUES (${data1.c_id
            },'${data.a_prefix}','${mysql_real_escape_string(data.a_name)}',${data.a_code
            },${data.a_country},${data.a_type},
                      '${data.a_certificate.sort().toString()}',
                      '${typeof data.a_supporting_doc == "undefined"
              ? ""
              : data.a_supporting_doc.toString()
            }',
                      '${typeof data.a_extra_doc == "undefined"
              ? ""
              : data.a_extra_doc.toString()
            }',${data1.created_id},${data.pg_no
            },'${mysql_real_escape_string(data1.tracking_id)}','${data.process_limit_date
            }','${data.process_limit_date}',${data.no_of_certificates})`;
          con.query(sql, async function (err, result) {
            if (err) {
              console.log(err);
              resolve({ status: 0, message: "Something went to wrong" });
            } else {
              if (result.affectedRows > 0) {
                if (data.no_of_certificates > 0) {
                  console.log("7777777777777777");
                  for (
                    let index = 0;
                    index < data.a_certificate.length;
                    index++
                  ) {
                    console.log(
                      index,
                      data.a_certificate[index],
                      "13423434335454335"
                    );
                    // data.a_certificate.map(async (k) => {
                    sql1 = `SELECT detail_id FROM details WHERE d_c_id=${data.a_certificate[index]} AND service_id=${result.insertId} AND service_type = 17`;
                    con.query(sql1, async function (err111, result111) {
                      if (err111) {
                        console.log(err111);
                        resolve({
                          status: 0,
                          message: "Something went to wrong",
                        });
                      } else {
                        sql2 = `SELECT s_amount FROM serviceprice WHERE service = 17  AND country = ${data.a_country} AND s_type = ${data.a_type} and deleted = 0;`;

                        let response2 = await new Promise((resolve, reject) => {
                          con.query(sql2, async function (err2, result2) {
                            if (err2) {
                              console.log(err2);
                              resolve({
                                status: 0,
                                message: "Something went wrong",
                              });
                            } else {
                              if (result2.length > 0) {
                                result2.forEach(async function (result) {
                                  resolve({
                                    result: result.s_amount,
                                  });
                                });
                              } else {
                                resolve({
                                  result: parseInt(0),
                                });
                              }
                            }
                          });
                        });

                        let sqll = `SELECT document_type FROM attributes Where attribute_id=${data.a_certificate[index]}`;

                        let resp = await new Promise((resolve, reject) => {
                          con.query(sqll, async function (err1, result1) {
                            if (err1) {
                              console.log(err1);
                              resolve({
                                status: 0,
                                message: "Something went wrong",
                              });
                            } else {
                              if (result1.length > 0) {
                                resolve({
                                  status: 1,
                                  result: result1[0].document_type,
                                });
                              } else {
                                resolve({ status: 0, result: [] });
                              }
                            }
                          });
                        });
                        sql3 = `SELECT amount as embassy_fees FROM embassyfees WHERE service_type = 17  AND country = ${data.a_country} AND document = ${resp.result} AND deleted = 0;`;
                        let response3 = await new Promise((resolve, reject) => {
                          con.query(sql3, async function (err2, result2) {
                            if (err2) {
                              console.log(err2);
                              resolve({
                                status: 0,
                                message: "Something went wrong",
                              });
                            } else {
                              if (result2.length > 0) {
                                result2.forEach(async function (result) {
                                  resolve({
                                    embassy_fees: result.embassy_fees,
                                  });
                                });
                              } else {
                                resolve({
                                  embassy_fees: parseInt(0),
                                });
                              }
                            }
                          });
                        });
                        console.log(
                          result111.length > 0 && index < result111.length,
                          result111.length,
                          index,
                          "***********"
                        );
                        if (result111.length > 0 || result111.length == 0) {
                          if (
                            result111.length > 0 &&
                            index < result111.length
                          ) {
                            console.log("iffffffffffffffffffffff");
                            sum = sum + parseInt(response2.result);
                            // embassy = embassy + parseInt(response2.embassy_fees);
                            sum1.push(parseInt(response2.result));

                            result111.forEach(async function (result1) {
                              sql3 = `UPDATE details SET amount = ${response2.result} WHERE deleted = 0 AND detail_id = ${result1.detail_id} AND service_type = 17`;

                              con.query(sql3, async function (err3, result3) {
                                if (err3) {
                                  console.log(err3);
                                  resolve({
                                    status: 0,
                                    message: "Something went Wrong",
                                  });
                                } else {
                                  if (result3.affectedRows > 0) {
                                    resolve({
                                      status: 1,
                                    });
                                  } else {
                                    resolve({
                                      status: 0,
                                      message: "Something went to wrong",
                                    });
                                  }
                                }
                              });
                            });
                          } else {
                            console.log("##############", result.insertId);
                            sum = sum + parseInt(response2.result);
                            embassy =
                              parseInt(embassy) +
                              parseInt(response3.embassy_fees);
                            sum1.push(parseInt(response2.result));
                            sqlll = `INSERT INTO details (service_type,service_id,d_c_id,amount,tracking_id,status_change_date) VALUES ('${data1.c_s_type}' , ${result.insertId} ,${data.a_certificate[index]},${response2.result},'${data1.tracking_id}','${status_change_date}')`;

                            con.query(sqlll, async function (err3, result3) {
                              if (err3) {
                                console.log(err3);
                                resolve({
                                  status: 0,
                                  message: "Something went Wrong",
                                });
                              } else {
                                if (result3.affectedRows > 0) {
                                  resolve({
                                    status: 1,
                                    result: result3,
                                  });
                                } else {
                                  resolve({
                                    status: 0,
                                    message: "Something went to wrong",
                                  });
                                }
                              }
                            });
                          }
                        } else {
                          resolve({
                            status: 0,
                            message: "Something went Wrong...",
                          });
                        }
                      }
                    });
                  }
                } else {
                  for (
                    let index = 0;
                    index < data.a_certificate.length;
                    index++
                  ) {
                    // data.a_certificate.map(async (k) => {
                    let sql1 = `SELECT detail_id FROM details WHERE d_c_id=${data.a_certificate[index]} AND service_id=${result.insertId} AND service_type = 17`;
                    con.query(sql1, async function (err111, result111) {
                      if (err111) {
                        console.log(err111);
                        resolve({
                          status: 0,
                          message: "Something went to wrong",
                        });
                      } else {
                        sql2 = `SELECT s_amount FROM serviceprice WHERE service = 17  AND country = ${data.a_country} AND s_type = ${data.a_type} and deleted = 0;`;

                        let response2 = await new Promise((resolve, reject) => {
                          con.query(sql2, async function (err2, result2) {
                            if (err2) {
                              console.log(err2);
                              resolve({
                                status: 0,
                                message: "Something went wrong",
                              });
                            } else {
                              if (result2.length > 0) {
                                result2.forEach(async function (result) {
                                  resolve({
                                    result: result.s_amount,
                                  });
                                });
                              } else {
                                resolve({
                                  result: parseInt(0),
                                });
                              }
                            }
                          });
                        });

                        let sqll = `SELECT document_type FROM attributes Where attribute_id=${data.a_certificate[index]}`;

                        let resp = await new Promise((resolve, reject) => {
                          con.query(sqll, async function (err1, result1) {
                            if (err1) {
                              console.log(err1);
                              resolve({
                                status: 0,
                                message: "Something went wrong",
                              });
                            } else {
                              if (result1.length > 0) {
                                resolve({
                                  status: 1,
                                  result: result1[0].document_type,
                                });
                              } else {
                                resolve({ status: 0, result: [] });
                              }
                            }
                          });
                        });
                        sql3 = `SELECT amount as embassy_fees FROM embassyfees WHERE service_type = 17  AND country = ${data.a_country} AND document = ${resp.result} AND deleted = 0;`;
                        let response3 = await new Promise((resolve, reject) => {
                          con.query(sql3, async function (err2, result2) {
                            if (err2) {
                              console.log(err2);
                              resolve({
                                status: 0,
                                message: "Something went wrong",
                              });
                            } else {
                              if (result2.length > 0) {
                                result2.forEach(async function (result) {
                                  resolve({
                                    embassy_fees: result.embassy_fees,
                                  });
                                });
                              } else {
                                resolve({
                                  embassy_fees: parseInt(0),
                                });
                              }
                            }
                          });
                        });
                        if (result111.length > 0 || result111.length == 0) {
                          if (result111.length > 0) {
                            sum = sum + parseInt(response2.result);
                            // embassy = embassy + parseInt(response2.embassy_fees);
                            sum1.push(parseInt(response2.result));

                            result111.forEach(async function (result1) {
                              sql3 = `UPDATE details SET amount = ${response2.result} WHERE deleted = 0 AND detail_id = ${result1.detail_id} AND service_type = 17`;

                              con.query(sql3, async function (err3, result3) {
                                if (err3) {
                                  console.log(err3);
                                  resolve({
                                    status: 0,
                                    message: "Something went Wrong",
                                  });
                                } else {
                                  if (result3.affectedRows > 0) {
                                    resolve({
                                      status: 1,
                                    });
                                  } else {
                                    resolve({
                                      status: 0,
                                      message: "Something went to wrong",
                                    });
                                  }
                                }
                              });
                            });
                          } else {
                            sum = sum + parseInt(response2.result);
                            embassy =
                              parseInt(embassy) +
                              parseInt(response3.embassy_fees);
                            sum1.push(parseInt(response2.result));
                            sqlll = `INSERT INTO details (service_type,service_id,d_c_id,amount,tracking_id,status_change_date) VALUES ('${data1.c_s_type}' , ${result.insertId} ,${data.a_certificate[index]},${response2.result},'${data1.tracking_id}','${status_change_date}')`;

                            con.query(sqlll, async function (err3, result3) {
                              if (err3) {
                                console.log(err3);
                                resolve({
                                  status: 0,
                                  message: "Something went Wrong",
                                });
                              } else {
                                if (result3.affectedRows > 0) {
                                  resolve({
                                    status: 1,
                                    result: result3,
                                  });
                                } else {
                                  resolve({
                                    status: 0,
                                    message: "Something went to wrong",
                                  });
                                }
                              }
                            });
                          }
                        } else {
                          resolve({
                            status: 0,
                            message: "Something went Wrong...",
                          });
                        }
                      }
                    });
                  }
                }
              } else {
                resolve({
                  status: 0,
                  message: "Something went to wrong",
                });
              }
            }
          });
        }
      });
    });

    let response4 = new Promise((resolve, reject) => {
      let c_gst = 0;
      let s_gst = 0;
      let i_gst = 0;
      let netamt = 0;

      let s1 =
        sum +
        parseInt(response3.result.courier) +
        parseInt(response3.result.exp_charge) -
        parseInt(response3.result.dis_amt) -
        parseInt(response3.result.coupon_amt);

      if (response3.result.c_tax == 1) {
        if (response3.result.c_gst == 1) {
          if (data1.branch_state_id == response3.result.c_state) {
            c_gst = (s1 * data1.s_c_gst) / 100;
            s_gst = (s1 * data1.s_s_gst) / 100;
            netamt = s1 + c_gst + s_gst + parseInt(embassy);
          } else {
            i_gst = (s1 * data1.s_i_gst) / 100;
            netamt = s1 + i_gst + parseInt(embassy);
          }
        } else {
          netamt = s1 + parseInt(embassy);
        }
      } else {
        netamt = s1 + parseInt(embassy);
      }
      //1003
      sql5 = `INSERT INTO payment(payment_date,c_id,total_amount,courier,embassy_fees,dis_amt,net_amt,sgst,cgst,igst,created_id,paid_amt ,due_amt,u_id,is_tds,tds_amt,tracking_id,exp_charge,coupon_amt,c_tax,created_branch_id,p_receipt_no,invoice_no,is_draft_taken,payment_refund) VALUES ('${response3.result.payment_date
        }',${response3.result.c_id},'${sum}',
                    '${response3.result.courier}','${embassy}','${response3.result.dis_amt
        }','${netamt}','${s_gst}','${c_gst}','${i_gst}',${response3.result.created_id
        },'${response3.result.paid_amt}','${netamt - response3.result.paid_amt - response3.result.tds_amt
        }',${response3.result.u_id},${response3.result.is_tds} , '${response3.result.tds_amt
        }','${mysql_real_escape_string(response3.result.tracking_id)}','${response3.result.exp_charge
        }','${response3.result.coupon_amt}','${response3.result.c_tax}',${response3.result.created_branch_id
        },'${payment.result.p_receipt_no}','${response3.result.invoice_no}',${response3.result.is_draft_taken
        },'${response3.result.payment_refund}')`;
      con.query(sql5, async function (err5, result5) {
        if (err5) {
          console.log(err5);
          resolve({ status: 0, message: "Something went wrong" });
        } else {
          if (result5.affectedRows > 0) {
            resolve({
              status: 1,
              igst: i_gst,
              sgst: s_gst,
              cgst: c_gst,
              net_before: s1,
              serviceprice: response3.result,
              total_amt: sum,
              net_amt: netamt,
              amount: sum1,
              embassy_fees: embassy,
              message: "Apostille Updated Successfully....",
            });
          } else {
            resolve({
              status: 0,
              result: 0,
              message: "Something went wrong..",
            });
          }
        }
      });
    });
    return response4;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function searchApostilleCustomer(data) {
  try {
    let record = [];
    getuserquery = `select * from users where u_id=${data.u_id} and deleted=0`;
    let response = await new Promise((resolve, reject) => {
      con.query(getuserquery, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            if (result[0].user_type == 1) {
              getallchilduser = `select * from users where (p_u_id=${data.u_id} or branch_id=${result[0].branch_id}) and deleted=0`;
              con.query(getallchilduser, function (err, res) {
                if (err) {
                  console.log(err);
                  resolve({ status: 0, message: "Something went to wrong" });
                } else {
                  res.forEach(function (r) {
                    record.push(r.u_id);
                  });
                  resolve({
                    record: record,
                    type: result[0].user_type,
                    s_u_permission: result[0].s_u_permission,
                  });
                }
              });
            } else {
              resolve({
                type: result[0].user_type,
                s_u_permission: result[0].s_u_permission,
              });
            }
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    let sql = "";
    let searchApostillePaginationQuery = "";
    if (
      response.type == 1 ||
      (response.type == 3 && response.s_u_permission == 1)
    ) {
      sql = `SELECT *,(SELECT SUM(receive_amt) FROM draft_payment  WHERE draft_payment.c_id = customer.c_id and draft_payment.deleted=0 and draft_payment.receive_amt!=0  and draft_payment.approved_status =0 and draft_payment.deleted = 0 ) as total_draft,details.under_process_date AS process_date,(SELECT name FROM attributes WHERE attributes.attribute_id  =apostille.a_type)as apostille_type,(SELECT c_date FROM customer WHERE customer.c_id =apostille.c_id)as r_date,(SELECT name FROM attributes WHERE attributes.attribute_id =apostille.a_country)as apostille_country,(SELECT name FROM attributes WHERE attributes.attribute_id =details.d_c_id)as apostille_certificate,(SELECT c_prefix FROM customer WHERE customer.c_id=apostille.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=apostille.c_id) AS customer_name,(SELECT c_s_type FROM customer WHERE customer.c_id=apostille.c_id) AS c_s_type,
      (SELECT c_id FROM customer WHERE customer.c_id=apostille.c_id) as my_C_id,
      (SELECT u_id FROM customer WHERE customer.c_id=apostille.c_id) AS cuid,(SELECT user_type FROM users where users.u_id  = (SELECT u_id FROM customer WHERE customer.c_id=apostille.c_id)) as cutype,
      (SELECT payment.due_amt FROM payment where payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=apostille.c_id) ORDER BY payment.payment_id DESC LIMIT 1) as my_Due_Amt,
      (SELECT payment.paid_amt FROM payment where payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=apostille.c_id) ORDER BY payment.payment_id DESC LIMIT 1) as my_paid_amt,
      (SELECT payment.net_amt FROM payment where payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=apostille.c_id) ORDER BY payment.payment_id DESC LIMIT 1) as my_net_amt,
      (SELECT payment.tds_amt FROM payment where payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=apostille.c_id) ORDER BY payment.payment_id DESC LIMIT 1) as my_tds_amt,
      (SELECT draft_payment.d_p_id FROM draft_payment where draft_payment.deleted=0 and draft_payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=apostille.c_id) and draft_payment.approved_status=0 and draft_payment.due_amt=0 ORDER BY draft_payment.d_p_id DESC LIMIT 1) as Draf_payment FROM details,apostille,customer WHERE customer.c_id=apostille.c_id AND details.service_id=apostille.a_id and (customer.branch_id =${data.branch_id} OR customer.foreign_branch = ${data.branch_id}) AND details.service_type=17 AND details.deleted = 0  AND apostille.deleted = 0  AND customer.deleted = 0 AND customer.is_cancel = 0`;

      searchApostillePaginationQuery = `SELECT COUNT(details.detail_id) as trows FROM details,apostille,customer WHERE customer.c_id=apostille.c_id AND details.service_id=apostille.a_id and (customer.branch_id =${data.branch_id} OR customer.foreign_branch = ${data.branch_id}) AND details.service_type=17 AND details.deleted = 0  AND apostille.deleted = 0  AND customer.deleted = 0 AND customer.is_cancel = 0`;
    } else {
      if (data.u_id != 1) {
        sql = `SELECT *,(SELECT SUM(receive_amt) FROM draft_payment  WHERE draft_payment.c_id = customer.c_id and draft_payment.deleted=0 and draft_payment.receive_amt!=0  and draft_payment.approved_status =0 and draft_payment.deleted = 0 ) as total_draft,details.under_process_date AS process_date,(SELECT name FROM attributes WHERE attributes.attribute_id  =apostille.a_type)as apostille_type,(SELECT c_date FROM customer WHERE customer.c_id =apostille.c_id)as r_date,(SELECT name FROM attributes WHERE attributes.attribute_id =apostille.a_country)as apostille_country,(SELECT name FROM attributes WHERE attributes.attribute_id =details.d_c_id)as apostille_certificate,(SELECT c_prefix FROM customer WHERE customer.c_id=apostille.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=apostille.c_id) AS customer_name,(SELECT c_s_type FROM customer WHERE customer.c_id=apostille.c_id) AS c_s_type,
        (SELECT c_id FROM customer WHERE customer.c_id=apostille.c_id) as my_C_id,
        (SELECT branch_id FROM customer WHERE customer.c_id=apostille.c_id) AS branch_id,(SELECT u_id FROM customer WHERE customer.c_id=apostille.c_id) AS cuid,(SELECT user_type FROM users where users.u_id  = (SELECT u_id FROM customer WHERE customer.c_id=apostille.c_id)) as cutype,
        (SELECT payment.due_amt FROM payment where payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=apostille.c_id) ORDER BY payment.payment_id DESC LIMIT 1) as my_Due_Amt,
        (SELECT payment.paid_amt FROM payment where payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=apostille.c_id) ORDER BY payment.payment_id DESC LIMIT 1) as my_paid_amt,
      (SELECT payment.net_amt FROM payment where payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=apostille.c_id) ORDER BY payment.payment_id DESC LIMIT 1) as my_net_amt,
      (SELECT payment.tds_amt FROM payment where payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=apostille.c_id) ORDER BY payment.payment_id DESC LIMIT 1) as my_tds_amt,
        (SELECT draft_payment.d_p_id FROM draft_payment where draft_payment.deleted=0 and draft_payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=apostille.c_id) and draft_payment.approved_status=0 and draft_payment.due_amt=0 ORDER BY draft_payment.d_p_id DESC LIMIT 1) as Draf_payment FROM details,apostille,customer  WHERE customer.c_id=apostille.c_id and details.service_id=apostille.a_id AND (customer.u_id=${data.u_id} or customer.foreign_branchuser=${data.u_id} OR customer.created_id = ${data.u_id}) AND details.service_type=17 AND details.deleted = 0  AND apostille.deleted = 0  AND customer.deleted = 0 AND customer.is_cancel = 0`;

        searchApostillePaginationQuery = `SELECT COUNT(details.detail_id) as trows FROM details,apostille,customer  WHERE customer.c_id=apostille.c_id and details.service_id=apostille.a_id AND (customer.u_id=${data.u_id} or customer.foreign_branchuser=${data.u_id} OR customer.created_id = ${data.u_id}) AND details.service_type=17 AND details.deleted = 0  AND apostille.deleted = 0  AND customer.deleted = 0 AND customer.is_cancel = 0`;
      } else {
        sql = `SELECT *,(SELECT SUM(receive_amt) FROM draft_payment  WHERE draft_payment.c_id = customer.c_id and draft_payment.deleted=0 and draft_payment.receive_amt!=0  and draft_payment.approved_status =0 and draft_payment.deleted = 0 ) as total_draft,details.under_process_date AS process_date,(SELECT name FROM attributes WHERE attributes.attribute_id  =apostille.a_type)as apostille_type,(SELECT c_date FROM customer WHERE customer.c_id =apostille.c_id)as r_date,(SELECT name FROM attributes WHERE attributes.attribute_id =apostille.a_country)as apostille_country,(SELECT name FROM attributes WHERE attributes.attribute_id =details.d_c_id)as apostille_certificate,(SELECT c_prefix FROM customer WHERE customer.c_id=apostille.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=apostille.c_id) AS customer_name,(SELECT c_s_type FROM customer WHERE customer.c_id=apostille.c_id) AS c_s_type,
        (SELECT c_id FROM customer WHERE customer.c_id=apostille.c_id) as my_C_id,
        (SELECT branch_id FROM customer WHERE customer.c_id=apostille.c_id) AS branch_id,(SELECT u_id FROM customer WHERE customer.c_id=apostille.c_id) AS cuid,(SELECT user_type FROM users where users.u_id  = (SELECT u_id FROM customer WHERE customer.c_id=apostille.c_id)) as cutype,
        (SELECT payment.due_amt FROM payment where payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=apostille.c_id) ORDER BY payment.payment_id DESC LIMIT 1) as my_Due_Amt,(SELECT payment.paid_amt FROM payment where payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=apostille.c_id) ORDER BY payment.payment_id DESC LIMIT 1) as my_paid_amt,
        (SELECT payment.net_amt FROM payment where payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=apostille.c_id) ORDER BY payment.payment_id DESC LIMIT 1) as my_net_amt,
        (SELECT payment.tds_amt FROM payment where payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=apostille.c_id) ORDER BY payment.payment_id DESC LIMIT 1) as my_tds_amt,
        (SELECT draft_payment.d_p_id FROM draft_payment where draft_payment.deleted=0 and draft_payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=apostille.c_id) and draft_payment.approved_status=0 and draft_payment.due_amt=0 ORDER BY draft_payment.d_p_id DESC LIMIT 1) as Draf_payment FROM details,apostille,customer  WHERE customer.c_id=apostille.c_id and details.service_id=apostille.a_id  AND details.service_type=17 AND details.deleted = 0  AND apostille.deleted = 0  AND customer.deleted = 0 AND customer.is_cancel = 0`;

        searchApostillePaginationQuery = `SELECT COUNT(details.detail_id) as trows FROM details,apostille,customer  WHERE customer.c_id=apostille.c_id and details.service_id=apostille.a_id  AND details.service_type=17 AND details.deleted = 0  AND apostille.deleted = 0  AND customer.deleted = 0 AND customer.is_cancel = 0`;
      }
    }

    // sql = `SELECT *,(SELECT COUNT(*) FROM attestation) as trows,(SELECT c_name FROM customer WHERE customer.c_id =attestation.c_id)as customer_name,(SELECT c_date FROM customer WHERE customer.c_id =attestation.c_id)as r_date,(SELECT name FROM attributes WHERE attributes.attribute_id =attestation.a_type)as attestation_type,(SELECT name FROM attributes WHERE attributes.attribute_id =attestation.a_country)as country_name,(SELECT GROUP_CONCAT(attributes.name) as name FROM attributes where FIND_IN_SET (attributes.attribute_id , attestation.a_certificate)) as certificate FROM attestation,customer WHERE customer.c_id=attestation.c_id and attestation.deleted=0`;
    if (typeof data.c_name != "undefined" && data.c_name != "") {
      sql += ` and customer.c_name like '%${data.c_name}%'`;
      searchApostillePaginationQuery += ` and customer.c_name like '%${data.c_name}%'`;
    }
    if (typeof data.c_mo_no != "undefined" && data.c_mo_no != "") {
      sql += ` and customer.c_mo_no like '%${data.c_mo_no}%'`;
      searchApostillePaginationQuery += ` and customer.c_mo_no like '%${data.c_mo_no}%'`;
    }
    if (
      typeof data.status_id != "undefined" &&
      data.status_id != "" &&
      data.status_id != 0
    ) {
      sql += ` and details.status_id=${data.status_id}`;
      searchApostillePaginationQuery += ` and details.status_id=${data.status_id}`;
    }

    if (
      typeof data.a_country != "undefined" &&
      data.a_country != "" &&
      data.a_country != 0
    ) {
      sql += ` and apostille.a_country=${data.a_country}`;
      searchApostillePaginationQuery += ` and details.status_id=${data.status_id}`;
    }

    if (
      typeof data.s_date != "undefined" &&
      data.s_date != "" &&
      typeof data.e_date != "undefined" &&
      data.e_date != ""
    ) {
      sql += ` and (STR_TO_DATE(customer.c_date,'%d-%m-%Y')>='${data.s_date}' AND STR_TO_DATE(customer.c_date,'%d-%m-%Y')<='${data.e_date}')`;
      searchApostillePaginationQuery += ` and (STR_TO_DATE(customer.c_date,'%d-%m-%Y')>='${data.s_date}' AND STR_TO_DATE(customer.c_date,'%d-%m-%Y')<='${data.e_date}')`;
    }
    if (
      data.tracking_id != "undefined" &&
      data.tracking_id != "" &&
      data.tracking_id.length != 2
    ) {
      sql += ` and details.tracking_id like '%${data.tracking_id}%'`;
      searchApostillePaginationQuery += ` and details.tracking_id like '%${data.tracking_id}%'`;
    }
    if (typeof data.c_email != "undefined" && data.c_email != "") {
      sql += ` and customer.c_email like '%${data.c_email}%'`;
      searchApostillePaginationQuery += ` and customer.c_email like '%${data.c_email}%'`;
    }

    sql += ` ORDER BY detail_id DESC limit ${(data.page - 1) * data.perpage},${data.perpage
      }`;

    let resp = await new Promise((resolve, reject) => {
      con.query(searchApostillePaginationQuery, function (err1, lres1) {
        if (err1) {
          console.log(err1);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (lres1.length > 0) {
            resolve({
              status: 1,
              t_rows: lres1[0].trows,
            });
          } else {
            resolve({
              status: 0,
              data: [],
            });
          }
        }
      });
    });
    let response1 = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              data: result,
              t_rows: resp.t_rows,
            });
          } else {
            resolve({
              status: 0,
              data: [],
            });
          }
        }
      });
    });
    return response1;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function getapostillecustomerbyid(data) {
  try {
    sql = `SELECT apostille.c_id
  FROM details
  INNER JOIN apostille ON apostille.a_id = details.service_id WHERE details.detail_id = ${data.detail_id}`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            result.forEach(function (res) {
              resolve({
                status: 1,
                result: res.c_id,
              });
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    sql1 = ` SELECT * FROM apostille  WHERE deleted = 0 AND c_id = ${response.result}`;
    let response1 = await new Promise((resolve, reject) => {
      con.query(sql1, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              result: result,
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    return response1;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function deleteApostilleCustomer(data, date) {
  try {
    //details deleted 1
    sql = `UPDATE details SET deleted=1 WHERE detail_id =${data.id}`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.affectedRows > 0) {
            //get apostille id of deleted record
            sql1 = `SELECT service_id,d_c_id FROM details WHERE detail_id =${data.id}`;

            con.query(sql1, function (err1, result1) {
              if (err1) {
                console.log(err1);
                resolve({ status: 0, message: "Something went to wrong" });
              } else {
                if (result1.length > 0) {
                  resolve({
                    status: 1,
                    result: result1[0],
                  });
                }
              }
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });

    //get ceritificate of customer
    sql2 = `SELECT a_certificate FROM apostille WHERE a_id=${response.result.service_id}`;
    let response2 = await new Promise((resolve, reject) => {
      con.query(sql2, function (err2, result2) {
        if (err2) {
          console.log(err2);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result2.length > 0) {
            resolve({
              result: result2[0].a_certificate,
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });

    //certificate covert string to array and only not deleted ceritificate push in array
    let crecord = [];
    response2.result.split(",").map((k) => {
      if (response.result.d_c_id != parseInt(k)) {
        crecord.push(parseInt(k));
      }
    });

    //update new certificate record in apostille table
    sql3 = `UPDATE apostille SET a_certificate='${crecord.toString()}'  WHERE a_id=${response.result.service_id
      } `;
    let response3 = await new Promise((resolve, reject) => {
      con.query(sql3, function (err3, result3) {
        if (err3) {
          console.log(err3);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result3.affectedRows > 0) {
            //get apostille customer record which is updated
            sql4 = `SELECT * FROM apostille WHERE a_id=${response.result.service_id}`;
            con.query(sql4, function (err4, result4) {
              if (err4) {
                console.log(err4);
                resolve({ status: 0, message: "Something went to wrong" });
              } else {
                if (result4.length > 0) {
                  resolve({
                    result: result4,
                  });
                }
              }
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    //if all certificate was deleted then update apostille customer  deleted 1
    if (response3.result[0].a_certificate == []) {
      sql10 = `UPDATE apostille SET deleted=1 WHERE a_id=${response.result.service_id}`;
      let res10 = await new Promise((resolve, reject) => {
        con.query(sql10, function (err10, result10) {
          if (err10) {
            console.log(err10);
            resolve({ status: 0, message: "Something went to wrong" });
          } else {
            if (result10.affectedRows > 0) {
              resolve({ status: 1 });
            } else {
              resolve({
                status: 0,
                message: "Something went to wrong",
              });
            }
          }
        });
      });
    }

    //get last record of payment
    sql6 = `SELECT * FROM payment WHERE c_id=${response3.result[0].c_id} ORDER BY payment_id DESC LIMIT 1`;
    let response6 = await new Promise((resolve, reject) => {
      con.query(sql6, function (err6, result6) {
        if (err6) {
          console.log(err6);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result6.length > 0) {
            resolve({ status: 1, result: result6 });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });

    let sqll = `SELECT document_type FROM attributes Where attribute_id=${response.result.d_c_id}`;
    let resp = await new Promise((resolve, reject) => {
      con.query(sqll, async function (err1, result1) {
        if (err1) {
          console.log(err1);
          resolve({ status: 0, message: "Something went wrong" });
        } else {
          if (result1.length > 0) {
            resolve({ status: 1, result: result1[0].document_type });
          } else {
            resolve({ status: 0, result: [] });
          }
        }
      });
    });

    let sqlll = `SELECT amount as embassy_fees FROM embassyfees WHERE service_type = 10  AND country = ${response3.result[0].a_country} AND document = ${resp.result} AND deleted = 0;`;
    let resp1 = await new Promise(async (resolve, reject) => {
      con.query(sqlll, async function (err2, result2) {
        if (err2) {
          console.log(err2);
          resolve({ status: 0, message: "Something went wrong" });
        } else {
          if (result2.length > 0) {
            result2.forEach(async function (result) {
              resolve({
                embassy_fees: result.embassy_fees,
              });
            });
          } else {
            resolve({
              embassy_fees: parseInt(0),
            });
          }
        }
      });
    });

    //get amount of 1 certificate and calculate new total amount as well as net amount
    sql8 = `SELECT s_amount FROM serviceprice WHERE service = 17 AND country = ${response3.result[0].a_country} AND s_type = ${response3.result[0].a_type}  and deleted = 0;`;
    let response5 = await new Promise((resolve, reject) => {
      con.query(sql8, function (err8, result8) {
        if (err8) {
          console.log(err8);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          let samount;
          if (result8.length <= 0) {
            samount = 0;
          } else {
            samount = result8[0].s_amount;
          }
          //last total amount of payment - 1 certificate amount
          let embassy =
            response6.result[0].embassy_fees > parseInt(resp1.embassy_fees)
              ? response6.result[0].embassy_fees - parseInt(resp1.embassy_fees)
              : response6.result[0].embassy_fees;
          let total_amt = response6.result[0].total_amount - samount;
          let c_gst = 0;
          let s_gst = 0;
          let i_gst = 0;
          let netamt = 0;

          //if total amount 0 then automatically netamount is 0
          if (total_amt != 0) {
            let s1 =
              total_amt +
              parseInt(response6.result[0].courier) +
              parseInt(response6.result[0].exp_charge) -
              parseInt(response6.result[0].dis_amt) -
              parseInt(response6.result[0].coupon_amt);

            if (response6.result[0].c_tax == 1) {
              if (response6.result[0].c_gst == 1) {
                if (data.branch_state_id == response6.result[0].c_state) {
                  c_gst = (s1 * data.s_c_gst) / 100;
                  s_gst = (s1 * data.s_s_gst) / 100;
                  netamt = s1 + c_gst + s_gst + parseInt(embassy);
                } else {
                  i_gst = (s1 * data.s_i_gst) / 100;
                  netamt = s1 + i_gst + parseInt(embassy);
                }
              } else {
                netamt = s1 + parseInt(embassy);
              }
            } else {
              netamt = s1 + parseInt(embassy);
            }
          } else {
            embassy = 0;
          }

          if (result8.length > 0) {
            //insert update payment record which is generated after delete 1  certificate
            sql9 = `INSERT INTO payment (payment_date,c_id,total_amount,courier,dis_amt,mode_id,chk_dd_no,chk_dd_date,bank_name,net_amt,paid_amt,embassy_fees,due_amt,u_id,service_tax,igst,cgst,sgst,exp_charge,coupon_amt,c_tax,is_draft_taken,is_tds,tds_amt,p_receipt_no,invoice_no,payment_refund ) VALUES ('${date}',${response6.result[0].c_id
              },'${total_amt}','${response6.result[0].courier}','${response6.result[0].dis_amt
              }',${response6.result[0].mode_id},'${response6.result[0].chk_dd_no != null
                ? response6.result[0].chk_dd_no
                : ""
              }','${response6.result[0].chk_dd_date != null
                ? response6.result[0].chk_dd_date
                : ""
              }','${response6.result[0].bank_name != null
                ? response6.result[0].bank_name != null
                : ""
              }','${netamt}','${response6.result[0].paid_amt}','${embassy}','${parseInt(netamt) -
              parseInt(response6.result[0].paid_amt) -
              parseInt(response6.result[0].tds_amt)
              }',${response6.result[0].u_id},'${response6.result[0].service_tax
              }','${i_gst}','${c_gst}','${s_gst}','${response6.result[0].exp_charge
              }',
             '${response6.result[0].coupon_amt}','${response6.result[0].c_tax
              }',${response6.result[0].is_draft_taken},${response6.result[0].is_tds
              },'${response6.result[0].tds_amt}','${response6.result[0].p_receipt_no
              }','${response6.result[0].invoice_no}','${response6.result[0].payment_refund
              }' )`;

            con.query(sql9, function (err9, result9) {
              if (err9) {
                console.log(err9);
                resolve({ status: 0, message: "Something went to wrong" });
              } else {
                if (result9.affectedRows > 0) {
                  resolve({ status: 1, message: "Delete Successfully...." });
                }
              }
            });
          } else {
            resolve({ status: 1, message: "Delete Successfully...." });
          }
        }
      });
    });
    return response5;

    // return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

//cover letter

async function getbusinesssummery(data) {
  try {
    sql = `SELECT user_type FROM users WHERE u_id = ${data.u_id} and deleted =0`;

    let response1 = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            result.forEach(function (result) {
              resolve({
                status: 1,
                user_type: result.user_type,
              });
            });
          } else {
            resolve({
              status: 0,
              user_type: "Something went wrong...",
            });
          }
        }
      });
    });
    // if (response1.user_type == 0) {
    //   sql1 = `SELECT *,(SELECT COUNT(*) FROM customer WHERE deleted =0)as trows,(SELECT due_amt FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as due_amt,(SELECT invoice_no FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as invoice_no,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname,(SELECT paid_amt FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as paid_amt FROM customer WHERE deleted = 0 `;
    // } else if (response1.user_type == 1) {
    //   sql1 = `SELECT *,(SELECT COUNT(*) FROM customer WHERE deleted =0 AND (branch_id = ${data.b_id} or foreign_branch=${data.b_id}))as trows,(SELECT due_amt FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as due_amt,(SELECT invoice_no FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as invoice_no,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname,(SELECT paid_amt FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as paid_amt FROM customer WHERE (branch_id = ${data.b_id} or foreign_branch=${data.b_id}) AND deleted = 0`;
    // } else {
    //   sql1 = `SELECT *,(SELECT COUNT(*) FROM customer WHERE deleted =0 AND u_id = ${data.u_id})as trows,(SELECT due_amt FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as due_amt,(SELECT invoice_no FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as invoice_no,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname,(SELECT paid_amt FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as paid_amt FROM customer WHERE u_id = ${data.u_id} AND deleted = 0 `;
    // }
    if (response1.user_type == 0) {
      //2303
      sql1 = `SELECT customer.is_cancel,customer.is_block,customer.c_id,customer.c_prefix,customer.c_name,customer.c_date,customer.c_mo_no,customer.c_email,customer.c_address,
      customer.c_gst_no,customer.c_s_type,customer.c_total_customer,customer.branch_id,customer.u_id,customer.foreign_branch,customer.c_tax,customer.tracking_id,details.detail_id,details.service_id,(SELECT name FROM attributes WHERE attributes.attribute_id = customer.c_state)as state,(SELECT b_name FROM branch WHERE branch.branch_id = customer.foreign_branch)as branch_name,(SELECT due_amt FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as due_amt,(SELECT invoice_no FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as invoice_no,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname,(SELECT paid_amt FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as paid_amt FROM customer LEFT JOIN visa ON customer.c_id = visa.c_id left join details ON visa.v_id=details.service_id WHERE customer.is_cancel = 0 and customer.is_block = 1 and  customer.deleted = 0 and visa.deleted=0 and details.deleted=0 and details.service_type=8 group by customer.c_id UNION
      SELECT customer.is_cancel,customer.is_block,customer.c_id,customer.c_prefix,customer.c_name,customer.c_date,customer.c_mo_no,customer.c_email,customer.c_address,
      customer.c_gst_no,customer.c_s_type,customer.c_total_customer,customer.branch_id,customer.u_id,customer.foreign_branch,customer.c_tax,customer.tracking_id,details.detail_id,details.service_id,(SELECT name FROM attributes WHERE attributes.attribute_id = customer.c_state)as state,(SELECT b_name FROM branch WHERE branch.branch_id = customer.foreign_branch)as branch_name,(SELECT due_amt FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as due_amt,(SELECT invoice_no FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as invoice_no,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname,(SELECT paid_amt FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as paid_amt FROM customer LEFT JOIN attestation ON customer.c_id = attestation.c_id left join details ON attestation.a_id=details.service_id WHERE customer.is_cancel = 0 and customer.is_block = 1 and customer.deleted = 0 and attestation.deleted=0 and details.deleted=0 and details.service_type=10 group by customer.c_id UNION
      SELECT customer.is_cancel,customer.is_block,customer.c_id,customer.c_prefix,customer.c_name,customer.c_date,customer.c_mo_no,customer.c_email,customer.c_address,
      customer.c_gst_no,customer.c_s_type,customer.c_total_customer,customer.branch_id,customer.u_id,customer.foreign_branch,customer.c_tax,customer.tracking_id,details.detail_id,details.service_id,(SELECT name FROM attributes WHERE attributes.attribute_id = customer.c_state)as state,(SELECT b_name FROM branch WHERE branch.branch_id = customer.foreign_branch)as branch_name,(SELECT due_amt FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as due_amt,(SELECT invoice_no FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as invoice_no,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname,(SELECT paid_amt FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as paid_amt FROM customer LEFT JOIN translation ON customer.c_id = translation.c_id left join details ON translation.a_id=details.service_id WHERE customer.is_cancel = 0 and customer.is_block = 1 and customer.deleted = 0 and translation.deleted=0 and details.deleted=0 and details.service_type=20 group by customer.c_id UNION
      SELECT customer.is_cancel,customer.is_block,customer.c_id,customer.c_prefix,customer.c_name,customer.c_date,customer.c_mo_no,customer.c_email,customer.c_address,
      customer.c_gst_no,customer.c_s_type,customer.c_total_customer,customer.branch_id,customer.u_id,customer.foreign_branch,customer.c_tax,customer.tracking_id,details.detail_id,details.service_id,(SELECT name FROM attributes WHERE attributes.attribute_id = customer.c_state)as state,(SELECT b_name FROM branch WHERE branch.branch_id = customer.foreign_branch)as branch_name,(SELECT due_amt FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as due_amt,(SELECT invoice_no FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as invoice_no,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname,(SELECT paid_amt FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as paid_amt FROM customer LEFT JOIN apostille ON customer.c_id = apostille.c_id left join details ON apostille.a_id=details.service_id WHERE customer.is_cancel = 0 and customer.deleted = 0 and customer.is_block = 1 and apostille.deleted=0 and details.deleted=0 and details.service_type=17 group by customer.c_id`;
    } else if (response1.user_type == 1) {
      sql1 = `SELECT customer.is_cancel,customer.is_block,customer.c_id,customer.c_prefix,customer.c_name,customer.c_date,customer.c_mo_no,customer.c_email,customer.c_address,
      customer.c_gst_no,customer.c_s_type,customer.c_total_customer,customer.branch_id,customer.u_id,customer.foreign_branch,customer.c_tax,customer.tracking_id,details.detail_id,details.service_id,(SELECT name FROM attributes WHERE attributes.attribute_id = customer.c_state)as state,(SELECT b_name FROM branch WHERE branch.branch_id = customer.foreign_branch)as branch_name,(SELECT due_amt FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as due_amt,(SELECT invoice_no FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as invoice_no,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname,(SELECT paid_amt FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as paid_amt FROM customer LEFT JOIN visa ON customer.c_id = visa.c_id left join details ON visa.v_id=details.service_id WHERE customer.is_cancel = 0 and customer.is_block = 1 and  customer.deleted = 0 and visa.deleted=0 and details.deleted=0 and details.service_type=8 and (customer.branch_id = ${data.b_id} or customer.foreign_branch=${data.b_id}) group by customer.c_id UNION
      SELECT customer.is_cancel,customer.is_block,customer.c_id,customer.c_prefix,customer.c_name,customer.c_date,customer.c_mo_no,customer.c_email,customer.c_address,
      customer.c_gst_no,customer.c_s_type,customer.c_total_customer,customer.branch_id,customer.u_id,customer.foreign_branch,customer.c_tax,customer.tracking_id,details.detail_id,details.service_id,(SELECT name FROM attributes WHERE attributes.attribute_id = customer.c_state)as state,(SELECT b_name FROM branch WHERE branch.branch_id = customer.foreign_branch)as branch_name,(SELECT due_amt FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as due_amt,(SELECT invoice_no FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as invoice_no,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname,(SELECT paid_amt FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as paid_amt FROM customer LEFT JOIN attestation ON customer.c_id = attestation.c_id left join details ON attestation.a_id=details.service_id WHERE customer.is_cancel = 0 and customer.is_block = 1 and  customer.deleted = 0 and attestation.deleted=0 and details.deleted=0 and details.service_type=10 and (customer.branch_id = ${data.b_id} or customer.foreign_branch=${data.b_id}) group by customer.c_id UNION
      SELECT customer.is_cancel,customer.is_block,customer.c_id,customer.c_prefix,customer.c_name,customer.c_date,customer.c_mo_no,customer.c_email,customer.c_address,
      customer.c_gst_no,customer.c_s_type,customer.c_total_customer,customer.branch_id,customer.u_id,customer.foreign_branch,customer.c_tax,customer.tracking_id,details.detail_id,details.service_id,(SELECT name FROM attributes WHERE attributes.attribute_id = customer.c_state)as state,(SELECT b_name FROM branch WHERE branch.branch_id = customer.foreign_branch)as branch_name,(SELECT due_amt FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as due_amt,(SELECT invoice_no FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as invoice_no,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname,(SELECT paid_amt FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as paid_amt FROM customer LEFT JOIN translation ON customer.c_id = translation.c_id left join details ON translation.a_id=details.service_id WHERE customer.is_cancel = 0 and customer.is_block = 1 and  customer.deleted = 0 and translation.deleted=0 and details.deleted=0 and details.service_type=20 and (customer.branch_id = ${data.b_id} or customer.foreign_branch=${data.b_id}) group by customer.c_id UNION
      SELECT customer.is_cancel,customer.is_block,customer.c_id,customer.c_prefix,customer.c_name,customer.c_date,customer.c_mo_no,customer.c_email,customer.c_address,
      customer.c_gst_no,customer.c_s_type,customer.c_total_customer,customer.branch_id,customer.u_id,customer.foreign_branch,customer.c_tax,customer.tracking_id,details.detail_id,details.service_id,(SELECT name FROM attributes WHERE attributes.attribute_id = customer.c_state)as state,(SELECT b_name FROM branch WHERE branch.branch_id = customer.foreign_branch)as branch_name,(SELECT due_amt FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as due_amt,(SELECT invoice_no FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as invoice_no,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname,(SELECT paid_amt FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as paid_amt FROM customer LEFT JOIN apostille ON customer.c_id = apostille.c_id left join details ON apostille.a_id=details.service_id WHERE customer.is_cancel = 0 and customer.is_block = 1 and  customer.deleted = 0 and apostille.deleted=0 and details.deleted=0 and details.service_type=17 and (customer.branch_id = ${data.b_id} or customer.foreign_branch=${data.b_id}) group by customer.c_id`;
    } else {
      sql1 = `SELECT customer.is_cancel,customer.is_block,customer.c_id,customer.c_prefix,customer.c_name,customer.c_date,customer.c_mo_no,customer.c_email,customer.c_address,
      customer.c_gst_no,customer.c_s_type,customer.c_total_customer,customer.branch_id,customer.u_id,customer.foreign_branch,customer.c_tax,customer.tracking_id,details.detail_id,details.service_id,(SELECT name FROM attributes WHERE attributes.attribute_id = customer.c_state)as state,(SELECT b_name FROM branch WHERE branch.branch_id = customer.foreign_branch)as branch_name,(SELECT due_amt FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as due_amt,(SELECT invoice_no FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as invoice_no,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname,(SELECT paid_amt FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as paid_amt FROM customer LEFT JOIN visa ON customer.c_id = visa.c_id left join details ON visa.v_id=details.service_id WHERE customer.is_cancel = 0 and  customer.deleted = 0 and customer.is_block = 1 and visa.deleted=0 and details.deleted=0 and details.service_type=8 and  u_id = ${data.u_id} group by customer.c_id UNION
      SELECT customer.is_cancel,customer.is_block,customer.c_id,customer.c_prefix,customer.c_name,customer.c_date,customer.c_mo_no,customer.c_email,customer.c_address,
      customer.c_gst_no,customer.c_s_type,customer.c_total_customer,customer.branch_id,customer.u_id,customer.foreign_branch,customer.c_tax,customer.tracking_id,details.detail_id,details.service_id,(SELECT name FROM attributes WHERE attributes.attribute_id = customer.c_state)as state,(SELECT b_name FROM branch WHERE branch.branch_id = customer.foreign_branch)as branch_name,(SELECT due_amt FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as due_amt,(SELECT invoice_no FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as invoice_no,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname,(SELECT paid_amt FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as paid_amt FROM customer LEFT JOIN attestation ON customer.c_id = attestation.c_id left join details ON attestation.a_id=details.service_id WHERE customer.is_cancel = 0 and customer.is_block = 1 and  customer.deleted = 0 and attestation.deleted=0 and details.deleted=0 and details.service_type=10 and u_id = ${data.u_id} group by customer.c_id UNION
      SELECT customer.is_cancel,customer.is_block,customer.c_id,customer.c_prefix,customer.c_name,customer.c_date,customer.c_mo_no,customer.c_email,customer.c_address,
      customer.c_gst_no,customer.c_s_type,customer.c_total_customer,customer.branch_id,customer.u_id,customer.foreign_branch,customer.c_tax,customer.tracking_id,details.detail_id,details.service_id,(SELECT name FROM attributes WHERE attributes.attribute_id = customer.c_state)as state,(SELECT b_name FROM branch WHERE branch.branch_id = customer.foreign_branch)as branch_name,(SELECT due_amt FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as due_amt,(SELECT invoice_no FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as invoice_no,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname,(SELECT paid_amt FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as paid_amt FROM customer LEFT JOIN translation ON customer.c_id = translation.c_id left join details ON translation.a_id=details.service_id WHERE customer.is_cancel = 0 and customer.is_block = 1 and  customer.deleted = 0 and translation.deleted=0 and details.deleted=0 and details.service_type=20 and u_id = ${data.u_id} group by customer.c_id UNION
      SELECT customer.is_cancel,customer.is_block,customer.c_id,customer.c_prefix,customer.c_name,customer.c_date,customer.c_mo_no,customer.c_email,customer.c_address,
      customer.c_gst_no,customer.c_s_type,customer.c_total_customer,customer.branch_id,customer.u_id,customer.foreign_branch,customer.c_tax,customer.tracking_id,details.detail_id,details.service_id,(SELECT name FROM attributes WHERE attributes.attribute_id = customer.c_state)as state,(SELECT b_name FROM branch WHERE branch.branch_id = customer.foreign_branch)as branch_name,(SELECT due_amt FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as due_amt,(SELECT invoice_no FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as invoice_no,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname,(SELECT paid_amt FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as paid_amt FROM customer LEFT JOIN apostille ON customer.c_id = apostille.c_id left join details ON apostille.a_id=details.service_id WHERE customer.is_cancel = 0 and customer.is_block = 1 and customer.deleted = 0 and apostille.deleted=0 and details.deleted=0 and details.service_type=17 and u_id = ${data.u_id} group by customer.c_id`;
    }
    let response2 = await new Promise((resolve, reject) => {
      con.query(sql1, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              result: result,
            });
          } else {
            resolve({
              status: 1,
              result: [],
            });
          }
        }
      });
    });

    // if (response1.user_type == 0) {
    //   sql2 = `SELECT *,(SELECT COUNT(*) FROM customer WHERE deleted =0)as trows,(SELECT due_amt FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as due_amt,(SELECT invoice_no FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as invoice_no,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname,(SELECT paid_amt FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as paid_amt FROM customer WHERE deleted = 0 order by STR_TO_DATE(customer.c_date,"%d-%m-%Y") DESC limit ${
    //     (data.page - 1) * data.perpage
    //   },${data.perpage}`;
    // } else if (response1.user_type == 1) {
    //   sql2 = `SELECT *,(SELECT COUNT(*) FROM customer WHERE deleted =0 AND (branch_id = ${
    //     data.b_id
    //   } or foreign_branch=${
    //     data.b_id
    //   }))as trows,(SELECT due_amt FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as due_amt,(SELECT invoice_no FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as invoice_no,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname,(SELECT paid_amt FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as paid_amt FROM customer WHERE (branch_id = ${
    //     data.b_id
    //   } or foreign_branch=${
    //     data.b_id
    //   }) AND deleted = 0 order by STR_TO_DATE(customer.c_date,"%d-%m-%Y") DESC limit ${
    //     (data.page - 1) * data.perpage
    //   },${data.perpage}`;
    // } else {
    //   sql2 = `SELECT *,(SELECT COUNT(*) FROM customer WHERE deleted =0 AND u_id = ${
    //     data.u_id
    //   })as trows,(SELECT due_amt FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as due_amt,(SELECT invoice_no FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as invoice_no,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname,(SELECT paid_amt FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as paid_amt FROM customer WHERE u_id = ${
    //     data.u_id
    //   } AND deleted = 0 order by STR_TO_DATE(customer.c_date,"%d-%m-%Y") DESC limit ${
    //     (data.page - 1) * data.perpage
    //   },${data.perpage}`;
    // }
    // let response3 = await new Promise((resolve, reject) => {
    //   con.query(sql2, function (err, result) {
    //     if (err) {
    //       resolve({ status: 0, message: "Something went to wrong" });
    //     }
    //     if (result.length > 0) {
    //       resolve({
    //         status: 1,
    //         result: result,
    //         allresult: response2.result,
    //       });
    //     }
    //   });
    // });
    if (response1.user_type == 0) {
      sql2 = `SELECT customer.is_cancel,customer.is_block,customer.c_id,customer.c_prefix,customer.c_name,customer.c_date,customer.c_mo_no,customer.c_email,customer.c_address,
      customer.c_gst_no,customer.c_s_type,customer.c_total_customer,customer.branch_id,customer.u_id,customer.foreign_branch,customer.c_tax,customer.tracking_id,details.detail_id,details.service_id,(SELECT name FROM attributes WHERE attributes.attribute_id = customer.c_state)as state,(SELECT b_name FROM branch WHERE branch.branch_id = customer.foreign_branch)as branch_name,(SELECT due_amt FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as due_amt,(SELECT invoice_no FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as invoice_no,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname,(SELECT paid_amt FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as paid_amt FROM customer LEFT JOIN visa ON customer.c_id = visa.c_id left join details ON visa.v_id=details.service_id WHERE customer.is_cancel = 0 and customer.is_block = 1 and customer.deleted = 0 and visa.deleted=0 and details.deleted=0 and details.service_type=8 group by customer.c_id UNION
      SELECT customer.is_cancel,customer.is_block,customer.c_id,customer.c_prefix,customer.c_name,customer.c_date,customer.c_mo_no,customer.c_email,customer.c_address,
      customer.c_gst_no,customer.c_s_type,customer.c_total_customer,customer.branch_id,customer.u_id,customer.foreign_branch,customer.c_tax,customer.tracking_id,details.detail_id,details.service_id,(SELECT name FROM attributes WHERE attributes.attribute_id = customer.c_state)as state,(SELECT b_name FROM branch WHERE branch.branch_id = customer.foreign_branch)as branch_name,(SELECT due_amt FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as due_amt,(SELECT invoice_no FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as invoice_no,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname,(SELECT paid_amt FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as paid_amt FROM customer LEFT JOIN attestation ON customer.c_id = attestation.c_id left join details ON attestation.a_id=details.service_id WHERE customer.is_cancel = 0 and customer.is_block = 1 and customer.deleted = 0 and attestation.deleted=0 and details.deleted=0 and details.service_type=10 group by customer.c_id UNION
      SELECT customer.is_cancel,customer.is_block,customer.c_id,customer.c_prefix,customer.c_name,customer.c_date,customer.c_mo_no,customer.c_email,customer.c_address,
      customer.c_gst_no,customer.c_s_type,customer.c_total_customer,customer.branch_id,customer.u_id,customer.foreign_branch,customer.c_tax,customer.tracking_id,details.detail_id,details.service_id,(SELECT name FROM attributes WHERE attributes.attribute_id = customer.c_state)as state,(SELECT b_name FROM branch WHERE branch.branch_id = customer.foreign_branch)as branch_name,(SELECT due_amt FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as due_amt,(SELECT invoice_no FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as invoice_no,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname,(SELECT paid_amt FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as paid_amt FROM customer LEFT JOIN translation ON customer.c_id = translation.c_id left join details ON translation.a_id=details.service_id WHERE customer.is_cancel = 0 and customer.is_block = 1 and customer.deleted = 0 and translation.deleted=0 and details.deleted=0 and details.service_type=20 group by customer.c_id UNION
      SELECT customer.is_cancel,customer.is_block,customer.c_id,customer.c_prefix,customer.c_name,customer.c_date,customer.c_mo_no,customer.c_email,customer.c_address,
      customer.c_gst_no,customer.c_s_type,customer.c_total_customer,customer.branch_id,customer.u_id,customer.foreign_branch,customer.c_tax,customer.tracking_id,details.detail_id,details.service_id,(SELECT name FROM attributes WHERE attributes.attribute_id = customer.c_state)as state,(SELECT b_name FROM branch WHERE branch.branch_id = customer.foreign_branch)as branch_name,(SELECT due_amt FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as due_amt,(SELECT invoice_no FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as invoice_no,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname,(SELECT paid_amt FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as paid_amt FROM customer LEFT JOIN apostille ON customer.c_id = apostille.c_id left join details ON apostille.a_id=details.service_id WHERE customer.is_cancel = 0 and  customer.deleted = 0 and customer.is_block = 1 and apostille.deleted=0 and details.deleted=0 and details.service_type=17 group by customer.c_id order by STR_TO_DATE(c_date,"%d-%m-%Y") DESC`;
      countquery = sql2;
      sql2 += ` limit ${(data.page - 1) * data.perpage},${data.perpage}`;
    } else if (response1.user_type == 1) {
      sql2 = `SELECT customer.is_cancel,customer.is_block,customer.c_id,customer.c_prefix,customer.c_name,customer.c_date,customer.c_mo_no,customer.c_email,customer.c_address,
      customer.c_gst_no,customer.c_s_type,customer.c_total_customer,customer.branch_id,customer.u_id,customer.foreign_branch,customer.c_tax,customer.tracking_id,details.detail_id,details.service_id,(SELECT name FROM attributes WHERE attributes.attribute_id = customer.c_state)as state,(SELECT b_name FROM branch WHERE branch.branch_id = customer.foreign_branch)as branch_name,(SELECT due_amt FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as due_amt,(SELECT invoice_no FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as invoice_no,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname,(SELECT paid_amt FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as paid_amt FROM customer LEFT JOIN visa ON customer.c_id = visa.c_id left join details ON visa.v_id=details.service_id WHERE customer.is_cancel = 0 and  customer.deleted = 0 and customer.is_block = 1 and visa.deleted=0 and details.deleted=0 and details.service_type=8 and (customer.branch_id = ${data.b_id} or customer.foreign_branch=${data.b_id}) group by customer.c_id UNION
      SELECT customer.is_cancel,customer.is_block,customer.c_id,customer.c_prefix,customer.c_name,customer.c_date,customer.c_mo_no,customer.c_email,customer.c_address,
      customer.c_gst_no,customer.c_s_type,customer.c_total_customer,customer.branch_id,customer.u_id,customer.foreign_branch,customer.c_tax,customer.tracking_id,details.detail_id,details.service_id,(SELECT name FROM attributes WHERE attributes.attribute_id = customer.c_state)as state,(SELECT b_name FROM branch WHERE branch.branch_id = customer.foreign_branch)as branch_name,(SELECT due_amt FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as due_amt,(SELECT invoice_no FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as invoice_no,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname,(SELECT paid_amt FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as paid_amt FROM customer LEFT JOIN attestation ON customer.c_id = attestation.c_id left join details ON attestation.a_id=details.service_id WHERE customer.is_cancel = 0 and customer.is_block = 1 and  customer.deleted = 0 and attestation.deleted=0 and details.deleted=0 and details.service_type=10 and (customer.branch_id = ${data.b_id} or customer.foreign_branch=${data.b_id}) group by customer.c_id UNION
      SELECT customer.is_cancel,customer.is_block,customer.c_id,customer.c_prefix,customer.c_name,customer.c_date,customer.c_mo_no,customer.c_email,customer.c_address,
      customer.c_gst_no,customer.c_s_type,customer.c_total_customer,customer.branch_id,customer.u_id,customer.foreign_branch,customer.c_tax,customer.tracking_id,details.detail_id,details.service_id,(SELECT name FROM attributes WHERE attributes.attribute_id = customer.c_state)as state,(SELECT b_name FROM branch WHERE branch.branch_id = customer.foreign_branch)as branch_name,(SELECT due_amt FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as due_amt,(SELECT invoice_no FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as invoice_no,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname,(SELECT paid_amt FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as paid_amt FROM customer LEFT JOIN translation ON customer.c_id = translation.c_id left join details ON translation.a_id=details.service_id WHERE  customer.is_cancel = 0 and customer.is_block = 1 and customer.deleted = 0 and translation.deleted=0 and details.deleted=0 and details.service_type=20 and (customer.branch_id = ${data.b_id} or customer.foreign_branch=${data.b_id}) group by customer.c_id UNION
      SELECT customer.is_cancel,customer.is_block,customer.c_id,customer.c_prefix,customer.c_name,customer.c_date,customer.c_mo_no,customer.c_email,customer.c_address,
      customer.c_gst_no,customer.c_s_type,customer.c_total_customer,customer.branch_id,customer.u_id,customer.foreign_branch,customer.c_tax,customer.tracking_id,details.detail_id,details.service_id,(SELECT name FROM attributes WHERE attributes.attribute_id = customer.c_state)as state,(SELECT b_name FROM branch WHERE branch.branch_id = customer.foreign_branch)as branch_name,(SELECT due_amt FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as due_amt,(SELECT invoice_no FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as invoice_no,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname,(SELECT paid_amt FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as paid_amt FROM customer LEFT JOIN apostille ON customer.c_id = apostille.c_id left join details ON apostille.a_id=details.service_id WHERE  customer.is_cancel = 0 and customer.deleted = 0 and customer.is_block = 1 and apostille.deleted=0 and details.deleted=0 and details.service_type=17 and (customer.branch_id = ${data.b_id} or customer.foreign_branch=${data.b_id}) group by customer.c_id order by STR_TO_DATE(c_date,"%d-%m-%Y") DESC `;
      countquery = sql2;
      sql2 += ` limit ${(data.page - 1) * data.perpage},${data.perpage}`;
    } else {
      sql2 = `SELECT customer.is_cancel,customer.is_block,customer.c_id,customer.c_prefix,customer.c_name,customer.c_date,customer.c_mo_no,customer.c_email,customer.c_address,
      customer.c_gst_no,customer.c_s_type,customer.c_total_customer,customer.branch_id,customer.u_id,customer.foreign_branch,customer.c_tax,customer.tracking_id,details.detail_id,details.service_id,(SELECT name FROM attributes WHERE attributes.attribute_id = customer.c_state)as state,(SELECT b_name FROM branch WHERE branch.branch_id = customer.foreign_branch)as branch_name,(SELECT due_amt FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as due_amt,(SELECT invoice_no FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as invoice_no,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname,(SELECT paid_amt FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as paid_amt FROM customer LEFT JOIN visa ON customer.c_id = visa.c_id left join details ON visa.v_id=details.service_id WHERE  customer.is_cancel = 0 and customer.deleted = 0 and customer.is_block = 1 and visa.deleted=0 and details.deleted=0 and details.service_type=8 and u_id = ${data.u_id} group by customer.c_id UNION
      SELECT customer.is_cancel,customer.is_block,customer.c_id,customer.c_prefix,customer.c_name,customer.c_date,customer.c_mo_no,customer.c_email,customer.c_address,
      customer.c_gst_no,customer.c_s_type,customer.c_total_customer,customer.branch_id,customer.u_id,customer.foreign_branch,customer.c_tax,customer.tracking_id,details.detail_id,details.service_id,(SELECT name FROM attributes WHERE attributes.attribute_id = customer.c_state)as state,(SELECT b_name FROM branch WHERE branch.branch_id = customer.foreign_branch)as branch_name,(SELECT due_amt FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as due_amt,(SELECT invoice_no FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as invoice_no,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname,(SELECT paid_amt FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as paid_amt FROM customer LEFT JOIN attestation ON customer.c_id = attestation.c_id left join details ON attestation.a_id=details.service_id WHERE  customer.is_cancel = 0 and customer.is_block = 1 and customer.deleted = 0 and attestation.deleted=0 and details.deleted=0 and details.service_type=10 and u_id = ${data.u_id} group by customer.c_id UNION
      SELECT customer.is_cancel,customer.is_block,customer.c_id,customer.c_prefix,customer.c_name,customer.c_date,customer.c_mo_no,customer.c_email,customer.c_address,
      customer.c_gst_no,customer.c_s_type,customer.c_total_customer,customer.branch_id,customer.u_id,customer.foreign_branch,customer.c_tax,customer.tracking_id,details.detail_id,details.service_id,(SELECT name FROM attributes WHERE attributes.attribute_id = customer.c_state)as state,(SELECT b_name FROM branch WHERE branch.branch_id = customer.foreign_branch)as branch_name,(SELECT due_amt FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as due_amt,(SELECT invoice_no FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as invoice_no,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname,(SELECT paid_amt FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as paid_amt FROM customer LEFT JOIN translation ON customer.c_id = translation.c_id left join details ON translation.a_id=details.service_id WHERE  customer.is_cancel = 0 and customer.is_block = 1 and customer.deleted = 0 and translation.deleted=0 and details.deleted=0 and details.service_type=20  and u_id = ${data.u_id} group by customer.c_id UNION
      SELECT customer.is_cancel,customer.is_block,customer.c_id,customer.c_prefix,customer.c_name,customer.c_date,customer.c_mo_no,customer.c_email,customer.c_address,
      customer.c_gst_no,customer.c_s_type,customer.c_total_customer,customer.branch_id,customer.u_id,customer.foreign_branch,customer.c_tax,customer.tracking_id,details.detail_id,details.service_id,(SELECT name FROM attributes WHERE attributes.attribute_id = customer.c_state)as state,(SELECT b_name FROM branch WHERE branch.branch_id = customer.foreign_branch)as branch_name,(SELECT due_amt FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as due_amt,(SELECT invoice_no FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as invoice_no,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname,(SELECT paid_amt FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as paid_amt FROM customer LEFT JOIN apostille ON customer.c_id = apostille.c_id left join details ON apostille.a_id=details.service_id WHERE  customer.is_cancel = 0 and customer.is_block = 1 and customer.deleted = 0 and apostille.deleted=0 and details.deleted=0 and details.service_type=17  and u_id = ${data.u_id} group by customer.c_id order by STR_TO_DATE(c_date,"%d-%m-%Y") DESC`;
      countquery = sql2;
      sql2 += ` limit ${(data.page - 1) * data.perpage},${data.perpage}`;
    }
    let response3 = await new Promise((resolve, reject) => {
      con.query(sql2, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            con.query(countquery, function (err, cres) {
              if (err) {
                console.log(err);
              } else {
                if (cres.length > 0) {
                  resolve({
                    status: 1,
                    result: result,
                    allresult: response2.result,
                    trows: cres.length,
                  });
                }
              }
            });
          } else {
            resolve({
              status: 1,
              result: [],
            });
          }
        }
      });
    });
    return response3;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

//2303
async function searchbusinesssummery(data) {
  try {
    sql1 = `SELECT user_type FROM users WHERE u_id = ${data.u_id} and deleted =0`;

    let response1 = await new Promise((resolve, reject) => {
      con.query(sql1, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            result.forEach(function (result) {
              resolve({
                status: 1,
                user_type: result.user_type,
              });
            });
          } else {
            resolve({
              status: 0,
              user_type: "Something went wrong...",
            });
          }
        }
      });
    });
    // if (response1.user_type == 0) {
    //   sql2 = `SELECT *,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname FROM payment,customer WHERE customer.c_id = payment.c_id AND payment.deleted = 0 AND customer.deleted = 0 and payment_id IN (SELECT max(payment_id) FROM payment GROUP by c_id)`;
    // } else if (response1.user_type == 1) {
    //   sql2 = `SELECT *,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname FROM payment,customer WHERE customer.c_id = payment.c_id AND payment.deleted = 0 AND customer.deleted = 0 and payment_id IN (SELECT max(payment_id) FROM payment GROUP by c_id) and (customer.branch_id=${data.branch_id} or foreign_branch=${data.branch_id})`;
    // } else {
    //   sql2 = `SELECT *,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname FROM payment,customer WHERE customer.c_id = payment.c_id AND payment.deleted = 0 AND customer.deleted = 0 and payment_id IN (SELECT max(payment_id) FROM payment GROUP by c_id) and customer.u_id=${data.u_id}`;
    // }
    // if (typeof data.branch_name != "undefined" && data.branch_name != "") {
    //   sql2 += ` and customer.branch_id=${data.branch_name}`;
    // }
    // if (typeof data.c_name != "undefined" && data.c_name != "") {
    //   sql2 += ` and customer.c_name='${data.c_name}'`;
    // }
    // if (typeof data.s_date != "undefined" && data.s_date != "") {
    //   sql2 += ` and STR_TO_DATE(customer.c_date,"%d-%m-%Y")>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y")`;
    // }
    // if (typeof data.e_date != "undefined" && data.e_date != "") {
    //   sql2 += ` and STR_TO_DATE(customer.c_date,"%d-%m-%Y")<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y")`;
    // }
    // if (
    //   typeof data.t_id != "undefined" &&
    //   data.t_id != "" &&
    //   data.t_id.length != 2
    // ) {
    //   sql2 += ` and customer.tracking_id='${data.t_id}'`;
    // }
    // if (typeof data.ino != "undefined" && data.ino != "") {
    //   sql2 += ` and payment.invoice_no='${data.ino}'`;
    // }
    // if (typeof data.p_status != "undefined" && data.p_status != "") {
    //   if (data.p_status == 1) {
    //     sql2 += ` and payment.due_amt ='0'`;
    //   } else {
    //     sql2 += ` and payment.due_amt != '0'`;
    //   }
    // }
    if (response1.user_type == 0) {
      sql2 = `SELECT customer.is_cancel,customer.is_block,customer.c_id,customer.c_prefix,customer.c_name,customer.c_date,customer.c_mo_no,customer.c_email,customer.c_address,
      customer.c_gst_no,customer.c_s_type,customer.c_total_customer,customer.branch_id,customer.u_id,customer.foreign_branch,customer.c_tax,customer.tracking_id,details.detail_id,details.service_id,(SELECT name FROM attributes WHERE attributes.attribute_id = customer.c_state)as state,(SELECT b_name FROM branch WHERE branch.branch_id = customer.foreign_branch)as branch_name,(SELECT due_amt FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as due_amt,(SELECT invoice_no FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as invoice_no,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname,(SELECT paid_amt FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as paid_amt FROM customer LEFT JOIN visa ON customer.c_id = visa.c_id left join details ON visa.v_id=details.service_id LEFT JOIN payment ON customer.c_id = payment.c_id WHERE customer.is_cancel = 0 and customer.deleted = 0  and customer.is_block = 1 and visa.deleted=0 and details.deleted=0 and details.service_type=8`;
      if (typeof data.branch_name != "undefined" && data.branch_name != "") {
        sql2 += ` and customer.branch_id=${data.branch_name}`;
      }
      if (typeof data.c_name != "undefined" && data.c_name != "") {
        sql2 += ` and customer.c_name like '%${data.c_name}%'`;
      }
      if (typeof data.s_date != "undefined" && data.s_date != "") {
        sql2 += ` and STR_TO_DATE(customer.c_date,"%d-%m-%Y")>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y")`;
      }
      if (typeof data.e_date != "undefined" && data.e_date != "") {
        sql2 += ` and STR_TO_DATE(customer.c_date,"%d-%m-%Y")<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y")`;
      }
      if (
        typeof data.t_id != "undefined" &&
        data.t_id != "" &&
        data.t_id.length != 2
      ) {
        sql2 += ` and customer.tracking_id like '%${data.t_id}%'`;
      }
      if (typeof data.ino != "undefined" && data.ino != "") {
        sql2 += ` and payment.invoice_no like '%${data.ino}%'`;
      }
      if (typeof data.p_status != "undefined" && data.p_status != "") {
        if (data.p_status == 1) {
          sql2 += ` and payment.due_amt ='0'`;
        } else {
          sql2 += ` and payment.due_amt != '0'`;
        }
      }
      sql2 += ` group by customer.c_id`;
      sql2 += ` UNION SELECT customer.is_cancel,customer.is_block,customer.c_id,customer.c_prefix,customer.c_name,customer.c_date,customer.c_mo_no,customer.c_email,customer.c_address,
      customer.c_gst_no,customer.c_s_type,customer.c_total_customer,customer.branch_id,customer.u_id,customer.foreign_branch,customer.c_tax,customer.tracking_id,details.detail_id,details.service_id,(SELECT name FROM attributes WHERE attributes.attribute_id = customer.c_state)as state,(SELECT b_name FROM branch WHERE branch.branch_id = customer.foreign_branch)as branch_name,(SELECT due_amt FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as due_amt,(SELECT invoice_no FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as invoice_no,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname,(SELECT paid_amt FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as paid_amt FROM customer LEFT JOIN attestation ON customer.c_id = attestation.c_id left join details ON attestation.a_id=details.service_id LEFT JOIN payment ON customer.c_id = payment.c_id WHERE customer.is_cancel = 0 and customer.deleted = 0 and customer.is_block = 1 and attestation.deleted=0 and details.deleted=0 and details.service_type=10`;
      if (typeof data.branch_name != "undefined" && data.branch_name != "") {
        sql2 += ` and customer.branch_id=${data.branch_name}`;
      }
      if (typeof data.c_name != "undefined" && data.c_name != "") {
        sql2 += ` and customer.c_name like '%${data.c_name}%'`;
      }
      if (typeof data.s_date != "undefined" && data.s_date != "") {
        sql2 += ` and STR_TO_DATE(customer.c_date,"%d-%m-%Y")>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y")`;
      }
      if (typeof data.e_date != "undefined" && data.e_date != "") {
        sql2 += ` and STR_TO_DATE(customer.c_date,"%d-%m-%Y")<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y")`;
      }
      if (
        typeof data.t_id != "undefined" &&
        data.t_id != "" &&
        data.t_id.length != 2
      ) {
        sql2 += ` and customer.tracking_id like '%${data.t_id}%'`;
      }
      if (typeof data.ino != "undefined" && data.ino != "") {
        sql2 += ` and payment.invoice_no like '%${data.ino}%'`;
      }
      if (typeof data.p_status != "undefined" && data.p_status != "") {
        if (data.p_status == 1) {
          sql2 += ` and payment.due_amt ='0'`;
        } else {
          sql2 += ` and payment.due_amt != '0'`;
        }
      }
      sql2 += ` group by customer.c_id`;
      sql2 += ` UNION SELECT customer.is_cancel,customer.is_block,customer.c_id,customer.c_prefix,customer.c_name,customer.c_date,customer.c_mo_no,customer.c_email,customer.c_address,
      customer.c_gst_no,customer.c_s_type,customer.c_total_customer,customer.branch_id,customer.u_id,customer.foreign_branch,customer.c_tax,customer.tracking_id,details.detail_id,details.service_id,(SELECT name FROM attributes WHERE attributes.attribute_id = customer.c_state)as state,(SELECT b_name FROM branch WHERE branch.branch_id = customer.foreign_branch)as branch_name,(SELECT due_amt FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as due_amt,(SELECT invoice_no FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as invoice_no,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname,(SELECT paid_amt FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as paid_amt FROM customer LEFT JOIN translation ON customer.c_id = translation.c_id left join details ON translation.a_id=details.service_id LEFT JOIN payment ON customer.c_id = payment.c_id WHERE customer.is_cancel = 0 and customer.deleted = 0 and customer.is_block = 1 and translation.deleted=0 and details.deleted=0 and details.service_type=20`;
      if (typeof data.branch_name != "undefined" && data.branch_name != "") {
        sql2 += ` and customer.branch_id=${data.branch_name}`;
      }
      if (typeof data.c_name != "undefined" && data.c_name != "") {
        sql2 += ` and customer.c_name like '%${data.c_name}%'`;
      }
      if (typeof data.s_date != "undefined" && data.s_date != "") {
        sql2 += ` and STR_TO_DATE(customer.c_date,"%d-%m-%Y")>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y")`;
      }
      if (typeof data.e_date != "undefined" && data.e_date != "") {
        sql2 += ` and STR_TO_DATE(customer.c_date,"%d-%m-%Y")<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y")`;
      }
      if (
        typeof data.t_id != "undefined" &&
        data.t_id != "" &&
        data.t_id.length != 2
      ) {
        sql2 += ` and customer.tracking_id like '%${data.t_id}%'`;
      }
      if (typeof data.ino != "undefined" && data.ino != "") {
        sql2 += ` and payment.invoice_no like '%${data.ino}%'`;
      }
      if (typeof data.p_status != "undefined" && data.p_status != "") {
        if (data.p_status == 1) {
          sql2 += ` and payment.due_amt ='0'`;
        } else {
          sql2 += ` and payment.due_amt != '0'`;
        }
      }
      sql2 += ` group by customer.c_id`;
      sql2 += ` UNION
      SELECT customer.is_cancel,customer.is_block,customer.c_id,customer.c_prefix,customer.c_name,customer.c_date,customer.c_mo_no,customer.c_email,customer.c_address,
      customer.c_gst_no,customer.c_s_type,customer.c_total_customer,customer.branch_id,customer.u_id,customer.foreign_branch,customer.c_tax,customer.tracking_id,details.detail_id,details.service_id,(SELECT name FROM attributes WHERE attributes.attribute_id = customer.c_state)as state,(SELECT b_name FROM branch WHERE branch.branch_id = customer.foreign_branch)as branch_name,(SELECT due_amt FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as due_amt,(SELECT invoice_no FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as invoice_no,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname,(SELECT paid_amt FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as paid_amt FROM customer LEFT JOIN apostille ON customer.c_id = apostille.c_id left join details ON apostille.a_id=details.service_id LEFT JOIN payment ON customer.c_id = payment.c_id WHERE customer.is_cancel = 0 and customer.deleted = 0 and customer.is_block = 1 and apostille.deleted=0 and details.deleted=0 and details.service_type=17`;
      if (typeof data.branch_name != "undefined" && data.branch_name != "") {
        sql2 += ` and customer.branch_id=${data.branch_name}`;
      }
      if (typeof data.c_name != "undefined" && data.c_name != "") {
        sql2 += ` and customer.c_name like '%${data.c_name}%'`;
      }
      if (typeof data.s_date != "undefined" && data.s_date != "") {
        sql2 += ` and STR_TO_DATE(customer.c_date,"%d-%m-%Y")>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y")`;
      }
      if (typeof data.e_date != "undefined" && data.e_date != "") {
        sql2 += ` and STR_TO_DATE(customer.c_date,"%d-%m-%Y")<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y")`;
      }
      if (
        typeof data.t_id != "undefined" &&
        data.t_id != "" &&
        data.t_id.length != 2
      ) {
        sql2 += ` and customer.tracking_id like '%${data.t_id}%'`;
      }
      if (typeof data.ino != "undefined" && data.ino != "") {
        sql2 += ` and payment.invoice_no like '%${data.ino}%'`;
      }
      if (typeof data.p_status != "undefined" && data.p_status != "") {
        if (data.p_status == 1) {
          sql2 += ` and payment.due_amt ='0'`;
        } else {
          sql2 += ` and payment.due_amt != '0'`;
        }
      }
      sql2 += ` group by customer.c_id`;
    } else if (response1.user_type == 1) {
      sql2 = `SELECT customer.is_cancel,customer.is_block,customer.c_id,customer.c_prefix,customer.c_name,customer.c_date,customer.c_mo_no,customer.c_email,customer.c_address,
      customer.c_gst_no,customer.c_s_type,customer.c_total_customer,customer.branch_id,customer.u_id,customer.foreign_branch,customer.c_tax,customer.tracking_id,details.detail_id,details.service_id,(SELECT name FROM attributes WHERE attributes.attribute_id = customer.c_state)as state,(SELECT b_name FROM branch WHERE branch.branch_id = customer.foreign_branch)as branch_name,(SELECT due_amt FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as due_amt,(SELECT invoice_no FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as invoice_no,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname,(SELECT paid_amt FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as paid_amt FROM customer LEFT JOIN visa ON customer.c_id = visa.c_id left join details ON visa.v_id=details.service_id LEFT JOIN payment ON customer.c_id = payment.c_id WHERE customer.is_cancel = 0 and  customer.deleted = 0 and customer.is_block = 1 and visa.deleted=0 and details.deleted=0 and details.service_type=8 and (customer.branch_id=${data.branch_id} or foreign_branch=${data.branch_id})`;
      if (typeof data.branch_name != "undefined" && data.branch_name != "") {
        sql2 += ` and customer.branch_id=${data.branch_name}`;
      }
      if (typeof data.c_name != "undefined" && data.c_name != "") {
        sql2 += ` and customer.c_name like '%${data.c_name}%'`;
      }
      if (typeof data.s_date != "undefined" && data.s_date != "") {
        sql2 += ` and STR_TO_DATE(customer.c_date,"%d-%m-%Y")>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y")`;
      }
      if (typeof data.e_date != "undefined" && data.e_date != "") {
        sql2 += ` and STR_TO_DATE(customer.c_date,"%d-%m-%Y")<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y")`;
      }
      if (
        typeof data.t_id != "undefined" &&
        data.t_id != "" &&
        data.t_id.length != 2
      ) {
        sql2 += ` and customer.tracking_id like '%${data.t_id}%'`;
      }
      if (typeof data.ino != "undefined" && data.ino != "") {
        sql2 += ` and payment.invoice_no like '%${data.ino}%'`;
      }
      if (typeof data.p_status != "undefined" && data.p_status != "") {
        if (data.p_status == 1) {
          sql2 += ` and payment.due_amt ='0'`;
        } else {
          sql2 += ` and payment.due_amt != '0'`;
        }
      }
      sql2 += ` group by customer.c_id`;
      sql2 += ` UNION SELECT customer.is_cancel,customer.is_block,customer.c_id,customer.c_prefix,customer.c_name,customer.c_date,customer.c_mo_no,customer.c_email,customer.c_address,
      customer.c_gst_no,customer.c_s_type,customer.c_total_customer,customer.branch_id,customer.u_id,customer.foreign_branch,customer.c_tax,customer.tracking_id,details.detail_id,details.service_id,(SELECT name FROM attributes WHERE attributes.attribute_id = customer.c_state)as state,(SELECT b_name FROM branch WHERE branch.branch_id = customer.foreign_branch)as branch_name,(SELECT due_amt FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as due_amt,(SELECT invoice_no FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as invoice_no,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname,(SELECT paid_amt FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as paid_amt FROM customer LEFT JOIN attestation ON customer.c_id = attestation.c_id left join details ON attestation.a_id=details.service_id LEFT JOIN payment ON customer.c_id = payment.c_id WHERE customer.is_cancel = 0 and customer.deleted = 0 and customer.is_block = 1 and attestation.deleted=0 and details.deleted=0 and details.service_type=10 and (customer.branch_id=${data.branch_id} or foreign_branch=${data.branch_id})`;
      if (typeof data.branch_name != "undefined" && data.branch_name != "") {
        sql2 += ` and customer.branch_id=${data.branch_name}`;
      }
      if (typeof data.c_name != "undefined" && data.c_name != "") {
        sql2 += ` and customer.c_name like '%${data.c_name}%'`;
      }
      if (typeof data.s_date != "undefined" && data.s_date != "") {
        sql2 += ` and STR_TO_DATE(customer.c_date,"%d-%m-%Y")>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y")`;
      }
      if (typeof data.e_date != "undefined" && data.e_date != "") {
        sql2 += ` and STR_TO_DATE(customer.c_date,"%d-%m-%Y")<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y")`;
      }
      if (
        typeof data.t_id != "undefined" &&
        data.t_id != "" &&
        data.t_id.length != 2
      ) {
        sql2 += ` and customer.tracking_id like '%${data.t_id}%'`;
      }
      if (typeof data.ino != "undefined" && data.ino != "") {
        sql2 += ` and payment.invoice_no like '%${data.ino}%'`;
      }
      if (typeof data.p_status != "undefined" && data.p_status != "") {
        if (data.p_status == 1) {
          sql2 += ` and payment.due_amt ='0'`;
        } else {
          sql2 += ` and payment.due_amt != '0'`;
        }
      }

      sql2 += ` group by customer.c_id`;
      sql2 += ` UNION SELECT customer.is_cancel,customer.is_block,customer.c_id,customer.c_prefix,customer.c_name,customer.c_date,customer.c_mo_no,customer.c_email,customer.c_address,
      customer.c_gst_no,customer.c_s_type,customer.c_total_customer,customer.branch_id,customer.u_id,customer.foreign_branch,customer.c_tax,customer.tracking_id,details.detail_id,details.service_id,(SELECT name FROM attributes WHERE attributes.attribute_id = customer.c_state)as state,(SELECT b_name FROM branch WHERE branch.branch_id = customer.foreign_branch)as branch_name,(SELECT due_amt FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as due_amt,(SELECT invoice_no FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as invoice_no,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname,(SELECT paid_amt FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as paid_amt FROM customer LEFT JOIN translation ON customer.c_id = translation.c_id left join details ON translation.a_id=details.service_id LEFT JOIN payment ON customer.c_id = payment.c_id WHERE customer.is_cancel = 0 and customer.is_block = 1 and customer.deleted = 0 and translation.deleted=0 and details.deleted=0 and details.service_type=20 and (customer.branch_id=${data.branch_id} or foreign_branch=${data.branch_id})`;
      if (typeof data.branch_name != "undefined" && data.branch_name != "") {
        sql2 += ` and customer.branch_id=${data.branch_name}`;
      }
      if (typeof data.c_name != "undefined" && data.c_name != "") {
        sql2 += ` and customer.c_name like '%${data.c_name}%'`;
      }
      if (typeof data.s_date != "undefined" && data.s_date != "") {
        sql2 += ` and STR_TO_DATE(customer.c_date,"%d-%m-%Y")>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y")`;
      }
      if (typeof data.e_date != "undefined" && data.e_date != "") {
        sql2 += ` and STR_TO_DATE(customer.c_date,"%d-%m-%Y")<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y")`;
      }
      if (
        typeof data.t_id != "undefined" &&
        data.t_id != "" &&
        data.t_id.length != 2
      ) {
        sql2 += ` and customer.tracking_id like '%${data.t_id}%'`;
      }
      if (typeof data.ino != "undefined" && data.ino != "") {
        sql2 += ` and payment.invoice_no like '%${data.ino}%'`;
      }
      if (typeof data.p_status != "undefined" && data.p_status != "") {
        if (data.p_status == 1) {
          sql2 += ` and payment.due_amt ='0'`;
        } else {
          sql2 += ` and payment.due_amt != '0'`;
        }
      }
      sql2 += ` group by customer.c_id`;
      sql2 += ` UNION
      SELECT customer.is_cancel,customer.is_block,customer.c_id,customer.c_prefix,customer.c_name,customer.c_date,customer.c_mo_no,customer.c_email,customer.c_address,
      customer.c_gst_no,customer.c_s_type,customer.c_total_customer,customer.branch_id,customer.u_id,customer.foreign_branch,customer.c_tax,customer.tracking_id,details.detail_id,details.service_id,(SELECT name FROM attributes WHERE attributes.attribute_id = customer.c_state)as state,(SELECT b_name FROM branch WHERE branch.branch_id = customer.foreign_branch)as branch_name,(SELECT due_amt FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as due_amt,(SELECT invoice_no FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as invoice_no,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname,(SELECT paid_amt FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as paid_amt FROM customer LEFT JOIN apostille ON customer.c_id = apostille.c_id left join details ON apostille.a_id=details.service_id LEFT JOIN payment ON customer.c_id = payment.c_id WHERE customer.is_cancel = 0 and customer.is_block = 1 and  customer.deleted = 0 and apostille.deleted=0 and details.deleted=0 and details.service_type=17 and (customer.branch_id=${data.branch_id} or foreign_branch=${data.branch_id})`;
      if (typeof data.branch_name != "undefined" && data.branch_name != "") {
        sql2 += ` and customer.branch_id=${data.branch_name}`;
      }
      if (typeof data.c_name != "undefined" && data.c_name != "") {
        sql2 += ` and customer.c_name like '%${data.c_name}%'`;
      }
      if (typeof data.s_date != "undefined" && data.s_date != "") {
        sql2 += ` and STR_TO_DATE(customer.c_date,"%d-%m-%Y")>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y")`;
      }
      if (typeof data.e_date != "undefined" && data.e_date != "") {
        sql2 += ` and STR_TO_DATE(customer.c_date,"%d-%m-%Y")<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y")`;
      }
      if (
        typeof data.t_id != "undefined" &&
        data.t_id != "" &&
        data.t_id.length != 2
      ) {
        sql2 += ` and customer.tracking_id like '%${data.t_id}%'`;
      }
      if (typeof data.ino != "undefined" && data.ino != "") {
        sql2 += ` and payment.invoice_no like '%${data.ino}%'`;
      }
      if (typeof data.p_status != "undefined" && data.p_status != "") {
        if (data.p_status == 1) {
          sql2 += ` and payment.due_amt ='0'`;
        } else {
          sql2 += ` and payment.due_amt != '0'`;
        }
      }
      sql2 += ` group by customer.c_id`;
    } else {
      sql2 = `SELECT customer.is_cancel,customer.is_block,customer.c_id,customer.c_prefix,customer.c_name,customer.c_date,customer.c_mo_no,customer.c_email,customer.c_address,
      customer.c_gst_no,customer.c_s_type,customer.c_total_customer,customer.branch_id,customer.u_id,customer.foreign_branch,customer.c_tax,customer.tracking_id,details.detail_id,details.service_id,(SELECT name FROM attributes WHERE attributes.attribute_id = customer.c_state)as state,(SELECT b_name FROM branch WHERE branch.branch_id = customer.foreign_branch)as branch_name,(SELECT due_amt FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as due_amt,(SELECT invoice_no FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as invoice_no,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname,(SELECT paid_amt FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as paid_amt FROM customer LEFT JOIN visa ON customer.c_id = visa.c_id left join details ON visa.v_id=details.service_id LEFT JOIN payment ON customer.c_id = payment.c_id WHERE customer.is_cancel = 0 and customer.deleted = 0 and customer.is_block = 1 and visa.deleted=0 and details.deleted=0 and details.service_type=8 and customer.u_id=${data.u_id}`;
      if (typeof data.branch_name != "undefined" && data.branch_name != "") {
        sql2 += ` and customer.branch_id=${data.branch_name}`;
      }
      if (typeof data.c_name != "undefined" && data.c_name != "") {
        sql2 += ` and customer.c_name like '%${data.c_name}%'`;
      }
      if (typeof data.s_date != "undefined" && data.s_date != "") {
        sql2 += ` and STR_TO_DATE(customer.c_date,"%d-%m-%Y")>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y")`;
      }
      if (typeof data.e_date != "undefined" && data.e_date != "") {
        sql2 += ` and STR_TO_DATE(customer.c_date,"%d-%m-%Y")<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y")`;
      }
      if (
        typeof data.t_id != "undefined" &&
        data.t_id != "" &&
        data.t_id.length != 2
      ) {
        sql2 += ` and customer.tracking_id like '%${data.t_id}%'`;
      }
      if (typeof data.ino != "undefined" && data.ino != "") {
        sql2 += ` and payment.invoice_no like '%${data.ino}%'`;
      }
      if (typeof data.p_status != "undefined" && data.p_status != "") {
        if (data.p_status == 1) {
          sql2 += ` and payment.due_amt ='0'`;
        } else {
          sql2 += ` and payment.due_amt != '0'`;
        }
      }
      sql2 += ` group by customer.c_id`;
      sql2 += ` UNION SELECT customer.is_cancel,customer.is_block,customer.c_id,customer.c_prefix,customer.c_name,customer.c_date,customer.c_mo_no,customer.c_email,customer.c_address,
      customer.c_gst_no,customer.c_s_type,customer.c_total_customer,customer.branch_id,customer.u_id,customer.foreign_branch,customer.c_tax,customer.tracking_id,details.detail_id,details.service_id,(SELECT name FROM attributes WHERE attributes.attribute_id = customer.c_state)as state,(SELECT b_name FROM branch WHERE branch.branch_id = customer.foreign_branch)as branch_name,(SELECT due_amt FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as due_amt,(SELECT invoice_no FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as invoice_no,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname,(SELECT paid_amt FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as paid_amt FROM customer LEFT JOIN attestation ON customer.c_id = attestation.c_id left join details ON attestation.a_id=details.service_id LEFT JOIN payment ON customer.c_id = payment.c_id WHERE customer.is_cancel = 0 and customer.deleted = 0 and customer.is_block = 1 and attestation.deleted=0 and details.deleted=0 and details.service_type=10 and customer.u_id=${data.u_id}`;
      if (typeof data.branch_name != "undefined" && data.branch_name != "") {
        sql2 += ` and customer.branch_id=${data.branch_name}`;
      }
      if (typeof data.c_name != "undefined" && data.c_name != "") {
        sql2 += ` and customer.c_name like '%${data.c_name}%'`;
      }
      if (typeof data.s_date != "undefined" && data.s_date != "") {
        sql2 += ` and STR_TO_DATE(customer.c_date,"%d-%m-%Y")>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y")`;
      }
      if (typeof data.e_date != "undefined" && data.e_date != "") {
        sql2 += ` and STR_TO_DATE(customer.c_date,"%d-%m-%Y")<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y")`;
      }
      if (
        typeof data.t_id != "undefined" &&
        data.t_id != "" &&
        data.t_id.length != 2
      ) {
        sql2 += ` and customer.tracking_id like '%${data.t_id}%'`;
      }
      if (typeof data.ino != "undefined" && data.ino != "") {
        sql2 += ` and payment.invoice_no like '%${data.ino}%'`;
      }
      if (typeof data.p_status != "undefined" && data.p_status != "") {
        if (data.p_status == 1) {
          sql2 += ` and payment.due_amt ='0'`;
        } else {
          sql2 += ` and payment.due_amt != '0'`;
        }
      }
      sql2 += ` group by customer.c_id`;
      sql2 += ` UNION SELECT customer.is_cancel,customer.is_block,customer.c_id,customer.c_prefix,customer.c_name,customer.c_date,customer.c_mo_no,customer.c_email,customer.c_address,
      customer.c_gst_no,customer.c_s_type,customer.c_total_customer,customer.branch_id,customer.u_id,customer.foreign_branch,customer.c_tax,customer.tracking_id,details.detail_id,details.service_id,(SELECT name FROM attributes WHERE attributes.attribute_id = customer.c_state)as state,(SELECT b_name FROM branch WHERE branch.branch_id = customer.foreign_branch)as branch_name,(SELECT due_amt FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as due_amt,(SELECT invoice_no FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as invoice_no,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname,(SELECT paid_amt FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as paid_amt FROM customer LEFT JOIN translation ON customer.c_id = translation.c_id left join details ON translation.a_id=details.service_id LEFT JOIN payment ON customer.c_id = payment.c_id WHERE customer.is_cancel = 0 and customer.deleted = 0 and customer.is_block = 1 and translation.deleted=0 and details.deleted=0 and details.service_type=20 and customer.u_id=${data.u_id}`;
      if (typeof data.branch_name != "undefined" && data.branch_name != "") {
        sql2 += ` and customer.branch_id=${data.branch_name}`;
      }
      if (typeof data.c_name != "undefined" && data.c_name != "") {
        sql2 += ` and customer.c_name like '%${data.c_name}%'`;
      }
      if (typeof data.s_date != "undefined" && data.s_date != "") {
        sql2 += ` and STR_TO_DATE(customer.c_date,"%d-%m-%Y")>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y")`;
      }
      if (typeof data.e_date != "undefined" && data.e_date != "") {
        sql2 += ` and STR_TO_DATE(customer.c_date,"%d-%m-%Y")<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y")`;
      }
      if (
        typeof data.t_id != "undefined" &&
        data.t_id != "" &&
        data.t_id.length != 2
      ) {
        sql2 += ` and customer.tracking_id like '%${data.t_id}%'`;
      }
      if (typeof data.ino != "undefined" && data.ino != "") {
        sql2 += ` and payment.invoice_no like '%${data.ino}%'`;
      }
      if (typeof data.p_status != "undefined" && data.p_status != "") {
        if (data.p_status == 1) {
          sql2 += ` and payment.due_amt ='0'`;
        } else {
          sql2 += ` and payment.due_amt != '0'`;
        }
      }
      sql2 += ` group by customer.c_id`;
      sql2 += ` UNION
      SELECT customer.is_cancel,customer.is_block,customer.c_id,customer.c_prefix,customer.c_name,customer.c_date,customer.c_mo_no,customer.c_email,customer.c_address,
      customer.c_gst_no,customer.c_s_type,customer.c_total_customer,customer.branch_id,customer.u_id,customer.foreign_branch,customer.c_tax,customer.tracking_id,details.detail_id,details.service_id,(SELECT name FROM attributes WHERE attributes.attribute_id = customer.c_state)as state,(SELECT b_name FROM branch WHERE branch.branch_id = customer.foreign_branch)as branch_name,(SELECT due_amt FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as due_amt,(SELECT invoice_no FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as invoice_no,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname,(SELECT paid_amt FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as paid_amt FROM customer LEFT JOIN apostille ON customer.c_id = apostille.c_id left join details ON apostille.a_id=details.service_id LEFT JOIN payment ON customer.c_id = payment.c_id WHERE customer.is_cancel = 0 and customer.deleted = 0 and customer.is_block = 1 and apostille.deleted=0 and details.deleted=0 and details.service_type=17 and customer.u_id=${data.u_id}`;
      if (typeof data.branch_name != "undefined" && data.branch_name != "") {
        sql2 += ` and customer.branch_id=${data.branch_name}`;
      }
      if (typeof data.c_name != "undefined" && data.c_name != "") {
        sql2 += ` and customer.c_name like '%${data.c_name}%'`;
      }
      if (typeof data.s_date != "undefined" && data.s_date != "") {
        sql2 += ` and STR_TO_DATE(customer.c_date,"%d-%m-%Y")>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y")`;
      }
      if (typeof data.e_date != "undefined" && data.e_date != "") {
        sql2 += ` and STR_TO_DATE(customer.c_date,"%d-%m-%Y")<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y")`;
      }
      if (
        typeof data.t_id != "undefined" &&
        data.t_id != "" &&
        data.t_id.length != 2
      ) {
        sql2 += ` and customer.tracking_id like '%${data.t_id}%'`;
      }
      if (typeof data.ino != "undefined" && data.ino != "") {
        sql2 += ` and payment.invoice_no like '%${data.ino}%'`;
      }
      if (typeof data.p_status != "undefined" && data.p_status != "") {
        if (data.p_status == 1) {
          sql2 += ` and payment.due_amt ='0'`;
        } else {
          sql2 += ` and payment.due_amt != '0'`;
        }
      }
      sql2 += ` group by customer.c_id`;
    }
    sql3 = sql2;
    sql2 += ` order by STR_TO_DATE(c_date,"%d-%m-%Y") DESC limit ${(data.page - 1) * data.perpage
      },${data.perpage}`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql2, async function (err3, result3) {
        if (err3) {
          console.log(err3);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result3.length > 0) {
            con.query(sql3, function (err, res) {
              if (err) {
                console.log(err);
              } else {
                if (res.length > 0) {
                  resolve({
                    status: 1,
                    data: result3,
                    adata: res,
                    t_rows: res.length,
                  });
                }
              }
            });
          } else {
            resolve({
              status: 1,
              data: [],
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

//0603
async function visacoverletter(data) {
  try {
    // if (data.u_id == 1) {
    //   sql = `select * from gsetting`;
    // } else {
    sql = `SELECT *,branch.b_hsn_code as hsn_code,b_bank_details as bank_details,company_name as c_name,branch.b_gstno as c_gstno FROM users,branch WHERE users.branch_id=branch.branch_id AND u_id=${data.u_id} AND users.deleted=0 AND branch.deleted=0`;
    // }
    let responsee = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            con.query(sql, function (err, res) {
              if (res.length > 0) {
                resolve({
                  settingdata: res[0],
                });
              }
            });
          }
        }
      });
    });

    sqll = `SELECT * FROM users WHERE u_id = ${data.u_id}`;

    let response = await new Promise((resolve, reject) => {
      con.query(sqll, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            result.forEach(function (result) {
              resolve({
                status: 1,
                user_type: result.user_type,
                user_data: result,
              });
            });
          } else {
            resolve({
              status: 0,
              user_type: "Something went wrong...",
            });
          }
        }
      });
    });

    let visa = [];
    let visa1 = [];
    let visa_list = [];
    let undercorrection_list = [];
    let user = "";
    if (response.user_type == 0) {
      user = ` and (customer.foreign_branch = ${data.branch_name} OR customer.branch_id = ${data.branch_name})`;
    } else if (response.user_type == 1) {
      user = ` and (customer.foreign_branch = ${data.branch_id} OR customer.branch_id = ${data.branch_id})`;
    } else if (
      response.user_data.c_l_permission != 0 &&
      response.user_type == 3
    ) {
      user = ` and (customer.foreign_branch = ${data.branch_id} OR customer.branch_id = ${data.branch_id})`;
    } else {
      user = ` and (customer.u_id=${data.u_id} OR customer.foreign_branchuser=${data.u_id})`;
    }

    sql2 = `SELECT details.d_c_id,attributes.name AS country_name FROM details INNER JOIN visa ON visa.v_id = details.service_id INNER JOIN customer ON customer.c_id = visa.c_id LEFT JOIN attributes ON attributes.attribute_id = details.d_c_id WHERE details.service_type = 8 and details.deleted = 0 and visa.deleted= 0 and customer.deleted=0 ${user} and visa.v_code=${data.v_code} AND STR_TO_DATE(details.under_correction_date,"%d-%m-%Y")=STR_TO_DATE('${data.c_date}',"%d-%m-%Y") AND details.status_id=273 GROUP BY details.d_c_id`;

    let response2 = await new Promise((resolve, reject) => {
      con.query(sql2, function (err, res) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (res.length > 0) {
            for (let i = 0; i < res.length; i += 1) {
              visa1.push({
                visa_country: res[i].d_c_id,
                country_name: res[i].country_name,
                visa_users: [],
              });
              undercorrection_list.push({
                visa_country: res[i].d_c_id,
                country_name: res[i].country_name,
                visa_users: [],
              });
            }
            Object.keys(visa1).map((k) => {
              sql = `SELECT d1.reason,visa.v_id,visa.v_prefix,visa.v_name,GROUP_CONCAT(att_tbl.name SEPARATOR ',')  AS supporting_doc_name,att_tbl2.name AS visa_type  FROM visa LEFT JOIN customer ON customer.c_id = visa.c_id LEFT JOIN details d1 ON d1.service_id = visa.v_id LEFT JOIN attributes att_tbl ON FIND_IN_SET (att_tbl.attribute_id , visa.v_supporting_doc)  LEFT JOIN  attributes att_tbl2 ON att_tbl2.attribute_id = visa.v_type   WHERE d1.d_c_id = ${visa1[k].visa_country} AND STR_TO_DATE(d1.under_correction_date,"%d-%m-%Y")=STR_TO_DATE('${data.c_date}',"%d-%m-%Y") AND d1.status_id = 273 AND visa.v_code=${data.v_code}  ${user} AND d1.service_type=8 GROUP by visa.v_id`;
              con.query(sql, function (errsql1, sql1res) {
                if (errsql1) {
                  resolve({ status: 0, message: "Something went to wrong" });
                } else {
                  if (sql1res.length > 0) {
                    let att_data = [];
                    Object.keys(sql1res).map((ak) => {
                      att_data.push(sql1res[ak]);
                    });
                    undercorrection_list[k].visa_users = att_data;
                    if (k == visa1.length - 1) {
                      resolve({
                        status: 1,
                        country: undercorrection_list,
                      });
                    }
                  } else {
                    resolve({
                      status: 0,
                      message: "Something went to wrong",
                    });
                  }
                }
              });
            });
          } else {
            resolve({
              status: 0,
              country: [],
            });
          }
        }
      });
    });

    sql1 = `SELECT details.d_c_id,attributes.name AS country_name FROM details INNER JOIN visa ON visa.v_id = details.service_id INNER JOIN customer ON customer.c_id = visa.c_id LEFT JOIN attributes ON attributes.attribute_id = details.d_c_id WHERE details.service_type = 8 and details.deleted = 0 and visa.deleted= 0 and customer.deleted=0 ${user} and visa.v_code=${data.v_code} AND STR_TO_DATE(details.under_process_date,"%d-%m-%Y")=STR_TO_DATE('${data.c_date}',"%d-%m-%Y") AND details.status_id=21 GROUP BY details.d_c_id`;
    let i_no = Math.floor(Math.random() * 1000);
    let response1 = await new Promise((resolve, reject) => {
      con.query(sql1, function (err, res) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (res.length > 0) {
            for (let i = 0; i < res.length; i += 1) {
              visa.push({
                visa_country: res[i].d_c_id,
                country_name: res[i].country_name,
                visa_user: [],
              });
              visa_list.push({
                visa_country: res[i].d_c_id,
                country_name: res[i].country_name,
                visa_user: [],
              });
            }
            Object.keys(visa).map((k) => {
              sql = `SELECT visa.v_id,visa.v_prefix,visa.v_name,GROUP_CONCAT(att_tbl.name SEPARATOR ',')  AS supporting_doc_name,att_tbl2.name AS visa_type  FROM visa LEFT JOIN customer ON customer.c_id = visa.c_id LEFT JOIN details d1 ON d1.service_id = visa.v_id LEFT JOIN attributes att_tbl ON FIND_IN_SET (att_tbl.attribute_id , visa.v_supporting_doc)  LEFT JOIN  attributes att_tbl2 ON att_tbl2.attribute_id = visa.v_type   WHERE d1.d_c_id = ${visa[k].visa_country} AND STR_TO_DATE(d1.under_process_date,"%d-%m-%Y")=STR_TO_DATE('${data.c_date}',"%d-%m-%Y") AND d1.status_id = 21 AND visa.v_code=${data.v_code}  ${user} AND d1.service_type=8 GROUP by visa.v_id`;

              con.query(sql, function (errsql1, sql1res) {
                if (errsql1) {
                  console.log(errsql1);
                  resolve({ status: 0, message: "Something went to wrong" });
                } else {
                  if (sql1res.length > 0) {
                    let visa_data = [];
                    Object.keys(sql1res).map((ak) => {
                      visa_data.push(sql1res[ak]);
                    });

                    visa_list[k].visa_user = visa_data;
                    if (k == visa.length - 1) {
                      resolve({
                        status: 1,
                        country: visa_list,
                        ulist: response2.country,
                        user_data: response.user_data,
                        settingdata: responsee.settingdata,
                        i_no: i_no,
                      });
                    }
                  } else {
                    resolve({
                      status: 0,
                      message: "Something went to wrong",
                    });
                  }
                }
              });
            });
            // 08-04
          } else {
            resolve({
              status: response2.status,
              country: [],
              ulist: response2.country,
              user_data: response.user_data,
              settingdata: responsee.settingdata,
              i_no: i_no,
            });
          }
        }
      });
    });
    return response1;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function getbranchcustomer(data) {
  try {
    sql1 = `SELECT user_type FROM users WHERE u_id = ${data.u_id} and deleted = 0`;

    let response1 = await new Promise((resolve, reject) => {
      con.query(sql1, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            result.forEach(function (result) {
              resolve({
                status: 1,
                user_type: result.user_type,
              });
            });
          } else {
            resolve({
              status: 0,
              user_type: "Something went wrong...",
            });
          }
        }
      });
    });
    //grishma
    if (response1.user_type == 3) {
      sql = `SELECT * FROM customer WHERE  customer.deleted = 0 and customer.is_cancel = 0 and  customer.u_id =${data.u_id} ORDER BY c_id DESC `;
    } else {
      sql = `SELECT * FROM customer WHERE  customer.deleted = 0 and customer.is_cancel = 0 and  customer.branch_id =${data.branch_id} ORDER BY c_id DESC`;
    }
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              result: result,
            });
          } else {
            resolve({
              status: 0,
              result: [],
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function accountreport(data) {
  try {
    if (data.u_id == 1) {
      sql = `select * from gsetting`;
    } else {
      sql = `SELECT *,branch.b_hsn_code as hsn_code,b_bank_details as bank_details,company_name as c_name,branch.b_gstno as c_gstno FROM users,branch WHERE users.branch_id=branch.branch_id AND u_id=${data.u_id} AND users.deleted=0 AND branch.deleted=0`;
    }
    let responsee = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            con.query(sql, function (err, res) {
              if (err) {
                console.log(err);
              } else {
                if (res.length > 0) {
                  resolve({
                    settingdata: res[0],
                  });
                }
              }
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    sqll = `SELECT * FROM users WHERE u_id = ${data.u_id}`;

    let response = await new Promise((resolve, reject) => {
      con.query(sqll, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            result.forEach(function (result) {
              resolve({
                status: 1,
                user_type: result.user_type,
                user_data: result,
              });
            });
          } else {
            resolve({
              status: 0,
              user_type: "Something went wrong...",
            });
          }
        }
      });
    });

    sql2 = `SELECT * FROM customer INNER JOIN payment ON payment.c_id = customer.c_id  WHERE  customer.is_cancel = 0 and customer.deleted = 0 and payment.deleted= 0  and payment.c_id = ${data.c_name} and STR_TO_DATE(payment.payment_date,"%d-%m-%y") >= STR_TO_DATE('${data.s_date}',"%d-%m-%y") and STR_TO_DATE(payment.payment_date,"%d-%m-%y") <= STR_TO_DATE('${data.e_date}',"%d-%m-%y") and  payment.receive_amt  != 0 `;

    let response1 = await new Promise((resolve, reject) => {
      con.query(sql2, async function (err3, result3) {
        if (err3) {
          console.log(err3);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result3.length > 0) {
            resolve({
              status: 1,
              data: result3,
            });
          } else {
            resolve({
              status: 0,
              data: [],
            });
          }
        }
      });
    });
    let i_no = Math.floor(Math.random() * 1000);
    sql3 = `SELECT * FROM customer INNER JOIN payment ON payment.c_id = customer.c_id  WHERE  customer.is_cancel = 0 and customer.deleted = 0 and payment.deleted= 0  and payment.c_id = ${data.c_name} and STR_TO_DATE(payment.payment_date,"%d-%m-%y") >= STR_TO_DATE('${data.s_date}',"%d-%m-%y") and STR_TO_DATE(payment.payment_date,"%d-%m-%y") <= STR_TO_DATE('${data.e_date}',"%d-%m-%y") and  payment.payment_refund  != 0 `;

    let response2 = await new Promise((resolve, reject) => {
      con.query(sql3, async function (err3, result3) {
        if (err3) {
          console.log(err3);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result3.length > 0) {
            resolve({
              status: 1,
              receive: response1.data,
              refund: result3,
              settingdata: responsee.settingdata,
              user_data: response.user_data,
              i_no: i_no,
            });
          } else {
            resolve({
              status: 0,
              refund: [],
              receive: response1.data,
              settingdata: responsee.settingdata,
              user_data: response.user_data,
              i_no: i_no,
            });
          }
        }
      });
    });

    return response2;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function accountreportpdf(data) {
  try {
    let response = await new Promise(async (resolve, reject) => {
      let newobj = {
        s_date: data.s_date,
        e_date: data.e_date,
        branch_name: data.branch_name,
        branch_id: data.branch_id,
        u_id: data.u_id,
        c_name: data.c_name,
        created_id: data.created_id,
      };
      let account_data = await accountreport(newobj);

      let imageAsBase64;
      if (
        fs.existsSync(
          `./public/Assets/images/${account_data.user_data.u_id == 1 ? "adminlogo" : "branchlogo"
          }/${account_data.settingdata.logo}`
        )
      ) {
        imageAsBase64 = fs.readFileSync(
          `./public/Assets/images/${account_data.user_data.u_id == 1 ? "adminlogo" : "branchlogo"
          }/${account_data.settingdata.logo}`,
          { encoding: "base64" }
        );
      }

      pdf
        .create(pdfTemplate5(account_data, imageAsBase64), {
          childProcessOptions: {
            env: {
              OPENSSL_CONF: "/dev/null",
            },
          },
        })
        .toFile(
          `${__dirname}/public/Assets/accountreport_pdf/accountreport_${data.i_no}.pdf`,
          (err) => {
            if (err) {
              return console.log("error");
            }
            resolve({
              ino: data.i_no,
              message: "done",
            });
          }
        );
    });

    return response;
  } catch (err) {
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function visapdf(data) {
  try {
    let response = await new Promise(async (resolve, reject) => {
      let newobj = {
        c_date: data.c_date,
        branch_name: data.branch_name,
        branch_id: data.branch_id,
        u_id: data.u_id,
        v_code: data.v_code,
        created_id: data.created_id,
      };
      let visa_data = await visacoverletter(newobj);
      // 08-04
      let imageAsBase64;
      if (
        fs.existsSync(
          `./public/Assets/images/${
          // visa_data.user_data.u_id == 1 ? "adminlogo" :
          "branchlogo"
          }/${visa_data.settingdata.logo}`
        )
      ) {
        imageAsBase64 = fs.readFileSync(
          `./public/Assets/images/${
          // visa_data.user_data.u_id == 1 ? "adminlogo" :
          "branchlogo"
          }/${visa_data.settingdata.logo}`,
          { encoding: "base64" }
        );
      }

      pdf
        .create(pdfTemplate3(visa_data, imageAsBase64, data), {
          childProcessOptions: {
            env: {
              OPENSSL_CONF: "/dev/null",
            },
          },
        })
        .toFile(
          `${__dirname}/public/Assets/visa_pdf/visa_${data.i_no}.pdf`,
          (err) => {
            if (err) {
              return console.log("error");
            }
            resolve({
              ino: data.i_no,
              message: "done",
            });
          }
        );
    });

    if (data.status_id == 1) {
      let response1 = await new Promise(async (resolve, reject) => {
        const resp = await sendvisaemail(data);
        resolve({
          result: resp,
          ino: response.ino,
          message: "done",
        });
      });
      return response1;
    } else {
      return response;
    }
  } catch (err) {
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

//0603
async function attestationcoverletter(data) {
  try {
    // if (data.u_id == 1) {
    //   sql = `select * from gsetting`;
    // } else {
    sql = `SELECT *,branch.b_hsn_code as hsn_code,b_bank_details as bank_details,company_name as c_name,branch.b_gstno as c_gstno FROM users,branch WHERE users.branch_id=branch.branch_id AND u_id=${data.u_id} AND users.deleted=0 AND branch.deleted=0`;
    // }
    let responsee = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            con.query(sql, function (err, res) {
              if (err) {
                console.log(err);
              } else {
                if (res.length > 0) {
                  resolve({
                    settingdata: res[0],
                  });
                }
              }
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });

    sqll = `SELECT * FROM users WHERE u_id = ${data.u_id}`;

    let response = await new Promise((resolve, reject) => {
      con.query(sqll, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            result.forEach(function (result) {
              resolve({
                status: 1,
                user_type: result.user_type,
                user_data: result,
              });
            });
          } else {
            resolve({
              status: 0,
              user_type: "Something went wrong...",
            });
          }
        }
      });
    });
    let attestation = [];
    let attestation1 = [];
    let attestation_list = [];
    let undercorrection_list = [];
    let user = "";
    if (response.user_type == 0) {
      user = ` and (customer.foreign_branch = ${data.branch_name} OR customer.branch_id = ${data.branch_name})`;
    } else if (response.user_type == 1) {
      user = ` and (customer.foreign_branch = ${data.branch_id} OR customer.branch_id = ${data.branch_id})`;
    } else if (
      response.user_data.c_l_permission != 0 &&
      response.user_type == 3
    ) {
      user = ` and (customer.foreign_branch = ${data.branch_id} OR customer.branch_id = ${data.branch_id})`;
    } else {
      user = ` and (customer.u_id=${data.u_id} OR customer.foreign_branchuser=${data.u_id})`;
    }

    sql2 = `SELECT a_id,a_country,customer.c_id,attributes.name AS country_name FROM attestation INNER JOIN customer ON customer.c_id = attestation.c_id LEFT JOIN attributes ON attributes.attribute_id = attestation.a_country INNER JOIN details ON attestation.a_id=details.service_id WHERE  attestation.deleted = 0 ${user} and attestation.a_code=${data.a_code} AND STR_TO_DATE(details.under_correction_date,"%d-%m-%Y")=STR_TO_DATE('${data.c_date}',"%d-%m-%Y") AND details.status_id=273 AND details.service_type=10 GROUP by attestation.a_country`;

    let response2 = await new Promise((resolve, reject) => {
      con.query(sql2, function (err, res) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (res.length > 0) {
            for (let i = 0; i < res.length; i += 1) {
              attestation1.push({
                attestation_country: res[i].a_country,
                country_name: res[i].country_name,
                attestation_users: [],
              });
              undercorrection_list.push({
                attestation_country: res[i].a_country,
                country_name: res[i].country_name,
                attestation_users: [],
              });
            }
            Object.keys(attestation1).map((k) => {
              sql = `SELECT d1.reason,attestation.a_id,attestation.a_prefix,attestation.a_name,GROUP_CONCAT(att_tbl.name SEPARATOR ',')  AS a_certificate_name,GROUP_CONCAT(DISTINCT att_tbl1.name SEPARATOR ',')  AS supporting_doc_name,att_tbl2.name AS attestation_type  FROM attestation LEFT JOIN customer ON customer.c_id = attestation.c_id LEFT JOIN details d1 ON d1.service_id = attestation.a_id LEFT JOIN attributes att_tbl ON d1.service_type=10 and attestation.a_id = d1.service_id and d1.d_c_id = att_tbl.attribute_id  AND STR_TO_DATE(d1.under_correction_date,"%d-%m-%Y")=STR_TO_DATE('${data.c_date}',"%d-%m-%Y") AND d1.status_id = 273 LEFT JOIN attributes att_tbl1 ON FIND_IN_SET (att_tbl1.attribute_id , attestation.a_supporting_doc) LEFT JOIN  attributes att_tbl2 ON att_tbl2.attribute_id = attestation.a_type WHERE STR_TO_DATE(d1.under_correction_date,"%d-%m-%Y")=STR_TO_DATE('${data.c_date}',"%d-%m-%Y") AND d1.status_id = 273 AND attestation.a_code=${data.a_code} AND attestation.a_country=${attestation1[k].attestation_country}  ${user} AND d1.service_type=10 GROUP by attestation.a_id`;
              con.query(sql, function (errsql1, sql1res) {
                if (errsql1) {
                  resolve({ status: 0, message: "Something went to wrong" });
                } else {
                  if (sql1res.length > 0) {
                    let att_data = [];
                    Object.keys(sql1res).map((ak) => {
                      att_data.push(sql1res[ak]);
                    });
                    undercorrection_list[k].attestation_users = att_data;
                    if (k == attestation1.length - 1) {
                      resolve({
                        status: 1,
                        country: undercorrection_list,
                      });
                    }
                  } else {
                    resolve({
                      status: 0,
                      message: "Something went to wrong",
                    });
                  }
                }
              });
            });
          } else {
            resolve({
              status: 0,
              country: [],
            });
          }
        }
      });
    });

    sql1 = `SELECT a_id,a_country,customer.c_id,attributes.name AS country_name FROM attestation INNER JOIN customer ON customer.c_id = attestation.c_id LEFT JOIN attributes ON attributes.attribute_id = attestation.a_country INNER JOIN details ON attestation.a_id=details.service_id WHERE  attestation.deleted = 0 ${user} and attestation.a_code=${data.a_code} AND STR_TO_DATE(details.under_process_date,"%d-%m-%Y")=STR_TO_DATE('${data.c_date}',"%d-%m-%Y") AND details.status_id=21 AND details.service_type=10 GROUP BY attestation.a_country`;
    let i_no = Math.floor(Math.random() * 1000);
    let response1 = await new Promise((resolve, reject) => {
      con.query(sql1, function (err, res) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (res.length > 0) {
            for (let i = 0; i < res.length; i += 1) {
              attestation.push({
                attestation_country: res[i].a_country,
                country_name: res[i].country_name,
                attestation_user: [],
              });
              attestation_list.push({
                attestation_country: res[i].a_country,
                country_name: res[i].country_name,
                attestation_user: [],
              });
            }

            Object.keys(attestation).map((k) => {
              sql = `SELECT attestation.a_id,attestation.a_prefix,attestation.a_name,GROUP_CONCAT(att_tbl.name SEPARATOR ',')  AS a_certificate_name,GROUP_CONCAT(DISTINCT att_tbl1.name SEPARATOR ',')  AS supporting_doc_name,att_tbl2.name AS attestation_type  FROM attestation LEFT JOIN customer ON customer.c_id = attestation.c_id LEFT JOIN details d1 ON d1.service_id = attestation.a_id LEFT JOIN attributes att_tbl ON d1.service_type=10 and attestation.a_id = d1.service_id and d1.d_c_id = att_tbl.attribute_id  AND STR_TO_DATE(d1.under_process_date,"%d-%m-%Y")=STR_TO_DATE('${data.c_date}',"%d-%m-%Y") AND d1.status_id = 21 LEFT JOIN attributes att_tbl1 ON FIND_IN_SET (att_tbl1.attribute_id , attestation.a_supporting_doc) LEFT JOIN  attributes att_tbl2 ON att_tbl2.attribute_id = attestation.a_type   WHERE STR_TO_DATE(d1.under_process_date,"%d-%m-%Y")=STR_TO_DATE('${data.c_date}',"%d-%m-%Y") AND d1.status_id = 21 AND attestation.a_code=${data.a_code} AND attestation.a_country=${attestation[k].attestation_country}  ${user} AND d1.service_type=10
              GROUP by attestation.a_id `;

              con.query(sql, function (errsql1, sql1res) {
                if (errsql1) {
                  console.log(errsql1);
                  resolve({ status: 0, message: "Something went to wrong" });
                } else {
                  if (sql1res.length > 0) {
                    let att_data = [];
                    Object.keys(sql1res).map((ak) => {
                      att_data.push(sql1res[ak]);
                    });

                    attestation_list[k].attestation_user = att_data;
                    if (k == attestation.length - 1) {
                      resolve({
                        status: 1,
                        country: attestation_list,
                        ulist: response2.country,
                        user_data: response.user_data,
                        settingdata: responsee.settingdata,
                        i_no: i_no,
                      });
                    }
                  } else {
                    resolve({
                      status: 0,
                      message: "Something went to wrong",
                    });
                  }
                }
              });
            });
            // 08-04
          } else {
            resolve({
              status: response2.status,
              country: [],
              ulist: response2.country,
              user_data: response.user_data,
              settingdata: responsee.settingdata,
              i_no: i_no,
            });
          }
        }
      });
    });
    return response1;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function attestationpdf(data) {
  try {
    let response = await new Promise(async (resolve, reject) => {
      let newobj = {
        c_date: data.c_date,
        branch_name: data.branch_name,
        branch_id: data.branch_id,
        u_id: data.u_id,
        a_code: data.a_code,
        created_id: data.created_id,
      };
      let attestation_data = await attestationcoverletter(newobj);

      let imageAsBase64;
      // 08-04
      if (
        fs.existsSync(
          `./public/Assets/images/${
          // attestation_data.user_data.u_id == 1 ? "adminlogo" :
          "branchlogo"
          }/${attestation_data.settingdata.logo}`
        )
      ) {
        imageAsBase64 = fs.readFileSync(
          `./public/Assets/images/${
          // attestation_data.user_data.u_id == 1 ? "adminlogo" :
          "branchlogo"
          }/${attestation_data.settingdata.logo}`,
          { encoding: "base64" }
        );
      }

      pdf
        .create(pdfTemplate1(attestation_data, imageAsBase64, data), {
          childProcessOptions: {
            env: {
              OPENSSL_CONF: "/dev/null",
            },
          },
        })
        .toFile(
          `${__dirname}/public/Assets/attestation_pdf/attestation_${data.i_no}.pdf`,
          (err) => {
            if (err) {
              return console.log("error");
            }
            resolve({
              ino: data.i_no,
              message: "done",
            });
          }
        );
    });

    if (data.status_id == 1) {
      let response1 = await new Promise(async (resolve, reject) => {
        const resp = await sendattestationmail(data);
        resolve({
          result: resp,
          ino: response.ino,
          message: "done",
        });
      });
      return response1;
    } else {
      return response;
    }
  } catch (err) {
    return { status: 0, message: "Invalid Call Try Again1" };
  }
}

//0603
async function apostillecoverletter(data) {
  try {
    // if (data.u_id == 1) {
    //   sql = `select * from gsetting`;
    // } else {
    sql = `SELECT *,branch.b_hsn_code as hsn_code,b_bank_details as bank_details,company_name as c_name,branch.b_gstno as c_gstno FROM users,branch WHERE users.branch_id=branch.branch_id AND u_id=${data.u_id} AND users.deleted=0 AND branch.deleted=0`;
    // }
    let responsee = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            con.query(sql, function (err, res) {
              if (err) {
                console.log(err);
              } else {
                if (res.length > 0) {
                  resolve({
                    settingdata: res[0],
                  });
                }
              }
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });

    sqll = `SELECT * FROM users WHERE u_id = ${data.u_id}`;

    let response = await new Promise((resolve, reject) => {
      con.query(sqll, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            result.forEach(function (result) {
              resolve({
                status: 1,
                user_type: result.user_type,
                user_data: result,
              });
            });
          } else {
            resolve({
              status: 0,
              user_type: "Something went wrong...",
            });
          }
        }
      });
    });
    let apostille = [];
    let apostille1 = [];
    let apostille_list = [];
    let undercorrection_list = [];
    let user = "";
    if (response.user_type == 0) {
      user = ` and (customer.foreign_branch = ${data.branch_name} OR customer.branch_id = ${data.branch_name})`;
    } else if (response.user_type == 1) {
      user = ` and (customer.foreign_branch = ${data.branch_id} OR customer.branch_id = ${data.branch_id})`;
    } else if (
      response.user_data.c_l_permission != 0 &&
      response.user_type == 3
    ) {
      user = ` and (customer.foreign_branch = ${data.branch_id} OR customer.branch_id = ${data.branch_id})`;
    } else {
      user = ` and (customer.u_id=${data.u_id} OR customer.foreign_branchuser=${data.u_id})`;
    }
    // if (response.user_type == 0) {
    //   sql1 = `SELECT a_id,a_country,(SELECT name  FROM attributes where attributes.attribute_id = apostille.a_country) as country_name FROM apostille INNER JOIN customer ON customer.c_id = apostille.c_id INNER JOIN details ON apostille.a_id=details.service_id WHERE apostille.deleted = 0 and ((customer.foreign_branch = '0' AND customer.branch_id = ${data.branch_name}) OR customer.foreign_branch = ${data.branch_name}) and apostille.a_code=${data.a_code} AND STR_TO_DATE(details.under_process_date,"%d-%m-%Y")=STR_TO_DATE('${data.c_date}',"%d-%m-%Y") AND details.status_id=21 AND details.service_type=17 GROUP BY apostille.a_country`;
    // } else if (response.user_type == 1) {
    //   sql1 = `SELECT a_id,a_country,(SELECT name  FROM attributes where attributes.attribute_id = apostille.a_country) as country_name FROM apostille INNER JOIN customer ON customer.c_id = apostille.c_id INNER JOIN details ON apostille.a_id=details.service_id WHERE  apostille.deleted = 0 and ((customer.foreign_branch = '0' AND customer.branch_id = ${data.branch_id}) OR customer.foreign_branch = ${data.branch_id}) and apostille.a_code=${data.a_code} AND STR_TO_DATE(details.under_process_date,"%d-%m-%Y")=STR_TO_DATE('${data.c_date}',"%d-%m-%Y") AND details.status_id=21 AND details.service_type=17 GROUP BY apostille.a_country`;
    // } else {
    //   sql1 = `SELECT a_id,a_country,(SELECT name  FROM attributes where attributes.attribute_id = apostille.a_country) as country_name FROM apostille INNER JOIN customer ON customer.c_id = apostille.c_id INNER JOIN details ON apostille.a_id=details.service_id WHERE  apostille.deleted = 0 and ((customer.foreign_branch = '0' AND customer.u_id = ${data.u_id}) OR customer.foreign_branchuser = ${data.u_id}) and apostille.a_code=${data.a_code} AND STR_TO_DATE(details.under_process_date,"%d-%m-%Y")=STR_TO_DATE('${data.c_date}',"%d-%m-%Y") AND details.status_id=21 AND details.service_type=17 GROUP BY apostille.a_country`;
    // }

    sql2 = `SELECT a_id,a_country,customer.c_id,attributes.name AS country_name FROM apostille INNER JOIN customer ON customer.c_id = apostille.c_id LEFT JOIN attributes ON attributes.attribute_id = apostille.a_country INNER JOIN details ON apostille.a_id=details.service_id WHERE  apostille.deleted = 0 ${user} and apostille.a_code=${data.a_code} AND STR_TO_DATE(details.under_correction_date,"%d-%m-%Y")=STR_TO_DATE('${data.c_date}',"%d-%m-%Y") AND details.status_id=273 AND details.service_type=17 GROUP by apostille.a_country`;

    let response2 = await new Promise((resolve, reject) => {
      con.query(sql2, function (err, res) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (res.length > 0) {
            for (let i = 0; i < res.length; i += 1) {
              apostille1.push({
                apostille_country: res[i].a_country,
                country_name: res[i].country_name,
                apostille_users: [],
              });
              undercorrection_list.push({
                apostille_country: res[i].a_country,
                country_name: res[i].country_name,
                apostille_users: [],
              });
            }
            Object.keys(apostille1).map((k) => {
              sql = `SELECT d1.reason,apostille.a_id,apostille.a_prefix,apostille.a_name,GROUP_CONCAT(att_tbl.name SEPARATOR ',')  AS a_certificate_name,GROUP_CONCAT(DISTINCT att_tbl1.name SEPARATOR ',')  AS supporting_doc_name,att_tbl2.name AS apostille_type  FROM apostille LEFT JOIN customer ON customer.c_id = apostille.c_id LEFT JOIN details d1 ON d1.service_id = apostille.a_id LEFT JOIN attributes att_tbl ON d1.service_type=17 and apostille.a_id = d1.service_id and d1.d_c_id = att_tbl.attribute_id  AND STR_TO_DATE(d1.under_correction_date,"%d-%m-%Y")=STR_TO_DATE('${data.c_date}',"%d-%m-%Y") AND d1.status_id = 273 LEFT JOIN attributes att_tbl1 ON FIND_IN_SET (att_tbl1.attribute_id , apostille.a_supporting_doc) LEFT JOIN  attributes att_tbl2 ON att_tbl2.attribute_id = apostille.a_type WHERE STR_TO_DATE(d1.under_correction_date,"%d-%m-%Y")=STR_TO_DATE('${data.c_date}',"%d-%m-%Y") AND d1.status_id = 273 AND apostille.a_code=${data.a_code} AND apostille.a_country=${apostille1[k].apostille_country}  ${user} AND d1.service_type=17 GROUP by apostille.a_id`;
              con.query(sql, function (errsql1, sql1res) {
                if (errsql1) {
                  resolve({ status: 0, message: "Something went to wrong" });
                } else {
                  if (sql1res.length > 0) {
                    let att_data = [];
                    Object.keys(sql1res).map((ak) => {
                      att_data.push(sql1res[ak]);
                    });
                    undercorrection_list[k].apostille_users = att_data;
                    if (k == apostille1.length - 1) {
                      resolve({
                        status: 1,
                        country: undercorrection_list,
                      });
                    }
                  } else {
                    resolve({
                      status: 0,
                      message: "Something went to wrong",
                    });
                  }
                }
              });
            });
          } else {
            resolve({
              status: 0,
              country: [],
            });
          }
        }
      });
    });

    sql1 = `SELECT a_id,a_country,customer.c_id,attributes.name AS country_name FROM apostille INNER JOIN customer ON customer.c_id = apostille.c_id LEFT JOIN attributes ON attributes.attribute_id = apostille.a_country INNER JOIN details ON apostille.a_id=details.service_id WHERE  apostille.deleted = 0 ${user} and apostille.a_code=${data.a_code} AND STR_TO_DATE(details.under_process_date,"%d-%m-%Y")=STR_TO_DATE('${data.c_date}',"%d-%m-%Y") AND details.status_id=21 AND details.service_type=17 GROUP BY apostille.a_country`;

    let i_no = Math.floor(Math.random() * 1000);
    let response1 = await new Promise((resolve, reject) => {
      con.query(sql1, function (err, res) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (res.length > 0) {
            for (let i = 0; i < res.length; i += 1) {
              apostille.push({
                apostille_country: res[i].a_country,
                country_name: res[i].country_name,
                apostille_user: [],
              });
              apostille_list.push({
                apostille_country: res[i].a_country,
                country_name: res[i].country_name,
                apostille_user: [],
              });
            }
            Object.keys(apostille).map((k) => {
              // if (response.user_type == 0) {
              //   sql = `SELECT *,(SELECT name  FROM attributes where attributes.attribute_id = apostille.a_type) as apostille_type,
              //   (SELECT GROUP_CONCAT(attributes.name SEPARATOR ',') as name FROM attributes where FIND_IN_SET (attributes.attribute_id , apostille.a_certificate)) as a_certificate_name,
              //   (SELECT GROUP_CONCAT(attributes.name SEPARATOR ',')
              //   as name
              //    FROM attributes where FIND_IN_SET (attributes.attribute_id , apostille.a_supporting_doc)) as supporting_doc_name  FROM customer INNER JOIN apostille ON customer.c_id=apostille.c_id INNER JOIN details ON apostille.a_id=details.service_id AND STR_TO_DATE(details.under_process_date,"%d-%m-%Y")=STR_TO_DATE('${data.c_date}',"%d-%m-%Y") and apostille.a_code=${data.a_code} AND apostille.a_country=${apostille[k].apostille_country}  AND ((customer.foreign_branch = '0' AND customer.branch_id = ${data.branch_name}) OR customer.foreign_branch = ${data.branch_name}) AND details.status_id=21 AND details.service_type=17 GROUP BY apostille.c_id;`;
              // } else if (response.user_type == 1) {
              //   sql = `SELECT *,(SELECT name  FROM attributes where attributes.attribute_id = apostille.a_type) as apostille_type,
              //   (SELECT GROUP_CONCAT(attributes.name SEPARATOR ',') as name FROM attributes where FIND_IN_SET (attributes.attribute_id , apostille.a_certificate)) as a_certificate_name,
              //   (SELECT GROUP_CONCAT(attributes.name SEPARATOR ',')
              //   as name
              //    FROM attributes where FIND_IN_SET (attributes.attribute_id , apostille.a_supporting_doc)) as supporting_doc_name  FROM customer INNER JOIN apostille ON customer.c_id=apostille.c_id INNER JOIN details ON apostille.a_id=details.service_id AND STR_TO_DATE(details.under_process_date,"%d-%m-%Y")=STR_TO_DATE('${data.c_date}',"%d-%m-%Y") and apostille.a_code=${data.a_code} AND apostille.a_country=${apostille[k].apostille_country}  AND ((customer.foreign_branch = '0' AND customer.branch_id = ${data.branch_id}) OR customer.foreign_branch = ${data.branch_id}) AND details.status_id=21 AND details.service_type=17 GROUP BY apostille.c_id;`;
              // } else {
              //   sql = `SELECT *,(SELECT name  FROM attributes where attributes.attribute_id = apostille.a_type) as apostille_type,
              //   (SELECT GROUP_CONCAT(attributes.name SEPARATOR ',') as name FROM attributes where FIND_IN_SET (attributes.attribute_id , apostille.a_certificate)) as a_certificate_name,
              //   (SELECT GROUP_CONCAT(attributes.name SEPARATOR ',')
              //   as name
              //    FROM attributes where FIND_IN_SET (attributes.attribute_id , apostille.a_supporting_doc)) as supporting_doc_name  FROM customer INNER JOIN apostille ON customer.c_id=apostille.c_id INNER JOIN details ON apostille.a_id=details.service_id AND STR_TO_DATE(details.under_process_date,"%d-%m-%Y")=STR_TO_DATE('${data.c_date}',"%d-%m-%Y") and apostille.a_code=${data.a_code} AND apostille.a_country=${apostille[k].apostille_country}  AND ((customer.foreign_branch = '0' AND customer.u_id = ${data.u_id}) OR customer.foreign_branchuser = ${data.u_id}) AND details.status_id=21 AND details.service_type=17 GROUP BY apostille.c_id;`;
              // }

              sql = `SELECT apostille.a_id,apostille.a_prefix,apostille.a_name,GROUP_CONCAT(att_tbl.name SEPARATOR ',')  AS a_certificate_name,GROUP_CONCAT(DISTINCT att_tbl1.name SEPARATOR ',')  AS supporting_doc_name,att_tbl2.name AS apostille_type  FROM apostille LEFT JOIN customer ON customer.c_id = apostille.c_id LEFT JOIN details d1 ON d1.service_id = apostille.a_id LEFT JOIN attributes att_tbl ON d1.service_type=17 and apostille.a_id = d1.service_id and d1.d_c_id = att_tbl.attribute_id  AND STR_TO_DATE(d1.under_process_date,"%d-%m-%Y")=STR_TO_DATE('${data.c_date}',"%d-%m-%Y") AND d1.status_id = 21 LEFT JOIN attributes att_tbl1 ON FIND_IN_SET (att_tbl1.attribute_id , apostille.a_supporting_doc) LEFT JOIN  attributes att_tbl2 ON att_tbl2.attribute_id = apostille.a_type   WHERE STR_TO_DATE(d1.under_process_date,"%d-%m-%Y")=STR_TO_DATE('${data.c_date}',"%d-%m-%Y") AND d1.status_id = 21 AND apostille.a_code=${data.a_code} AND apostille.a_country=${apostille[k].apostille_country}  ${user} AND d1.service_type=17
              GROUP by apostille.a_id `;

              con.query(sql, function (errsql1, sql1res) {
                if (errsql1) {
                  console.log(errsql1);
                  resolve({ status: 0, message: "Something went to wrong" });
                } else {
                  if (sql1res.length > 0) {
                    let att_data = [];
                    Object.keys(sql1res).map((ak) => {
                      att_data.push(sql1res[ak]);
                    });

                    apostille_list[k].apostille_user = att_data;
                    if (k == apostille.length - 1) {
                      resolve({
                        status: 1,
                        country: apostille_list,
                        ulist: response2.country,
                        user_data: response.user_data,
                        settingdata: responsee.settingdata,
                        i_no: i_no,
                      });
                    }
                  } else {
                    resolve({
                      status: 0,
                      message: "Something went to wrong",
                    });
                  }
                }
              });
            });
            // 08-04
          } else {
            resolve({
              status: response2.status,
              country: [],
              ulist: response2.country,
              user_data: response.user_data,
              settingdata: responsee.settingdata,
              i_no: i_no,
            });
          }
        }
      });
    });
    return response1;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function apostillepdf(data) {
  try {
    let response = await new Promise(async (resolve, reject) => {
      let newobj = {
        c_date: data.c_date,
        branch_name: data.branch_name,
        branch_id: data.branch_id,
        u_id: data.u_id,
        a_code: data.a_code,
        created_id: data.created_id,
      };
      let apostille_data = await apostillecoverletter(newobj);
      // 08-04
      let imageAsBase64;
      if (
        fs.existsSync(
          `./public/Assets/images/${
          // apostille_data.user_data.u_id == 1 ? "adminlogo" :
          "branchlogo"
          }/${apostille_data.settingdata.logo}`
        )
      ) {
        imageAsBase64 = fs.readFileSync(
          `./public/Assets/images/${
          // apostille_data.user_data.u_id == 1 ? "adminlogo" :
          "branchlogo"
          }/${apostille_data.settingdata.logo}`,
          { encoding: "base64" }
        );
      }

      pdf
        .create(pdfTemplate2(apostille_data, imageAsBase64, data), {
          childProcessOptions: {
            env: {
              OPENSSL_CONF: "/dev/null",
            },
          },
        })
        .toFile(
          `${__dirname}/public/Assets/apostille_pdf/apostille_${data.i_no}.pdf`,
          (err) => {
            if (err) {
              return console.log("error");
            }
            resolve({
              ino: data.i_no,
              message: "done",
            });
          }
        );
    });

    if (data.status_id == 1) {
      let response1 = await new Promise(async (resolve, reject) => {
        const resp = await sendapostillemail(data);
        resolve({
          result: resp,
          ino: response.ino,
          message: "done",
        });
      });
      return response1;
    } else {
      return response;
    }
  } catch (err) {
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function sendattestationmail(data) {
  try {
    let response = await new Promise(async (resolve, reject) => {
      let senderMailSetting = await sendmessage.getEmailSetting(data.u_id);

      sqlll = `SELECT u_email FROM users WHERE u_id = ${data.u_id} `;
      let ccmail = await new Promise((resolve, reject) => {
        con.query(sqlll, async function (err1, result1) {
          if (err1) {
            console.log(err1);
            resolve({ status: 0, message: "Something went to wrong" });
          } else {
            if (result1.length > 0) {
              resolve({ status: 1, result: result1[0].u_email });
            } else {
              resolve({
                status: 0,
                message: "Something went to wrong",
              });
            }
          }
        });
      });

      let message = await sendmessage.getTemplate(4);
      if (message.status != 0) {
        let mess =
          (message.header == 1
            ? typeof senderMailSetting.email_template_header !=
              undefined && senderMailSetting.email_template_header != undefined &&
              senderMailSetting.email_template_header != null
              ? senderMailSetting.email_template_header
              : ""
            : "") +
          message.template +
          (message.b_d_id != 0
            ? message.b_d_id == 1
              ? senderMailSetting.gst_bankdetails
              : message.b_d_id == 2
                ? senderMailSetting.ngst_bankdetails
                : message.b_d_id == 3
                  ? senderMailSetting.general_bankdetails
                  : ""
            : "") +
          (message.footer == 1 ? senderMailSetting.email_template_footer : "") +
          (message.signature == 1 ? senderMailSetting.email_signature : "");
        CCMailSetting = await sendmessage.getEmailSetting(1);
        let att = [];

        let pathname = __dirname + "/public/Assets/attestation_pdf";
        att.push({ url: `attestation_${data.i_no}.pdf` });
        sendmessagenow = sendmessage.messagesend(
          senderMailSetting,
          data.email,
          mess,
          ` ${message.subject} ||  ${data.a_code_name}`,
          att,
          // CCMailSetting.cc_email, //cc mail// CCMailSetting.e_username,
          ccmail.result, // reply mail
          1,
          pathname
        );
        sendmessagenow = sendmessage.messagesend(
          senderMailSetting,
          CCMailSetting.cc_email,
          mess,
          ` ${message.subject} ||  ${data.a_code_name}`,
          att,
          // CCMailSetting.cc_email, //cc mail// CCMailSetting.e_username,
          ccmail.result, // reply mail
          1,
          pathname
        );
        resolve({
          status: 1,
          message:
            "Attestation cover letter with Attechment send to your mail...",
        });
      }
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function sendapostillemail(data) {
  try {
    //  await apostillepdf(data)

    // sql = `SELECT name FROM attributes WHERE attribute_id=${data.mail}`;

    let response = await new Promise(async (resolve, reject) => {
      let senderMailSetting = await sendmessage.getEmailSetting(data.u_id);

      sqlll = `SELECT u_email FROM users WHERE u_id = ${data.u_id} `;
      let ccmail = await new Promise((resolve, reject) => {
        con.query(sqlll, async function (err1, result1) {
          if (err1) {
            console.log(err1);
            resolve({ status: 0, message: "Something went to wrong" });
          } else {
            if (result1.length > 0) {
              resolve({ status: 1, result: result1[0].u_email });
            } else {
              resolve({
                status: 0,
                message: "Something went to wrong",
              });
            }
          }
        });
      });

      let message = await sendmessage.getTemplate(4);
      // message.template = message.template.replace(
      //   "{:name:}",
      //   result[0].c_name
      // );
      if (message.status != 0) {
        let mess =
          (message.header == 1
            ? typeof senderMailSetting.email_template_header !=
              undefined && senderMailSetting.email_template_header != undefined &&
              senderMailSetting.email_template_header != null
              ? senderMailSetting.email_template_header
              : ""
            : "") +
          message.template +
          (message.b_d_id != 0
            ? message.b_d_id == 1
              ? senderMailSetting.gst_bankdetails
              : message.b_d_id == 2
                ? senderMailSetting.ngst_bankdetails
                : message.b_d_id == 3
                  ? senderMailSetting.general_bankdetails
                  : ""
            : "") +
          (message.footer == 1 ? senderMailSetting.email_template_footer : "") +
          (message.signature == 1 ? senderMailSetting.email_signature : "");
        CCMailSetting = await sendmessage.getEmailSetting(1);
        let att = [];

        let pathname = __dirname + "/public/Assets/apostille_pdf";
        att.push({ url: `apostille_${data.i_no}.pdf` });
        //0404
        sendmessagenow = sendmessage.messagesend(
          senderMailSetting,
          data.email,
          mess,
          ` ${message.subject} || ${data.a_code_name}`,
          att,
          // CCMailSetting.cc_email, //cc mail// CCMailSetting.e_username,
          ccmail.result, // reply mail
          1,
          pathname
        );
        sendmessagenow = sendmessage.messagesend(
          senderMailSetting,
          CCMailSetting.cc_email,
          mess,
          ` ${message.subject} || ${data.a_code_name}`,
          att,
          // CCMailSetting.cc_email, //cc mail// CCMailSetting.e_username,
          ccmail.result, // reply mail
          1,
          pathname
        );
        resolve({
          status: 1,
          message:
            "Apostille cover letter with Attechment send to your mail...",
        });
      }
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function sendvisaemail(data) {
  try {
    // await visapdf(data)
    // sql = `SELECT name FROM attributes WHERE attribute_id=${data.mail}`;

    let response = await new Promise(async (resolve, reject) => {
      let senderMailSetting = await sendmessage.getEmailSetting(data.u_id);

      sqlll = `SELECT u_email FROM users WHERE u_id = ${data.u_id} `;
      let ccmail = await new Promise((resolve, reject) => {
        con.query(sqlll, async function (err1, result1) {
          if (err1) {
            console.log(err1);
            resolve({ status: 0, message: "Something went to wrong" });
          } else {
            if (result1.length > 0) {
              resolve({ status: 1, result: result1[0].u_email });
            } else {
              resolve({
                status: 0,
                message: "Something went to wrong",
              });
            }
          }
        });
      });

      let message = await sendmessage.getTemplate(4);
      if (message.status != 0) {
        let mess =
          (message.header == 1
            ? typeof senderMailSetting.email_template_header !=
              undefined && senderMailSetting.email_template_header != undefined &&
              senderMailSetting.email_template_header != null
              ? senderMailSetting.email_template_header
              : ""
            : "") +
          message.template +
          (message.b_d_id != 0
            ? message.b_d_id == 1
              ? senderMailSetting.gst_bankdetails
              : message.b_d_id == 2
                ? senderMailSetting.ngst_bankdetails
                : message.b_d_id == 3
                  ? senderMailSetting.general_bankdetails
                  : ""
            : "") +
          (message.footer == 1 ? senderMailSetting.email_template_footer : "") +
          (message.signature == 1 ? senderMailSetting.email_signature : "");
        CCMailSetting = await sendmessage.getEmailSetting(1);
        let att = [];

        let pathname = __dirname + "/public/Assets/visa_pdf";
        att.push({ url: `visa_${data.i_no}.pdf` });
        sendmessagenow = sendmessage.messagesend(
          senderMailSetting,
          data.email,
          mess,
          ` ${message.subject} || ${data.a_code_name}`,
          att,
          //CCMailSetting.cc_email, //cc mail// CCMailSetting.e_username,
          ccmail.result, // reply mail
          1,
          pathname
        );
        //0404
        sendmessagenow = sendmessage.messagesend(
          senderMailSetting,
          CCMailSetting.cc_email,
          mess,
          ` ${message.subject} || ${data.a_code_name}`,
          att,
          // CCMailSetting.cc_email, //cc mail// CCMailSetting.e_username,
          ccmail.result, // reply mail
          1,
          pathname
        );
        resolve({
          status: 1,
          message: "Visa cover letter with Attechment send to your mail...",
        });
      }
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

// async function getRefundById(data) {
//   try {
//      if(data.u_id==1)
//     {
//       sql=`select * from gsetting`;
//     }
//     else
//     {
//       sql=`SELECT *,branch.b_hsn_code as hsn_code,b_bank_details as bank_details,company_name as c_name,branch.b_gstno as c_gstno FROM users,branch WHERE users.branch_id=branch.branch_id AND u_id=${data.u_id} AND users.deleted=0 AND branch.deleted=0`;
//     }
//     let response = await new Promise((resolve, reject) => {
//       con.query(sql, function (err, result) {
//         if (err) {
//           resolve({ status: 0, message: "Something went to wrong" });
//         }
//         if (result.length > 0) {
//           resolve({
//             settingdata:result[0],
//           });
//         }
//       });
//     });

//   getuserdata=`select * from users where u_id=${data.u_id} and deleted=0`;
//     let userdata=await new Promise((resolve, reject) => {
//         con.query(getuserdata, function (err, userres) {
//           if (err) {
//             resolve({ status: 0, message: "Something went to wrong" });
//           }
//           if(userres.length>0)
//           {
//             if(userres[0].user_type==3)
//             {
//               getnuserquery=`select * from users where u_id=${userres[0].p_u_id} and deleted=0`;
//             }
//             else
//             {
//               getnuserquery=`select * from users where u_id=${data.u_id} and deleted=0`;
//             }
//             con.query(getnuserquery, function (err, nuserres) {
//               if (err) {
//                 resolve({ status: 0, message: "Something went to wrong" });
//               }
//               resolve({
//                 userdata:nuserres[0],
//               });
//             });
//           }
//         });
//     });

//     // sql1=`SELECT  *,(SELECT name FROM attributes WHERE attributes.attribute_id = customer.c_state)as state FROM customer WHERE deleted = 0 AND c_id=${data.id}`;
//     // let response1 = await new Promise((resolve, reject) => {
//     //   con.query(sql1, function (err, result) {
//     //     if (err) {
//     //       resolve({ status: 0, message: "Something went to wrong" });
//     //     }
//     //     if (result.length > 0) {
//     //       result.forEach(function (result) {
//     //         resolve({
//     //           c_s_type: result.c_s_type,
//     //           customerdata: result,
//     //         });
//     //       });
//     //     }
//     //   });
//     // });

//    refundsql=`SELECT *,(SELECT name from attributes WHERE attributes.attribute_id =refund.p_mode)AS payment_mode,(SELECT name FROM attributes WHERE attributes.attribute_id = customer.c_state)as state  FROM refund,customer WHERE refund.c_id=customer.c_id AND refund.r_id=${data.id}`
//     let response9 = await new Promise((resolve, reject) => {
//       con.query(refundsql, function (err9, result9) {
//         if (err9) {
//           resolve({ status: 0, message: "Something went to wrong" });
//         }
//         if (result9.length > 0) {
//           resolve({
//             status: 1,
//             data: result9[0],
//             settingdata:response.settingdata,
//             // customerdata: response1.customerdata,
//             userdata:userdata.userdata
//           });
//         }
//       });
//     });
//     return response9;
//   } catch (error) {
//     return { status: 0, message: "Invalid Call Try Again" };
//   }
// }
async function getRefundById(data) {
  //08-07
  try {
    getuserdata = `select * from users where u_id=${data.u_id} and deleted=0`;
    let res = await new Promise((resolve, reject) => {
      con.query(getuserdata, function (err, userres) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (userres.length > 0) {
            if (userres[0].user_type == 3 && userres[0].p_u_id == 1) {
              getnuserquery = `select * from users where  deleted=0 and u_id=${userres[0].p_u_id} `;
            } else {
              getnuserquery = `select * from users where branch_id=${userres[0].branch_id} and deleted=0`;
            }
            con.query(getnuserquery, function (err, nuserres) {
              if (err) {
                console.log(err);
                resolve({ status: 0, message: "Something went to wrong" });
              } else {
                resolve({
                  userdata: nuserres[0],
                  user: userres[0],
                });
              }
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });

    // if (data.u_id == 1 || (res.user.user_type == 3 && res.user.p_u_id == 1)) {
    //   sql = `select * from gsetting`;
    // } else {
    sql = `SELECT *,branch.b_hsn_code as hsn_code,b_bank_details as bank_details,company_name as c_name,branch.b_gstno as c_gstno FROM users,branch WHERE users.branch_id=branch.branch_id AND branch.branch_id=${res.user.branch_id} AND users.deleted=0 AND branch.deleted=0`; //08-07
    // }
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              settingdata: result[0],
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });

    refundsql = `SELECT *,(SELECT name from attributes WHERE attributes.attribute_id =refund.p_mode)AS payment_mode,(SELECT name FROM attributes WHERE attributes.attribute_id = customer.c_state)as state,(SELECT u_name FROM users WHERE users.u_id = refund.created_id)as cname,(SELECT b_name FROM branch WHERE branch.branch_id = refund.created_branch_id)as cbname,(SELECT invoice_signature FROM users WHERE users.u_id = refund.created_id)as invoice_signature  FROM refund,customer WHERE refund.c_id=customer.c_id AND refund.r_id=${data.id}`;
    let response9 = await new Promise((resolve, reject) => {
      con.query(refundsql, function (err9, result9) {
        if (err9) {
          console.log(err9);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result9.length > 0) {
            resolve({
              status: 1,
              data: result9[0],
              settingdata: response.settingdata,
              user: res.user,
              // customerdata: response1.customerdata,
              userdata: res.userdata,
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    return response9;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

//0703
async function getRefundReceipt(data) {
  try {
    let response = await new Promise(async (resolve, reject) => {
      let invoice_data = await getRefundById(data);
      let imageAsBase64;
      if (
        fs.existsSync(
          `./public/Assets/images/${
          // invoice_data.userdata.u_id == 1 ? "adminlogo" :
          "branchlogo"
          }/${invoice_data.settingdata.logo}`
        )
      ) {
        imageAsBase64 = fs.readFileSync(
          `./public/Assets/images/${
          // invoice_data.userdata.u_id == 1 ? "adminlogo" :
          "branchlogo"
          }/${invoice_data.settingdata.logo}`,
          { encoding: "base64" }
        );
      }
      let signatureAsBase64;
      if (
        fs.existsSync(
          `./public/Assets/images/invoicesignature/${invoice_data.data.invoice_signature}`
        )
      ) {
        signatureAsBase64 = fs.readFileSync(
          `./public/Assets/images/invoicesignature/${invoice_data.data.invoice_signature}`,
          { encoding: "base64" }
        );
      }
      pdf
        .create(refundReceipt(invoice_data, imageAsBase64, signatureAsBase64), {
          childProcessOptions: {
            env: {
              OPENSSL_CONF: "/dev/null",
            },
          },
        })
        .toFile(
          `${__dirname}/public/Assets/refund_receipt/refund_receipt_${invoice_data.data.receipt_no}.pdf`,
          (err) => {
            if (err) {
              return console.log("error");
            }
            resolve({
              ino: invoice_data.data.receipt_no,
            });
          }
        );
    });
    return response;
  } catch (err) {
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

// async function getPaymentData(data) {
//   try {
//     if(data.u_id==1)
//     {
//       sql=`select * from gsetting`;
//     }
//     else
//     {
//       sql=`SELECT *,branch.b_hsn_code as hsn_code,b_bank_details as bank_details,company_name as c_name,branch.b_gstno as c_gstno FROM users,branch WHERE users.branch_id=branch.branch_id AND u_id=${data.u_id} AND users.deleted=0 AND branch.deleted=0`;
//     }
//     let response = await new Promise((resolve, reject) => {
//       con.query(sql, function (err, result) {
//         if (err) {
//           resolve({ status: 0, message: "Something went to wrong" });
//         }
//         if (result.length > 0) {
//           resolve({
//             settingdata:result[0],
//           });
//         }
//       });
//     });

//   getuserdata=`select * from users where u_id=${data.u_id} and deleted=0`;
//     let userdata=await new Promise((resolve, reject) => {
//         con.query(getuserdata, function (err, userres) {
//           if (err) {
//             resolve({ status: 0, message: "Something went to wrong" });
//           }
//           if(userres.length>0)
//           {
//             if(userres[0].user_type==3)
//             {
//               getnuserquery=`select * from users where u_id=${userres[0].p_u_id} and deleted=0`;
//             }
//             else
//             {
//               getnuserquery=`select * from users where u_id=${data.u_id} and deleted=0`;
//             }
//             con.query(getnuserquery, function (err, nuserres) {
//               if (err) {
//                 resolve({ status: 0, message: "Something went to wrong" });
//               }
//               resolve({
//                 userdata:nuserres[0],
//               });
//             });
//           }
//         });
//     });
//     paymentsql=`SELECT *,(SELECT name from attributes WHERE attributes.attribute_id =payment.mode_id)AS payment_mode,(SELECT name FROM attributes WHERE attributes.attribute_id = customer.c_state)as state  FROM payment,customer  WHERE payment.c_id=customer.c_id AND payment.payment_id=${data.id}`
//     let response11 = await new Promise(async(resolve, reject) => {
//        con.query(paymentsql, async function (err, result) {
//         if (err) {
//           resolve({ status: 0, message: "Something went to wrong" });
//         }
//         if(result.length>0)
//         {
//           resolve
//           ({
//             status: 1,
//             data: result[0],
//             settingdata:response.settingdata,
//             // customerdata: response1.customerdata,
//             userdata:userdata.userdata
//            });
//         }
//       })
//     });
//     return response11;

//   } catch (err) {
//     return { status: 0, message: "Invalid Call Try Again" };
//   }
// }

async function getPaymentData(data) {
  try {
    getuserdata = `select * from users where u_id=${data.u_id} and deleted=0`;
    let res = await new Promise((resolve, reject) => {
      con.query(getuserdata, function (err, userres) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (userres.length > 0) {
            if (userres[0].user_type == 3 && userres[0].p_u_id == 1) {
              getnuserquery = `select * from users where  deleted=0 and u_id=${userres[0].p_u_id} `;
            } else {
              getnuserquery = `select * from users where branch_id=${data.branch_id} and deleted=0`;
            }
            con.query(getnuserquery, function (err, nuserres) {
              if (err) {
                console.log(err);
                resolve({ status: 0, message: "Something went to wrong" });
              } else {
                resolve({
                  userdata: nuserres[0],
                  user: userres[0],
                });
              }
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    // if (data.u_id == 1 || (res.user.user_type == 3 && res.user.p_u_id == 1)) {
    //   sql = `select * from gsetting`;
    // } else {
    sql = `SELECT *,attributes.name as state_name,attributes.TIN_number,branch.b_hsn_code as hsn_code,b_bank_details as bank_details,company_name as c_name,branch.b_gstno as c_gstno FROM users,branch, attributes WHERE attributes.attribute_id = branch.state_id AND users.branch_id=branch.branch_id AND branch.branch_id=${data.branch_id} AND users.deleted=0 AND branch.deleted=0`; //08-07
    // }
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              settingdata: result[0],
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    //0504
    paymentsql = `SELECT *,(SELECT name FROM attributes WHERE attributes.attribute_id = customer.c_state)as state,(SELECT TIN_number FROM attributes WHERE attributes.attribute_id = customer.c_state)as TIN_number,(SELECT name from attributes WHERE attributes.attribute_id =payment.mode_id)AS payment_mode,(SELECT name FROM attributes WHERE attributes.attribute_id = customer.c_state)as state,(SELECT u_name FROM users WHERE users.u_id = payment.created_id)as cname,(SELECT b_name FROM branch WHERE branch.branch_id = payment.created_branch_id)as cbname,(SELECT invoice_signature FROM users WHERE users.u_id = payment.created_id)as invoice_signature  FROM payment,customer WHERE payment.c_id=customer.c_id AND payment_id=${data.id}`;
    let response11 = await new Promise(async (resolve, reject) => {
      con.query(paymentsql, async function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              data: result[0],
              settingdata: response.settingdata,
              // customerdata: response1.customerdata,
              user: res.user,
              userdata: res.userdata, //08-07
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    return response11;
  } catch (err) {
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

//0703
async function getPaymentReceipt(data) {
  try {
    let response = await new Promise(async (resolve, reject) => {
      let invoice_data = await getPaymentData(data);
      let imageAsBase64;
      if (
        fs.existsSync(
          `./public/Assets/images/${
          // invoice_data.user.u_id == 1 ||
          // (invoice_data.user.p_u_id == 1 && invoice_data.user.user_type == 3)
          //   ? "adminlogo"
          //   :
          "branchlogo"
          }/${invoice_data.settingdata.logo}`
        )
      ) {
        imageAsBase64 = fs.readFileSync(
          `./public/Assets/images/${
          // invoice_data.user.u_id == 1 ||
          // (invoice_data.user.p_u_id == 1 && invoice_data.user.user_type == 3)
          //   ? "adminlogo"
          // :
          "branchlogo"
          }/${invoice_data.settingdata.logo}`,
          { encoding: "base64" }
        );
      }
      let signatureAsBase64;
      if (
        fs.existsSync(
          `./public/Assets/images/invoicesignature/${invoice_data.data.invoice_signature}`
        )
      ) {
        signatureAsBase64 = fs.readFileSync(
          `./public/Assets/images/invoicesignature/${invoice_data.data.invoice_signature}`,
          { encoding: "base64" }
        );
      }
      pdf
        .create(
          paymentReceipt(invoice_data, imageAsBase64, signatureAsBase64),
          {
            childProcessOptions: {
              env: {
                OPENSSL_CONF: "/dev/null",
              },
            },
          }
        )
        .toFile(
          `${__dirname}/public/Assets/payment_receipt/payment_receipt_${invoice_data.data.p_receipt_no}.pdf`,
          (err) => {
            if (err) {
              return console.log("error");
            }
            resolve({
              ino: invoice_data.data.p_receipt_no,
            });
          }
        );
    });
    return response;
  } catch (err) {
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function fetchgraphleaddata(data) {
  try {
    let record = [];
    getuserquery = `select * from users where u_id=${data.id} and deleted=0`;
    let response = await new Promise((resolve, reject) => {
      con.query(getuserquery, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            if (result[0].user_type == 1) {
              // getallchilduser = `select * from users where (p_u_id=${data.id} and branch_id=${result[0].user_type}) and deleted=0`;
              getallchilduser = `select * from users where ((p_u_id=${data.id} OR p_u_id=1 OR p_u_id IN (SELECT users.u_id  from users where users.branch_id= ${result[0].branch_id})) and branch_id=${result[0].branch_id}) and deleted=0`;
              con.query(getallchilduser, function (err, res) {
                if (err) {
                  console.log(err);
                  resolve({ status: 0, message: "Something went to wrong" });
                } else {
                  res.forEach(function (r) {
                    record.push(r.u_id);
                  });
                  record.push(data.id);
                  resolve({
                    record: record,
                    type: result[0].user_type,
                  });
                }
              });
            } else {
              resolve({
                type: result[0].user_type,
              });
            }
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    if (response.type == 1) {
      getleadquery = `SELECT COUNT(*) as tlead,attributes.name FROM elead,attributes WHERE elead.l_status=attributes.attribute_id and MONTH(STR_TO_DATE(l_date,"%d-%m-%Y")) = MONTH(CURRENT_DATE()) AND YEAR(STR_TO_DATE(l_date,"%d-%m-%Y")) = YEAR(CURRENT_DATE()) and (elead.l_created_by IN(${record}) or elead.l_allocate_to IN(${record})) and elead.deleted=0   and convert_status=0 GROUP by l_status`;
    } else {
      // getleadquery = `SELECT COUNT(*) as tlead,attributes.name FROM elead,attributes WHERE elead.l_status=attributes.attribute_id and MONTH(STR_TO_DATE(l_date,'%d-%m-%Y')) = MONTH(CURRENT_DATE()) and elead.deleted=0`;
      getleadquery = `SELECT COUNT(*)as tlead,(SELECT name FROM attributes WHERE attributes.attribute_id =elead.l_status)as name FROM elead,users WHERE elead.deleted=0 AND users.u_id = elead.l_created_by and MONTH(STR_TO_DATE(l_date,"%d-%m-%Y")) = MONTH(CURRENT_DATE()) AND YEAR(STR_TO_DATE(l_date,"%d-%m-%Y")) = YEAR(CURRENT_DATE()) and convert_status=0`;
      if (response.type == 3) {
        getleadquery += ` and (l_created_by=${data.id} or l_allocate_to=${data.id} OR users.marketing_parent_id =${data.id})`;
        // getleadquery += ` and (l_created_by=${data.id} or l_allocate_to=${data.id})`;
      }
      getleadquery += ` GROUP by l_status`;
    }
    // sql=`SELECT COUNT(*) as tlead,attributes.name FROM elead,attributes WHERE elead.l_status=attributes.attribute_id and MONTH(STR_TO_DATE(l_date,'%d-%m-%Y')) = MONTH(CURRENT_DATE()) GROUP by l_status;`
    let response1 = await new Promise((resolve, reject) => {
      con.query(getleadquery, function (err, cresult) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          resolve({ status: 1, data: cresult });
        }
      });
    });
    return response1;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function generatecregistrationreport(data) {
  try {
    let record = [];
    getuserquery = `select * from users where u_id=${data.u_id} and deleted=0`;
    let response = await new Promise((resolve, reject) => {
      con.query(getuserquery, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            if (result[0].user_type == 1) {
              getallchilduser = `select * from users where (p_u_id=${data.u_id} and branch_id=${result[0].user_type}) and deleted=0`;

              con.query(getallchilduser, function (err, res) {
                if (err) {
                  console.log(err);
                  resolve({ status: 0, message: "Something went to wrong" });
                } else {
                  res.forEach(function (r) {
                    record.push(r.u_id);
                  });
                  record.push(data.u_id);
                  resolve({
                    record: record,
                    type: result[0].user_type,
                  });
                }
              });
            } else {
              resolve({
                type: result[0].user_type,
              });
            }
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    if (response.type == 1) {
      if (data.s_type == 10) {
        getattesql = `SELECT customer.*,details.*,attestation.a_prefix,attestation.a_name,(SELECT COUNT(*) FROM details where details.service_type=10 AND details.deleted=0) as trows,(SELECT name FROM attributes WHERE attributes.attribute_id  =attestation.a_code)as code,(SELECT name FROM attributes WHERE attributes.attribute_id  =attestation.a_type)as type,(SELECT name FROM attributes WHERE attributes.attribute_id  =attestation.a_country)as country,(SELECT c_prefix FROM customer WHERE customer.c_id=attestation.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=attestation.c_id) AS customer_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =details.d_c_id)as certificate,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname FROM details,attestation,customer WHERE customer.c_id=attestation.c_id AND details.service_id=attestation.a_id AND details.service_type=10 AND
        STR_TO_DATE(customer.c_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(customer.c_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y") and (customer.foreign_branch = ${data.branch_id} OR customer.branch_id = ${data.branch_id}) and details.deleted=0 and attestation.deleted=0 and customer.deleted=0`;
        if (typeof data.code != "undefined" && data.code != 0) {
          getattesql += ` and a_code=${data.code}`;
        }
        if (typeof data.country != "undefined" && data.country != 0) {
          getattesql += ` and a_country=${data.country}`;
        }
      } else if (data.s_type == 8) {
        getattesql = `SELECT customer.*,details.*,visa.v_prefix as a_prefix,visa.v_name as a_name,(SELECT COUNT(*) FROM details where details.service_type=8 AND details.deleted=0) as trows,(SELECT name FROM attributes WHERE attributes.attribute_id  =visa.v_code)as code,(SELECT name FROM attributes WHERE attributes.attribute_id  =visa.v_type)as type,(SELECT name FROM attributes WHERE attributes.attribute_id  =details.d_c_id)as country,(SELECT c_prefix FROM customer WHERE customer.c_id=visa.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=visa.c_id) AS customer_name,(SELECT GROUP_CONCAT(attributes.name SEPARATOR ',') as name FROM attributes where FIND_IN_SET (attributes.attribute_id , visa.v_supporting_doc)) as certificatetype,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname FROM details,visa,customer WHERE customer.c_id=visa.c_id AND details.service_id=visa.v_id AND details.service_type=8 AND details.deleted=0 and visa.deleted=0 and customer.deleted=0 AND STR_TO_DATE(customer.c_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(customer.c_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y") and (customer.foreign_branch = ${data.branch_id} OR customer.branch_id = ${data.branch_id})`;
        if (typeof data.code != "undefined" && data.code != 0) {
          getattesql += ` and v_code=${data.code}`;
        }
        if (typeof data.country != "undefined" && data.country != 0) {
          getattesql += ` and d_c_id=${data.country}`;
        }
      } else if (data.s_type == 17) {
        getattesql = `SELECT customer.*,details.*,apostille.a_prefix,apostille.a_name,(SELECT COUNT(*) FROM details where details.service_type=17 AND details.deleted=0) as trows,(SELECT name FROM attributes WHERE attributes.attribute_id  =apostille.a_code)as code,(SELECT name FROM attributes WHERE attributes.attribute_id  =apostille.a_type)as type,(SELECT name FROM attributes WHERE attributes.attribute_id  =apostille.a_country)as country,(SELECT c_prefix FROM customer WHERE customer.c_id=apostille.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=apostille.c_id) AS customer_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =details.d_c_id)as certificate,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname FROM details,apostille,customer WHERE customer.c_id=apostille.c_id AND details.service_id=apostille.a_id AND details.service_type=17 AND details.deleted=0 and apostille.deleted=0 and customer.deleted=0 AND STR_TO_DATE(customer.c_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(customer.c_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y") and (customer.foreign_branch = ${data.branch_id} OR customer.branch_id = ${data.branch_id})`;
        if (typeof data.code != "undefined" && data.code != 0) {
          getattesql += ` and a_code=${data.code}`;
        }
        if (typeof data.country != "undefined" && data.country != 0) {
          getattesql += ` and a_country=${data.country}`;
        }
      } else if (data.s_type == 20) {
        getattesql = `SELECT customer.*,details.*,translation.a_prefix,translation.a_name,(SELECT COUNT(*) FROM details where details.service_type=20 AND details.deleted=0) as trows,(SELECT name FROM attributes WHERE attributes.attribute_id  =translation.a_code)as code,(SELECT name FROM attributes WHERE attributes.attribute_id  =translation.a_type)as type,(SELECT name FROM attributes WHERE attributes.attribute_id  =translation.a_country)as country,(SELECT c_prefix FROM customer WHERE customer.c_id=translation.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=translation.c_id) AS customer_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =details.d_c_id)as certificate,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname FROM details,translation,customer WHERE customer.c_id=translation.c_id AND details.service_id=translation.a_id AND details.service_type=20 AND details.deleted=0 and translation.deleted=0 and customer.deleted=0 AND STR_TO_DATE(customer.c_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(customer.c_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y") and (customer.foreign_branch = ${data.branch_id} OR customer.branch_id = ${data.branch_id})`;
        if (typeof data.code != "undefined" && data.code != 0) {
          getattesql += ` and a_code=${data.code}`;
        }
        if (typeof data.country != "undefined" && data.country != 0) {
          getattesql += ` and a_country=${data.country}`;
        }
      } else {
        getattesql = `SELECT customer.*,details.*,attestation.a_prefix,attestation.a_name,(SELECT COUNT(*) FROM details where details.service_type=10 AND details.deleted=0) as trows,(SELECT name FROM attributes WHERE attributes.attribute_id  =attestation.a_code)as code,(SELECT name FROM attributes WHERE attributes.attribute_id  =attestation.a_type)as type,(SELECT name FROM attributes WHERE attributes.attribute_id  =attestation.a_country)as country,(SELECT c_prefix FROM customer WHERE customer.c_id=attestation.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=attestation.c_id) AS customer_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =details.d_c_id)as certificate,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname FROM details,attestation,customer WHERE customer.c_id=attestation.c_id AND details.service_id=attestation.a_id AND details.service_type=10 AND
        STR_TO_DATE(customer.c_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(customer.c_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y") and (customer.foreign_branch = ${data.branch_id} OR customer.branch_id = ${data.branch_id}) and details.deleted=0 and attestation.deleted=0 and customer.deleted=0`;
        if (typeof data.code != "undefined" && data.code != 0) {
          getattesql += ` and a_code=${data.code}`;
        }
        if (typeof data.country != "undefined" && data.country != 0) {
          getattesql += ` and a_country=${data.country}`;
        }
        getattesql += ` UNION SELECT customer.*,details.*,visa.v_prefix as a_prefix,visa.v_name as a_name,(SELECT COUNT(*) FROM details where details.service_type=8 AND details.deleted=0) as trows,(SELECT name FROM attributes WHERE attributes.attribute_id  =visa.v_code)as code,(SELECT name FROM attributes WHERE attributes.attribute_id  =visa.v_type)as type,(SELECT name FROM attributes WHERE attributes.attribute_id  =details.d_c_id)as country,(SELECT c_prefix FROM customer WHERE customer.c_id=visa.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=visa.c_id) AS customer_name,(SELECT GROUP_CONCAT(attributes.name SEPARATOR ',') as name FROM attributes where FIND_IN_SET (attributes.attribute_id , visa.v_supporting_doc)) as certificatetype,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname FROM details,visa,customer WHERE customer.c_id=visa.c_id AND details.service_id=visa.v_id AND details.service_type=8 AND details.deleted=0 and visa.deleted=0 and customer.deleted=0 AND STR_TO_DATE(customer.c_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(customer.c_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y") and (customer.foreign_branch = ${data.branch_id} OR customer.branch_id = ${data.branch_id})`;
        if (typeof data.code != "undefined" && data.code != 0) {
          getattesql += ` and v_code=${data.code}`;
        }
        if (typeof data.country != "undefined" && data.country != 0) {
          getattesql += ` and d_c_id=${data.country}`;
        }
        getattesql += ` UNION SELECT customer.*,details.*,apostille.a_prefix,apostille.a_name,(SELECT COUNT(*) FROM details where details.service_type=17 AND details.deleted=0) as trows,(SELECT name FROM attributes WHERE attributes.attribute_id  =apostille.a_code)as code,(SELECT name FROM attributes WHERE attributes.attribute_id  =apostille.a_type)as type,(SELECT name FROM attributes WHERE attributes.attribute_id  =apostille.a_country)as country,(SELECT c_prefix FROM customer WHERE customer.c_id=apostille.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=apostille.c_id) AS customer_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =details.d_c_id)as certificate,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname FROM details,apostille,customer WHERE customer.c_id=apostille.c_id AND details.service_id=apostille.a_id AND details.service_type=17 AND details.deleted=0 and apostille.deleted=0 and customer.deleted=0 AND STR_TO_DATE(customer.c_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(customer.c_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y") and (customer.foreign_branch = ${data.branch_id} OR customer.branch_id = ${data.branch_id})`;
        if (typeof data.code != "undefined" && data.code != 0) {
          getattesql += ` and a_code=${data.code}`;
        }
        if (typeof data.country != "undefined" && data.country != 0) {
          getattesql += ` and a_country=${data.country}`;
        }
        getattesql += ` UNION SELECT customer.*,details.*,translation.a_prefix,translation.a_name,(SELECT COUNT(*) FROM details where details.service_type=20 AND details.deleted=0) as trows,(SELECT name FROM attributes WHERE attributes.attribute_id  =translation.a_code)as code,(SELECT name FROM attributes WHERE attributes.attribute_id  =translation.a_type)as type,(SELECT name FROM attributes WHERE attributes.attribute_id  =translation.a_country)as country,(SELECT c_prefix FROM customer WHERE customer.c_id=translation.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=translation.c_id) AS customer_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =details.d_c_id)as certificate,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname FROM details,translation,customer WHERE customer.c_id=translation.c_id AND details.service_id=translation.a_id AND details.service_type=20 AND details.deleted=0 and translation.deleted=0 and customer.deleted=0 AND STR_TO_DATE(customer.c_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(customer.c_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y") and (customer.foreign_branch = ${data.branch_id} OR customer.branch_id = ${data.branch_id})`;
        if (typeof data.code != "undefined" && data.code != 0) {
          getattesql += ` and a_code=${data.code}`;
        }
        if (typeof data.country != "undefined" && data.country != 0) {
          getattesql += ` and a_country=${data.country}`;
        }
      }
    } else {
      if (data.s_type == 10) {
        getattesql = `SELECT customer.*,details.*,attestation.a_prefix,attestation.a_name,(SELECT COUNT(*) FROM details where details.service_type=10 AND details.deleted=0) as trows,(SELECT name FROM attributes WHERE attributes.attribute_id  =attestation.a_code)as code,(SELECT name FROM attributes WHERE attributes.attribute_id  =attestation.a_type)as type,(SELECT name FROM attributes WHERE attributes.attribute_id  =attestation.a_country)as country,(SELECT c_prefix FROM customer WHERE customer.c_id=attestation.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=attestation.c_id) AS customer_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =details.d_c_id)as certificate,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname FROM details,attestation,customer WHERE customer.c_id=attestation.c_id AND details.service_id=attestation.a_id AND details.service_type=10 AND details.deleted=0 and attestation.deleted=0 and customer.deleted=0 and STR_TO_DATE(customer.c_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(customer.c_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y")`;
        if (typeof data.code != "undefined" && data.code != 0) {
          getattesql += ` and a_code=${data.code}`;
        }
        if (typeof data.country != "undefined" && data.country != 0) {
          getattesql += ` and a_country=${data.country}`;
        }
        if (typeof data.branch_name != "undefined") {
          getattesql += ` and customer.branch_id=${data.branch_name}`;
        }
        if (response.type == 3) {
          getattesql += ` AND (customer.u_id=${data.u_id} or customer.foreign_branchuser=${data.u_id})`;
        }
      } else if (data.s_type == 8) {
        getattesql = `SELECT customer.*,details.*,visa.v_prefix as a_prefix,visa.v_name as a_name,(SELECT COUNT(*) FROM details where details.service_type=8 AND details.deleted=0) as trows,(SELECT name FROM attributes WHERE attributes.attribute_id  =visa.v_code)as code,(SELECT name FROM attributes WHERE attributes.attribute_id  =visa.v_type)as type,(SELECT name FROM attributes WHERE attributes.attribute_id  =details.d_c_id)as country,(SELECT c_prefix FROM customer WHERE customer.c_id=visa.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=visa.c_id) AS customer_name,(SELECT GROUP_CONCAT(attributes.name SEPARATOR ',') as name FROM attributes where FIND_IN_SET (attributes.attribute_id , visa.v_supporting_doc)) as certificatetype,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname FROM details,visa,customer WHERE customer.c_id=visa.c_id AND details.service_id=visa.v_id AND details.service_type=8 AND details.deleted=0 and visa.deleted=0 and customer.deleted=0 AND STR_TO_DATE(customer.c_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(customer.c_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y")`;
        if (typeof data.code != "undefined" && data.code != 0) {
          getattesql += ` and v_code=${data.code}`;
        }
        if (typeof data.country != "undefined" && data.country != 0) {
          getattesql += ` and d_c_id=${data.country}`;
        }
        if (typeof data.branch_name != "undefined") {
          getattesql += ` and customer.branch_id=${data.branch_name}`;
        }
        if (response.type == 3) {
          getattesql += ` AND (customer.u_id=${data.u_id} or customer.foreign_branchuser=${data.u_id})`;
        }
      } else if (data.s_type == 17) {
        getattesql = `SELECT customer.*,details.*,apostille.a_prefix,apostille.a_name,(SELECT COUNT(*) FROM details where details.service_type=17 AND details.deleted=0) as trows,(SELECT name FROM attributes WHERE attributes.attribute_id  =apostille.a_code)as code,(SELECT name FROM attributes WHERE attributes.attribute_id  =apostille.a_type)as type,(SELECT name FROM attributes WHERE attributes.attribute_id  =apostille.a_country)as country,(SELECT c_prefix FROM customer WHERE customer.c_id=apostille.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=apostille.c_id) AS customer_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =details.d_c_id)as certificate,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname FROM details,apostille,customer WHERE customer.c_id=apostille.c_id AND details.service_id=apostille.a_id AND details.service_type=17 AND details.deleted=0 and apostille.deleted=0 and customer.deleted=0 AND STR_TO_DATE(customer.c_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(customer.c_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y")`;
        if (typeof data.code != "undefined" && data.code != 0) {
          getattesql += ` and a_code=${data.code}`;
        }
        if (typeof data.country != "undefined" && data.country != 0) {
          getattesql += ` and a_country=${data.country}`;
        }
        if (typeof data.branch_name != "undefined") {
          getattesql += ` and customer.branch_id=${data.branch_name}`;
        }
        if (response.type == 3) {
          getattesql += ` AND (customer.u_id=${data.u_id} or customer.foreign_branchuser=${data.u_id})`;
        }
      } else if (data.s_type == 20) {
        getattesql = `SELECT customer.*,details.*,translation.a_prefix,translation.a_name,(SELECT COUNT(*) FROM details where details.service_type=20 AND details.deleted=0) as trows,(SELECT name FROM attributes WHERE attributes.attribute_id  =translation.a_code)as code,(SELECT name FROM attributes WHERE attributes.attribute_id  =translation.a_type)as type,(SELECT name FROM attributes WHERE attributes.attribute_id  =translation.a_country)as country,(SELECT c_prefix FROM customer WHERE customer.c_id=translation.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=translation.c_id) AS customer_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =details.d_c_id)as certificate,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname FROM details,translation,customer WHERE customer.c_id=translation.c_id AND details.service_id=translation.a_id AND details.service_type=20 AND details.deleted=0 and translation.deleted=0 and customer.deleted=0 AND STR_TO_DATE(customer.c_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(customer.c_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y")`;
        if (typeof data.code != "undefined" && data.code != 0) {
          getattesql += ` and a_code=${data.code}`;
        }
        if (typeof data.country != "undefined" && data.country != 0) {
          getattesql += ` and a_country=${data.country}`;
        }
        if (typeof data.branch_name != "undefined") {
          getattesql += ` and customer.branch_id=${data.branch_name}`;
        }
        if (response.type == 3) {
          getattesql += ` AND (customer.u_id=${data.u_id} or customer.foreign_branchuser=${data.u_id})`;
        }
      } else {
        getattesql = `SELECT customer.*,details.*,attestation.a_prefix,attestation.a_name,(SELECT COUNT(*) FROM details where details.service_type=10 AND details.deleted=0) as trows,(SELECT name FROM attributes WHERE attributes.attribute_id  =attestation.a_code)as code,(SELECT name FROM attributes WHERE attributes.attribute_id  =attestation.a_type)as type,(SELECT name FROM attributes WHERE attributes.attribute_id  =attestation.a_country)as country,(SELECT c_prefix FROM customer WHERE customer.c_id=attestation.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=attestation.c_id) AS customer_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =details.d_c_id)as certificate,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname FROM details,attestation,customer WHERE customer.c_id=attestation.c_id AND details.service_id=attestation.a_id AND details.service_type=10 AND details.deleted=0 and attestation.deleted=0 and customer.deleted=0 and STR_TO_DATE(customer.c_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(customer.c_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y")`;
        if (typeof data.code != "undefined" && data.code != 0) {
          getattesql += ` and a_code=${data.code}`;
        }
        if (typeof data.country != "undefined" && data.country != 0) {
          getattesql += ` and a_country=${data.country}`;
        }
        if (typeof data.branch_name != "undefined") {
          getattesql += ` and customer.branch_id=${data.branch_name}`;
        }
        if (response.type == 3) {
          getattesql += ` AND (customer.u_id=${data.u_id} or customer.foreign_branchuser=${data.u_id})`;
        }
        getattesql += ` UNION SELECT customer.*,details.*,visa.v_prefix as a_prefix,visa.v_name as a_name,(SELECT COUNT(*) FROM details where details.service_type=8 AND details.deleted=0) as trows,(SELECT name FROM attributes WHERE attributes.attribute_id  =visa.v_code)as code,(SELECT name FROM attributes WHERE attributes.attribute_id  =visa.v_type)as type,(SELECT name FROM attributes WHERE attributes.attribute_id  =details.d_c_id)as country,(SELECT c_prefix FROM customer WHERE customer.c_id=visa.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=visa.c_id) AS customer_name,(SELECT GROUP_CONCAT(attributes.name SEPARATOR ',') as name FROM attributes where FIND_IN_SET (attributes.attribute_id , visa.v_supporting_doc)) as certificatetype,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname FROM details,visa,customer WHERE customer.c_id=visa.c_id AND details.service_id=visa.v_id AND details.service_type=8 AND details.deleted=0 and visa.deleted=0 and customer.deleted=0 AND STR_TO_DATE(customer.c_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(customer.c_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y")`;
        if (typeof data.code != "undefined" && data.code != 0) {
          getattesql += ` and v_code=${data.code}`;
        }
        if (typeof data.country != "undefined" && data.country != 0) {
          getattesql += ` and d_c_id=${data.country}`;
        }
        if (typeof data.branch_name != "undefined") {
          getattesql += ` and customer.branch_id=${data.branch_name}`;
        }
        if (response.type == 3) {
          getattesql += ` AND (customer.u_id=${data.u_id} or customer.foreign_branchuser=${data.u_id})`;
        }
        getattesql += ` UNION SELECT customer.*,details.*,apostille.a_prefix,apostille.a_name,(SELECT COUNT(*) FROM details where details.service_type=17 AND details.deleted=0) as trows,(SELECT name FROM attributes WHERE attributes.attribute_id  =apostille.a_code)as code,(SELECT name FROM attributes WHERE attributes.attribute_id  =apostille.a_type)as type,(SELECT name FROM attributes WHERE attributes.attribute_id  =apostille.a_country)as country,(SELECT c_prefix FROM customer WHERE customer.c_id=apostille.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=apostille.c_id) AS customer_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =details.d_c_id)as certificate,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname FROM details,apostille,customer WHERE customer.c_id=apostille.c_id AND details.service_id=apostille.a_id AND details.service_type=17 AND details.deleted=0 and apostille.deleted=0 and customer.deleted=0 AND STR_TO_DATE(customer.c_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(customer.c_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y")`;
        if (typeof data.code != "undefined" && data.code != 0) {
          getattesql += ` and a_code=${data.code}`;
        }
        if (typeof data.country != "undefined" && data.country != 0) {
          getattesql += ` and a_country=${data.country}`;
        }
        if (typeof data.branch_name != "undefined") {
          getattesql += ` and customer.branch_id=${data.branch_name}`;
        }
        if (response.type == 3) {
          getattesql += ` AND (customer.u_id=${data.u_id} or customer.foreign_branchuser=${data.u_id})`;
        }
        getattesql += ` UNION SELECT customer.*,details.*,translation.a_prefix,translation.a_name,(SELECT COUNT(*) FROM details where details.service_type=20 AND details.deleted=0) as trows,(SELECT name FROM attributes WHERE attributes.attribute_id  =translation.a_code)as code,(SELECT name FROM attributes WHERE attributes.attribute_id  =translation.a_type)as type,(SELECT name FROM attributes WHERE attributes.attribute_id  =translation.a_country)as country,(SELECT c_prefix FROM customer WHERE customer.c_id=translation.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=translation.c_id) AS customer_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =details.d_c_id)as certificate,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname FROM details,translation,customer WHERE customer.c_id=translation.c_id AND details.service_id=translation.a_id AND details.service_type=20 AND details.deleted=0 and translation.deleted=0 and customer.deleted=0 AND STR_TO_DATE(customer.c_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(customer.c_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y")`;
        if (typeof data.code != "undefined" && data.code != 0) {
          getattesql += ` and a_code=${data.code}`;
        }
        if (typeof data.country != "undefined" && data.country != 0) {
          getattesql += ` and a_country=${data.country}`;
        }
        if (typeof data.branch_name != "undefined") {
          getattesql += ` and customer.branch_id=${data.branch_name}`;
        }
        if (response.type == 3) {
          getattesql += ` AND (customer.u_id=${data.u_id} or customer.foreign_branchuser=${data.u_id})`;
        }
      }
    }

    getattesql += ` limit ${(data.page - 1) * data.perpage},${data.perpage}`;
    let response1 = await new Promise((resolve, reject) => {
      con.query(getattesql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              data: result,
              // t_rows: result.length,
            });
          } else {
            resolve({
              status: 1,
              data: [],
            });
          }
        }
      });
    });
    return response1;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function generaterdeliveryreport(data) {
  try {
    let record = [];
    getuserquery = `select * from users where u_id=${data.u_id} and deleted=0`;
    let response = await new Promise((resolve, reject) => {
      con.query(getuserquery, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            if (result[0].user_type == 1) {
              getallchilduser = `select * from users where (p_u_id=${data.u_id} and branch_id=${result[0].user_type}) and deleted=0`;

              con.query(getallchilduser, function (err, res) {
                if (err) {
                  console.log(err);
                  resolve({ status: 0, message: "Something went to wrong" });
                } else {
                  res.forEach(function (r) {
                    record.push(r.u_id);
                  });
                  record.push(data.u_id);
                  resolve({
                    record: record,
                    type: result[0].user_type,
                  });
                }
              });
            } else {
              resolve({
                type: result[0].user_type,
              });
            }
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    let getattesql = "";
    let getPaginateattesql = "";
    if (response.type == 1) {
      if (data.s_type == 10) {
        getattesql = `SELECT customer.*,details.*,attestation.a_prefix,attestation.a_name,(SELECT COUNT(*) FROM details where details.service_type=10 AND details.deleted=0) as trows,(SELECT name FROM attributes WHERE attributes.attribute_id  =attestation.a_code)as code,(SELECT name FROM attributes WHERE attributes.attribute_id  =attestation.a_type)as type,(SELECT name FROM attributes WHERE attributes.attribute_id  =attestation.a_country)as country,(SELECT c_prefix FROM customer WHERE customer.c_id=attestation.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=attestation.c_id) AS customer_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =details.d_c_id)as certificate,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname  FROM details,attestation,customer WHERE customer.c_id=attestation.c_id AND details.service_id=attestation.a_id AND details.service_type=10 AND
        STR_TO_DATE(details.r_f_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y") and (customer.foreign_branch = ${data.branch_id} OR customer.branch_id = ${data.branch_id}) and details.deleted=0 and attestation.deleted=0 and customer.is_block = 1 and customer.is_cancel=0 and customer.deleted=0 and details.status_id=22`;

        getPaginateattesql = `SELECT COUNT(details.detail_id) as trows  FROM details,attestation,customer WHERE customer.c_id=attestation.c_id AND details.service_id=attestation.a_id AND details.service_type=10 AND
        STR_TO_DATE(details.r_f_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y") and (customer.foreign_branch = ${data.branch_id} OR customer.branch_id = ${data.branch_id}) and details.deleted=0 and attestation.deleted=0 and customer.is_block = 1 and customer.is_cancel=0 and customer.deleted=0 and details.status_id=22`;
        if (typeof data.code != "undefined" && data.code != 0) {
          getattesql += ` and attestation.a_code=${data.code}`;
          getPaginateattesql += ` and attestation.a_code=${data.code}`;
        }
        if (typeof data.country != "undefined" && data.country != 0) {
          getattesql += ` and attestation.a_country=${data.country}`;
          getPaginateattesql += ` and attestation.a_country=${data.country}`;
        }
      } else if (data.s_type == 8) {
        getattesql = `SELECT customer.*,details.*,visa.v_prefix as a_prefix,visa.v_name as a_name,(SELECT COUNT(*) FROM details where details.service_type=8 AND details.deleted=0) as trows,(SELECT name FROM attributes WHERE attributes.attribute_id  =visa.v_code)as code,(SELECT name FROM attributes WHERE attributes.attribute_id  =visa.v_type)as type,(SELECT name FROM attributes WHERE attributes.attribute_id  =details.d_c_id)as country,(SELECT c_prefix FROM customer WHERE customer.c_id=visa.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=visa.c_id) AS customer_name,(SELECT GROUP_CONCAT(attributes.name SEPARATOR ',') as name FROM attributes where FIND_IN_SET (attributes.attribute_id , visa.v_supporting_doc)) as certificate,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname  FROM details,visa,customer WHERE customer.c_id=visa.c_id AND details.service_id=visa.v_id AND details.service_type=8 AND details.deleted=0 and visa.deleted=0 and customer.deleted=0 AND customer.is_block = 1 and customer.is_cancel=0 and STR_TO_DATE(details.r_f_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y") and (customer.foreign_branch = ${data.branch_id} OR customer.branch_id = ${data.branch_id}) and details.status_id=22`;

        getPaginateattesql = `SELECT COUNT(details.detail_id) as trows FROM details,visa,customer WHERE customer.c_id=visa.c_id AND details.service_id=visa.v_id AND details.service_type=8 AND details.deleted=0 and visa.deleted=0 and customer.deleted=0 AND customer.is_block = 1 and customer.is_cancel=0 and STR_TO_DATE(details.r_f_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y") and (customer.foreign_branch = ${data.branch_id} OR customer.branch_id = ${data.branch_id}) and details.status_id=22`;

        if (typeof data.code != "undefined" && data.code != 0) {
          getattesql += ` and visa.v_code=${data.code}`;
          getPaginateattesql += ` and visa.v_code=${data.code}`;
        }
        if (typeof data.country != "undefined" && data.country != 0) {
          getattesql += ` and details.d_c_id=${data.country}`;
          getPaginateattesql += ` and visa.details.d_c_id=${data.country}`;
        }
      } else if (data.s_type == 17) {
        getattesql = `SELECT customer.*,details.*,apostille.a_prefix,apostille.a_name,(SELECT COUNT(*) FROM details where details.service_type=17 AND details.deleted=0) as trows,(SELECT name FROM attributes WHERE attributes.attribute_id  =apostille.a_code)as code,(SELECT name FROM attributes WHERE attributes.attribute_id  =apostille.a_type)as type,(SELECT name FROM attributes WHERE attributes.attribute_id  =apostille.a_country)as country,(SELECT c_prefix FROM customer WHERE customer.c_id=apostille.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=apostille.c_id) AS customer_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =details.d_c_id)as certificate,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname  FROM details,apostille,customer WHERE customer.c_id=apostille.c_id AND details.service_id=apostille.a_id AND details.service_type=17 AND details.deleted=0 and apostille.deleted=0 and customer.is_block = 1 and  customer.is_cancel=0 and customer.deleted=0 AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y") and (customer.foreign_branch = ${data.branch_id} OR customer.branch_id = ${data.branch_id}) and details.status_id=22`;

        getPaginateattesql = `SELECT COUNT(details.detail_id) as trows FROM details,apostille,customer WHERE customer.c_id=apostille.c_id AND details.service_id=apostille.a_id AND details.service_type=17 AND details.deleted=0 and apostille.deleted=0 and customer.is_block = 1 and  customer.is_cancel=0 and customer.deleted=0 AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y") and (customer.foreign_branch = ${data.branch_id} OR customer.branch_id = ${data.branch_id}) and details.status_id=22`;

        if (typeof data.code != "undefined" && data.code != 0) {
          getattesql += ` and apostille.a_code=${data.code}`;
          getPaginateattesql += ` and apostille.a_code=${data.code}`;
        }
        if (typeof data.country != "undefined" && data.country != 0) {
          getattesql += ` and apostille.a_country=${data.country}`;
          getPaginateattesql += ` and apostille.a_country=${data.country}`;
        }
      } else if (data.s_type == 20) {
        getattesql = `SELECT customer.*,details.*,translation.a_prefix,translation.a_name,(SELECT COUNT(*) FROM details where details.service_type=20 AND details.deleted=0) as trows,(SELECT name FROM attributes WHERE attributes.attribute_id  =translation.a_code)as code,(SELECT name FROM attributes WHERE attributes.attribute_id  =translation.a_type)as type,(SELECT name FROM attributes WHERE attributes.attribute_id  =translation.a_country)as country,(SELECT c_prefix FROM customer WHERE customer.c_id=translation.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=translation.c_id) AS customer_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =details.d_c_id)as certificate,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname  FROM details,translation,customer WHERE customer.c_id=translation.c_id AND details.service_id=translation.a_id AND details.service_type=20 AND details.deleted=0 and translation.deleted=0 and customer.is_block = 1 and  customer.is_cancel=0 and customer.deleted=0 AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y") and (customer.foreign_branch = ${data.branch_id} OR customer.branch_id = ${data.branch_id}) and details.status_id=22`;

        getPaginateattesql = `SELECT COUNT(details.detail_id) as trows  FROM details,translation,customer WHERE customer.c_id=translation.c_id AND details.service_id=translation.a_id AND details.service_type=20 AND details.deleted=0 and translation.deleted=0 and customer.is_block = 1 and  customer.is_cancel=0 and customer.deleted=0 AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y") and (customer.foreign_branch = ${data.branch_id} OR customer.branch_id = ${data.branch_id}) and details.status_id=22`;

        if (typeof data.code != "undefined" && data.code != 0) {
          getattesql += ` and translation.a_code=${data.code}`;
          getPaginateattesql += ` and translation.a_code=${data.code}`;
        }
        if (typeof data.country != "undefined" && data.country != 0) {
          getattesql += ` and translation.a_country=${data.country}`;
          getPaginateattesql += ` and translation.a_country=${data.country}`;
        }
      } else {
        getattesql = `SELECT customer.*,details.*,attestation.a_prefix,attestation.a_name,(SELECT COUNT(*) FROM details where details.service_type=10 AND details.deleted=0) as trows,(SELECT name FROM attributes WHERE attributes.attribute_id  =attestation.a_code)as code,(SELECT name FROM attributes WHERE attributes.attribute_id  =attestation.a_type)as type,(SELECT name FROM attributes WHERE attributes.attribute_id  =attestation.a_country)as country,(SELECT c_prefix FROM customer WHERE customer.c_id=attestation.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=attestation.c_id) AS customer_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =details.d_c_id)as certificate,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname  FROM details,attestation,customer WHERE customer.c_id=attestation.c_id AND details.service_id=attestation.a_id AND details.service_type=10 AND
        STR_TO_DATE(details.r_f_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y") and (customer.foreign_branch = ${data.branch_id} OR customer.branch_id = ${data.branch_id}) and details.deleted=0 and attestation.deleted=0 and customer.deleted=0  and customer.is_block = 1 and customer.is_cancel=0 and details.status_id=22`;

        getPaginateattesql = `SELECT  COUNT(details.detail_id) as trows FROM details,attestation,customer WHERE customer.c_id=attestation.c_id AND details.service_id=attestation.a_id AND details.service_type=10 AND
        STR_TO_DATE(details.r_f_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y") and (customer.foreign_branch = ${data.branch_id} OR customer.branch_id = ${data.branch_id}) and details.deleted=0 and attestation.deleted=0 and customer.deleted=0  and customer.is_block = 1 and customer.is_cancel=0 and details.status_id=22`;

        if (typeof data.code != "undefined" && data.code != 0) {
          getattesql += ` and attestation.a_code=${data.code}`;
          getPaginateattesql += ` and attestation.a_code=${data.code}`;
        }
        if (typeof data.country != "undefined" && data.country != 0) {
          getattesql += ` and attestation.a_country=${data.country}`;
          getPaginateattesql += ` and attestation.a_code=${data.code}`;
        }
        getattesql += ` UNION SELECT customer.*,details.*,visa.v_prefix as a_prefix,visa.v_name as a_name,(SELECT COUNT(*) FROM details where details.service_type=8 AND details.deleted=0) as trows,(SELECT name FROM attributes WHERE attributes.attribute_id  =visa.v_code)as code,(SELECT name FROM attributes WHERE attributes.attribute_id  =visa.v_type)as type,(SELECT name FROM attributes WHERE attributes.attribute_id  =details.d_c_id)as country,(SELECT c_prefix FROM customer WHERE customer.c_id=visa.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=visa.c_id) AS customer_name,(SELECT GROUP_CONCAT(attributes.name SEPARATOR ',') as name FROM attributes where FIND_IN_SET (attributes.attribute_id , visa.v_supporting_doc)) as certificate,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname  FROM details,visa,customer WHERE customer.c_id=visa.c_id AND details.service_id=visa.v_id AND details.service_type=8 AND details.deleted=0 and visa.deleted=0 and customer.deleted=0 AND customer.is_block = 1 and  customer.is_cancel=0 and STR_TO_DATE(details.r_f_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y") and (customer.foreign_branch = ${data.branch_id} OR customer.branch_id = ${data.branch_id}) and details.status_id=22`;

        getPaginateattesql += ` UNION SELECT  COUNT(details.detail_id) as trows FROM details,visa,customer WHERE customer.c_id=visa.c_id AND details.service_id=visa.v_id AND details.service_type=8 AND details.deleted=0 and visa.deleted=0 and customer.deleted=0 AND customer.is_block = 1 and  customer.is_cancel=0 and STR_TO_DATE(details.r_f_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y") and (customer.foreign_branch = ${data.branch_id} OR customer.branch_id = ${data.branch_id}) and details.status_id=22`;

        if (typeof data.code != "undefined" && data.code != 0) {
          getattesql += ` and visa.v_code=${data.code}`;
          getPaginateattesql += ` and visa.v_code=${data.code}`;
        }
        if (typeof data.country != "undefined" && data.country != 0) {
          getattesql += ` and details.d_c_id=${data.country}`;
          getPaginateattesql += ` and details.d_c_id=${data.country}`;
        }
        getattesql += ` UNION SELECT customer.*,details.*,apostille.a_prefix,apostille.a_name,(SELECT COUNT(*) FROM details where details.service_type=17 AND details.deleted=0) as trows,(SELECT name FROM attributes WHERE attributes.attribute_id  =apostille.a_code)as code,(SELECT name FROM attributes WHERE attributes.attribute_id  =apostille.a_type)as type,(SELECT name FROM attributes WHERE attributes.attribute_id  =apostille.a_country)as country,(SELECT c_prefix FROM customer WHERE customer.c_id=apostille.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=apostille.c_id) AS customer_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =details.d_c_id)as certificate,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname  FROM details,apostille,customer WHERE customer.c_id=apostille.c_id AND details.service_id=apostille.a_id AND details.service_type=17 AND details.deleted=0 and apostille.deleted=0 and customer.deleted=0  AND customer.is_block = 1 and  customer.is_cancel=0 and STR_TO_DATE(details.r_f_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y") and (customer.foreign_branch = ${data.branch_id} OR customer.branch_id = ${data.branch_id}) and details.status_id=22`;

        getPaginateattesql += ` UNION SELECT COUNT(details.detail_id) as trows  FROM details,apostille,customer WHERE customer.c_id=apostille.c_id AND details.service_id=apostille.a_id AND details.service_type=17 AND details.deleted=0 and apostille.deleted=0 and customer.deleted=0  AND customer.is_block = 1 and  customer.is_cancel=0 and STR_TO_DATE(details.r_f_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y") and (customer.foreign_branch = ${data.branch_id} OR customer.branch_id = ${data.branch_id}) and details.status_id=22`;

        if (typeof data.code != "undefined" && data.code != 0) {
          getattesql += ` and apostille.a_code=${data.code}`;
          getPaginateattesql += ` and apostille.a_code=${data.code}`;
        }
        if (typeof data.country != "undefined" && data.country != 0) {
          getattesql += ` and apostille.a_country=${data.country}`;
          getPaginateattesql += ` and apostille.a_country=${data.country}`;
        }
        getattesql += ` UNION SELECT customer.*,details.*,translation.a_prefix,translation.a_name,(SELECT COUNT(*) FROM details where details.service_type=20 AND details.deleted=0) as trows,(SELECT name FROM attributes WHERE attributes.attribute_id  =translation.a_code)as code,(SELECT name FROM attributes WHERE attributes.attribute_id  =translation.a_type)as type,(SELECT name FROM attributes WHERE attributes.attribute_id  =translation.a_country)as country,(SELECT c_prefix FROM customer WHERE customer.c_id=translation.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=translation.c_id) AS customer_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =details.d_c_id)as certificate,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname  FROM details,translation,customer WHERE customer.c_id=translation.c_id AND details.service_id=translation.a_id AND details.service_type=20 AND details.deleted=0 and translation.deleted=0 and customer.deleted=0 AND customer.is_block = 1 and customer.is_cancel=0 and STR_TO_DATE(details.r_f_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y") and (customer.foreign_branch = ${data.branch_id} OR customer.branch_id = ${data.branch_id}) and details.status_id=22`;

        getPaginateattesql += ` UNION SELECT COUNT(details.detail_id) as trows FROM details,translation,customer WHERE customer.c_id=translation.c_id AND details.service_id=translation.a_id AND details.service_type=20 AND details.deleted=0 and translation.deleted=0 and customer.deleted=0 AND customer.is_block = 1 and customer.is_cancel=0 and STR_TO_DATE(details.r_f_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y") and (customer.foreign_branch = ${data.branch_id} OR customer.branch_id = ${data.branch_id}) and details.status_id=22`;

        if (typeof data.code != "undefined" && data.code != 0) {
          getattesql += ` and translation.a_code=${data.code}`;
          getPaginateattesql += ` and translation.a_code=${data.code}`;
        }
        if (typeof data.country != "undefined" && data.country != 0) {
          getattesql += ` and translation.a_country=${data.country}`;
          getPaginateattesql += ` and translation.a_country=${data.country}`;
        }
      }
    } else {
      if (data.s_type == 10) {
        getattesql = `SELECT customer.*,details.*,attestation.a_prefix,attestation.a_name,(SELECT COUNT(*) FROM details where details.service_type=10 AND details.deleted=0) as trows,(SELECT name FROM attributes WHERE attributes.attribute_id  =attestation.a_code)as code,(SELECT name FROM attributes WHERE attributes.attribute_id  =attestation.a_type)as type,(SELECT name FROM attributes WHERE attributes.attribute_id  =attestation.a_country)as country,(SELECT c_prefix FROM customer WHERE customer.c_id=attestation.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=attestation.c_id) AS customer_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =details.d_c_id)as certificate,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname FROM details,attestation,customer WHERE customer.c_id=attestation.c_id AND details.service_id=attestation.a_id AND details.service_type=10 AND details.deleted=0 and attestation.deleted=0 and customer.deleted=0 and customer.is_block = 1 and  customer.is_cancel=0 and STR_TO_DATE(details.r_f_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y") and details.status_id=22`;

        getPaginateattesql = `SELECT  COUNT(details.detail_id) as trows FROM details,attestation,customer WHERE customer.c_id=attestation.c_id AND details.service_id=attestation.a_id AND details.service_type=10 AND details.deleted=0 and attestation.deleted=0 and customer.deleted=0 and customer.is_block = 1 and  customer.is_cancel=0 and STR_TO_DATE(details.r_f_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y") and details.status_id=22`;

        if (typeof data.code != "undefined" && data.code != 0) {
          getattesql += ` and attestation.a_code=${data.code}`;
          getPaginateattesql += ` and attestation.a_code=${data.code}`;
        }
        if (typeof data.country != "undefined" && data.country != 0) {
          getattesql += ` and attestation.a_country=${data.country}`;
          getPaginateattesql += ` and attestation.a_country=${data.country}`;
        }
        if (typeof data.branch_name != "undefined") {
          getattesql += ` and customer.branch_id=${data.branch_name}`;
          getPaginateattesql += ` and customer.branch_id=${data.branch_name}`;
        }
        if (response.type == 3) {
          getattesql += ` AND (customer.u_id=${data.u_id} or customer.foreign_branchuser=${data.u_id})`;
          getPaginateattesql += ` AND (customer.u_id=${data.u_id} or customer.foreign_branchuser=${data.u_id})`;
        }
      } else if (data.s_type == 8) {
        getattesql = `SELECT customer.*,details.*,visa.v_prefix as a_prefix,visa.v_name as a_name,(SELECT COUNT(*) FROM details where details.service_type=8 AND details.deleted=0) as trows,(SELECT name FROM attributes WHERE attributes.attribute_id  =visa.v_code)as code,(SELECT name FROM attributes WHERE attributes.attribute_id  =visa.v_type)as type,(SELECT name FROM attributes WHERE attributes.attribute_id  =details.d_c_id)as country,(SELECT c_prefix FROM customer WHERE customer.c_id=visa.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=visa.c_id) AS customer_name,(SELECT GROUP_CONCAT(attributes.name SEPARATOR ',') as name FROM attributes where FIND_IN_SET (attributes.attribute_id , visa.v_supporting_doc)) as certificate,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname FROM details,visa,customer WHERE customer.c_id=visa.c_id AND details.service_id=visa.v_id AND details.service_type=8 AND details.deleted=0 and visa.deleted=0 and customer.deleted=0 AND customer.is_block = 1 and customer.is_cancel=0 and STR_TO_DATE(details.r_f_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y") and details.status_id=22`;

        getPaginateattesql = `SELECT COUNT(details.detail_id) as trows FROM details,visa,customer WHERE customer.c_id=visa.c_id AND details.service_id=visa.v_id AND details.service_type=8 AND details.deleted=0 and visa.deleted=0 and customer.deleted=0 AND customer.is_block = 1 and customer.is_cancel=0 and STR_TO_DATE(details.r_f_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y") and details.status_id=22`;

        if (typeof data.code != "undefined" && data.code != 0) {
          getattesql += ` and visa.v_code=${data.code}`;
          getPaginateattesql += ` and visa.v_code=${data.code}`;
        }
        if (typeof data.country != "undefined" && data.country != 0) {
          getattesql += ` and details.d_c_id=${data.country}`;
          getPaginateattesql += ` and details.d_c_id=${data.country}`;
        }
        if (typeof data.branch_name != "undefined") {
          getattesql += ` and customer.branch_id=${data.branch_name}`;
          getPaginateattesql += ` and customer.branch_id=${data.branch_name}`;
        }
        if (response.type == 3) {
          getattesql += ` AND (customer.u_id=${data.u_id} or customer.foreign_branchuser=${data.u_id})`;

          getPaginateattesql += ` AND (customer.u_id=${data.u_id} or customer.foreign_branchuser=${data.u_id})`;
        }
      } else if (data.s_type == 17) {
        getattesql = `SELECT customer.*,details.*,apostille.a_prefix,apostille.a_name,(SELECT COUNT(*) FROM details where details.service_type=17 AND details.deleted=0) as trows,(SELECT name FROM attributes WHERE attributes.attribute_id  =apostille.a_code)as code,(SELECT name FROM attributes WHERE attributes.attribute_id  =apostille.a_type)as type,(SELECT name FROM attributes WHERE attributes.attribute_id  =apostille.a_country)as country,(SELECT c_prefix FROM customer WHERE customer.c_id=apostille.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=apostille.c_id) AS customer_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =details.d_c_id)as certificate,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname FROM details,apostille,customer WHERE customer.c_id=apostille.c_id AND details.service_id=apostille.a_id AND details.service_type=17 AND details.deleted=0 and apostille.deleted=0 and customer.deleted=0 AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y") and details.status_id=22`;

        getPaginateattesql = `SELECT COUNT(details.detail_id) as trows FROM details,apostille,customer WHERE customer.c_id=apostille.c_id AND details.service_id=apostille.a_id AND details.service_type=17 AND details.deleted=0 and apostille.deleted=0 and customer.deleted=0 AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y") and details.status_id=22`;

        if (typeof data.code != "undefined" && data.code != 0) {
          getattesql += ` and apostille.a_code=${data.code}`;
          getPaginateattesql += ` and apostille.a_code=${data.code}`;
        }
        if (typeof data.country != "undefined" && data.country != 0) {
          getattesql += ` and a_country=${data.country}`;
          getPaginateattesql += ` and apostille.a_country=${data.country}`;
        }
        if (typeof data.branch_name != "undefined") {
          getattesql += ` and customer.branch_id=${data.branch_name}`;
          getPaginateattesql += ` and customer.branch_id=${data.branch_name}`;
        }
        if (response.type == 3) {
          getattesql += ` AND (customer.u_id=${data.u_id} or customer.foreign_branchuser=${data.u_id})`;
          getPaginateattesql += ` AND (customer.u_id=${data.u_id} or customer.foreign_branchuser=${data.u_id})`;
        }
      } else if (data.s_type == 20) {
        getattesql = `SELECT customer.*,details.*,translation.a_prefix,translation.a_name,(SELECT COUNT(*) FROM details where details.service_type=20 AND details.deleted=0) as trows,(SELECT name FROM attributes WHERE attributes.attribute_id  =translation.a_code)as code,(SELECT name FROM attributes WHERE attributes.attribute_id  =translation.a_type)as type,(SELECT name FROM attributes WHERE attributes.attribute_id  =translation.a_country)as country,(SELECT c_prefix FROM customer WHERE customer.c_id=translation.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=translation.c_id) AS customer_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =details.d_c_id)as certificate,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname FROM details,translation,customer WHERE customer.c_id=translation.c_id AND details.service_id=translation.a_id AND details.service_type=20 AND details.deleted=0 and translation.deleted=0 and customer.deleted=0 AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y") and details.status_id=22`;

        getPaginateattesql = `SELECT COUNT(details.detail_id) as trows FROM details,translation,customer WHERE customer.c_id=translation.c_id AND details.service_id=translation.a_id AND details.service_type=20 AND details.deleted=0 and translation.deleted=0 and customer.deleted=0 AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y") and details.status_id=22`;

        if (typeof data.code != "undefined" && data.code != 0) {
          getattesql += ` and translation.a_code=${data.code}`;
          getPaginateattesql += ` and translation.a_code=${data.code}`;
        }
        if (typeof data.country != "undefined" && data.country != 0) {
          getattesql += ` and translation.a_country=${data.country}`;
          getPaginateattesql += ` and translation.a_country=${data.country}`;
        }
        if (typeof data.branch_name != "undefined") {
          getattesql += ` and customer.branch_id=${data.branch_name}`;
          getPaginateattesql += ` and customer.branch_id=${data.branch_name}`;
        }
        if (response.type == 3) {
          getattesql += ` AND (customer.u_id=${data.u_id} or customer.foreign_branchuser=${data.u_id})`;
          getPaginateattesql += ` AND (customer.u_id=${data.u_id} or customer.foreign_branchuser=${data.u_id})`;
        }
      } else {
        getattesql = `SELECT customer.*,details.*,attestation.a_prefix,attestation.a_name,(SELECT COUNT(*) FROM details where details.service_type=10 AND details.deleted=0) as trows,(SELECT name FROM attributes WHERE attributes.attribute_id  =attestation.a_code)as code,(SELECT name FROM attributes WHERE attributes.attribute_id  =attestation.a_type)as type,(SELECT name FROM attributes WHERE attributes.attribute_id  =attestation.a_country)as country,(SELECT c_prefix FROM customer WHERE customer.c_id=attestation.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=attestation.c_id) AS customer_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =details.d_c_id)as certificate,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname FROM details,attestation,customer WHERE customer.c_id=attestation.c_id AND details.service_id=attestation.a_id AND details.service_type=10 AND details.deleted=0 and attestation.deleted=0 and customer.deleted=0 and STR_TO_DATE(details.r_f_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y") and details.status_id=22`;

        getPaginateattesql = `SELECT COUNT(*) as trows FROM ( SELECT details.detail_id FROM details,attestation,customer WHERE customer.c_id=attestation.c_id AND details.service_id=attestation.a_id AND details.service_type=10 AND details.deleted=0 and attestation.deleted=0 and customer.deleted=0 and STR_TO_DATE(details.r_f_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y") and details.status_id=22`;
        if (typeof data.code != "undefined" && data.code != 0) {
          getattesql += ` and attestation.a_code=${data.code}`;
          getPaginateattesql += ` and attestation.a_code=${data.code}`;
        }
        if (typeof data.country != "undefined" && data.country != 0) {
          getattesql += ` and attestation.a_country=${data.country}`;
          getPaginateattesql += ` and attestation.a_country=${data.country}`;
        }
        if (typeof data.branch_name != "undefined") {
          getattesql += ` and customer.branch_id=${data.branch_name}`;
          getPaginateattesql += ` and customer.branch_id=${data.branch_name}`;
        }
        if (response.type == 3) {
          getattesql += ` AND (customer.u_id=${data.u_id} or customer.foreign_branchuser=${data.u_id})`;
          getPaginateattesql += ` AND (customer.u_id=${data.u_id} or customer.foreign_branchuser=${data.u_id})`;
        }
        getattesql += ` UNION SELECT customer.*,details.*,visa.v_prefix as a_prefix,visa.v_name as a_name,(SELECT COUNT(*) FROM details where details.service_type=8 AND details.deleted=0) as trows,(SELECT name FROM attributes WHERE attributes.attribute_id  =visa.v_code)as code,(SELECT name FROM attributes WHERE attributes.attribute_id  =visa.v_type)as type,(SELECT name FROM attributes WHERE attributes.attribute_id  =details.d_c_id)as country,(SELECT c_prefix FROM customer WHERE customer.c_id=visa.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=visa.c_id) AS customer_name,(SELECT GROUP_CONCAT(attributes.name SEPARATOR ',') as name FROM attributes where FIND_IN_SET (attributes.attribute_id , visa.v_supporting_doc)) as certificate,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname FROM details,visa,customer WHERE customer.c_id=visa.c_id AND details.service_id=visa.v_id AND details.service_type=8 AND details.deleted=0 and visa.deleted=0 and customer.deleted=0 AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y") and details.status_id=22`;

        getPaginateattesql += ` UNION SELECT details.detail_id FROM details,visa,customer WHERE customer.c_id=visa.c_id AND details.service_id=visa.v_id AND details.service_type=8 AND details.deleted=0 and visa.deleted=0 and customer.deleted=0 AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y") and details.status_id=22`;

        if (typeof data.code != "undefined" && data.code != 0) {
          getattesql += ` and visa.v_code=${data.code}`;
          getPaginateattesql += ` and visa.v_code=${data.code}`;
        }
        if (typeof data.country != "undefined" && data.country != 0) {
          getattesql += ` and details.d_c_id=${data.country}`;
          getPaginateattesql += ` and details.d_c_id=${data.country}`;
        }
        if (typeof data.branch_name != "undefined") {
          getattesql += ` and customer.branch_id=${data.branch_name}`;
          getPaginateattesql += ` and customer.branch_id=${data.branch_name}`;
        }
        if (response.type == 3) {
          getattesql += ` AND (customer.u_id=${data.u_id} or customer.foreign_branchuser=${data.u_id})`;
          getPaginateattesql += ` AND (customer.u_id=${data.u_id} or customer.foreign_branchuser=${data.u_id})`;
        }
        getattesql += ` UNION SELECT customer.*,details.*,apostille.a_prefix,apostille.a_name,(SELECT COUNT(*) FROM details where details.service_type=17 AND details.deleted=0) as trows,(SELECT name FROM attributes WHERE attributes.attribute_id  =apostille.a_code)as code,(SELECT name FROM attributes WHERE attributes.attribute_id  =apostille.a_type)as type,(SELECT name FROM attributes WHERE attributes.attribute_id  =apostille.a_country)as country,(SELECT c_prefix FROM customer WHERE customer.c_id=apostille.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=apostille.c_id) AS customer_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =details.d_c_id)as certificate,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname FROM details,apostille,customer WHERE customer.c_id=apostille.c_id AND details.service_id=apostille.a_id AND details.service_type=17 AND details.deleted=0 and apostille.deleted=0 and customer.deleted=0 AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y") and details.status_id=22`;

        getPaginateattesql += ` UNION SELECT details.detail_id FROM details,apostille,customer WHERE customer.c_id=apostille.c_id AND details.service_id=apostille.a_id AND details.service_type=17 AND details.deleted=0 and apostille.deleted=0 and customer.deleted=0 AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y") and details.status_id=22`;

        if (typeof data.code != "undefined" && data.code != 0) {
          getattesql += ` and apostille.a_code=${data.code}`;
          getPaginateattesql += ` and apostille.a_code=${data.code}`;
        }
        if (typeof data.country != "undefined" && data.country != 0) {
          getattesql += ` and apostille.a_country=${data.country}`;
          getPaginateattesql += ` and apostille.a_country=${data.country}`;
        }
        if (typeof data.branch_name != "undefined") {
          getattesql += ` and customer.branch_id=${data.branch_name}`;
          getPaginateattesql += ` and customer.branch_id=${data.branch_name}`;
        }
        if (response.type == 3) {
          getattesql += ` AND (customer.u_id=${data.u_id} or customer.foreign_branchuser=${data.u_id})`;
          getPaginateattesql += ` AND (customer.u_id=${data.u_id} or customer.foreign_branchuser=${data.u_id})`;
        }
        getattesql += ` UNION SELECT customer.*,details.*,translation.a_prefix,translation.a_name,(SELECT COUNT(*) FROM details where details.service_type=20 AND details.deleted=0) as trows,(SELECT name FROM attributes WHERE attributes.attribute_id  =translation.a_code)as code,(SELECT name FROM attributes WHERE attributes.attribute_id  =translation.a_type)as type,(SELECT name FROM attributes WHERE attributes.attribute_id  =translation.a_country)as country,(SELECT c_prefix FROM customer WHERE customer.c_id=translation.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=translation.c_id) AS customer_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =details.d_c_id)as certificate,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname FROM details,translation,customer WHERE customer.c_id=translation.c_id AND details.service_id=translation.a_id AND details.service_type=20 AND details.deleted=0 and translation.deleted=0 and customer.deleted=0 AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y") and details.status_id=22`;

        getPaginateattesql += ` UNION SELECT details.detail_id FROM details,translation,customer WHERE customer.c_id=translation.c_id AND details.service_id=translation.a_id AND details.service_type=20 AND details.deleted=0 and translation.deleted=0 and customer.deleted=0 AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y") and details.status_id=22`;

        if (typeof data.code != "undefined" && data.code != 0) {
          getattesql += ` and translation.a_code=${data.code}`;
          getPaginateattesql += ` and translation.a_code=${data.code}`;
        }
        if (typeof data.country != "undefined" && data.country != 0) {
          getattesql += ` and translation.a_country=${data.country}`;
          getPaginateattesql += ` and translation.a_country=${data.country}`;
        }
        if (typeof data.branch_name != "undefined") {
          getattesql += ` and customer.branch_id=${data.branch_name}`;
          getPaginateattesql += ` and customer.branch_id=${data.branch_name}`;
        }
        if (response.type == 3) {
          getattesql += ` AND (customer.u_id=${data.u_id} or customer.foreign_branchuser=${data.u_id})`;
          getPaginateattesql += ` AND (customer.u_id=${data.u_id} or customer.foreign_branchuser=${data.u_id}))`;
        }
        getPaginateattesql += ` ) trows`;
      }
    }
    console.log(getPaginateattesql, "getPaginateattesqlgetPaginateattesql");
    // console.log(getattesql,"getPaginateattesqlgetPaginateattesql");
    getattesql += ` limit ${(data.page - 1) * data.perpage},${data.perpage}`;

    let resp = await new Promise((resolve, reject) => {
      con.query(getPaginateattesql, function (err1, lres1) {
        if (err1) {
          console.log(err1);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (lres1.length > 0) {
            resolve({
              status: 1,
              t_rows: lres1[0].trows,
            });
          } else {
            resolve({
              status: 0,
              data: [],
            });
          }
        }
      });
    });

    let response1 = await new Promise((resolve, reject) => {
      con.query(getattesql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              data: result,
              t_rows: resp.t_rows,
            });
          } else {
            resolve({
              status: 1,
              data: [],
            });
          }
        }
      });
    });
    return response1;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function generateallrdeliveryreport(data) {
  try {
    let record = [];
    getuserquery = `select * from users where u_id=${data.u_id} and deleted=0`;
    let response = await new Promise((resolve, reject) => {
      con.query(getuserquery, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            if (result[0].user_type == 1) {
              getallchilduser = `select * from users where (p_u_id=${data.u_id} and branch_id=${result[0].user_type}) and deleted=0`;

              con.query(getallchilduser, function (err, res) {
                if (err) {
                  console.log(err);
                  resolve({ status: 0, message: "Something went to wrong" });
                } else {
                  res.forEach(function (r) {
                    record.push(r.u_id);
                  });
                  record.push(data.u_id);
                  resolve({
                    record: record,
                    type: result[0].user_type,
                  });
                }
              });
            } else {
              resolve({
                type: result[0].user_type,
              });
            }
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    let getattesql = "";
    if (response.type == 1) {
      if (data.s_type == 10) {
        getattesql = `SELECT customer.*,details.*,attestation.a_prefix,attestation.a_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =attestation.a_code)as code,(SELECT name FROM attributes WHERE attributes.attribute_id  =attestation.a_type)as type,(SELECT name FROM attributes WHERE attributes.attribute_id  =attestation.a_country)as country,(SELECT c_prefix FROM customer WHERE customer.c_id=attestation.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=attestation.c_id) AS customer_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =details.d_c_id)as certificate,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname  FROM details,attestation,customer WHERE customer.c_id=attestation.c_id AND details.service_id=attestation.a_id AND details.service_type=10 AND
        STR_TO_DATE(details.r_f_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y") and (customer.foreign_branch = ${data.branch_id} OR customer.branch_id = ${data.branch_id}) and details.deleted=0 and attestation.deleted=0 and customer.is_block = 1 and customer.is_cancel=0 and customer.deleted=0 and details.status_id=22`;

        if (typeof data.code != "undefined" && data.code != 0) {
          getattesql += ` and attestation.a_code=${data.code}`;
        }
        if (typeof data.country != "undefined" && data.country != 0) {
          getattesql += ` and attestation.a_country=${data.country}`;
        }
      } else if (data.s_type == 8) {
        getattesql = `SELECT customer.*,details.*,visa.v_prefix as a_prefix,visa.v_name as a_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =visa.v_code)as code,(SELECT name FROM attributes WHERE attributes.attribute_id  =visa.v_type)as type,(SELECT name FROM attributes WHERE attributes.attribute_id  =details.d_c_id)as country,(SELECT c_prefix FROM customer WHERE customer.c_id=visa.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=visa.c_id) AS customer_name,(SELECT GROUP_CONCAT(attributes.name SEPARATOR ',') as name FROM attributes where FIND_IN_SET (attributes.attribute_id , visa.v_supporting_doc)) as certificate,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname  FROM details,visa,customer WHERE customer.c_id=visa.c_id AND details.service_id=visa.v_id AND details.service_type=8 AND details.deleted=0 and visa.deleted=0 and customer.deleted=0 AND customer.is_block = 1 and customer.is_cancel=0 and STR_TO_DATE(details.r_f_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y") and (customer.foreign_branch = ${data.branch_id} OR customer.branch_id = ${data.branch_id}) and details.status_id=22`;
        if (typeof data.code != "undefined" && data.code != 0) {
          getattesql += ` and visa.v_code=${data.code}`;
        }
        if (typeof data.country != "undefined" && data.country != 0) {
          getattesql += ` and details.d_c_id=${data.country}`;
        }
      } else if (data.s_type == 17) {
        getattesql = `SELECT customer.*,details.*,apostille.a_prefix,apostille.a_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =apostille.a_code)as code,(SELECT name FROM attributes WHERE attributes.attribute_id  =apostille.a_type)as type,(SELECT name FROM attributes WHERE attributes.attribute_id  =apostille.a_country)as country,(SELECT c_prefix FROM customer WHERE customer.c_id=apostille.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=apostille.c_id) AS customer_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =details.d_c_id)as certificate,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname  FROM details,apostille,customer WHERE customer.c_id=apostille.c_id AND details.service_id=apostille.a_id AND details.service_type=17 AND details.deleted=0 and apostille.deleted=0 and customer.is_block = 1 and  customer.is_cancel=0 and customer.deleted=0 AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y") and (customer.foreign_branch = ${data.branch_id} OR customer.branch_id = ${data.branch_id}) and details.status_id=22`;

        if (typeof data.code != "undefined" && data.code != 0) {
          getattesql += ` and apostille.a_code=${data.code}`;
        }
        if (typeof data.country != "undefined" && data.country != 0) {
          getattesql += ` and apostille.a_country=${data.country}`;
        }
      } else if (data.s_type == 20) {
        getattesql = `SELECT customer.*,details.*,translation.a_prefix,translation.a_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =translation.a_code)as code,(SELECT name FROM attributes WHERE attributes.attribute_id  =translation.a_type)as type,(SELECT name FROM attributes WHERE attributes.attribute_id  =translation.a_country)as country,(SELECT c_prefix FROM customer WHERE customer.c_id=translation.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=translation.c_id) AS customer_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =details.d_c_id)as certificate,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname  FROM details,translation,customer WHERE customer.c_id=translation.c_id AND details.service_id=translation.a_id AND details.service_type=20 AND details.deleted=0 and translation.deleted=0 and customer.is_block = 1 and  customer.is_cancel=0 and customer.deleted=0 AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y") and (customer.foreign_branch = ${data.branch_id} OR customer.branch_id = ${data.branch_id}) and details.status_id=22`;

        if (typeof data.code != "undefined" && data.code != 0) {
          getattesql += ` and translation.a_code=${data.code}`;
        }
        if (typeof data.country != "undefined" && data.country != 0) {
          getattesql += ` and translation.a_country=${data.country}`;
        }
      } else {
        getattesql = `SELECT customer.*,details.*,attestation.a_prefix,attestation.a_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =attestation.a_code)as code,(SELECT name FROM attributes WHERE attributes.attribute_id  =attestation.a_type)as type,(SELECT name FROM attributes WHERE attributes.attribute_id  =attestation.a_country)as country,(SELECT c_prefix FROM customer WHERE customer.c_id=attestation.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=attestation.c_id) AS customer_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =details.d_c_id)as certificate,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname  FROM details,attestation,customer WHERE customer.c_id=attestation.c_id AND details.service_id=attestation.a_id AND details.service_type=10 AND
        STR_TO_DATE(details.r_f_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y") and (customer.foreign_branch = ${data.branch_id} OR customer.branch_id = ${data.branch_id}) and details.deleted=0 and attestation.deleted=0 and customer.deleted=0  and customer.is_block = 1 and customer.is_cancel=0 and details.status_id=22`;

        if (typeof data.code != "undefined" && data.code != 0) {
          getattesql += ` and attestation.a_code=${data.code}`;
        }
        if (typeof data.country != "undefined" && data.country != 0) {
          getattesql += ` and attestation.a_country=${data.country}`;
        }
        getattesql += ` UNION SELECT customer.*,details.*,visa.v_prefix as a_prefix,visa.v_name as a_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =visa.v_code)as code,(SELECT name FROM attributes WHERE attributes.attribute_id  =visa.v_type)as type,(SELECT name FROM attributes WHERE attributes.attribute_id  =details.d_c_id)as country,(SELECT c_prefix FROM customer WHERE customer.c_id=visa.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=visa.c_id) AS customer_name,(SELECT GROUP_CONCAT(attributes.name SEPARATOR ',') as name FROM attributes where FIND_IN_SET (attributes.attribute_id , visa.v_supporting_doc)) as certificate,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname  FROM details,visa,customer WHERE customer.c_id=visa.c_id AND details.service_id=visa.v_id AND details.service_type=8 AND details.deleted=0 and visa.deleted=0 and customer.deleted=0 AND customer.is_block = 1 and  customer.is_cancel=0 and STR_TO_DATE(details.r_f_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y") and (customer.foreign_branch = ${data.branch_id} OR customer.branch_id = ${data.branch_id}) and details.status_id=22`;

        if (typeof data.code != "undefined" && data.code != 0) {
          getattesql += ` and visa.v_code=${data.code}`;
        }
        if (typeof data.country != "undefined" && data.country != 0) {
          getattesql += ` and details.d_c_id=${data.country}`;
        }
        getattesql += ` UNION SELECT customer.*,details.*,apostille.a_prefix,apostille.a_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =apostille.a_code)as code,(SELECT name FROM attributes WHERE attributes.attribute_id  =apostille.a_type)as type,(SELECT name FROM attributes WHERE attributes.attribute_id  =apostille.a_country)as country,(SELECT c_prefix FROM customer WHERE customer.c_id=apostille.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=apostille.c_id) AS customer_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =details.d_c_id)as certificate,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname  FROM details,apostille,customer WHERE customer.c_id=apostille.c_id AND details.service_id=apostille.a_id AND details.service_type=17 AND details.deleted=0 and apostille.deleted=0 and customer.deleted=0  AND customer.is_block = 1 and  customer.is_cancel=0 and STR_TO_DATE(details.r_f_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y") and (customer.foreign_branch = ${data.branch_id} OR customer.branch_id = ${data.branch_id}) and details.status_id=22`;

        if (typeof data.code != "undefined" && data.code != 0) {
          getattesql += ` and apostille.a_code=${data.code}`;
        }
        if (typeof data.country != "undefined" && data.country != 0) {
          getattesql += ` and apostille.a_country=${data.country}`;
        }
        getattesql += ` UNION SELECT customer.*,details.*,translation.a_prefix,translation.a_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =translation.a_code)as code,(SELECT name FROM attributes WHERE attributes.attribute_id  =translation.a_type)as type,(SELECT name FROM attributes WHERE attributes.attribute_id  =translation.a_country)as country,(SELECT c_prefix FROM customer WHERE customer.c_id=translation.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=translation.c_id) AS customer_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =details.d_c_id)as certificate,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname  FROM details,translation,customer WHERE customer.c_id=translation.c_id AND details.service_id=translation.a_id AND details.service_type=20 AND details.deleted=0 and translation.deleted=0 and customer.deleted=0 AND customer.is_block = 1 and customer.is_cancel=0 and STR_TO_DATE(details.r_f_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y") and (customer.foreign_branch = ${data.branch_id} OR customer.branch_id = ${data.branch_id}) and details.status_id=22`;

        if (typeof data.code != "undefined" && data.code != 0) {
          getattesql += ` and translation.a_code=${data.code}`;
        }
        if (typeof data.country != "undefined" && data.country != 0) {
          getattesql += ` and translation.a_country=${data.country}`;
        }
      }
    } else {
      if (data.s_type == 10) {
        getattesql = `SELECT customer.*,details.*,attestation.a_prefix,attestation.a_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =attestation.a_code)as code,(SELECT name FROM attributes WHERE attributes.attribute_id  =attestation.a_type)as type,(SELECT name FROM attributes WHERE attributes.attribute_id  =attestation.a_country)as country,(SELECT c_prefix FROM customer WHERE customer.c_id=attestation.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=attestation.c_id) AS customer_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =details.d_c_id)as certificate,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname FROM details,attestation,customer WHERE customer.c_id=attestation.c_id AND details.service_id=attestation.a_id AND details.service_type=10 AND details.deleted=0 and attestation.deleted=0 and customer.deleted=0 and customer.is_block = 1 and  customer.is_cancel=0 and STR_TO_DATE(details.r_f_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y") and details.status_id=22`;

        if (typeof data.code != "undefined" && data.code != 0) {
          getattesql += ` and attestation.a_code=${data.code}`;
        }
        if (typeof data.country != "undefined" && data.country != 0) {
          getattesql += ` and attestation.a_country=${data.country}`;
        }
        if (typeof data.branch_name != "undefined") {
          getattesql += ` and customer.branch_id=${data.branch_name}`;
        }
        if (response.type == 3) {
          getattesql += ` AND (customer.u_id=${data.u_id} or customer.foreign_branchuser=${data.u_id})`;
        }
      } else if (data.s_type == 8) {
        getattesql = `SELECT customer.*,details.*,visa.v_prefix as a_prefix,visa.v_name as a_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =visa.v_code)as code,(SELECT name FROM attributes WHERE attributes.attribute_id  =visa.v_type)as type,(SELECT name FROM attributes WHERE attributes.attribute_id  =details.d_c_id)as country,(SELECT c_prefix FROM customer WHERE customer.c_id=visa.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=visa.c_id) AS customer_name,(SELECT GROUP_CONCAT(attributes.name SEPARATOR ',') as name FROM attributes where FIND_IN_SET (attributes.attribute_id , visa.v_supporting_doc)) as certificate,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname FROM details,visa,customer WHERE customer.c_id=visa.c_id AND details.service_id=visa.v_id AND details.service_type=8 AND details.deleted=0 and visa.deleted=0 and customer.deleted=0 AND customer.is_block = 1 and customer.is_cancel=0 and STR_TO_DATE(details.r_f_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y") and details.status_id=22`;

        if (typeof data.code != "undefined" && data.code != 0) {
          getattesql += ` and visa.v_code=${data.code}`;
        }
        if (typeof data.country != "undefined" && data.country != 0) {
          getattesql += ` and details.d_c_id=${data.country}`;
        }
        if (typeof data.branch_name != "undefined") {
          getattesql += ` and customer.branch_id=${data.branch_name}`;
        }
        if (response.type == 3) {
          getattesql += ` AND (customer.u_id=${data.u_id} or customer.foreign_branchuser=${data.u_id})`;
        }
      } else if (data.s_type == 17) {
        getattesql = `SELECT customer.*,details.*,apostille.a_prefix,apostille.a_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =apostille.a_code)as code,(SELECT name FROM attributes WHERE attributes.attribute_id  =apostille.a_type)as type,(SELECT name FROM attributes WHERE attributes.attribute_id  =apostille.a_country)as country,(SELECT c_prefix FROM customer WHERE customer.c_id=apostille.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=apostille.c_id) AS customer_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =details.d_c_id)as certificate,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname FROM details,apostille,customer WHERE customer.c_id=apostille.c_id AND details.service_id=apostille.a_id AND details.service_type=17 AND details.deleted=0 and apostille.deleted=0 and customer.deleted=0 AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y") and details.status_id=22`;

        if (typeof data.code != "undefined" && data.code != 0) {
          getattesql += ` and apostille.a_code=${data.code}`;
        }
        if (typeof data.country != "undefined" && data.country != 0) {
          getattesql += ` and a_country=${data.country}`;
        }
        if (typeof data.branch_name != "undefined") {
          getattesql += ` and customer.branch_id=${data.branch_name}`;
        }
        if (response.type == 3) {
          getattesql += ` AND (customer.u_id=${data.u_id} or customer.foreign_branchuser=${data.u_id})`;
        }
      } else if (data.s_type == 20) {
        getattesql = `SELECT customer.*,details.*,translation.a_prefix,translation.a_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =translation.a_code)as code,(SELECT name FROM attributes WHERE attributes.attribute_id  =translation.a_type)as type,(SELECT name FROM attributes WHERE attributes.attribute_id  =translation.a_country)as country,(SELECT c_prefix FROM customer WHERE customer.c_id=translation.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=translation.c_id) AS customer_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =details.d_c_id)as certificate,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname FROM details,translation,customer WHERE customer.c_id=translation.c_id AND details.service_id=translation.a_id AND details.service_type=20 AND details.deleted=0 and translation.deleted=0 and customer.deleted=0 AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y") and details.status_id=22`;

        if (typeof data.code != "undefined" && data.code != 0) {
          getattesql += ` and translation.a_code=${data.code}`;
        }
        if (typeof data.country != "undefined" && data.country != 0) {
          getattesql += ` and translation.a_country=${data.country}`;
        }
        if (typeof data.branch_name != "undefined") {
          getattesql += ` and customer.branch_id=${data.branch_name}`;
        }
        if (response.type == 3) {
          getattesql += ` AND (customer.u_id=${data.u_id} or customer.foreign_branchuser=${data.u_id})`;
        }
      } else {
        getattesql = `SELECT customer.*,details.*,attestation.a_prefix,attestation.a_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =attestation.a_code)as code,(SELECT name FROM attributes WHERE attributes.attribute_id  =attestation.a_type)as type,(SELECT name FROM attributes WHERE attributes.attribute_id  =attestation.a_country)as country,(SELECT c_prefix FROM customer WHERE customer.c_id=attestation.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=attestation.c_id) AS customer_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =details.d_c_id)as certificate,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname FROM details,attestation,customer WHERE customer.c_id=attestation.c_id AND details.service_id=attestation.a_id AND details.service_type=10 AND details.deleted=0 and attestation.deleted=0 and customer.deleted=0 and STR_TO_DATE(details.r_f_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y") and details.status_id=22`;

        if (typeof data.code != "undefined" && data.code != 0) {
          getattesql += ` and attestation.a_code=${data.code}`;
        }
        if (typeof data.country != "undefined" && data.country != 0) {
          getattesql += ` and attestation.a_country=${data.country}`;
        }
        if (typeof data.branch_name != "undefined") {
          getattesql += ` and customer.branch_id=${data.branch_name}`;
        }
        if (response.type == 3) {
          getattesql += ` AND (customer.u_id=${data.u_id} or customer.foreign_branchuser=${data.u_id})`;
        }
        getattesql += ` UNION SELECT customer.*,details.*,visa.v_prefix as a_prefix,visa.v_name as a_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =visa.v_code)as code,(SELECT name FROM attributes WHERE attributes.attribute_id  =visa.v_type)as type,(SELECT name FROM attributes WHERE attributes.attribute_id  =details.d_c_id)as country,(SELECT c_prefix FROM customer WHERE customer.c_id=visa.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=visa.c_id) AS customer_name,(SELECT GROUP_CONCAT(attributes.name SEPARATOR ',') as name FROM attributes where FIND_IN_SET (attributes.attribute_id , visa.v_supporting_doc)) as certificate,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname FROM details,visa,customer WHERE customer.c_id=visa.c_id AND details.service_id=visa.v_id AND details.service_type=8 AND details.deleted=0 and visa.deleted=0 and customer.deleted=0 AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y") and details.status_id=22`;

        if (typeof data.code != "undefined" && data.code != 0) {
          getattesql += ` and visa.v_code=${data.code}`;
        }
        if (typeof data.country != "undefined" && data.country != 0) {
          getattesql += ` and details.d_c_id=${data.country}`;
        }
        if (typeof data.branch_name != "undefined") {
          getattesql += ` and customer.branch_id=${data.branch_name}`;
        }
        if (response.type == 3) {
          getattesql += ` AND (customer.u_id=${data.u_id} or customer.foreign_branchuser=${data.u_id})`;
        }
        getattesql += ` UNION SELECT customer.*,details.*,apostille.a_prefix,apostille.a_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =apostille.a_code)as code,(SELECT name FROM attributes WHERE attributes.attribute_id  =apostille.a_type)as type,(SELECT name FROM attributes WHERE attributes.attribute_id  =apostille.a_country)as country,(SELECT c_prefix FROM customer WHERE customer.c_id=apostille.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=apostille.c_id) AS customer_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =details.d_c_id)as certificate,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname FROM details,apostille,customer WHERE customer.c_id=apostille.c_id AND details.service_id=apostille.a_id AND details.service_type=17 AND details.deleted=0 and apostille.deleted=0 and customer.deleted=0 AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y") and details.status_id=22`;

        if (typeof data.code != "undefined" && data.code != 0) {
          getattesql += ` and apostille.a_code=${data.code}`; //2222222222222222
        }
        if (typeof data.country != "undefined" && data.country != 0) {
          getattesql += ` and apostille.a_country=${data.country}`;
        }
        if (typeof data.branch_name != "undefined") {
          getattesql += ` and customer.branch_id=${data.branch_name}`;
        }
        if (response.type == 3) {
          getattesql += ` AND (customer.u_id=${data.u_id} or customer.foreign_branchuser=${data.u_id})`;
        }
        getattesql += ` UNION SELECT customer.*,details.*,translation.a_prefix,translation.a_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =translation.a_code)as code,(SELECT name FROM attributes WHERE attributes.attribute_id  =translation.a_type)as type,(SELECT name FROM attributes WHERE attributes.attribute_id  =translation.a_country)as country,(SELECT c_prefix FROM customer WHERE customer.c_id=translation.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=translation.c_id) AS customer_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =details.d_c_id)as certificate,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname FROM details,translation,customer WHERE customer.c_id=translation.c_id AND details.service_id=translation.a_id AND details.service_type=20 AND details.deleted=0 and translation.deleted=0 and customer.deleted=0 AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y") and details.status_id=22`;

        if (typeof data.code != "undefined" && data.code != 0) {
          getattesql += ` and translation.a_code=${data.code}`;
        }
        if (typeof data.country != "undefined" && data.country != 0) {
          getattesql += ` and translation.a_country=${data.country}`;
        }
        if (typeof data.branch_name != "undefined") {
          getattesql += ` and customer.branch_id=${data.branch_name}`;
        }
        if (response.type == 3) {
          getattesql += ` AND (customer.u_id=${data.u_id} or customer.foreign_branchuser=${data.u_id})`;
        }
      }
    }

    let response1 = await new Promise((resolve, reject) => {
      con.query(getattesql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              data: result,
            });
          } else {
            resolve({
              status: 1,
              data: [],
            });
          }
        }
      });
    });
    return response1;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function generatehistoryrdeliveryreport(data) {
  try {
    let record = [];
    getuserquery = `select * from users where u_id=${data.u_id} and deleted=0`;
    let response = await new Promise((resolve, reject) => {
      con.query(getuserquery, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            if (result[0].user_type == 1) {
              getallchilduser = `select * from users where (p_u_id=${data.u_id} and branch_id=${result[0].user_type}) and deleted=0`;

              con.query(getallchilduser, function (err, res) {
                if (err) {
                  console.log(err);
                  resolve({ status: 0, message: "Something went to wrong" });
                } else {
                  res.forEach(function (r) {
                    record.push(r.u_id);
                  });
                  record.push(data.u_id);
                  resolve({
                    record: record,
                    type: result[0].user_type,
                  });
                }
              });
            } else {
              resolve({
                type: result[0].user_type,
              });
            }
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    let getattesql = "";
    let getPaginateattesql = "";
    if (response.type == 1) {
      if (data.s_type == 10) {
        getattesql = `SELECT customer.*,details.*,attestation.a_prefix,attestation.a_name,(SELECT name FROM attributes WHERE attributes.attribute_id=details.status_id)as status_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =attestation.a_code)as code,(SELECT name FROM attributes WHERE attributes.attribute_id  =attestation.a_type)as type,(SELECT name FROM attributes WHERE attributes.attribute_id  =attestation.a_country)as country,(SELECT c_prefix FROM customer WHERE customer.c_id=attestation.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=attestation.c_id) AS customer_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =details.d_c_id)as certificate,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname  FROM details,attestation,customer WHERE customer.c_id=attestation.c_id AND details.service_id=attestation.a_id AND details.service_type=10 AND (details.r_f_date IS NOT NULL OR details.status_id=22) AND 
        STR_TO_DATE(details.r_f_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y") and (customer.foreign_branch = ${data.branch_id} OR customer.branch_id = ${data.branch_id}) and details.deleted=0 and attestation.deleted=0 and customer.is_block = 1 and customer.is_cancel=0 and customer.deleted=0 `;

        getPaginateattesql = `SELECT COUNT(details.detail_id) as trows  FROM details,attestation,customer WHERE customer.c_id=attestation.c_id AND details.service_id=attestation.a_id AND details.service_type=10 AND (details.r_f_date IS NOT NULL OR details.status_id=22) AND
        STR_TO_DATE(details.r_f_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y") and (customer.foreign_branch = ${data.branch_id} OR customer.branch_id = ${data.branch_id}) and details.deleted=0 and attestation.deleted=0 and customer.is_block = 1 and customer.is_cancel=0 and customer.deleted=0 `;
        if (typeof data.code != "undefined" && data.code != 0) {
          getattesql += ` and attestation.a_code=${data.code}`;
          getPaginateattesql += ` and attestation.a_code=${data.code}`;
        }
        if (typeof data.country != "undefined" && data.country != 0) {
          getattesql += ` and attestation.a_country=${data.country}`;
          getPaginateattesql += ` and attestation.a_country=${data.country}`;
        }
      } else if (data.s_type == 8) {
        getattesql = `SELECT customer.*,details.*,visa.v_prefix as a_prefix,visa.v_name as a_name,(SELECT name FROM attributes WHERE attributes.attribute_id=details.status_id)as status_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =visa.v_code)as code,(SELECT name FROM attributes WHERE attributes.attribute_id  =visa.v_type)as type,(SELECT name FROM attributes WHERE attributes.attribute_id  =details.d_c_id)as country,(SELECT c_prefix FROM customer WHERE customer.c_id=visa.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=visa.c_id) AS customer_name,(SELECT GROUP_CONCAT(attributes.name SEPARATOR ',') as name FROM attributes where FIND_IN_SET (attributes.attribute_id , visa.v_supporting_doc)) as certificate,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname  FROM details,visa,customer WHERE customer.c_id=visa.c_id AND details.service_id=visa.v_id AND details.service_type=8 AND (details.r_f_date IS NOT NULL OR details.status_id=22) AND details.deleted=0 and visa.deleted=0 and customer.deleted=0 AND customer.is_block = 1 and customer.is_cancel=0 and STR_TO_DATE(details.r_f_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y") and (customer.foreign_branch = ${data.branch_id} OR customer.branch_id = ${data.branch_id}) `;

        getPaginateattesql = `SELECT COUNT(details.detail_id) as trows FROM details,visa,customer WHERE customer.c_id=visa.c_id AND details.service_id=visa.v_id AND details.service_type=8 AND (details.r_f_date IS NOT NULL OR details.status_id=22) AND details.deleted=0 and visa.deleted=0 and customer.deleted=0 AND customer.is_block = 1 and customer.is_cancel=0 and STR_TO_DATE(details.r_f_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y") and (customer.foreign_branch = ${data.branch_id} OR customer.branch_id = ${data.branch_id}) `;

        if (typeof data.code != "undefined" && data.code != 0) {
          getattesql += ` and visa.v_code=${data.code}`;
          getPaginateattesql += ` and visa.v_code=${data.code}`;
        }
        if (typeof data.country != "undefined" && data.country != 0) {
          getattesql += ` and details.d_c_id=${data.country}`;
          getPaginateattesql += ` and visa.details.d_c_id=${data.country}`;
        }
      } else if (data.s_type == 17) {
        getattesql = `SELECT customer.*,details.*,apostille.a_prefix,apostille.a_name,(SELECT name FROM attributes WHERE attributes.attribute_id=details.status_id)as status_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =apostille.a_code)as code,(SELECT name FROM attributes WHERE attributes.attribute_id  =apostille.a_type)as type,(SELECT name FROM attributes WHERE attributes.attribute_id  =apostille.a_country)as country,(SELECT c_prefix FROM customer WHERE customer.c_id=apostille.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=apostille.c_id) AS customer_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =details.d_c_id)as certificate,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname  FROM details,apostille,customer WHERE customer.c_id=apostille.c_id AND details.service_id=apostille.a_id AND details.service_type=17 AND (details.r_f_date IS NOT NULL OR details.status_id=22)  AND details.deleted=0 and apostille.deleted=0 and customer.is_block = 1 and  customer.is_cancel=0 and customer.deleted=0 AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y") and (customer.foreign_branch = ${data.branch_id} OR customer.branch_id = ${data.branch_id})`;

        getPaginateattesql = `SELECT COUNT(details.detail_id) as trows FROM details,apostille,customer WHERE customer.c_id=apostille.c_id AND details.service_id=apostille.a_id AND details.service_type=17 AND (details.r_f_date IS NOT NULL OR details.status_id=22)  AND details.deleted=0 and apostille.deleted=0 and customer.is_block = 1 and  customer.is_cancel=0 and customer.deleted=0 AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y") and (customer.foreign_branch = ${data.branch_id} OR customer.branch_id = ${data.branch_id}) `;

        if (typeof data.code != "undefined" && data.code != 0) {
          getattesql += ` and apostille.a_code=${data.code}`;
          getPaginateattesql += ` and apostille.a_code=${data.code}`;
        }
        if (typeof data.country != "undefined" && data.country != 0) {
          getattesql += ` and apostille.a_country=${data.country}`;
          getPaginateattesql += ` and apostille.a_country=${data.country}`;
        }
      } else if (data.s_type == 20) {
        getattesql = `SELECT customer.*,details.*,translation.a_prefix,translation.a_name,(SELECT name FROM attributes WHERE attributes.attribute_id=details.status_id)as status_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =translation.a_code)as code,(SELECT name FROM attributes WHERE attributes.attribute_id  =translation.a_type)as type,(SELECT name FROM attributes WHERE attributes.attribute_id  =translation.a_country)as country,(SELECT c_prefix FROM customer WHERE customer.c_id=translation.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=translation.c_id) AS customer_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =details.d_c_id)as certificate,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname  FROM details,translation,customer WHERE customer.c_id=translation.c_id AND details.service_id=translation.a_id AND details.service_type=20 AND (details.r_f_date IS NOT NULL OR details.status_id=22) AND details.deleted=0 and translation.deleted=0 and customer.is_block = 1 and  customer.is_cancel=0 and customer.deleted=0 AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y") and (customer.foreign_branch = ${data.branch_id} OR customer.branch_id = ${data.branch_id})`;

        getPaginateattesql = `SELECT COUNT(details.detail_id) as trows  FROM details,translation,customer WHERE customer.c_id=translation.c_id AND details.service_id=translation.a_id AND details.service_type=20 AND (details.r_f_date IS NOT NULL OR details.status_id=22)  AND details.deleted=0 and translation.deleted=0 and customer.is_block = 1 and  customer.is_cancel=0 and customer.deleted=0 AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y") and (customer.foreign_branch = ${data.branch_id} OR customer.branch_id = ${data.branch_id}) `;

        if (typeof data.code != "undefined" && data.code != 0) {
          getattesql += ` and translation.a_code=${data.code}`;
          getPaginateattesql += ` and translation.a_code=${data.code}`;
        }
        if (typeof data.country != "undefined" && data.country != 0) {
          getattesql += ` and translation.a_country=${data.country}`;
          getPaginateattesql += ` and translation.a_country=${data.country}`;
        }
      } else {
        getattesql = `SELECT customer.*,details.*,attestation.a_prefix,attestation.a_name,(SELECT name FROM attributes WHERE attributes.attribute_id=details.status_id)as status_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =attestation.a_code)as code,(SELECT name FROM attributes WHERE attributes.attribute_id  =attestation.a_type)as type,(SELECT name FROM attributes WHERE attributes.attribute_id  =attestation.a_country)as country,(SELECT c_prefix FROM customer WHERE customer.c_id=attestation.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=attestation.c_id) AS customer_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =details.d_c_id)as certificate,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname  FROM details,attestation,customer WHERE customer.c_id=attestation.c_id AND details.service_id=attestation.a_id AND details.service_type=10 AND (details.r_f_date IS NOT NULL OR details.status_id=22) AND
        STR_TO_DATE(details.r_f_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y") and (customer.foreign_branch = ${data.branch_id} OR customer.branch_id = ${data.branch_id}) and details.deleted=0 and attestation.deleted=0 and customer.deleted=0  and customer.is_block = 1 and customer.is_cancel=0 `;

        getPaginateattesql = `SELECT  COUNT(details.detail_id) as trows FROM details,attestation,customer WHERE customer.c_id=attestation.c_id AND details.service_id=attestation.a_id AND details.service_type=10 AND (details.r_f_date IS NOT NULL OR details.status_id=22)  AND
        STR_TO_DATE(details.r_f_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y") and (customer.foreign_branch = ${data.branch_id} OR customer.branch_id = ${data.branch_id}) and details.deleted=0 and attestation.deleted=0 and customer.deleted=0  and customer.is_block = 1 and customer.is_cancel=0 `;

        if (typeof data.code != "undefined" && data.code != 0) {
          getattesql += ` and attestation.a_code=${data.code}`;
          getPaginateattesql += ` and attestation.a_code=${data.code}`;
        }
        if (typeof data.country != "undefined" && data.country != 0) {
          getattesql += ` and attestation.a_country=${data.country}`;
          getPaginateattesql += ` and attestation.a_code=${data.code}`;
        }
        getattesql += ` UNION SELECT customer.*,details.*,visa.v_prefix as a_prefix,visa.v_name as a_name,(SELECT name FROM attributes WHERE attributes.attribute_id=details.status_id)as status_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =visa.v_code)as code,(SELECT name FROM attributes WHERE attributes.attribute_id  =visa.v_type)as type,(SELECT name FROM attributes WHERE attributes.attribute_id  =details.d_c_id)as country,(SELECT c_prefix FROM customer WHERE customer.c_id=visa.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=visa.c_id) AS customer_name,(SELECT GROUP_CONCAT(attributes.name SEPARATOR ',') as name FROM attributes where FIND_IN_SET (attributes.attribute_id , visa.v_supporting_doc)) as certificate,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname  FROM details,visa,customer WHERE customer.c_id=visa.c_id AND details.service_id=visa.v_id AND details.service_type=8 AND (details.r_f_date IS NOT NULL OR details.status_id=22)  AND details.deleted=0 and visa.deleted=0 and customer.deleted=0 AND customer.is_block = 1 and  customer.is_cancel=0 and STR_TO_DATE(details.r_f_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y") and (customer.foreign_branch = ${data.branch_id} OR customer.branch_id = ${data.branch_id})`;

        getPaginateattesql += ` UNION SELECT  COUNT(details.detail_id) as trows FROM details,visa,customer WHERE customer.c_id=visa.c_id AND details.service_id=visa.v_id AND details.service_type=8 AND (details.r_f_date IS NOT NULL OR details.status_id=22)  AND details.deleted=0 and visa.deleted=0 and customer.deleted=0 AND customer.is_block = 1 and  customer.is_cancel=0 and STR_TO_DATE(details.r_f_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y") and (customer.foreign_branch = ${data.branch_id} OR customer.branch_id = ${data.branch_id})`;

        if (typeof data.code != "undefined" && data.code != 0) {
          getattesql += ` and visa.v_code=${data.code}`;
          getPaginateattesql += ` and visa.v_code=${data.code}`;
        }
        if (typeof data.country != "undefined" && data.country != 0) {
          getattesql += ` and details.d_c_id=${data.country}`;
          getPaginateattesql += ` and details.d_c_id=${data.country}`;
        }
        getattesql += ` UNION SELECT customer.*,details.*,apostille.a_prefix,apostille.a_name,(SELECT name FROM attributes WHERE attributes.attribute_id=details.status_id)as status_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =apostille.a_code)as code,(SELECT name FROM attributes WHERE attributes.attribute_id  =apostille.a_type)as type,(SELECT name FROM attributes WHERE attributes.attribute_id  =apostille.a_country)as country,(SELECT c_prefix FROM customer WHERE customer.c_id=apostille.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=apostille.c_id) AS customer_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =details.d_c_id)as certificate,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname  FROM details,apostille,customer WHERE customer.c_id=apostille.c_id AND details.service_id=apostille.a_id AND details.service_type=17 AND (details.r_f_date IS NOT NULL OR details.status_id=22)  AND details.deleted=0 and apostille.deleted=0 and customer.deleted=0  AND customer.is_block = 1 and  customer.is_cancel=0 and STR_TO_DATE(details.r_f_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y") and (customer.foreign_branch = ${data.branch_id} OR customer.branch_id = ${data.branch_id}) `;

        getPaginateattesql += ` UNION SELECT COUNT(details.detail_id) as trows  FROM details,apostille,customer WHERE customer.c_id=apostille.c_id AND details.service_id=apostille.a_id AND details.service_type=17 AND (details.r_f_date IS NOT NULL OR details.status_id=22)  AND details.deleted=0 and apostille.deleted=0 and customer.deleted=0  AND customer.is_block = 1 and  customer.is_cancel=0 and STR_TO_DATE(details.r_f_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y") and (customer.foreign_branch = ${data.branch_id} OR customer.branch_id = ${data.branch_id}) `;

        if (typeof data.code != "undefined" && data.code != 0) {
          getattesql += ` and apostille.a_code=${data.code}`;
          getPaginateattesql += ` and apostille.a_code=${data.code}`;
        }
        if (typeof data.country != "undefined" && data.country != 0) {
          getattesql += ` and apostille.a_country=${data.country}`;
          getPaginateattesql += ` and apostille.a_country=${data.country}`;
        }
        getattesql += ` UNION SELECT customer.*,details.*,translation.a_prefix,translation.a_name,(SELECT name FROM attributes WHERE attributes.attribute_id=details.status_id)as status_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =translation.a_code)as code,(SELECT name FROM attributes WHERE attributes.attribute_id  =translation.a_type)as type,(SELECT name FROM attributes WHERE attributes.attribute_id  =translation.a_country)as country,(SELECT c_prefix FROM customer WHERE customer.c_id=translation.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=translation.c_id) AS customer_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =details.d_c_id)as certificate,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname  FROM details,translation,customer WHERE customer.c_id=translation.c_id AND details.service_id=translation.a_id AND details.service_type=20 AND (details.r_f_date IS NOT NULL OR details.status_id=22)  AND details.deleted=0 and translation.deleted=0 and customer.deleted=0 AND customer.is_block = 1 and customer.is_cancel=0 and STR_TO_DATE(details.r_f_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y") and (customer.foreign_branch = ${data.branch_id} OR customer.branch_id = ${data.branch_id}) `;

        getPaginateattesql += ` UNION SELECT COUNT(details.detail_id) as trows FROM details,translation,customer WHERE customer.c_id=translation.c_id AND details.service_id=translation.a_id AND details.service_type=20 AND (details.r_f_date IS NOT NULL OR details.status_id=22)  AND details.deleted=0 and translation.deleted=0 and customer.deleted=0 AND customer.is_block = 1 and customer.is_cancel=0 and STR_TO_DATE(details.r_f_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y") and (customer.foreign_branch = ${data.branch_id} OR customer.branch_id = ${data.branch_id}) `;

        if (typeof data.code != "undefined" && data.code != 0) {
          getattesql += ` and translation.a_code=${data.code}`;
          getPaginateattesql += ` and translation.a_code=${data.code}`;
        }
        if (typeof data.country != "undefined" && data.country != 0) {
          getattesql += ` and translation.a_country=${data.country}`;
          getPaginateattesql += ` and translation.a_country=${data.country}`;
        }
      }
    } else {
      if (data.s_type == 10) {
        getattesql = `SELECT customer.*,details.*,attestation.a_prefix,attestation.a_name,(SELECT name FROM attributes WHERE attributes.attribute_id=details.status_id)as status_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =attestation.a_code)as code,(SELECT name FROM attributes WHERE attributes.attribute_id  =attestation.a_type)as type,(SELECT name FROM attributes WHERE attributes.attribute_id  =attestation.a_country)as country,(SELECT c_prefix FROM customer WHERE customer.c_id=attestation.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=attestation.c_id) AS customer_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =details.d_c_id)as certificate,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname FROM details,attestation,customer WHERE customer.c_id=attestation.c_id AND details.service_id=attestation.a_id AND details.service_type=10 AND (details.r_f_date IS NOT NULL OR details.status_id=22) AND details.deleted=0 and attestation.deleted=0 and customer.deleted=0 and customer.is_block = 1 and  customer.is_cancel=0 and STR_TO_DATE(details.r_f_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y")`;

        getPaginateattesql = `SELECT  COUNT(details.detail_id) as trows FROM details,attestation,customer WHERE customer.c_id=attestation.c_id AND details.service_id=attestation.a_id AND details.service_type=10 AND (details.r_f_date IS NOT NULL OR details.status_id=22) AND details.deleted=0 and attestation.deleted=0 and customer.deleted=0 and customer.is_block = 1 and  customer.is_cancel=0 and STR_TO_DATE(details.r_f_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y")`;

        if (typeof data.code != "undefined" && data.code != 0) {
          getattesql += ` and attestation.a_code=${data.code}`;
          getPaginateattesql += ` and attestation.a_code=${data.code}`;
        }
        if (typeof data.country != "undefined" && data.country != 0) {
          getattesql += ` and attestation.a_country=${data.country}`;
          getPaginateattesql += ` and attestation.a_country=${data.country}`;
        }
        if (typeof data.branch_name != "undefined") {
          getattesql += ` and customer.branch_id=${data.branch_name}`;
          getPaginateattesql += ` and customer.branch_id=${data.branch_name}`;
        }
        if (response.type == 3) {
          getattesql += ` AND (customer.u_id=${data.u_id} or customer.foreign_branchuser=${data.u_id})`;
          getPaginateattesql += ` AND (customer.u_id=${data.u_id} or customer.foreign_branchuser=${data.u_id})`;
        }
      } else if (data.s_type == 8) {
        getattesql = `SELECT customer.*,details.*,visa.v_prefix as a_prefix,visa.v_name as a_name,(SELECT name FROM attributes WHERE attributes.attribute_id=details.status_id)as status_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =visa.v_code)as code,(SELECT name FROM attributes WHERE attributes.attribute_id  =visa.v_type)as type,(SELECT name FROM attributes WHERE attributes.attribute_id  =details.d_c_id)as country,(SELECT c_prefix FROM customer WHERE customer.c_id=visa.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=visa.c_id) AS customer_name,(SELECT GROUP_CONCAT(attributes.name SEPARATOR ',') as name FROM attributes where FIND_IN_SET (attributes.attribute_id , visa.v_supporting_doc)) as certificate,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname FROM details,visa,customer WHERE customer.c_id=visa.c_id AND details.service_id=visa.v_id AND details.service_type=8 AND (details.r_f_date IS NOT NULL OR details.status_id=22)  AND details.deleted=0 and visa.deleted=0 and customer.deleted=0 AND customer.is_block = 1 and customer.is_cancel=0 and STR_TO_DATE(details.r_f_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y") `;

        getPaginateattesql = `SELECT COUNT(details.detail_id) as trows FROM details,visa,customer WHERE customer.c_id=visa.c_id AND details.service_id=visa.v_id AND details.service_type=8 AND (details.r_f_date IS NOT NULL OR details.status_id=22) AND details.deleted=0 and visa.deleted=0 and customer.deleted=0 AND customer.is_block = 1 and customer.is_cancel=0 and STR_TO_DATE(details.r_f_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y") `;

        if (typeof data.code != "undefined" && data.code != 0) {
          getattesql += ` and visa.v_code=${data.code}`;
          getPaginateattesql += ` and visa.v_code=${data.code}`;
        }
        if (typeof data.country != "undefined" && data.country != 0) {
          getattesql += ` and details.d_c_id=${data.country}`;
          getPaginateattesql += ` and details.d_c_id=${data.country}`;
        }
        if (typeof data.branch_name != "undefined") {
          getattesql += ` and customer.branch_id=${data.branch_name}`;
          getPaginateattesql += ` and customer.branch_id=${data.branch_name}`;
        }
        if (response.type == 3) {
          getattesql += ` AND (customer.u_id=${data.u_id} or customer.foreign_branchuser=${data.u_id})`;

          getPaginateattesql += ` AND (customer.u_id=${data.u_id} or customer.foreign_branchuser=${data.u_id})`;
        }
      } else if (data.s_type == 17) {
        getattesql = `SELECT customer.*,details.*,apostille.a_prefix,apostille.a_name,(SELECT name FROM attributes WHERE attributes.attribute_id=details.status_id)as status_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =apostille.a_code)as code,(SELECT name FROM attributes WHERE attributes.attribute_id  =apostille.a_type)as type,(SELECT name FROM attributes WHERE attributes.attribute_id  =apostille.a_country)as country,(SELECT c_prefix FROM customer WHERE customer.c_id=apostille.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=apostille.c_id) AS customer_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =details.d_c_id)as certificate,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname FROM details,apostille,customer WHERE customer.c_id=apostille.c_id AND details.service_id=apostille.a_id AND details.service_type=17 AND (details.r_f_date IS NOT NULL OR details.status_id=22)  AND details.deleted=0 and apostille.deleted=0 and customer.deleted=0 AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y") `;

        getPaginateattesql = `SELECT COUNT(details.detail_id) as trows FROM details,apostille,customer WHERE customer.c_id=apostille.c_id AND details.service_id=apostille.a_id AND details.service_type=17 AND (details.r_f_date IS NOT NULL OR details.status_id=22)  AND details.deleted=0 and apostille.deleted=0 and customer.deleted=0 AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y")`;

        if (typeof data.code != "undefined" && data.code != 0) {
          getattesql += ` and apostille.a_code=${data.code}`;
          getPaginateattesql += ` and apostille.a_code=${data.code}`;
        }
        if (typeof data.country != "undefined" && data.country != 0) {
          getattesql += ` and a_country=${data.country}`;
          getPaginateattesql += ` and apostille.a_country=${data.country}`;
        }
        if (typeof data.branch_name != "undefined") {
          getattesql += ` and customer.branch_id=${data.branch_name}`;
          getPaginateattesql += ` and customer.branch_id=${data.branch_name}`;
        }
        if (response.type == 3) {
          getattesql += ` AND (customer.u_id=${data.u_id} or customer.foreign_branchuser=${data.u_id})`;
          getPaginateattesql += ` AND (customer.u_id=${data.u_id} or customer.foreign_branchuser=${data.u_id})`;
        }
      } else if (data.s_type == 20) {
        getattesql = `SELECT customer.*,details.*,translation.a_prefix,translation.a_name,(SELECT name FROM attributes WHERE attributes.attribute_id=details.status_id)as status_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =translation.a_code)as code,(SELECT name FROM attributes WHERE attributes.attribute_id  =translation.a_type)as type,(SELECT name FROM attributes WHERE attributes.attribute_id  =translation.a_country)as country,(SELECT c_prefix FROM customer WHERE customer.c_id=translation.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=translation.c_id) AS customer_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =details.d_c_id)as certificate,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname FROM details,translation,customer WHERE customer.c_id=translation.c_id AND details.service_id=translation.a_id AND details.service_type=20 AND (details.r_f_date IS NOT NULL OR details.status_id=22)  AND details.deleted=0 and translation.deleted=0 and customer.deleted=0 AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y") `;

        getPaginateattesql = `SELECT COUNT(details.detail_id) as trows FROM details,translation,customer WHERE customer.c_id=translation.c_id AND details.service_id=translation.a_id AND details.service_type=20 AND (details.r_f_date IS NOT NULL OR details.status_id=22)  AND details.deleted=0 and translation.deleted=0 and customer.deleted=0 AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y") `;

        if (typeof data.code != "undefined" && data.code != 0) {
          getattesql += ` and translation.a_code=${data.code}`;
          getPaginateattesql += ` and translation.a_code=${data.code}`;
        }
        if (typeof data.country != "undefined" && data.country != 0) {
          getattesql += ` and translation.a_country=${data.country}`;
          getPaginateattesql += ` and translation.a_country=${data.country}`;
        }
        if (typeof data.branch_name != "undefined") {
          getattesql += ` and customer.branch_id=${data.branch_name}`;
          getPaginateattesql += ` and customer.branch_id=${data.branch_name}`;
        }
        if (response.type == 3) {
          getattesql += ` AND (customer.u_id=${data.u_id} or customer.foreign_branchuser=${data.u_id})`;
          getPaginateattesql += ` AND (customer.u_id=${data.u_id} or customer.foreign_branchuser=${data.u_id})`;
        }
      } else {
        getattesql = `SELECT customer.*,details.*,attestation.a_prefix,attestation.a_name,(SELECT name FROM attributes WHERE attributes.attribute_id=details.status_id)as status_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =attestation.a_code)as code,(SELECT name FROM attributes WHERE attributes.attribute_id  =attestation.a_type)as type,(SELECT name FROM attributes WHERE attributes.attribute_id  =attestation.a_country)as country,(SELECT c_prefix FROM customer WHERE customer.c_id=attestation.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=attestation.c_id) AS customer_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =details.d_c_id)as certificate,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname FROM details,attestation,customer WHERE customer.c_id=attestation.c_id AND details.service_id=attestation.a_id AND details.service_type=10 AND (details.r_f_date IS NOT NULL OR details.status_id=22)  AND details.deleted=0 and attestation.deleted=0 and customer.deleted=0 and STR_TO_DATE(details.r_f_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y") `;

        getPaginateattesql = `SELECT COUNT(*) as trows FROM ( SELECT details.detail_id FROM details,attestation,customer WHERE customer.c_id=attestation.c_id AND details.service_id=attestation.a_id AND details.service_type=10 AND (details.r_f_date IS NOT NULL OR details.status_id=22)  AND details.deleted=0 and attestation.deleted=0 and customer.deleted=0 and STR_TO_DATE(details.r_f_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y")`;
        if (typeof data.code != "undefined" && data.code != 0) {
          getattesql += ` and attestation.a_code=${data.code}`;
          getPaginateattesql += ` and attestation.a_code=${data.code}`;
        }
        if (typeof data.country != "undefined" && data.country != 0) {
          getattesql += ` and attestation.a_country=${data.country}`;
          getPaginateattesql += ` and attestation.a_country=${data.country}`;
        }
        if (typeof data.branch_name != "undefined") {
          getattesql += ` and customer.branch_id=${data.branch_name}`;
          getPaginateattesql += ` and customer.branch_id=${data.branch_name}`;
        }
        if (response.type == 3) {
          getattesql += ` AND (customer.u_id=${data.u_id} or customer.foreign_branchuser=${data.u_id})`;
          getPaginateattesql += ` AND (customer.u_id=${data.u_id} or customer.foreign_branchuser=${data.u_id})`;
        }
        getattesql += ` UNION SELECT customer.*,details.*,visa.v_prefix as a_prefix,visa.v_name as a_name,(SELECT name FROM attributes WHERE attributes.attribute_id=details.status_id)as status_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =visa.v_code)as code,(SELECT name FROM attributes WHERE attributes.attribute_id  =visa.v_type)as type,(SELECT name FROM attributes WHERE attributes.attribute_id  =details.d_c_id)as country,(SELECT c_prefix FROM customer WHERE customer.c_id=visa.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=visa.c_id) AS customer_name,(SELECT GROUP_CONCAT(attributes.name SEPARATOR ',') as name FROM attributes where FIND_IN_SET (attributes.attribute_id , visa.v_supporting_doc)) as certificate,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname FROM details,visa,customer WHERE customer.c_id=visa.c_id AND details.service_id=visa.v_id AND details.service_type=8 AND (details.r_f_date IS NOT NULL OR details.status_id=22)  AND details.deleted=0 and visa.deleted=0 and customer.deleted=0 AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y") `;

        getPaginateattesql += ` UNION SELECT details.detail_id FROM details,visa,customer WHERE customer.c_id=visa.c_id AND details.service_id=visa.v_id AND details.service_type=8 AND (details.r_f_date IS NOT NULL OR details.status_id=22) AND details.deleted=0 and visa.deleted=0 and customer.deleted=0 AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y") `;

        if (typeof data.code != "undefined" && data.code != 0) {
          getattesql += ` and visa.v_code=${data.code}`;
          getPaginateattesql += ` and visa.v_code=${data.code}`;
        }
        if (typeof data.country != "undefined" && data.country != 0) {
          getattesql += ` and details.d_c_id=${data.country}`;
          getPaginateattesql += ` and details.d_c_id=${data.country}`;
        }
        if (typeof data.branch_name != "undefined") {
          getattesql += ` and customer.branch_id=${data.branch_name}`;
          getPaginateattesql += ` and customer.branch_id=${data.branch_name}`;
        }
        if (response.type == 3) {
          getattesql += ` AND (customer.u_id=${data.u_id} or customer.foreign_branchuser=${data.u_id})`;
          getPaginateattesql += ` AND (customer.u_id=${data.u_id} or customer.foreign_branchuser=${data.u_id})`;
        }
        getattesql += ` UNION SELECT customer.*,details.*,apostille.a_prefix,apostille.a_name,(SELECT name FROM attributes WHERE attributes.attribute_id=details.status_id)as status_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =apostille.a_code)as code,(SELECT name FROM attributes WHERE attributes.attribute_id  =apostille.a_type)as type,(SELECT name FROM attributes WHERE attributes.attribute_id  =apostille.a_country)as country,(SELECT c_prefix FROM customer WHERE customer.c_id=apostille.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=apostille.c_id) AS customer_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =details.d_c_id)as certificate,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname FROM details,apostille,customer WHERE customer.c_id=apostille.c_id AND details.service_id=apostille.a_id AND details.service_type=17 AND (details.r_f_date IS NOT NULL OR details.status_id=22)  AND details.deleted=0 and apostille.deleted=0 and customer.deleted=0 AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y") `;

        getPaginateattesql += ` UNION SELECT details.detail_id FROM details,apostille,customer WHERE customer.c_id=apostille.c_id AND details.service_id=apostille.a_id AND details.service_type=17 AND (details.r_f_date IS NOT NULL OR details.status_id=22)  AND details.deleted=0 and apostille.deleted=0 and customer.deleted=0 AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y")`;

        if (typeof data.code != "undefined" && data.code != 0) {
          getattesql += ` and apostille.a_code=${data.code}`;
          getPaginateattesql += ` and apostille.a_code=${data.code}`;
        }
        if (typeof data.country != "undefined" && data.country != 0) {
          getattesql += ` and apostille.a_country=${data.country}`;
          getPaginateattesql += ` and apostille.a_country=${data.country}`;
        }
        if (typeof data.branch_name != "undefined") {
          getattesql += ` and customer.branch_id=${data.branch_name}`;
          getPaginateattesql += ` and customer.branch_id=${data.branch_name}`;
        }
        if (response.type == 3) {
          getattesql += ` AND (customer.u_id=${data.u_id} or customer.foreign_branchuser=${data.u_id})`;
          getPaginateattesql += ` AND (customer.u_id=${data.u_id} or customer.foreign_branchuser=${data.u_id})`;
        }
        getattesql += ` UNION SELECT customer.*,details.*,translation.a_prefix,translation.a_name,(SELECT name FROM attributes WHERE attributes.attribute_id=details.status_id)as status_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =translation.a_code)as code,(SELECT name FROM attributes WHERE attributes.attribute_id  =translation.a_type)as type,(SELECT name FROM attributes WHERE attributes.attribute_id  =translation.a_country)as country,(SELECT c_prefix FROM customer WHERE customer.c_id=translation.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=translation.c_id) AS customer_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =details.d_c_id)as certificate,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname FROM details,translation,customer WHERE customer.c_id=translation.c_id AND details.service_id=translation.a_id AND details.service_type=20 AND (details.r_f_date IS NOT NULL OR details.status_id=22)  AND details.deleted=0 and translation.deleted=0 and customer.deleted=0 AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y") `;

        getPaginateattesql += ` UNION SELECT details.detail_id FROM details,translation,customer WHERE customer.c_id=translation.c_id AND details.service_id=translation.a_id AND details.service_type=20 AND (details.r_f_date IS NOT NULL OR details.status_id=22)  AND details.deleted=0 and translation.deleted=0 and customer.deleted=0 AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y") `;

        if (typeof data.code != "undefined" && data.code != 0) {
          getattesql += ` and translation.a_code=${data.code}`;
          getPaginateattesql += ` and translation.a_code=${data.code}`;
        }
        if (typeof data.country != "undefined" && data.country != 0) {
          getattesql += ` and translation.a_country=${data.country}`;
          getPaginateattesql += ` and translation.a_country=${data.country}`;
        }
        if (typeof data.branch_name != "undefined") {
          getattesql += ` and customer.branch_id=${data.branch_name}`;
          getPaginateattesql += ` and customer.branch_id=${data.branch_name}`;
        }
        if (response.type == 3) {
          getattesql += ` AND (customer.u_id=${data.u_id} or customer.foreign_branchuser=${data.u_id})`;
          getPaginateattesql += ` AND (customer.u_id=${data.u_id} or customer.foreign_branchuser=${data.u_id}))`;
        }
        getPaginateattesql += ` ) trows`;
      }
    }
    console.log(getPaginateattesql, "getPaginateattesqlgetPaginateattesql");
    // console.log(getattesql,"getPaginateattesqlgetPaginateattesql");
    getattesql += ` limit ${(data.page - 1) * data.perpage},${data.perpage}`;

    let resp = await new Promise((resolve, reject) => {
      con.query(getPaginateattesql, function (err1, lres1) {
        if (err1) {
          console.log(err1);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (lres1.length > 0) {
            resolve({
              status: 1,
              t_rows: lres1[0].trows,
            });
          } else {
            resolve({
              status: 0,
              data: [],
            });
          }
        }
      });
    });

    let response1 = await new Promise((resolve, reject) => {
      con.query(getattesql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              data: result,
              t_rows: resp.t_rows,
            });
          } else {
            resolve({
              status: 1,
              data: [],
            });
          }
        }
      });
    });
    return response1;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function generateallhistoryrdeliveryreport(data) {
  try {
    let record = [];
    getuserquery = `select * from users where u_id=${data.u_id} and deleted=0`;
    let response = await new Promise((resolve, reject) => {
      con.query(getuserquery, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            if (result[0].user_type == 1) {
              getallchilduser = `select * from users where (p_u_id=${data.u_id} and branch_id=${result[0].user_type}) and deleted=0`;

              con.query(getallchilduser, function (err, res) {
                if (err) {
                  console.log(err);
                  resolve({ status: 0, message: "Something went to wrong" });
                } else {
                  res.forEach(function (r) {
                    record.push(r.u_id);
                  });
                  record.push(data.u_id);
                  resolve({
                    record: record,
                    type: result[0].user_type,
                  });
                }
              });
            } else {
              resolve({
                type: result[0].user_type,
              });
            }
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    let getattesql = "";
    let getPaginateattesql = "";
    if (response.type == 1) {
      if (data.s_type == 10) {
        getattesql = `SELECT customer.*,details.*,attestation.a_prefix,attestation.a_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =attestation.a_code)as code,(SELECT name FROM attributes WHERE attributes.attribute_id  =attestation.a_type)as type,(SELECT name FROM attributes WHERE attributes.attribute_id  =attestation.a_country)as country,(SELECT c_prefix FROM customer WHERE customer.c_id=attestation.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=attestation.c_id) AS customer_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =details.d_c_id)as certificate,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname  FROM details,attestation,customer WHERE customer.c_id=attestation.c_id AND details.service_id=attestation.a_id AND details.service_type=10 AND (details.r_f_date IS NOT NULL OR details.status_id=22) AND 
        STR_TO_DATE(details.r_f_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y") and (customer.foreign_branch = ${data.branch_id} OR customer.branch_id = ${data.branch_id}) and details.deleted=0 and attestation.deleted=0 and customer.is_block = 1 and customer.is_cancel=0 and customer.deleted=0 `;

        if (typeof data.code != "undefined" && data.code != 0) {
          getattesql += ` and attestation.a_code=${data.code}`;
        }
        if (typeof data.country != "undefined" && data.country != 0) {
          getattesql += ` and attestation.a_country=${data.country}`;
        }
      } else if (data.s_type == 8) {
        getattesql = `SELECT customer.*,details.*,visa.v_prefix as a_prefix,visa.v_name as a_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =visa.v_code)as code,(SELECT name FROM attributes WHERE attributes.attribute_id  =visa.v_type)as type,(SELECT name FROM attributes WHERE attributes.attribute_id  =details.d_c_id)as country,(SELECT c_prefix FROM customer WHERE customer.c_id=visa.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=visa.c_id) AS customer_name,(SELECT GROUP_CONCAT(attributes.name SEPARATOR ',') as name FROM attributes where FIND_IN_SET (attributes.attribute_id , visa.v_supporting_doc)) as certificate,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname  FROM details,visa,customer WHERE customer.c_id=visa.c_id AND details.service_id=visa.v_id AND details.service_type=8 AND (details.r_f_date IS NOT NULL OR details.status_id=22)  AND details.deleted=0 and visa.deleted=0 and customer.deleted=0 AND customer.is_block = 1 and customer.is_cancel=0 and STR_TO_DATE(details.r_f_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y") and (customer.foreign_branch = ${data.branch_id} OR customer.branch_id = ${data.branch_id})`;

        if (typeof data.code != "undefined" && data.code != 0) {
          getattesql += ` and visa.v_code=${data.code}`;
        }
        if (typeof data.country != "undefined" && data.country != 0) {
          getattesql += ` and details.d_c_id=${data.country}`;
        }
      } else if (data.s_type == 17) {
        getattesql = `SELECT customer.*,details.*,apostille.a_prefix,apostille.a_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =apostille.a_code)as code,(SELECT name FROM attributes WHERE attributes.attribute_id  =apostille.a_type)as type,(SELECT name FROM attributes WHERE attributes.attribute_id  =apostille.a_country)as country,(SELECT c_prefix FROM customer WHERE customer.c_id=apostille.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=apostille.c_id) AS customer_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =details.d_c_id)as certificate,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname  FROM details,apostille,customer WHERE customer.c_id=apostille.c_id AND details.service_id=apostille.a_id AND details.service_type=17 AND (details.r_f_date IS NOT NULL OR details.status_id=22)  AND details.deleted=0 and apostille.deleted=0 and customer.is_block = 1 and  customer.is_cancel=0 and customer.deleted=0 AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y") and (customer.foreign_branch = ${data.branch_id} OR customer.branch_id = ${data.branch_id})`;

        if (typeof data.code != "undefined" && data.code != 0) {
          getattesql += ` and apostille.a_code=${data.code}`;
        }
        if (typeof data.country != "undefined" && data.country != 0) {
          getattesql += ` and apostille.a_country=${data.country}`;
        }
      } else if (data.s_type == 20) {
        getattesql = `SELECT customer.*,details.*,translation.a_prefix,translation.a_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =translation.a_code)as code,(SELECT name FROM attributes WHERE attributes.attribute_id  =translation.a_type)as type,(SELECT name FROM attributes WHERE attributes.attribute_id  =translation.a_country)as country,(SELECT c_prefix FROM customer WHERE customer.c_id=translation.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=translation.c_id) AS customer_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =details.d_c_id)as certificate,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname  FROM details,translation,customer WHERE customer.c_id=translation.c_id AND details.service_id=translation.a_id AND details.service_type=20 AND (details.r_f_date IS NOT NULL OR details.status_id=22)  AND details.deleted=0 and translation.deleted=0 and customer.is_block = 1 and  customer.is_cancel=0 and customer.deleted=0 AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y") and (customer.foreign_branch = ${data.branch_id} OR customer.branch_id = ${data.branch_id}) `;

        if (typeof data.code != "undefined" && data.code != 0) {
          getattesql += ` and translation.a_code=${data.code}`;
          getPaginateattesql += ` and translation.a_code=${data.code}`;
        }
        if (typeof data.country != "undefined" && data.country != 0) {
          getattesql += ` and translation.a_country=${data.country}`;
          getPaginateattesql += ` and translation.a_country=${data.country}`;
        }
      } else {
        getattesql = `SELECT customer.*,details.*,attestation.a_prefix,attestation.a_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =attestation.a_code)as code,(SELECT name FROM attributes WHERE attributes.attribute_id  =attestation.a_type)as type,(SELECT name FROM attributes WHERE attributes.attribute_id  =attestation.a_country)as country,(SELECT c_prefix FROM customer WHERE customer.c_id=attestation.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=attestation.c_id) AS customer_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =details.d_c_id)as certificate,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname  FROM details,attestation,customer WHERE customer.c_id=attestation.c_id AND details.service_id=attestation.a_id AND details.service_type=10 AND (details.r_f_date IS NOT NULL OR details.status_id=22)  AND
        STR_TO_DATE(details.r_f_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y") and (customer.foreign_branch = ${data.branch_id} OR customer.branch_id = ${data.branch_id}) and details.deleted=0 and attestation.deleted=0 and customer.deleted=0  and customer.is_block = 1 and customer.is_cancel=0 `;

        if (typeof data.code != "undefined" && data.code != 0) {
          getattesql += ` and attestation.a_code=${data.code}`;
        }
        if (typeof data.country != "undefined" && data.country != 0) {
          getattesql += ` and attestation.a_country=${data.country}`;
        }
        getattesql += ` UNION SELECT customer.*,details.*,visa.v_prefix as a_prefix,visa.v_name as a_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =visa.v_code)as code,(SELECT name FROM attributes WHERE attributes.attribute_id  =visa.v_type)as type,(SELECT name FROM attributes WHERE attributes.attribute_id  =details.d_c_id)as country,(SELECT c_prefix FROM customer WHERE customer.c_id=visa.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=visa.c_id) AS customer_name,(SELECT GROUP_CONCAT(attributes.name SEPARATOR ',') as name FROM attributes where FIND_IN_SET (attributes.attribute_id , visa.v_supporting_doc)) as certificate,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname  FROM details,visa,customer WHERE customer.c_id=visa.c_id AND details.service_id=visa.v_id AND details.service_type=8 AND (details.r_f_date IS NOT NULL OR details.status_id=22)  AND details.deleted=0 and visa.deleted=0 and customer.deleted=0 AND customer.is_block = 1 and  customer.is_cancel=0 and STR_TO_DATE(details.r_f_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y") and (customer.foreign_branch = ${data.branch_id} OR customer.branch_id = ${data.branch_id}) `;

        if (typeof data.code != "undefined" && data.code != 0) {
          getattesql += ` and visa.v_code=${data.code}`;
        }
        if (typeof data.country != "undefined" && data.country != 0) {
          getattesql += ` and details.d_c_id=${data.country}`;
        }
        getattesql += ` UNION SELECT customer.*,details.*,apostille.a_prefix,apostille.a_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =apostille.a_code)as code,(SELECT name FROM attributes WHERE attributes.attribute_id  =apostille.a_type)as type,(SELECT name FROM attributes WHERE attributes.attribute_id  =apostille.a_country)as country,(SELECT c_prefix FROM customer WHERE customer.c_id=apostille.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=apostille.c_id) AS customer_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =details.d_c_id)as certificate,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname  FROM details,apostille,customer WHERE customer.c_id=apostille.c_id AND details.service_id=apostille.a_id AND details.service_type=17 AND (details.r_f_date IS NOT NULL OR details.status_id=22)  AND details.deleted=0 and apostille.deleted=0 and customer.deleted=0  AND customer.is_block = 1 and  customer.is_cancel=0 and STR_TO_DATE(details.r_f_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y") and (customer.foreign_branch = ${data.branch_id} OR customer.branch_id = ${data.branch_id})`;

        if (typeof data.code != "undefined" && data.code != 0) {
          getattesql += ` and apostille.a_code=${data.code}`;
        }
        if (typeof data.country != "undefined" && data.country != 0) {
          getattesql += ` and apostille.a_country=${data.country}`;
        }
        getattesql += ` UNION SELECT customer.*,details.*,translation.a_prefix,translation.a_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =translation.a_code)as code,(SELECT name FROM attributes WHERE attributes.attribute_id  =translation.a_type)as type,(SELECT name FROM attributes WHERE attributes.attribute_id  =translation.a_country)as country,(SELECT c_prefix FROM customer WHERE customer.c_id=translation.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=translation.c_id) AS customer_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =details.d_c_id)as certificate,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname  FROM details,translation,customer WHERE customer.c_id=translation.c_id AND details.service_id=translation.a_id AND details.service_type=20 AND (details.r_f_date IS NOT NULL OR details.status_id=22)  AND details.deleted=0 and translation.deleted=0 and customer.deleted=0 AND customer.is_block = 1 and customer.is_cancel=0 and STR_TO_DATE(details.r_f_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y") and (customer.foreign_branch = ${data.branch_id} OR customer.branch_id = ${data.branch_id}) `;

        if (typeof data.code != "undefined" && data.code != 0) {
          getattesql += ` and translation.a_code=${data.code}`;
        }
        if (typeof data.country != "undefined" && data.country != 0) {
          getattesql += ` and translation.a_country=${data.country}`;
        }
      }
    } else {
      if (data.s_type == 10) {
        getattesql = `SELECT customer.*,details.*,attestation.a_prefix,attestation.a_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =attestation.a_code)as code,(SELECT name FROM attributes WHERE attributes.attribute_id  =attestation.a_type)as type,(SELECT name FROM attributes WHERE attributes.attribute_id  =attestation.a_country)as country,(SELECT c_prefix FROM customer WHERE customer.c_id=attestation.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=attestation.c_id) AS customer_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =details.d_c_id)as certificate,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname FROM details,attestation,customer WHERE customer.c_id=attestation.c_id AND details.service_id=attestation.a_id AND details.service_type=10 AND (details.r_f_date IS NOT NULL OR details.status_id=22)  AND details.deleted=0 and attestation.deleted=0 and customer.deleted=0 and customer.is_block = 1 and  customer.is_cancel=0 and STR_TO_DATE(details.r_f_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y") `;

        if (typeof data.code != "undefined" && data.code != 0) {
          getattesql += ` and attestation.a_code=${data.code}`;
        }
        if (typeof data.country != "undefined" && data.country != 0) {
          getattesql += ` and attestation.a_country=${data.country}`;
        }
        if (typeof data.branch_name != "undefined") {
          getattesql += ` and customer.branch_id=${data.branch_name}`;
        }
        if (response.type == 3) {
          getattesql += ` AND (customer.u_id=${data.u_id} or customer.foreign_branchuser=${data.u_id})`;
        }
      } else if (data.s_type == 8) {
        getattesql = `SELECT customer.*,details.*,visa.v_prefix as a_prefix,visa.v_name as a_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =visa.v_code)as code,(SELECT name FROM attributes WHERE attributes.attribute_id  =visa.v_type)as type,(SELECT name FROM attributes WHERE attributes.attribute_id  =details.d_c_id)as country,(SELECT c_prefix FROM customer WHERE customer.c_id=visa.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=visa.c_id) AS customer_name,(SELECT GROUP_CONCAT(attributes.name SEPARATOR ',') as name FROM attributes where FIND_IN_SET (attributes.attribute_id , visa.v_supporting_doc)) as certificate,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname FROM details,visa,customer WHERE customer.c_id=visa.c_id AND details.service_id=visa.v_id AND details.service_type=8 AND (details.r_f_date IS NOT NULL OR details.status_id=22)  AND details.deleted=0 and visa.deleted=0 and customer.deleted=0 AND customer.is_block = 1 and customer.is_cancel=0 and STR_TO_DATE(details.r_f_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y") `;

        if (typeof data.code != "undefined" && data.code != 0) {
          getattesql += ` and visa.v_code=${data.code}`;
        }
        if (typeof data.country != "undefined" && data.country != 0) {
          getattesql += ` and details.d_c_id=${data.country}`;
        }
        if (typeof data.branch_name != "undefined") {
          getattesql += ` and customer.branch_id=${data.branch_name}`;
        }
        if (response.type == 3) {
          getattesql += ` AND (customer.u_id=${data.u_id} or customer.foreign_branchuser=${data.u_id})`;
        }
      } else if (data.s_type == 17) {
        getattesql = `SELECT customer.*,details.*,apostille.a_prefix,apostille.a_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =apostille.a_code)as code,(SELECT name FROM attributes WHERE attributes.attribute_id  =apostille.a_type)as type,(SELECT name FROM attributes WHERE attributes.attribute_id  =apostille.a_country)as country,(SELECT c_prefix FROM customer WHERE customer.c_id=apostille.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=apostille.c_id) AS customer_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =details.d_c_id)as certificate,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname FROM details,apostille,customer WHERE customer.c_id=apostille.c_id AND details.service_id=apostille.a_id AND details.service_type=17 AND (details.r_f_date IS NOT NULL OR details.status_id=22)  AND details.deleted=0 and apostille.deleted=0 and customer.deleted=0 AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y")`;

        if (typeof data.code != "undefined" && data.code != 0) {
          getattesql += ` and apostille.a_code=${data.code}`;
        }
        if (typeof data.country != "undefined" && data.country != 0) {
          getattesql += ` and a_country=${data.country}`;
        }
        if (typeof data.branch_name != "undefined") {
          getattesql += ` and customer.branch_id=${data.branch_name}`;
        }
        if (response.type == 3) {
          getattesql += ` AND (customer.u_id=${data.u_id} or customer.foreign_branchuser=${data.u_id})`;
        }
      } else if (data.s_type == 20) {
        getattesql = `SELECT customer.*,details.*,translation.a_prefix,translation.a_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =translation.a_code)as code,(SELECT name FROM attributes WHERE attributes.attribute_id  =translation.a_type)as type,(SELECT name FROM attributes WHERE attributes.attribute_id  =translation.a_country)as country,(SELECT c_prefix FROM customer WHERE customer.c_id=translation.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=translation.c_id) AS customer_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =details.d_c_id)as certificate,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname FROM details,translation,customer WHERE customer.c_id=translation.c_id AND details.service_id=translation.a_id AND details.service_type=20 AND (details.r_f_date IS NOT NULL OR details.status_id=22) AND details.deleted=0 and translation.deleted=0 and customer.deleted=0 AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y") `;

        if (typeof data.code != "undefined" && data.code != 0) {
          getattesql += ` and translation.a_code=${data.code}`;
        }
        if (typeof data.country != "undefined" && data.country != 0) {
          getattesql += ` and translation.a_country=${data.country}`;
        }
        if (typeof data.branch_name != "undefined") {
          getattesql += ` and customer.branch_id=${data.branch_name}`;
        }
        if (response.type == 3) {
          getattesql += ` AND (customer.u_id=${data.u_id} or customer.foreign_branchuser=${data.u_id})`;
        }
      } else {
        getattesql = `SELECT customer.*,details.*,attestation.a_prefix,attestation.a_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =attestation.a_code)as code,(SELECT name FROM attributes WHERE attributes.attribute_id  =attestation.a_type)as type,(SELECT name FROM attributes WHERE attributes.attribute_id  =attestation.a_country)as country,(SELECT c_prefix FROM customer WHERE customer.c_id=attestation.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=attestation.c_id) AS customer_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =details.d_c_id)as certificate,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname FROM details,attestation,customer WHERE customer.c_id=attestation.c_id AND details.service_id=attestation.a_id AND details.service_type=10 AND (details.r_f_date IS NOT NULL OR details.status_id=22)  AND details.deleted=0 and attestation.deleted=0 and customer.deleted=0 and STR_TO_DATE(details.r_f_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y") `;

        if (typeof data.code != "undefined" && data.code != 0) {
          getattesql += ` and attestation.a_code=${data.code}`;
        }
        if (typeof data.country != "undefined" && data.country != 0) {
          getattesql += ` and attestation.a_country=${data.country}`;
        }
        if (typeof data.branch_name != "undefined") {
          getattesql += ` and customer.branch_id=${data.branch_name}`;
        }
        if (response.type == 3) {
          getattesql += ` AND (customer.u_id=${data.u_id} or customer.foreign_branchuser=${data.u_id})`;
        }
        getattesql += ` UNION SELECT customer.*,details.*,visa.v_prefix as a_prefix,visa.v_name as a_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =visa.v_code)as code,(SELECT name FROM attributes WHERE attributes.attribute_id  =visa.v_type)as type,(SELECT name FROM attributes WHERE attributes.attribute_id  =details.d_c_id)as country,(SELECT c_prefix FROM customer WHERE customer.c_id=visa.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=visa.c_id) AS customer_name,(SELECT GROUP_CONCAT(attributes.name SEPARATOR ',') as name FROM attributes where FIND_IN_SET (attributes.attribute_id , visa.v_supporting_doc)) as certificate,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname FROM details,visa,customer WHERE customer.c_id=visa.c_id AND details.service_id=visa.v_id AND details.service_type=8 AND (details.r_f_date IS NOT NULL OR details.status_id=22)  AND details.deleted=0 and visa.deleted=0 and customer.deleted=0 AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y") `;

        if (typeof data.code != "undefined" && data.code != 0) {
          getattesql += ` and visa.v_code=${data.code}`;
        }
        if (typeof data.country != "undefined" && data.country != 0) {
          getattesql += ` and details.d_c_id=${data.country}`;
        }
        if (typeof data.branch_name != "undefined") {
          getattesql += ` and customer.branch_id=${data.branch_name}`;
        }
        if (response.type == 3) {
          getattesql += ` AND (customer.u_id=${data.u_id} or customer.foreign_branchuser=${data.u_id})`;
        }
        getattesql += ` UNION SELECT customer.*,details.*,apostille.a_prefix,apostille.a_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =apostille.a_code)as code,(SELECT name FROM attributes WHERE attributes.attribute_id  =apostille.a_type)as type,(SELECT name FROM attributes WHERE attributes.attribute_id  =apostille.a_country)as country,(SELECT c_prefix FROM customer WHERE customer.c_id=apostille.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=apostille.c_id) AS customer_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =details.d_c_id)as certificate,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname FROM details,apostille,customer WHERE customer.c_id=apostille.c_id AND details.service_id=apostille.a_id AND details.service_type=17 AND (details.r_f_date IS NOT NULL OR details.status_id=22)  AND details.deleted=0 and apostille.deleted=0 and customer.deleted=0 AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y")`;

        if (typeof data.code != "undefined" && data.code != 0) {
          getattesql += ` and apostille.a_code=${data.code}`;
        }
        if (typeof data.country != "undefined" && data.country != 0) {
          getattesql += ` and apostille.a_country=${data.country}`;
        }
        if (typeof data.branch_name != "undefined") {
          getattesql += ` and customer.branch_id=${data.branch_name}`;
        }
        if (response.type == 3) {
          getattesql += ` AND (customer.u_id=${data.u_id} or customer.foreign_branchuser=${data.u_id})`;
        }
        getattesql += ` UNION SELECT customer.*,details.*,translation.a_prefix,translation.a_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =translation.a_code)as code,(SELECT name FROM attributes WHERE attributes.attribute_id  =translation.a_type)as type,(SELECT name FROM attributes WHERE attributes.attribute_id  =translation.a_country)as country,(SELECT c_prefix FROM customer WHERE customer.c_id=translation.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=translation.c_id) AS customer_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =details.d_c_id)as certificate,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname FROM details,translation,customer WHERE customer.c_id=translation.c_id AND details.service_id=translation.a_id AND details.service_type=20 AND (details.r_f_date IS NOT NULL OR details.status_id=22)  AND details.deleted=0 and translation.deleted=0 and customer.deleted=0 AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(details.r_f_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y") `;

        if (typeof data.code != "undefined" && data.code != 0) {
          getattesql += ` and translation.a_code=${data.code}`;
        }
        if (typeof data.country != "undefined" && data.country != 0) {
          getattesql += ` and translation.a_country=${data.country}`;
        }
        if (typeof data.branch_name != "undefined") {
          getattesql += ` and customer.branch_id=${data.branch_name}`;
        }
        if (response.type == 3) {
          getattesql += ` AND (customer.u_id=${data.u_id} or customer.foreign_branchuser=${data.u_id})`;
        }
      }
    }

    let response1 = await new Promise((resolve, reject) => {
      con.query(getattesql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              data: result,
            });
          } else {
            resolve({
              status: 1,
              data: [],
            });
          }
        }
      });
    });
    return response1;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

//0703
async function sendrefundmail(data) {
  //08-07
  try {
    let response = await new Promise(async (resolve, reject) => {
      let result = await getRefundById(data);
      console.log("result", result);
      let imageAsBase64;
      if (
        fs.existsSync(
          `./public/Assets/images/${result.userdata.u_id == 1 ? "adminlogo" : "branchlogo"
          }/${result.settingdata.logo}`
        )
      ) {
        imageAsBase64 = fs.readFileSync(
          `./public/Assets/images/${result.userdata.u_id == 1 ? "adminlogo" : "branchlogo"
          }/${result.settingdata.logo}`,
          { encoding: "base64" }
        );
      }
      let signatureAsBase64;
      if (
        fs.existsSync(
          `./public/Assets/images/invoicesignature/${result.data.invoice_signature}`
        )
      ) {
        signatureAsBase64 = fs.readFileSync(
          `./public/Assets/images/invoicesignature/${result.data.invoice_signature}`,
          { encoding: "base64" }
        );
      }
      pdf
        .create(refundReceipt(result, imageAsBase64, signatureAsBase64), {
          childProcessOptions: {
            env: {
              OPENSSL_CONF: "/dev/null",
            },
          },
        })
        .toFile(
          `${__dirname}/public/Assets/refund_receipt/refund_receipt_${result.data.receipt_no}.pdf`,
          (err) => {
            if (err) {
              return console.log("error");
            }
            resolve({
              ino: result.data.receipt_no,
            });
          }
        );
      let senderMailSetting = await sendmessage.getEmailSetting(data.login_id);

      sqlll = `SELECT u_email FROM users WHERE u_id = ${data.login_id} `;
      let ccmail = await new Promise((resolve, reject) => {
        con.query(sqlll, async function (err1, result1) {
          if (err1) {
            resolve({ status: 0, message: "Something went to wrong" });
          }
          if (result1.length > 0) {
            resolve({ status: 1, result: result1[0].u_email });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        });
      });

      let message = await sendmessage.getTemplate(5);
      if (message.status != 0) {
        message.template = message.template.replace(
          "{:name:}",
          result.data.c_prefix + "" + result.data.c_name
        );
        let mess =
          (message.header == 1
            ? typeof senderMailSetting.email_template_header !=
              undefined && senderMailSetting.email_template_header != undefined &&
              senderMailSetting.email_template_header != null
              ? senderMailSetting.email_template_header
              : ""
            : "") +
          message.template +
          (message.b_d_id != 0
            ? message.b_d_id == 1
              ? senderMailSetting.gst_bankdetails
              : message.b_d_id == 2
                ? senderMailSetting.ngst_bankdetails
                : message.b_d_id == 3
                  ? senderMailSetting.general_bankdetails
                  : ""
            : "") +
          // (result.userdata.u_id == 1
          //   ? result.data.c_tax == 0
          //     ? result.settingdata.bank_details
          //     : result.settingdata.nongst_bank_details
          //   : result.data.c_tax == 0
          //     ? result.settingdata.b_bank_details
          //     : result.settingdata.b_nongst_bank_deatils) +
          (message.footer == 1 ? senderMailSetting.email_template_footer : "") +
          (message.signature == 1 ? senderMailSetting.email_signature : "");
        CCMailSetting = await sendmessage.getEmailSetting(1);
        let att = [];
        att.push({ url: `refund_receipt_${data.rec_no}.pdf` });
        let pathname = __dirname + "/public/Assets/refund_receipt";
        sendmessagenow = sendmessage.paymentrefundsend(
          //08-07
          senderMailSetting,
          result.data.c_email,
          mess,
          message.subject,
          att, //08-07
          // CCMailSetting.cc_email, //cc mail// CCMailSetting.e_username,
          ccmail.result, // reply mail
          1,
          pathname
        );
        sendmessagenow = sendmessage.paymentrefundsend(
          //08-07
          senderMailSetting,
          CCMailSetting.cc_email,
          mess,
          message.subject,
          att, //08-07
          // CCMailSetting.cc_email, //cc mail// CCMailSetting.e_username,
          ccmail.result, // reply mail
          1,
          pathname
        );
        resolve({
          status: 1,
          message: "Email Send Successfully",
        });
      }
    });

    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

//0703
async function sendpaymentmail(data) {
  try {
    let response = await new Promise(async (resolve, reject) => {
      let result = await getPaymentData(data);
      let imageAsBase64;
      if (
        fs.existsSync(
          `./public/Assets/images/${
          // result.user.u_id == 1 ||
          // (result.user.p_u_id == 1 && result.user.user_type == 3)
          //   ? "adminlogo"
          //   :
          "branchlogo"
          }/${result.settingdata.logo}`
        )
      ) {
        imageAsBase64 = fs.readFileSync(
          `./public/Assets/images/${
          // result.user.u_id == 1 ||
          // (result.user.p_u_id == 1 && result.user.user_type == 3)
          //   ? "adminlogo"
          //   :
          "branchlogo"
          }/${result.settingdata.logo}`,
          { encoding: "base64" }
        );
      }
      let signatureAsBase64;
      if (
        fs.existsSync(
          `./public/Assets/images/invoicesignature/${result.data.invoice_signature}`
        )
      ) {
        signatureAsBase64 = fs.readFileSync(
          `./public/Assets/images/invoicesignature/${result.data.invoice_signature}`,
          { encoding: "base64" }
        );
      }
      pdf
        .create(paymentReceipt(result, imageAsBase64, signatureAsBase64), {
          childProcessOptions: {
            env: {
              OPENSSL_CONF: "/dev/null",
            },
          },
        })
        .toFile(
          `${__dirname}/public/Assets/payment_receipt/payment_receipt_${result.data.p_receipt_no}.pdf`,
          (err) => {
            if (err) {
              return console.log("error");
            }
            resolve({
              ino: result.data.p_receipt_no,
            });
          }
        );
      let senderMailSetting = await sendmessage.getEmailSetting(data.u_id);

      sqlll = `SELECT u_email FROM users WHERE u_id = ${data.u_id} `;
      let ccmail = await new Promise((resolve, reject) => {
        con.query(sqlll, async function (err1, result1) {
          if (err1) {
            console.log(err1);
            resolve({ status: 0, message: "Something went to wrong" });
          } else {
            if (result1.length > 0) {
              resolve({ status: 1, result: result1[0].u_email });
            } else {
              resolve({
                status: 0,
                message: "Something went to wrong",
              });
            }
          }
        });
      });

      let message = await sendmessage.getTemplate(data.e_t_id);
      if (message.status != 0) {
        message.template = message.template.replace(
          "{:name:}",
          result.data.c_prefix + "" + result.data.c_name
        );
        let mess =
          (message.header == 1
            ? typeof senderMailSetting.email_template_header !=
              undefined && senderMailSetting.email_template_header != undefined &&
              senderMailSetting.email_template_header != null
              ? senderMailSetting.email_template_header
              : ""
            : "") +
          message.template +
          (message.b_d_id != 0
            ? message.b_d_id == 1
              ? senderMailSetting.gst_bankdetails
              : message.b_d_id == 2
                ? senderMailSetting.ngst_bankdetails
                : message.b_d_id == 3
                  ? senderMailSetting.general_bankdetails
                  : ""
            : "") +
          // (result.userdata.u_id == 1
          //   ? result.data.c_tax == 0
          //     ? result.settingdata.bank_details
          //     : result.settingdata.nongst_bank_details
          //   : result.data.c_tax == 0
          //     ? result.settingdata.b_bank_details
          //     : result.settingdata.b_nongst_bank_deatils) +
          (message.footer == 1 ? senderMailSetting.email_template_footer : "") +
          (message.signature == 1 ? senderMailSetting.email_signature : "");
        CCMailSetting = await sendmessage.getEmailSetting(1);
        let att = [];
        att.push({ url: `payment_receipt_${data.rec_no}.pdf` });
        let pathname = __dirname + "/public/Assets/payment_receipt";
        sendmessagenow = sendmessage.paymentrefundsend(
          //08-07
          senderMailSetting,
          result.data.c_email,
          mess,
          message.subject,
          att, //08-07
          // CCMailSetting.cc_email, //cc mail// CCMailSetting.e_username,
          ccmail.result, // reply mail
          1,
          pathname
        );
        sendmessagenow = sendmessage.paymentrefundsend(
          //08-07
          senderMailSetting,
          CCMailSetting.cc_email,
          mess,
          message.subject,
          att, //08-07
          // CCMailSetting.cc_email, //cc mail// CCMailSetting.e_username,
          ccmail.result, // reply mail
          1,
          pathname
        );
        resolve({
          status: 1,
          message: "Email Send Successfully",
        });
      }
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function leadReport(data) {
  try {
    let record = [];
    getuserquery = `select * from users where u_id=${data.u_id} and deleted=0`;
    let response = await new Promise((resolve, reject) => {
      con.query(getuserquery, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            if (result[0].user_type == 1) {
              getallchilduser = `select * from users where ((p_u_id=${data.u_id} OR p_u_id=1 OR p_u_id IN (SELECT users.u_id from users where users.branch_id= ${result[0].branch_id})) and branch_id=${result[0].branch_id}) and deleted=0`;
              con.query(getallchilduser, function (err, res) {
                if (err) {
                  console.log(err);
                  resolve({ status: 0, message: "Something went to wrong" });
                } else {
                  res.forEach(function (r) {
                    record.push(r.u_id);
                  });
                  record.push(data.u_id);
                  resolve({
                    record: record,
                    type: result[0].user_type,
                  });
                }
              });
            } else {
              resolve({
                type: result[0].user_type,
              });
            }
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    if (response.type == 1) {
      sql = `SELECT *,(SELECT u_name FROM users WHERE users.u_id=elead.l_created_by) AS created_name,(SELECT u_name FROM users WHERE users.u_id=elead.l_allocate_to) AS allocated_name FROM elead WHERE (elead.l_created_by IN(${record}) or elead.l_allocate_to IN(${record})) and elead.deleted=0`;
    } else {
      sql = `SELECT *,(SELECT u_name FROM users WHERE users.u_id=elead.l_created_by) AS created_name,(SELECT u_name FROM users WHERE users.u_id=elead.l_allocate_to) AS allocated_name FROM elead,users WHERE elead.deleted=0 AND users.u_id = elead.l_created_by`;
      if (response.type == 3) {
        sql += ` and (elead.l_created_by=${data.u_id} or elead.l_allocate_to=${data.u_id} OR users.marketing_parent_id =${data.u_id})`;
      }
    }
    if (typeof data.s_date != "undefined" && data.s_date != "") {
      sql += ` and STR_TO_DATE(l_date,"%d-%m-%Y")>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y")`;
    }
    if (typeof data.e_date != "undefined" && data.e_date != "") {
      sql += ` and STR_TO_DATE(l_date,"%d-%m-%Y")<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y")`;
    }
    if (
      typeof data.branch_name != "undefined" &&
      data.branch_name != "" &&
      data.branch_name != 0
    ) {
      sql += ` and l_branch_id=${data.branch_name}`;
    }
    if (
      typeof data.u_name != "undefined" &&
      data.u_name != "" &&
      data.u_name != 0
    ) {
      sql += ` and (l_created_by=${data.u_name} OR l_allocate_to=${data.u_name} )`;
    }
    if (
      typeof data.convert_status != "undefined" &&
      data.convert_status != ""
    ) {
      sql += ` and convert_status=${data.convert_status}`;
    }
    sql2 = sql;
    sql += ` limit ${(data.page - 1) * data.perpage},${data.perpage}`;
    let response1 = await new Promise(async (resolve, reject) => {
      con.query(sql2, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            con.query(sql, function (err, res) {
              if (res.length > 0) {
                resolve({
                  status: 1,
                  data: res,
                  adata: result,
                  t_rows: result.length,
                });
              }
            });
          } else {
            resolve({
              status: 1,
              data: [],
              adata: [],
              t_rows: 0,
            });
          }
        }
      });
    });
    return response1;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function leadCountReport(data) {
  try {
    let record = [];
    getuserquery = `select * from users where u_id=${data.u_id} and deleted=0`;
    let response = await new Promise((resolve, reject) => {
      con.query(getuserquery, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            if (result[0].user_type == 1) {
              getallchilduser = `select * from users where ((p_u_id=${data.u_id} OR p_u_id=1 OR p_u_id IN (SELECT users.u_id  from users where users.branch_id= ${result[0].branch_id})) and branch_id=${result[0].branch_id}) and deleted=0`;
              con.query(getallchilduser, function (err, res) {
                if (err) {
                  console.log(err);
                  resolve({ status: 0, message: "Something went to wrong" });
                } else {
                  res.forEach(function (r) {
                    record.push(r.u_id);
                  });
                  record.push(data.u_id);
                  resolve({
                    record: record,
                    type: result[0].user_type,
                  });
                }
              });
            } else {
              resolve({
                type: result[0].user_type,
              });
            }
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    // if (response.type == 1) {
    //   sql = `SELECT COUNT(*) as tlead,convert_status FROM elead WHERE elead.l_created_by IN(${record})  and elead.deleted=0`;
    // } else {
    //   sql = `SELECT COUNT(*) as tlead,convert_status FROM elead,users WHERE elead.deleted=0 AND users.u_id = elead.l_created_by`;
    //   if (response.type == 3) {
    //     sql += ` and (elead.l_created_by=${data.u_id} OR elead.reference_id=${data.u_id} OR users.marketing_parent_id =${data.u_id})`;
    //   }
    // }
    // if (typeof data.s_date != "undefined" && data.s_date != "") {
    //   sql += ` and STR_TO_DATE(elead.l_date,"%d-%m-%Y")>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y")`;
    // }
    // if (typeof data.e_date != "undefined" && data.e_date != "") {
    //   sql += ` and STR_TO_DATE(elead.l_date,"%d-%m-%Y")<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y")`;
    // }
    let sql = "";
    let allData = "";
    if (response.type == 1) {
      sql = `SELECT COUNT(*) as tlead from elead left join customer on customer.l_id = elead.lead_id where elead.convert_status = 0 AND elead.l_created_by IN(${record})  and elead.deleted=0`;
      allData = `SELECT customer.tracking_id from customer left join elead on elead.lead_id =customer.l_id   where elead.l_created_by IN(${record}) and elead.convert_status=1 and elead.deleted=0 and customer.deleted = 0 and customer.is_cancel = 0 and customer.is_block =1`;
    } else {
      sql = `SELECT COUNT(*) as tlead FROM elead,users WHERE elead.convert_status = 0 AND elead.deleted=0 AND users.u_id = elead.l_created_by`;
      allData = `SELECT customer.tracking_id from customer left join elead on elead.lead_id =customer.l_id  left join users on users.u_id = elead.l_created_by where  elead.convert_status=1 and elead.deleted=0  and customer.deleted = 0 and customer.is_cancel = 0 and customer.is_block =1`;
      if (response.type == 3) {
        sql += ` and (elead.l_created_by=${data.u_id} OR elead.reference_id=${data.u_id} OR users.marketing_parent_id =${data.u_id})`;
        allData += ` and (elead.l_created_by=${data.u_id} OR elead.reference_id=${data.u_id} OR users.marketing_parent_id =${data.u_id})`;
      }
    }
    if (typeof data.s_date != "undefined" && data.s_date != "") {
      sql += ` and STR_TO_DATE(elead.l_date,"%d-%m-%Y")>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y")`;
      allData += ` and STR_TO_DATE(elead.l_date,"%d-%m-%Y")>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y")`;
    }
    if (typeof data.e_date != "undefined" && data.e_date != "") {
      sql += ` and STR_TO_DATE(elead.l_date,"%d-%m-%Y")<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y")`;
      allData += ` and STR_TO_DATE(elead.l_date,"%d-%m-%Y")<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y")`;
    }
    if (
      typeof data.branch_name != "undefined" &&
      data.branch_name != "" &&
      data.branch_name != 0
    ) {
      sql += ` and elead.l_branch_id=${data.branch_name}`;
      allData += ` and elead.l_branch_id=${data.branch_name}`;
    }
    if (
      typeof data.u_name != "undefined" &&
      data.u_name != "" &&
      data.u_name != 0
    ) {
      sql += ` and (elead.l_created_by=${data.u_name} OR elead.reference_id=${data.u_name})`;
      allData += ` and (elead.l_created_by=${data.u_name} OR elead.reference_id=${data.u_name})`;
    }
    // sql += ` GROUP by elead.convert_status`;
    allData += ` GROUP by elead.lead_id`;
    // console.log(sql, "sql");
    let resp = await new Promise((resolve, reject) => {
      con.query(allData, function (err, res) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (res.length > 0) {
            resolve({
              status: 1,
              data: res,
            });
          } else {
            resolve({
              status: 0,
              data: [],
            });
          }
        }
      });
    });

    let response1 = await new Promise(async (resolve, reject) => {
      con.query(sql, function (err, res) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (res.length > 0) {
            resolve({
              status: 1,
              data: res[0].tlead,
              tracking_id: resp.data,
            });
          } else {
            resolve({
              status: 0,
              data: [],
              tracking_id: resp.data,
            });
          }
        }
      });
    });
    return response1;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function dirCustomerCountReport(data) {
  try {
    let record = [];
    getuserquery = `select * from users where u_id=${data.u_id} and deleted=0`;
    let response = await new Promise((resolve, reject) => {
      con.query(getuserquery, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            if (result[0].user_type == 1) {
              getallchilduser = `select * from users where ((p_u_id=${data.u_id} OR p_u_id=1 OR p_u_id IN (SELECT users.u_id  from users where users.branch_id= ${result[0].branch_id})) and branch_id=${result[0].branch_id}) and deleted=0`;
              con.query(getallchilduser, function (err, res) {
                if (err) {
                  console.log(err);
                  resolve({ status: 0, message: "Something went to wrong" });
                } else {
                  res.forEach(function (r) {
                    record.push(r.u_id);
                  });
                  record.push(data.u_id);
                  resolve({
                    record: record,
                    type: result[0].user_type,
                  });
                }
              });
            } else {
              resolve({
                type: result[0].user_type,
              });
            }
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    let sql = "";
    if (response.type == 1) {
      sql = `SELECT l_id,tracking_id FROM customer WHERE customer.created_id IN(${record})  and customer.deleted=0 and customer.is_cancel = 0 and customer.is_block = 1`;
    } else {
      sql = `SELECT l_id,tracking_id FROM customer,users WHERE customer.deleted=0 AND users.u_id = customer.created_id and customer.deleted=0 and customer.is_cancel = 0 and customer.is_block = 1`;
      if (response.type == 3) {
        sql += ` and (customer.created_id=${data.u_id} OR customer.refrence_by=${data.u_id} OR customer.marketing_user =${data.u_id})`;
      }
    }
    if (typeof data.s_date != "undefined" && data.s_date != "") {
      sql += ` and STR_TO_DATE(DATE_FORMAT(customer.created_timestamp, "%d-%m-%Y"), "%d-%m-%Y")>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y")`;
    }
    if (typeof data.e_date != "undefined" && data.e_date != "") {
      sql += ` and STR_TO_DATE(DATE_FORMAT(customer.created_timestamp, "%d-%m-%Y"), "%d-%m-%Y")<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y")`;
    }
    if (
      typeof data.branch_name != "undefined" &&
      data.branch_name != "" &&
      data.branch_name != 0
    ) {
      sql += ` and customer.branch_id=${data.branch_name}`;
    }
    if (
      typeof data.u_name != "undefined" &&
      data.u_name != "" &&
      data.u_name != 0
    ) {
      sql += ` and (customer.created_id=${data.u_name} OR customer.refrence_by=${data.u_name})`;
    }
    // sql += ` GROUP by customer.l_id`;

    let response1 = await new Promise(async (resolve, reject) => {
      con.query(sql, function (err, res) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (res.length > 0) {
            resolve({
              status: 1,
              data: res,
            });
          } else {
            resolve({
              status: 0,
              data: [],
            });
          }
        }
      });
    });
    return response1;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function convertLead(data, tdate) {
  try {
    let today_date = moment().format("DD-MM-YYYY");
    let status_change_date = moment().format("DD-MM-YYYY HH:mm:ss");
    let pass = Math.floor(Math.random() * 90000) + 10000;
    sql = `SELECT * FROM lead_customer WHERE m_c_id = ${data.id} and deleted= 0 `;
    let res = await new Promise((resolve, reject) => {
      con.query(sql, async function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({ status: 1, result: result });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });

    let getUserName = `SELECT u_name FROM users WHERE u_id = ${res.result[0].u_id}`;
    let getUserNameRes = await new Promise((resolve, reject) => {
      con.query(getUserName, async function (err1, result1) {
        if (err1) {
          console.log(err1);
          resolve({ status: 0, message: "User name does not Exists..." });
        } else {
          if (result1.length > 0) {
            resolve({ status: 1, result: result1[0].u_name });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });

    sql12 = `SELECT b_name FROM branch WHERE branch_id = ${res.result[0].branch_id} `;
    let getbres = await new Promise((resolve, reject) => {
      con.query(sql12, async function (err1, result1) {
        if (err1) {
          console.log(err1);
          resolve({ status: 0, message: "Customer Not Updated" });
        } else {
          if (result1.length > 0) {
            resolve({ status: 1, result: result1[0].b_name });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    sql1 = `INSERT INTO main_customer (m_c_prefix,m_c_name,m_c_mo_no,m_c_email,m_c_address,m_c_gst,m_c_state,created_id,password) VALUES ('${res.result[0].c_prefix
      }','${mysql_real_escape_string(res.result[0].c_name)}','${res.result[0].c_mo_no
      }','${mysql_real_escape_string(
        res.result[0].c_email
      )}','${mysql_real_escape_string(res.result[0].c_address)}','${res.result[0].c_gst_no == undefined ? "" : res.result[0].c_gst_no
      }',${res.result[0].c_state},${res.result[0].created_id},'${pass}') `;
    let res1 = await new Promise((resolve, reject) => {
      con.query(sql1, async function (err1, result) {
        if (err1) {
          console.log(err1);
          resolve({ status: 0, message: "Main Customer Not Inserted" });
        } else {
          let senderMailSetting = await sendmessage.getEmailSetting(data.u_id);

          sqlll = `SELECT u_email FROM users WHERE u_id = ${data.u_id} `;
          let ccmail = await new Promise((resolve, reject) => {
            con.query(sqlll, async function (err1, result1) {
              if (err1) {
                console.log(err1);
                resolve({ status: 0, message: "Something went to wrong" });
              } else {
                if (result1.length > 0) {
                  resolve({ status: 1, result: result1[0].u_email });
                } else {
                  resolve({
                    status: 0,
                    message: "Something went to wrong",
                  });
                }
              }
            });
          });

          let message = await sendmessage.getTemplate(17);
          if (message.status != 0) {
            message.template = message.template.replace(
              "{:name:}",
              res.result[0].c_prefix + " " + res.result[0].c_name
            );
            message.template = message.template.replace(
              "{:username:}",
              res.result[0].c_email
            );
            message.template = message.template.replace("{:password:}", pass);
            let mess =
              (message.header == 1
                ? typeof senderMailSetting.email_template_header !=
                  undefined && senderMailSetting.email_template_header != undefined &&
                  senderMailSetting.email_template_header != null
                  ? senderMailSetting.email_template_header
                  : ""
                : "") +
              message.template +
              (message.b_d_id != 0
                ? message.b_d_id == 1
                  ? senderMailSetting.gst_bankdetails
                  : message.b_d_id == 2
                    ? senderMailSetting.ngst_bankdetails
                    : message.b_d_id == 3
                      ? senderMailSetting.general_bankdetails
                      : ""
                : "") +
              // (data.u_id == 1
              //   ? res.result[0].c_tax == 0
              //     ? senderMailSetting.bank_details
              //     : senderMailSetting.nongst_bank_details
              //   : res.result[0].c_tax == 0
              //     ? senderMailSetting.b_bank_details
              //     : senderMailSetting.b_nongst_bank_deatils) +
              (message.footer == 1
                ? senderMailSetting.email_template_footer
                : "") +
              (message.signature == 1 ? senderMailSetting.email_signature : "");

            CCMailSetting = await sendmessage.getEmailSetting(1);
            sendmessagenow = sendmessage.customermessagesend(
              senderMailSetting,
              res.result[0].c_email,
              mess,
              message.subject,
              "", //CCMailSetting.e_username,  // user mail
              ccmail.result, // reply mail
              1,
              "info@hyderabadattestation.com"
            );
          }
          if (err1) {
            resolve({ status: 0, message: "Main Customer Not Inserted" });
          } else {
            const insertgroup = await insertGroupChat({ c_name: res.result[0].c_name, u_name: getUserNameRes.result, u_id: res.result[0].u_id, c_id: result.insertId });
            resolve({ status: 1, m_c_id: result.insertId });
          }
        }
      });
    });

    sqltemplateupdate = `UPDATE template_history SET cus_id = ${res1.m_c_id} WHERE template_history.lead_id = ${data.id};`;
    let restemplateupdate = await new Promise((resolve, reject) => {
      con.query(sqltemplateupdate, async function (err2, result2) {
        if (err2) {
          console.log(err2);
          resolve({ status: 0, message: "Customer Not Updated" });
        } else {
          if (result2) {
            if (result2.affectedRows > 0) {
              resolve({
                status: 1,
                message: "Template History Updated",
              });
            } else {
              resolve({ status: 0 });
            }
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });

    //2703
    let todayDate = moment().format("DD-MM-YYYY");
    let lastTenDay = moment().add(-10, "d").format("DD-MM-YYYY");
    lastTargetSql = `SELECT target_count,DATE_FORMAT(created_timestamp, "%d-%m-%Y") as month FROM customer WHERE c_email  = '${res.result[0].c_email}' and DATE_FORMAT(created_timestamp, "%d-%m-%Y") <= DATE_FORMAT(STR_TO_DATE('${todayDate}', "%d-%m-%Y") ,"%d-%m-%Y") and DATE_FORMAT(created_timestamp, "%d-%m-%Y") >= DATE_FORMAT(STR_TO_DATE('${lastTenDay}', "%d-%m-%Y") ,"%d-%m-%Y") order by c_id desc limit 1`;
    let target_count_res = await new Promise((resolve, reject) => {
      con.query(
        lastTargetSql,
        async function (lastTargetSql_err, lastTargetSql_result) {
          if (lastTargetSql_err) {
            console.log(lastTargetSql_err);
            resolve({ status: 0, message: "Customer Not Updated" });
          } else {
            if (lastTargetSql_result.length > 0) {
              resolve({
                status: 1,
                result: lastTargetSql_result[0].target_count,
              });
            } else {
              resolve({
                status: 0,
                result: 0,
              });
            }
          }
        }
      );
    });
    const target = target_count_res.result + 1;
    sql2 = `INSERT INTO customer (m_c_id,c_date,c_prefix,c_name,c_mo_no,c_email,c_address,c_gst_no,c_state,c_s_type,c_total_customer,c_tax,c_gst,c_remark,created_id,u_id,branch_id,d_address,tracking_id,marketing_user,created_branch_id,arn_no,f_z_type,refrence_by,l_id,city,pincode,target_count,login_u_id) VALUES (
      ${res1.m_c_id},
      '${tdate}',
      '${res.result[0].c_prefix}',
      '${mysql_real_escape_string(res.result[0].c_name)}',
      '${res.result[0].c_mo_no}',
      '${mysql_real_escape_string(res.result[0].c_email)}',
      '${mysql_real_escape_string(res.result[0].c_address)}',
      '${res.result[0].c_gst_no}',
      ${res.result[0].c_state},
      ${res.result[0].c_s_type},
      ${res.result[0].c_total_customer},
      ${res.result[0].c_tax},
      '${typeof res.result[0].c_gst == "" ? "" : res.result[0].c_gst}',
      '${typeof res.result[0].c_remark == "undefined"
        ? ""
        : mysql_real_escape_string(res.result[0].c_remark)
      }', 
      ${res.result[0].created_id},${res.result[0].u_id},${res.result[0].branch_id
      },
      '${mysql_real_escape_string(res.result[0].d_address)}',
      '${res.result[0].tracking_id}',${res.result[0].marketing_user},${res.result[0].created_branch_id
      },'${res.result[0].arn_no}',${res.result[0].f_z_type},${res.result[0].refrence_by
      },${data.id},'${typeof res.result[0].city == "undefined" ||
        res.result[0].city == "" ||
        res.result[0].city == null ||
        res.result[0].city == "undefined"
        ? ""
        : res.result[0].city
      }','${typeof res.result[0].pincode == "undefined" ||
        res.result[0].pincode == "undefined" ||
        res.result[0].pincode == null ||
        res.result[0].pincode == ""
        ? ""
        : res.result[0].pincode
      }',${target},${res.result[0].login_u_id})`;
    let res2 = await new Promise((resolve, reject) => {
      con.query(sql2, async function (err2, result2) {
        if (err2) {
          console.log(err2);
          resolve({ status: 0, message: "Customer Not Updated" });
        } else {
          if (result2) {
            resolve({
              status: 1,
              c_id: result2.insertId,
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });

    if (res.result[0].c_s_type == 8) {
      sql3 = `SELECT * FROM lead_visa WHERE c_id = ${res.result[0].c_id} and deleted = 0`;
    } else if (res.result[0].c_s_type == 10) {
      sql3 = `SELECT * FROM lead_attestation WHERE c_id = ${res.result[0].c_id} and deleted = 0`;
    } else if (res.result[0].c_s_type == 17) {
      sql3 = `SELECT * FROM lead_apostille WHERE c_id = ${res.result[0].c_id} and deleted = 0`;
    } else {
      sql3 = `SELECT * FROM lead_translation WHERE c_id = ${res.result[0].c_id} and deleted = 0`;
    }
    let res3 = await new Promise((resolve, reject) => {
      con.query(sql3, async function (err3, result3) {
        if (err3) {
          console.log(err3);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result3.length > 0) {
            resolve({ status: 1, result3: result3 });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    for (i = 0; i < res3.result3.length; i++) {
      if (res.result[0].c_s_type == 8) {
        sql12 = `INSERT INTO visa (c_id,v_prefix,v_name,v_code,v_passport,v_type,v_country,v_supporting_doc,created_id,pg_no,tracking_id,process_limit_date,process_limit_mail_date) VALUES (
          ${res2.c_id},
          '${res3.result3[i].v_prefix}',
          '${mysql_real_escape_string(res3.result3[i].v_name)}',
          ${res3.result3[i].v_code},
          '${res3.result3[i].v_passport}',
          ${res3.result3[i].v_type},
          '${res3.result3[i].v_country.toString()}',
          '${res3.result3[i].v_supporting_doc.toString()}',
          ${data.u_id},
          ${res3.result3[i].pg_no},
          '${res3.result3[i].tracking_id}','${res3.result3[i].process_limit_date
          }','${res3.result3[i].process_limit_mail_date}')`;
      } else {
        if (res.result[0].c_s_type == 10) {
          sql12 = `INSERT INTO attestation`;
        } else if (res.result[0].c_s_type == 17) {
          sql12 = `INSERT INTO apostille`;
        } else {
          sql12 = `INSERT INTO translation`;
        }
        sql12 += `(c_id,a_prefix,a_name,a_code,a_country,a_type,a_certificate,a_supporting_doc,a_extra_doc,created_id,pg_no,tracking_id,process_limit_date,process_limit_mail_date,no_of_certificates) VALUES (
          ${res2.c_id},'${res3.result3[i].a_prefix
          }','${mysql_real_escape_string(res3.result3[i].a_name)}',${res3.result3[i].a_code
          },${res3.result3[i].a_country},${res3.result3[i].a_type},
        '${res3.result3[i].a_certificate.toString()}','${res3.result3[
            i
          ].a_supporting_doc.toString()}',
         '${typeof res3.result3[i].a_extra_doc == "undefined"
            ? ""
            : res3.result3[i].a_extra_doc.toString()
          }',
          ${data.u_id},
          ${res3.result3[i].pg_no},
          '${res3.result3[i].tracking_id}','${res3.result3[i].process_limit_date
          }','${res3.result3[i].process_limit_mail_date}',${res3.result3[i].no_of_certificates
          })`;
      }
      let response12 = await new Promise((resolve, reject) => {
        con.query(sql12, async function (err12, result12) {
          if (err12) {
            console.log(err12);
            resolve({ status: 0, message: "Something went wrong" });
          } else {
            if (result12) {
              resolve({
                status: 1,
                result: result12.insertId,
              });
            } else {
              resolve({
                status: 0,
                message: "Something went to wrong",
              });
            }
          }
        });
      });

      if (res.result[0].c_s_type == 8) {
        sql4 = `SELECT * FROM lead_details WHERE service_id = ${res3.result3[i].v_id} and service_type = 8`;
      } else if (res.result[0].c_s_type == 10) {
        sql4 = `SELECT * FROM lead_details WHERE service_id = ${res3.result3[i].a_id} and service_type = 10`;
      } else if (res.result[0].c_s_type == 17) {
        sql4 = `SELECT * FROM lead_details WHERE service_id = ${res3.result3[i].a_id} and service_type = 17`;
      } else {
        sql4 = `SELECT * FROM lead_details WHERE service_id = ${res3.result3[i].a_id} and service_type = 20`;
      }
      let res4 = await new Promise((resolve, reject) => {
        con.query(sql4, async function (err4, result4) {
          if (err4) {
            console.log(err4);
            resolve({ status: 0, message: "Something went to wrong" });
          } else {
            if (result4.length > 0) {
              resolve({ status: 1, result4: result4 });
            } else {
              resolve({
                status: 0,
                message: "Something went to wrong",
              });
            }
          }
        });
      });
      //1003
      for (j = 0; j < res4.result4.length; j++) {
        sql5 = `INSERT INTO details (service_type,service_id,amount,d_c_id,tracking_id,updated_date,status_mail_date,status_change_date) VALUES (${res4.result4[j].service_type},${response12.result},${res4.result4[j].amount},${res4.result4[j].d_c_id},'${res4.result4[j].tracking_id}','${today_date}','${today_date}','${status_change_date}')`;
        let res5 = await new Promise((resolve, reject) => {
          con.query(sql5, async function (err5, result5) {
            if (err5) {
              console.log(err5);
              resolve({ status: 0, message: "Something went wrong" });
            } else {
              //1003
              if (result5.affectedRows > 0) {
                resolve({
                  status: 1,
                  result: result5,
                });
              } else {
                resolve({
                  status: 0,
                  message: "Something went to wrong",
                });
              }
            }
          });
        });
      }
    }

    // getinvoiceno = `SELECT invoice_no FROM payment order by invoice_no DESC limit 1`;
    // let responseinvoice = await new Promise((resolve, reject) => {
    //   const now = new Date();
    //   const cvalue = date.format(now, "YY");
    //   const currentYear = new Date().getFullYear().toString().slice(-2);
    //   const previousYear = currentYear - 1;
    //   let invoice_no = 0;
    //   con.query(getinvoiceno, async function (errino, inoresult) {
    //     if (errino) {
    //       resolve({ status: 0, message: "Something went wrong" });
    //     }
    //     if (inoresult.length > 0 && inoresult[0].invoice_no != 0) {
    //       let ino = inoresult[0].invoice_no;
    //       let n_ino = ino.split("/");
    //       invoice_no = "FAVS/" + previousYear + "-" + cvalue + "/" + ++n_ino[3];
    //     } else {
    //       invoice_no = "FAVS/" + previousYear + "-" + cvalue + "/" + 1;
    //     }
    //     resolve({ status: 1, ino: invoice_no });
    //   });
    // });

    let responseinvoice = await new Promise((resolve, reject) => {
      if (res.result[0].c_tax == "1") {
        //1003
        // getinvoiceno = `SELECT *,invoice_no FROM payment,customer WHERE payment.c_id=customer.c_id and payment.c_tax = "1" and customer.branch_id=${data.branch_id} and payment.deleted=0 ORDER BY customer.c_id DESC limit 1;`;
        let getinvoiceno = `SELECT *,invoice_no FROM payment JOIN customer ON payment.c_id=customer.c_id and payment.c_tax = "1" and customer.branch_id=${data.branch_id} and payment.deleted=0 ORDER BY payment.payment_id DESC,customer.c_id DESC limit 1;`;

        // const now = new Date();
        // const cvalue = date.format(now, "YY");
        // const currentYear = new Date().getFullYear().toString().slice(-2);
        // const previousYear = currentYear - 1;
        const cvalue = moment().format("MM");
        const last2 = new Date().getFullYear().toString().substring(2);
        const last2Num = Number(last2);
        var today = new Date();
        if (today.getMonth() + 1 <= 3) {
          fiscalyear = last2Num - 1 + "-" + last2Num;
        } else {
          fiscalyear = last2Num + "-" + (last2Num + 1);
        }
        let invoice_no = 0;
        con.query(getinvoiceno, async function (errino, inoresult) {
          if (errino) {
            console.log(errino);
            resolve({ status: 0, message: "Something went wrong" });
          } else {
            if (inoresult.length > 0 && inoresult[0].invoice_no != 0) {
              //1003
              let ino = inoresult[0].invoice_no;
              let n_ino = ino.split("/");
              if (fiscalyear == n_ino[1]) {
                invoice_no =
                  getbres.result.substring(0, 2) +
                  "/" +
                  fiscalyear +
                  "/" +
                  "g" +
                  cvalue +
                  "/" +
                  ++n_ino[3];
              } else {
                invoice_no =
                  res.result.substring(0, 2) +
                  "/" +
                  fiscalyear +
                  "/" +
                  "g" +
                  cvalue +
                  "/" +
                  1;
              }
            } else {
              invoice_no =
                getbres.result.substring(0, 2) +
                "/" +
                fiscalyear +
                "/" +
                "g" +
                cvalue +
                "/" +
                1;
            }
            resolve({ status: 1, ino: invoice_no });
          }
        });
      } else {
        //1003
        // getinvoiceno = `SELECT *,invoice_no FROM payment,customer WHERE payment.c_id=customer.c_id and payment.c_tax = "0" and customer.branch_id=${data.branch_id} and payment.deleted=0 ORDER BY customer.c_id DESC limit 1;`;
        let getinvoiceno = `SELECT *,invoice_no FROM payment JOIN customer ON payment.c_id=customer.c_id and payment.c_tax = "0" and customer.branch_id=${data.branch_id} and payment.deleted=0 ORDER BY payment.payment_id DESC,customer.c_id DESC limit 1;`;

        // const now = new Date();
        // const cvalue = date.format(now, "YY");
        // const currentYear = new Date().getFullYear().toString().slice(-2);
        // const previousYear = currentYear - 1;
        const cvalue = moment().format("MM");
        const last2 = new Date().getFullYear().toString().substring(2);
        const last2Num = Number(last2);
        var today = new Date();
        if (today.getMonth() + 1 <= 3) {
          fiscalyear = last2Num - 1 + "-" + last2Num;
        } else {
          fiscalyear = last2Num + "-" + (last2Num + 1);
        }
        let invoice_no = 0;
        con.query(getinvoiceno, async function (errino, inoresult) {
          if (errino) {
            console.log(errino);
            resolve({ status: 0, message: "Something went wrong" });
          } else {
            if (inoresult.length > 0 && inoresult[0].invoice_no != 0) {
              //1003
              let ino = inoresult[0].invoice_no;
              let n_ino = ino.split("/");
              if (fiscalyear == n_ino[1]) {
                invoice_no =
                  getbres.result.substring(0, 2) +
                  "/" +
                  fiscalyear +
                  "/" +
                  cvalue +
                  "/" +
                  ++n_ino[3];
              } else {
                invoice_no =
                  getbres.result.substring(0, 2) +
                  "/" +
                  fiscalyear +
                  "/" +
                  cvalue +
                  "/" +
                  1;
              }
            } else {
              invoice_no =
                getbres.result.substring(0, 2) +
                "/" +
                fiscalyear +
                "/" +
                cvalue +
                "/" +
                1;
            }
            resolve({ status: 1, ino: invoice_no });
          }
        });
      }
    });

    lastpayment = `SELECT p_receipt_no FROM payment WHERE (receive_amt!='' AND receive_amt!=0) order by payment_id  DESC limit 1`;
    const rlast2 = new Date().getFullYear().toString().substring(2);
    const rlast2Num = Number(rlast2);
    var rtoday = new Date();
    let financialYear;
    if (rtoday.getMonth() + 1 <= 3) {
      financialYear = rlast2Num - 1 + "-" + rlast2Num;
    } else {
      financialYear = rlast2Num + "-" + (rlast2Num + 1);
    }
    let rec_no = 0;
    let response11 = await new Promise((resolve, reject) => {
      con.query(lastpayment, function (err1, result1) {
        if (err1) {
          console.log(err1);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result1.length > 0 && result1[0].p_receipt_no != 0) {
            let rno = result1[0].p_receipt_no;
            let n_rno = rno.split("_");
            if (financialYear == n_rno[0]) {
              rec_no = financialYear + "_" + ++n_rno[1];
            } else {
              rec_no = financialYear + "_" + 1;
            }
          } else {
            rec_no = financialYear + "_" + 1;
          }
          resolve({
            status: 1,
            result: rec_no,
          });
        }
      });
    });
    // let rec_no = parseInt(response11.result) + 1;

    sql5 = `SELECT * FROM lead_payment WHERE c_id = ${res.result[0].c_id} and deleted= 0 Order by payment_id DESC limit 1`;
    let res5 = await new Promise((resolve, reject) => {
      con.query(sql5, async function (err5, result5) {
        if (err5) {
          console.log(err5);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result5.length > 0) {
            resolve({ status: 1, result5: result5 });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    sql6 = `INSERT INTO payment(payment_date,c_id,total_amount,courier,embassy_fees,dis_amt,net_amt,sgst,cgst,igst,created_id,due_amt,u_id,tracking_id,invoice_no,p_receipt_no,exp_charge,coupon_amt,c_tax,created_branch_id,payment_refund) VALUES ('${tdate}',${res2.c_id
      },'${res5.result5[0].total_amount}','${res5.result5[0].courier}','${res5.result5[0].embassy_fees
      }','${res5.result5[0].dis_amt}','${res5.result5[0].net_amt}','${res5.result5[0].sgst
      }','${res5.result5[0].cgst}','${res5.result5[0].igst}',${data.u_id},'${res5.result5[0].due_amt
      }',${data.u_id},'${mysql_real_escape_string(
        res5.result5[0].tracking_id
      )}','${responseinvoice.ino}','${rec_no}','${res5.result5[0].exp_charge}','${res5.result5[0].coupon_amt
      }','${res.result[0].c_tax}',${data.branch_id},'${res.result[0].payment_refund
      }')`;
    let response6 = await new Promise((resolve, reject) => {
      con.query(sql6, async function (err6, result6) {
        if (err6) {
          console.log(err6);
          resolve({ status: 0, message: "Something went wrong" });
        } else {
          if (result6.affectedRows > 0) {
            sql7 = `UPDATE elead SET convert_status=1,convert_date="${tdate}" WHERE  lead_id =${data.id}`;
            con.query(sql7, async function (err7, result7) {
              if (err7) {
                console.log(err7);
                resolve({ status: 0, message: "Something went wrong" });
              } else {
                if (result7) {
                  resolve({
                    status: 1,
                    message: "Lead Converted Into Customer Successfully",
                  });
                }
              }
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    return response6;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function excelreports(data) {
  try {
    // if (data.u_id == 1) {
    //   sql = `select * from gsetting`;
    // } else {
    sql = `SELECT users.*,branch.*,branch.b_hsn_code as hsn_code,b_bank_details as bank_details,company_name as c_name,branch.b_gstno as c_gstno,gsetting.i_gst_pre,gsetting.c_gst_pre,gsetting.s_gst_pre FROM users,branch,gsetting WHERE users.branch_id=branch.branch_id AND u_id=${data.u_id} AND users.deleted=0 AND branch.deleted=0`;
    // }
    let responsee = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            con.query(sql, function (err, res) {
              if (err) {
                console.log(err);
                resolve({ status: 0, message: "Something went to wrong" });
              } else {
                if (res.length > 0) {
                  resolve({
                    settingdata: res[0],
                  });
                }
              }
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    sqll = `SELECT * FROM users WHERE u_id = ${data.u_id}`;

    let response = await new Promise((resolve, reject) => {
      con.query(sqll, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            result.forEach(function (result) {
              resolve({
                status: 1,
                user_type: result.user_type,
                user_data: result,
              });
            });
          } else {
            resolve({
              status: 0,
              user_type: "Something went wrong...",
            });
          }
        }
      });
    });

    if (response.user_type == 0) {
      //   sql2 = `SELECT * FROM customer INNER JOIN payment ON customer.c_id = payment.c_id WHERE customer.c_gst = 0 and customer.c_tax = 1 and  customer.deleted = 0 and customer.branch_id=${data.branch_name}  and STR_TO_DATE(customer.c_date,"%d-%m-%y")>=STR_TO_DATE('${data.s_date}',"%d-%m-%y") and STR_TO_DATE(customer.c_date,"%d-%m-%y") <= STR_TO_DATE('${data.e_date}',"%d-%m-%y")`;
      // } else if (response.user_type == 1) {
      //   sql2 = `SELECT * FROM customer INNER JOIN payment ON customer.c_id = payment.c_id WHERE customer.c_gst = 0 and customer.c_tax = 1 and  customer.deleted = 0 and customer.branch_id=${data.branch_id}  and STR_TO_DATE(customer.c_date,"%d-%m-%y")>=STR_TO_DATE('${data.s_date}',"%d-%m-%y") and STR_TO_DATE(customer.c_date,"%d-%m-%y") <= STR_TO_DATE('${data.e_date}',"%d-%m-%y")`;
      // } else {
      //   sql2 = `SELECT * FROM customer INNER JOIN payment ON customer.c_id = payment.c_id WHERE customer.c_gst = 0 and customer.c_tax = 1 and  customer.deleted = 0 and customer.u_id=${data.u_id}  and STR_TO_DATE(customer.c_date,"%d-%m-%y")>=STR_TO_DATE('${data.s_date}',"%d-%m-%y") and STR_TO_DATE(customer.c_date,"%d-%m-%y") <= STR_TO_DATE('${data.e_date}',"%d-%m-%y")`;
      // }

      sql2 = `SELECT customer.*,payment.*,branch.state_id as branch_state_id,(SELECT name FROM attributes WHERE attributes.attribute_id = customer.c_state)as state_name FROM customer INNER JOIN payment ON customer.c_id = payment.c_id left join branch on branch.branch_id = customer.created_branch_id  WHERE payment.payment_id IN (
        SELECT MAX(payment_id)
        FROM payment
        GROUP BY c_id
    )  and payment.c_id = customer.c_id AND customer.c_tax =1 and  payment.c_tax = 1 and  customer.deleted = 0 and customer.is_cancel = 0 and customer.is_block = 1 and customer.branch_id=${data.branch_name}  and STR_TO_DATE(customer.c_date,"%d-%m-%y")>=STR_TO_DATE('${data.s_date}',"%d-%m-%y") and STR_TO_DATE(customer.c_date,"%d-%m-%y") <= STR_TO_DATE('${data.e_date}',"%d-%m-%y") group by customer.c_id;`;
    } else if (response.user_type == 1) {
      sql2 = `SELECT customer.*,payment.*,branch.state_id as branch_state_id,(SELECT name FROM attributes WHERE attributes.attribute_id = customer.c_state)as state_name FROM customer INNER JOIN payment ON customer.c_id = payment.c_id left join branch on branch.branch_id = customer.created_branch_id  WHERE payment.payment_id IN (
        SELECT MAX(payment_id)
        FROM payment
        GROUP BY c_id
    )  and payment.c_id = customer.c_id AND customer.c_tax = 1 and  payment.c_tax = 1 and  customer.deleted = 0 and customer.is_cancel = 0 and customer.is_block = 1 and (customer.branch_id=${data.branch_id} or customer.foreign_branch=${data.branch_id})  and STR_TO_DATE(customer.c_date,"%d-%m-%y")>=STR_TO_DATE('${data.s_date}',"%d-%m-%y") and STR_TO_DATE(customer.c_date,"%d-%m-%y") <= STR_TO_DATE('${data.e_date}',"%d-%m-%y") group by customer.c_id`;
    } else {
      sql2 = `SELECT customer.*,payment.*,branch.state_id as branch_state_id,(SELECT name FROM attributes WHERE attributes.attribute_id = customer.c_state)as state_name FROM customer INNER JOIN payment ON customer.c_id = payment.c_id left join branch on branch.branch_id = customer.created_branch_id  WHERE payment.payment_id IN (
        SELECT MAX(payment_id)
        FROM payment
        GROUP BY c_id
    )  and payment.c_id = customer.c_id AND customer.c_tax = 1 and  payment.c_tax = 1 and  customer.deleted = 0 and customer.is_cancel = 0 and customer.is_block = 1 and customer.u_id=${data.u_id}  and STR_TO_DATE(customer.c_date,"%d-%m-%y")>=STR_TO_DATE('${data.s_date}',"%d-%m-%y") and STR_TO_DATE(customer.c_date,"%d-%m-%y") <= STR_TO_DATE('${data.e_date}',"%d-%m-%y") group by customer.c_id`;
    }
    let response1 = await new Promise((resolve, reject) => {
      con.query(sql2, async function (err3, result3) {
        if (err3) {
          console.log(err3);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result3.length > 0) {
            resolve({
              status: 1,
              data: result3,
              settingdata: responsee.settingdata,
              user_data: response.user_data,
            });
          } else {
            resolve({
              status: 0,
              settingdata: responsee.settingdata,
              user_data: response.user_data,
              data: [],
            });
          }
        }
      });
    });
    return response1;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function getLeadFollowupCounter(data) {
  try {
    sql = `SELECT COUNT(*) as tsource,(SELECT name FROM attributes WHERE attributes.attribute_id=lead_followup.source_id)as source_name FROM lead_followup where lead_id=${data.lead_id} `;
    // if (
    //   data.u_id != undefined &&
    //   data.u_id != "undefined" &&
    //   data.u_id != "" &&
    //   data.u_id != 0
    // ) {
    //   sql += ` and u_id=${data.u_id}`;
    // }
    sql += " GROUP by source_id";
    let response = await new Promise(async (resolve, reject) => {
      con.query(sql, function (err, res) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (res.length > 0) {
            resolve({
              status: 1,
              data: res,
            });
          } else {
            resolve({
              status: 0,
              data: [],
            });
          }
        }
      });
    });
    return response;
  } catch (err) {
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function leadFollowUpCountReport(data) {
  try {
    sql = `SELECT COUNT(*) as tleadfollow,(SELECT name FROM attributes WHERE attributes.attribute_id=lead_followup.source_id)as source_name FROM lead_followup where `;
    if (typeof data.s_date != "undefined" && data.s_date != "") {
      sql += ` STR_TO_DATE(date,"%d-%m-%Y")>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y")`;
    }
    if (typeof data.e_date != "undefined" && data.e_date != "") {
      sql += ` and STR_TO_DATE(date,"%d-%m-%Y")<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y")`;
    }
    // if (typeof data.branch_id != "undefined" && data.branch_id != "" && data.branch_id != 0 && data.user_type==1) {
    //   sql += ` and l_branch_id=${data.branch_id}`;
    // }
    if (
      typeof data.u_id != "undefined" &&
      data.u_id != "" &&
      data.u_id != 0 &&
      data.user_type == 3
    ) {
      sql += ` and u_id=${data.u_id}`;
    }
    if (
      typeof data.u_name != "undefined" &&
      data.u_name != "" &&
      data.u_name != 0
    ) {
      sql += ` and u_id=${data.u_name}`;
    }
    sql += ` GROUP by source_id`;
    let response = await new Promise(async (resolve, reject) => {
      con.query(sql, function (err, res) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (res.length > 0) {
            getleadquery = `SELECT *,(SELECT COUNT(*) FROM elead where elead.deleted=0) as trows,
           (SELECT  CASE
            WHEN l_source =282 
               THEN (SELECT m_c_name FROM main_customer WHERE m_c_id=l_created_by) 
               ELSE (SELECT u_name FROM users WHERE users.u_id=elead.l_created_by)
          END  )as createdBy,
          (SELECT u_name FROM users WHERE users.u_id=elead.l_allocate_to)as allocatedTo FROM lead_followup LEFT JOIN elead ON lead_followup.lead_id=elead.lead_id  `;
            if (
              typeof data.u_id != "undefined" &&
              data.u_id != "" &&
              data.u_id != 0 &&
              data.user_type == 3
            ) {
              getleadquery += ` WHERE u_id=${data.u_id}`;
            }
            if (
              typeof data.u_name != "undefined" &&
              data.u_name != "" &&
              data.u_name != 0
            ) {
              getleadquery += ` WHERE u_id=${data.u_name}`;
            }
            getleadquery += ` GROUP BY lead_followup.lead_id limit ${(data.page - 1) * data.perpage
              },${data.perpage} `;
            con.query(getleadquery, function (err1, res1) {
              if (err1) {
                console.log(err1);
                resolve({ status: 0, message: "Something went to wrong" });
              } else {
                if (res1.length > 0) {
                  resolve({
                    status: 1,
                    data: res,
                    lead: res1,
                  });
                } else {
                  resolve({
                    status: 1,
                    data: res,
                    lead: [],
                  });
                }
              }
            });
          } else {
            resolve({
              status: 1,
              data: [],
              lead: [],
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function sendmailallcustomer() {
  try {
    const e_date = moment().subtract(3, "months").format("DD-MM-YYYY");
    const s_date = moment(e_date, "DD-MM-YYYY")
      .add(-10, "d")
      .format("DD-MM-YYYY");

    let current_date = moment().format("DD-MM-YYYY");
    let response = await new Promise(async (resolve, reject) => {
      sql = `select customer.c_id,customer.c_date,customer.created_id,customer.c_prefix as m_c_prefix,customer.c_name as m_c_name,customer.c_email as m_c_email,(Select paid_amt from payment where payment.c_id=customer.c_id ORDER by payment_id DESC LIMIT 1)as paid_amt,(Select net_amt from payment where payment.c_id=customer.c_id ORDER by payment_id DESC LIMIT 1)as net_amt from customer 
       where deleted=0 and is_cancel = 0 and is_block = 1 AND STR_TO_DATE(customer.c_date,"%d-%m-%Y") >= STR_TO_DATE('${s_date}',"%d-%m-%Y") AND  STR_TO_DATE(customer.c_date,"%d-%m-%Y") <= STR_TO_DATE('${e_date}',"%d-%m-%Y")`;
      con.query(sql, async function (err, results) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (results.length > 0) {
            // results.forEach(function (result) {
            resolve({
              status: 1,
              result: results,
            });
            // });
          } else {
            resolve({
              status: 0,
              result: [],
            });
          }
        }
      });
    });
    let record = [];
    response.result.map(async (k) => {
      if (k.paid_amt == 0 && k.c_date != current_date) {
        record.push(k);
      }
    });
    await sendcustomerdueamtmail(record);
    return record;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function sendcustomerdueamtmail(data1) {
  try {
    let response = await new Promise(async (resolve, reject) => {
      let messa1 = [];
      data1.map(async (data, index) => {
        let senderMailSetting = await sendmessage.getEmailSetting(
          data.created_id
        );

        sqlll = `SELECT u_email FROM users WHERE u_id = ${data.created_id} `;
        let ccmail = await new Promise((resolve, reject) => {
          con.query(sqlll, async function (err1, result1) {
            if (err1) {
              console.log(err1);
              resolve({ status: 0, message: "Something went to wrong" });
            } else {
              if (result1.length > 0) {
                resolve({ status: 1, result: result1[0].u_email });
              } else {
                resolve({
                  status: 0,
                  message: "Something went to wrong",
                });
              }
            }
          });
        });

        let message = await sendmessage.getTemplate(7);
        if (message.status != 0) {
          message.template = message.template.replace(
            "{:name:}",
            data.m_c_prefix + " " + data.m_c_name
          );
          message.template = message.template.replace(
            "{:pamount:}",

            +Number(data.net_amt).toFixed(2)
          );
          let mess =
            (message.header == 1
              ? typeof senderMailSetting.email_template_header !=
                undefined && senderMailSetting.email_template_header != undefined &&
                senderMailSetting.email_template_header != null
                ? senderMailSetting.email_template_header
                : ""
              : "") +
            message.template +
            (message.b_d_id != 0
              ? message.b_d_id == 1
                ? senderMailSetting.gst_bankdetails
                : message.b_d_id == 2
                  ? senderMailSetting.ngst_bankdetails
                  : message.b_d_id == 3
                    ? senderMailSetting.general_bankdetails
                    : ""
              : "") +
            // (data.created_id == 1
            //   ? data.c_tax == 0
            //     ? senderMailSetting.bank_details
            //     : senderMailSetting.nongst_bank_details
            //   : data.c_tax == 0
            //     ? senderMailSetting.b_bank_details
            //     : senderMailSetting.b_nongst_bank_deatils) +
            (message.footer == 1
              ? senderMailSetting.email_template_footer
              : "") +
            (message.signature == 1 ? senderMailSetting.email_signature : "");
          CCMailSetting = await sendmessage.getEmailSetting(1);
          // let bank_details=senderMailSetting.b_bank_details;
          sendmessagenow = sendmessage.customermessagesend(
            senderMailSetting,
            data.m_c_email,
            mess,
            `${message.subject} || ${data.m_c_prefix + " " + data.m_c_name}`,
            ccmail.result, //CCMailSetting.e_username,  // user mail
            ccmail.result, // reply mail
            1
            // bank_details,
          );
          resolve({
            status: 1,
            message: "Payment reminder mail send to customer...",
          });
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function fullcopy(data) {
  try {
    //2703
    let status_change_date = moment().format("DD-MM-YYYY HH:mm:ss");
    sql = `SELECT * FROM customer 
    WHERE  c_id = ${data.c_id} and deleted = 0`;
    let customer = await new Promise(async (resolve, reject) => {
      con.query(sql, async function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              result: result,
              status: 1,
            });
          } else {
            resolve({
              status: 0,
            });
          }
        }
      });
    });
    sqlll = `SELECT u_name FROM users WHERE u_id = ${customer.result[0].u_id} `;
    let ress = await new Promise((resolve, reject) => {
      con.query(sqlll, async function (err1, result1) {
        if (err1) {
          console.log(err1);
          resolve({ status: 0, message: "Customer Not Updated" });
        } else {
          if (result1.length > 0) {
            resolve({ status: 1, result: result1[0].u_name });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    sql1 = `SELECT b_name FROM branch WHERE branch_id = ${customer.result[0].branch_id} `;
    let response1 = await new Promise((resolve, reject) => {
      con.query(sql1, async function (err1, result1) {
        if (err1) {
          console.log(err1);
          resolve({ status: 0, message: "Customer Not Updated" });
        } else {
          if (result1.length > 0) {
            resolve({ status: 1, result: result1[0].b_name });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });

    let currdate = moment().format("DDMMYYYYhhmmss");

    let tracking_id = `${response1.result.substring(
      0,
      2
    )}${currdate}${ress.result.substring(0, 1)}`;

    let todayDate = moment().format("DD-MM-YYYY");
    let lastTenDay = moment().add(-10, "d").format("DD-MM-YYYY");
    lastTargetSql = `SELECT target_count,DATE_FORMAT(created_timestamp, "%d-%m-%Y") as month FROM customer WHERE c_email  = '${customer.result[0].c_email}' and DATE_FORMAT(created_timestamp, "%d-%m-%Y") <= DATE_FORMAT(STR_TO_DATE('${todayDate}', "%d-%m-%Y") ,"%d-%m-%Y") and DATE_FORMAT(created_timestamp, "%d-%m-%Y") >= DATE_FORMAT(STR_TO_DATE('${lastTenDay}', "%d-%m-%Y") ,"%d-%m-%Y") order by c_id desc limit 1`;
    let target_count_res = await new Promise((resolve, reject) => {
      con.query(
        lastTargetSql,
        async function (lastTargetSql_err, lastTargetSql_result) {
          if (lastTargetSql_err) {
            console.log(lastTargetSql_err);
            resolve({ status: 0, message: "Customer Not Updated" });
          } else {
            if (lastTargetSql_result.length > 0) {
              resolve({
                status: 1,
                result: lastTargetSql_result[0].target_count,
              });
            } else {
              resolve({
                status: 0,
                result: 0,
              });
            }
          }
        }
      );
    });

    const target = target_count_res.result + 1;
    sql2 = `INSERT INTO customer (m_c_id,c_date,c_prefix,c_name,c_mo_no,c_email,c_address,c_gst_no,c_state,c_s_type,c_total_customer,c_tax,c_gst,c_remark,created_id,u_id,branch_id,d_address,tracking_id,city,pincode,target_count,login_u_id) VALUES (${customer.result[0].m_c_id
      },'${customer.result[0].c_date}','${customer.result[0].c_prefix}',
            '${mysql_real_escape_string(customer.result[0].c_name)}','${customer.result[0].c_mo_no
      }','${mysql_real_escape_string(
        customer.result[0].c_email
      )}','${mysql_real_escape_string(customer.result[0].c_address)}','${customer.result[0].c_gst_no
      }',${customer.result[0].c_state},${customer.result[0].c_s_type},${customer.result[0].c_total_customer
      },${customer.result[0].c_tax},${customer.result[0].c_gst},'${typeof customer.result[0].c_remark == "undefined"
        ? ""
        : mysql_real_escape_string(customer.result[0].c_remark)
      }', ${customer.result[0].created_id},${customer.result[0].u_id},${customer.result[0].branch_id
      },'${mysql_real_escape_string(
        customer.result[0].d_address
      )}','${mysql_real_escape_string(tracking_id)}','${typeof customer.result[0].city == "undefined" ||
        customer.result[0].city == "" ||
        customer.result[0].city == null ||
        customer.result[0].city == "undefined"
        ? ""
        : customer.result[0].city
      }','${typeof customer.result[0].pincode == "undefined" ||
        customer.result[0].pincode == "" ||
        customer.result[0].pincode == "undefined" ||
        customer.result[0].pincode == null
        ? ""
        : customer.result[0].pincode
      }',${target},${customer.result[0].login_u_id})`;
    let response2 = await new Promise((resolve, reject) => {
      con.query(sql2, async function (err2, result2) {
        if (err2) {
          console.log(err2);
          resolve({ status: 0, message: "Customer Not Updated" });
        } else {
          if (result2) {
            resolve({
              status: 1,
              c_id: result2.insertId,
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    if (customer.result[0].c_s_type == 8) {
      sql = `SELECT * FROM visa 
       WHERE  c_id = ${data.c_id} and deleted = 0`;
      let visa = await new Promise(async (resolve, reject) => {
        con.query(sql, async function (err3, result3) {
          if (err3) {
            console.log(err3);
            resolve({ status: 0, message: "Something went to wrong" });
          } else {
            if (result3.length > 0) {
              resolve({
                applicationdata: result3,
                c_s_type: customer.result[0].c_s_type,
                status: 1,
              });
            } else {
              resolve({
                status: 0,
              });
            }
          }
        });
      });
      let k = 0;

      for (i = 0; i < visa.applicationdata.length; i++) {
        sql2 = `INSERT INTO visa (c_id,v_prefix,v_name,v_code,v_passport,v_type,v_country,v_supporting_doc,created_id,pg_no,tracking_id) VALUES (${response2.c_id
          },'${visa.applicationdata[i].v_prefix}','${mysql_real_escape_string(
            visa.applicationdata[i].v_name
          )}',${visa.applicationdata[i].v_code},'${visa.applicationdata[i].v_passport
          }',${visa.applicationdata[i].v_type},'${visa.applicationdata[i].v_country
          }','${visa.applicationdata[i].v_supporting_doc}',${visa.applicationdata[i].created_id
          },${visa.applicationdata[i].pg_no},'${mysql_real_escape_string(
            tracking_id
          )}')`;
        let response3 = await new Promise((resolve, reject) => {
          con.query(sql2, async function (err2, result2) {
            if (err2) {
              console.log(err2);
              resolve({ status: 0, message: "Something went wrong" });
            } else {
              if (result2) {
                resolve({
                  status: 1,
                  result: result2.insertId,
                });
              } else {
                resolve({
                  status: 0,
                  message: "Something went to wrong",
                });
              }
            }
          });
        });
        let country = visa.applicationdata[i].v_country.split(",");
        let record = [];
        for (j = 0; j < country.length; j++) {
          sqll = `SELECT s_amount FROM serviceprice WHERE service = ${customer.result[0].c_s_type}  AND country = ${country[j]} AND s_type = ${visa.applicationdata[i].v_type} AND deleted = 0;`;
          let responsee = await new Promise((resolve, reject) => {
            con.query(sqll, async function (err, results) {
              if (err) {
                console.log(err);
                resolve({ status: 0, message: "Something went wrong" });
              } else {
                if (results.length == 1) {
                  results.forEach(function (res) {
                    record.push(res.s_amount);
                    resolve({
                      amount: record,
                    });
                  });
                  resolve({
                    amount: record,
                  });
                }
                if (results.length > 1) {
                  results.forEach(function (result) {
                    if (result.length > 0) {
                      result.forEach(function (res) {
                        record.push(res.s_amount);
                        resolve({
                          amount: record,
                        });
                      });
                    } else {
                      record.push(0);
                      resolve({
                        amount: record,
                      });
                    }
                  });
                } else {
                  resolve({
                    amount: [0],
                  });
                }
              }
            });
          });
          let status_change_date = moment().format("DD-MM-YYYY HH:mm:ss");
          sql3 = `INSERT INTO details (service_type,service_id,amount,d_c_id,tracking_id,status_change_date) VALUES (${customer.result[0].c_s_type
            },${response3.result},${responsee.amount},${country[j]
            },'${mysql_real_escape_string(
              tracking_id
            )}','${status_change_date}')`;
          let response4 = await new Promise((resolve, reject) => {
            con.query(sql3, async function (err3, result3) {
              if (err3) {
                console.log(err3);
                resolve({ status: 0, message: "Something went wrong" });
              } else {
                if (result3) {
                  resolve({
                    status: 1,
                    result: result3,
                  });
                } else {
                  resolve({
                    status: 0,
                    message: "Something went to wrong",
                  });
                }
              }
            });
          });
        }
      }
    } else {
      if (customer.result[0].c_s_type == 10) {
        sql = `SELECT * FROM attestation WHERE  c_id = ${data.c_id} and deleted = 0 `;
      } else if (customer.result[0].c_s_type == 17) {
        sql = `SELECT * FROM apostille WHERE  c_id = ${data.c_id} and deleted = 0 `;
      } else {
        sql = `SELECT * FROM translation WHERE  c_id = ${data.c_id} and deleted = 0 `;
      }
      let attestation = await new Promise(async (resolve, reject) => {
        con.query(sql, async function (err3, result3) {
          if (err3) {
            console.log(err3);
            resolve({ status: 0, message: "Something went to wrong" });
          } else {
            if (result3.length > 0) {
              resolve({
                applicationdata: result3,
                status: 1,
              });
            } else {
              resolve({
                status: 0,
              });
            }
          }
        });
      });
      for (i = 0; i < attestation.applicationdata.length; i++) {
        if (customer.result[0].c_s_type == 10) {
          sql2 = `INSERT INTO attestation`;
        } else if (customer.result[0].c_s_type == 17) {
          sql2 = `INSERT INTO apostille`;
        } else {
          sql2 = `INSERT INTO translation`;
        }
        sql2 += `(c_id,a_prefix,a_name,a_code,a_country,a_type,a_certificate,a_supporting_doc,a_extra_doc,created_id,pg_no,tracking_id,no_of_certificates) VALUES (${response2.c_id
          },'${attestation.applicationdata[i].a_prefix
          }','${mysql_real_escape_string(
            attestation.applicationdata[i].a_name
          )}',${attestation.applicationdata[i].a_code},${attestation.applicationdata[i].a_country
          },${attestation.applicationdata[i].a_type},
                      '${attestation.applicationdata[i].a_certificate}',
                      '${attestation.applicationdata[i].a_supporting_doc}',
                      '${typeof attestation.applicationdata[i].a_extra_doc ==
            "undefined"
            ? ""
            : attestation.applicationdata[i].a_extra_doc
          }',${attestation.applicationdata[i].created_id},${attestation.applicationdata[i].pg_no
          },'${mysql_real_escape_string(tracking_id)}',${attestation.applicationdata[i].no_of_certificates
          })`;
        let response3 = await new Promise((resolve, reject) => {
          con.query(sql2, async function (err2, result2) {
            if (err2) {
              console.log(err2);
              resolve({ status: 0, message: "Something went wrong" });
            } else {
              if (result2) {
                resolve({
                  status: 1,
                  result: result2.insertId,
                });
              } else {
                resolve({
                  status: 0,
                  message: "Something went to wrong",
                });
              }
            }
          });
        });
        let certificate =
          attestation.applicationdata[i].a_certificate.split(",");
        let record = [];
        sqll = `SELECT s_amount FROM serviceprice WHERE service = ${customer.result[0].c_s_type}  AND country = ${attestation.applicationdata[i].a_country} AND s_type = ${attestation.applicationdata[i].a_type} AND  deleted = 0;`;

        let responsee = await new Promise((resolve, reject) => {
          con.query(sqll, async function (err, results) {
            if (err) {
              console.log(err);
              resolve({ status: 0, message: "Something went wrong" });
            } else {
              if (results.length == 1) {
                results.forEach(function (res) {
                  record.push(res.s_amount);
                  resolve({
                    amount: record,
                  });
                });
                resolve({
                  amount: record,
                });
              }
              if (results.length > 1) {
                results.forEach(function (result) {
                  if (result.length > 0) {
                    result.forEach(function (res) {
                      record.push(res.s_amount);
                      resolve({
                        amount: record,
                      });
                    });
                  } else {
                    record.push(0);
                    resolve({
                      amount: record,
                    });
                  }
                });
              } else {
                resolve({
                  amount: [0],
                });
              }
            }
          });
        });
        for (j = 0; j < certificate.length; j++) {
          sql3 = `INSERT INTO details (service_type,service_id,amount,d_c_id,tracking_id,status_change_date) VALUES (${customer.result[0].c_s_type
            },${response3.result},${responsee.amount},'${certificate[j]
            }','${mysql_real_escape_string(
              tracking_id
            )}','${status_change_date}')`;
          let response4 = await new Promise((resolve, reject) => {
            con.query(sql3, async function (err3, result3) {
              if (err3) {
                console.log(err3);
                resolve({ status: 0, message: "Something went wrong" });
              } else {
                if (result3.affectedRows > 0) {
                  resolve({
                    status: 1,
                    result: result3,
                  });
                } else {
                  resolve({
                    status: 0,
                    result: "Invalid call",
                  });
                }
              }
            });
          });
        }
      }
    }
    // getinvoiceno = `SELECT invoice_no FROM payment order by invoice_no DESC limit 1`;
    // let responseinvoice = await new Promise((resolve, reject) => {
    //   const now = new Date();
    //   const cvalue = date.format(now, "YY");
    //   const currentYear = new Date().getFullYear().toString().slice(-2);
    //   const previousYear = currentYear - 1;
    //   let invoice_no = 0;
    //   con.query(getinvoiceno, async function (errino, inoresult) {
    //     if (errino) {
    //       resolve({ status: 0, message: "Something went wrong" });
    //     }
    //     if (inoresult.length > 0 && inoresult[0].invoice_no != 0) {
    //       let ino = inoresult[0].invoice_no;
    //       let n_ino = ino.split("/");
    //       invoice_no = "FAVS/" + previousYear + "-" + cvalue + "/" + ++n_ino[2];
    //     } else {
    //       invoice_no = "FAVS/" + previousYear + "-" + cvalue + "/" + 1;
    //     }
    //     resolve({ status: 1, ino: invoice_no });
    //   });
    // });

    let responseinvoice = await new Promise((resolve, reject) => {
      if (customer.result[0].c_tax == "1") {
        //1003
        // getinvoiceno = `SELECT *,invoice_no FROM payment,customer WHERE payment.c_id=customer.c_id and payment.c_tax = "1" and customer.branch_id=${customer.result[0].branch_id} and payment.deleted=0 ORDER BY customer.c_id DESC limit 1;`;
        let getinvoiceno = `SELECT *,invoice_no FROM payment JOIN customer ON payment.c_id=customer.c_id and payment.c_tax = "1" and customer.branch_id=${customer.result[0].branch_id} and payment.deleted=0 ORDER BY payment.payment_id DESC,customer.c_id DESC limit 1;`;

        // const now = new Date();
        // const cvalue = date.format(now, "YY");
        // const currentYear = new Date().getFullYear().toString().slice(-2);
        // const previousYear = currentYear - 1;
        const cvalue = moment().format("MM");
        const last2 = new Date().getFullYear().toString().substring(2);
        const last2Num = Number(last2);
        var today = new Date();
        if (today.getMonth() + 1 <= 3) {
          fiscalyear = last2Num - 1 + "-" + last2Num;
        } else {
          fiscalyear = last2Num + "-" + (last2Num + 1);
        }
        let invoice_no = 0;
        con.query(getinvoiceno, async function (errino, inoresult) {
          if (errino) {
            console.log(errino);
            resolve({ status: 0, message: "Something went wrong" });
          } else {
            if (inoresult.length > 0 && inoresult[0].invoice_no != 0) {
              //1003
              let ino = inoresult[0].invoice_no;
              let n_ino = ino.split("/");
              if (fiscalyear == n_ino[1]) {
                invoice_no =
                  response1.result.substring(0, 2) +
                  "/" +
                  fiscalyear +
                  "/" +
                  "g" +
                  cvalue +
                  "/" +
                  ++n_ino[3];
              } else {
                invoice_no =
                  res.result.substring(0, 2) +
                  "/" +
                  fiscalyear +
                  "/" +
                  "g" +
                  cvalue +
                  "/" +
                  1;
              }
            } else {
              invoice_no =
                response1.result.substring(0, 2) +
                "/" +
                fiscalyear +
                "/" +
                "g" +
                cvalue +
                "/" +
                1;
            }
            resolve({ status: 1, ino: invoice_no });
          }
        });
      } else {
        //1003
        // getinvoiceno = `SELECT *,invoice_no FROM payment,customer WHERE payment.c_id=customer.c_id and payment.c_tax = "0" and customer.branch_id=${customer.result[0].branch_id} and payment.deleted=0 ORDER BY customer.c_id DESC limit 1;`;
        let getinvoiceno = `SELECT *,invoice_no FROM payment JOIN customer ON payment.c_id=customer.c_id and payment.c_tax = "0" and customer.branch_id=${customer.result[0].branch_id} and payment.deleted=0 ORDER BY payment.payment_id DESC,customer.c_id DESC limit 1;`;

        // const now = new Date();
        // const cvalue = date.format(now, "YY");
        // const currentYear = new Date().getFullYear().toString().slice(-2);
        // const previousYear = currentYear - 1;
        const cvalue = moment().format("MM");
        const last2 = new Date().getFullYear().toString().substring(2);
        const last2Num = Number(last2);
        var today = new Date();
        if (today.getMonth() + 1 <= 3) {
          fiscalyear = last2Num - 1 + "-" + last2Num;
        } else {
          fiscalyear = last2Num + "-" + (last2Num + 1);
        }
        let invoice_no = 0;
        con.query(getinvoiceno, async function (errino, inoresult) {
          if (errino) {
            console.log(errino);
            resolve({ status: 0, message: "Something went wrong" });
          } else {
            if (inoresult.length > 0 && inoresult[0].invoice_no != 0) {
              //1003
              let ino = inoresult[0].invoice_no;
              let n_ino = ino.split("/");
              if (fiscalyear == n_ino[1]) {
                invoice_no =
                  response1.result.substring(0, 2) +
                  "/" +
                  fiscalyear +
                  "/" +
                  cvalue +
                  "/" +
                  ++n_ino[3];
              } else {
                invoice_no =
                  response1.result.substring(0, 2) +
                  "/" +
                  fiscalyear +
                  "/" +
                  cvalue +
                  "/" +
                  1;
              }
            } else {
              invoice_no =
                response1.result.substring(0, 2) +
                "/" +
                fiscalyear +
                "/" +
                cvalue +
                "/" +
                1;
            }
            resolve({ status: 1, ino: invoice_no });
          }
        });
      }
    });

    lastpayment = `SELECT p_receipt_no FROM payment WHERE (receive_amt!='' AND receive_amt!=0) order by payment_id  DESC limit 1`;
    const rlast2 = new Date().getFullYear().toString().substring(2);
    const rlast2Num = Number(rlast2);
    var rtoday = new Date();
    let financialYear;
    if (rtoday.getMonth() + 1 <= 3) {
      financialYear = rlast2Num - 1 + "-" + rlast2Num;
    } else {
      financialYear = rlast2Num + "-" + (rlast2Num + 1);
    }
    let rec_no = 0;
    let response11 = await new Promise((resolve, reject) => {
      con.query(lastpayment, function (err1, result1) {
        if (err1) {
          console.log(err1);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result1.length > 0 && result1[0].p_receipt_no != 0) {
            let rno = result1[0].p_receipt_no;
            let n_rno = rno.split("_");
            if (financialYear == n_rno[0]) {
              rec_no = financialYear + "_" + ++n_rno[1];
            } else {
              rec_no = financialYear + "_" + 1;
            }
          } else {
            rec_no = financialYear + "_" + 1;
          }
          resolve({
            status: 1,
            result: rec_no,
          });
        }
      });
    });
    // let rec_no = parseInt(response11.result) + 1;
    payment = `SELECT * FROM payment WHERE deleted = 0 and c_id = ${data.c_id} order by payment_id  DESC limit 1`;
    let response5 = await new Promise((resolve, reject) => {
      con.query(payment, function (err1, result1) {
        if (err1) {
          console.log(err1);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result1.length > 0) {
            resolve({
              paymentdata: result1,
            });
          } else {
            resolve({
              paymentdata: [],
            });
          }
        }
      });
    });
    sql4 = `INSERT INTO payment(payment_date,c_id,total_amount,courier,embassy_fees,dis_amt,net_amt,sgst,cgst,igst,created_id,due_amt,u_id,tracking_id,invoice_no,p_receipt_no,exp_charge,coupon_amt,paid_amt,c_tax,created_branch_id,payment_refund) VALUES ('${response5.paymentdata[0].payment_date
      }',${response2.c_id},'${response5.paymentdata[0].total_amount}','${response5.paymentdata[0].courier
      }','${response5.paymentdata[0].embassy_fees}','${response5.paymentdata[0].dis_amt
      }','${response5.paymentdata[0].net_amt}','${response5.paymentdata[0].sgst
      }','${response5.paymentdata[0].cgst}','${response5.paymentdata[0].igst}',${response5.paymentdata[0].created_id
      },'${response5.paymentdata[0].net_amt}',${response5.paymentdata[0].u_id
      },'${mysql_real_escape_string(tracking_id)}','${responseinvoice.ino
      }','${rec_no}','${response5.paymentdata[0].exp_charge}','${response5.paymentdata[0].coupon_amt
      }','${0}','${response5.paymentdata[0].c_tax}',${response5.paymentdata[0].created_branch_id
      },'${response5.paymentdata[0].payment_refund}')`;
    let response6 = await new Promise((resolve, reject) => {
      con.query(sql4, async function (err4, result4) {
        if (err4) {
          console.log(err4);
          resolve({ status: 0, message: "Something went wrong" });
        } else {
          if (result4) {
            resolve({ status: 1, message: "Customer Copied Successfully...." });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });

    return response6;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function halfcopy(data) {
  try {
    sql = `SELECT * FROM customer INNER JOIN main_customer ON main_customer.m_c_id = customer.m_c_id
    WHERE  customer.c_id = ${data.c_id} and customer.deleted = 0`;
    let customer = await new Promise(async (resolve, reject) => {
      con.query(sql, async function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              result: result[0],
              status: 1,
            });
          } else {
            resolve({
              status: 0,
            });
          }
        }
      });
    });
    return customer;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function profit_cost(data) {
  try {
    sql1 = `SELECT * FROM users WHERE u_id = ${data.u_id}`;

    let response1 = await new Promise((resolve, reject) => {
      con.query(sql1, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            result.forEach(function (result) {
              resolve({
                status: 1,
                user_data: result,
                user_type: result.user_type,
              });
            });
          } else {
            resolve({
              status: 0,
              user_type: "Something went wrong...",
            });
          }
        }
      });
    });
    // 08-04
    cust = [];
    applicate_list = [];
    let sql2 = "";
    if (response1.user_type == 0) {
      sql2 = `SELECT *,(SELECT embassy_fees FROM payment WHERE customer.c_id = payment.c_id  ORDER by payment.payment_id DESC LIMIT 1)as embassy_fees FROM customer,payment WHERE payment.payment_id IN (
        SELECT MAX(payment_id)
        FROM payment
        GROUP BY c_id
    ) AND  customer.c_id = payment.c_id AND customer.deleted = 0 and  STR_TO_DATE(customer.c_date,"%d-%m-%y")>=STR_TO_DATE('${data.s_date}',"%d-%m-%y") and STR_TO_DATE(customer.c_date,"%d-%m-%y")<=STR_TO_DATE('${data.e_date}',"%d-%m-%y") `;
      // sql2 = `SELECT *,(SELECT embassy_fees FROM payment WHERE customer.c_id = payment.c_id  ORDER by payment.payment_id DESC LIMIT 1)as embassy_fees FROM customer WHERE customer.deleted = 0 and  STR_TO_DATE(customer.c_date,"%d-%m-%y")>=STR_TO_DATE('${data.s_date}',"%d-%m-%y") and STR_TO_DATE(customer.c_date,"%d-%m-%y")<=STR_TO_DATE('${data.e_date}',"%d-%m-%y") `;
      if (
        data.l_service != "" &&
        data.l_service != undefined &&
        data.l_service != 0
      ) {
        sql2 += ` and customer.c_s_type=${data.l_service}`;
      }
      if (typeof data.t_id != "undefined" && data.t_id != "") {
        sql2 += ` and customer.tracking_id like '%${data.t_id}%'`;
      }
      if (typeof data.c_name != "undefined" && data.c_name != "") {
        sql2 += ` and customer.c_name like '%${data.c_name}%'`;
      }
      if (typeof data.invoice_no != "undefined" && data.invoice_no != "") {
        sql2 += ` and payment.invoice_no like '%${data.invoice_no}%'`;
      }
      if (
        typeof data.s_branch_id != "undefined" &&
        data.s_branch_id != "" &&
        data.s_branch_id != 0
      ) {
        sql2 += ` and (customer.branch_id='${data.s_branch_id}')`;
        // sql2 += ` and (customer.branch_id='${data.s_branch_id}' or customer.foreign_branch='${data.s_branch_id}')`;
      }
      if (
        typeof data.allocate_id != "undefined" &&
        data.allocate_id != "" &&
        data.allocate_id != 0
      ) {
        sql2 += ` and customer.u_id='${data.allocate_id}'`;
      }
      sql2 += ` GROUP by customer.c_id`;

      let response = await new Promise((resolve, reject) => {
        con.query(sql2, async function (err2, result2) {
          if (err2) {
            console.log(err2);
            resolve({ status: 0, message: "Something went to wrong" });
          } else {
            if (result2.length > 0) {
              for (let i = 0; i < result2.length; i += 1) {
                cust.push({
                  customer: result2[i],
                  service_type: result2[i].c_s_type,
                  c_id: result2[i].c_id,
                  applicates: [],
                });
                applicate_list.push({
                  customer: result2[i],
                  service_type: result2[i].c_s_type,
                  c_id: result2[i].c_id,
                  applicates: [],
                });
              }
              // 08-04
            } else {
              resolve({ status: 0, message: "No data found" });
            }
            Object.keys(cust).map((k) => {
              if (response1.user_type == 0) {
                if (cust[k].service_type == 10) {
                  sql3 = `Select * FROM attestation  WHERE c_id = ${cust[k].c_id} and deleted = 0`;
                } else if (cust[k].service_type == 8) {
                  sql3 = `Select * FROM visa  WHERE c_id = ${cust[k].c_id} and deleted = 0`;
                } else if (cust[k].service_type == 17) {
                  sql3 = `Select * FROM apostille  WHERE c_id = ${cust[k].c_id} and deleted = 0`;
                } else {
                  sql3 = `Select * FROM translation  WHERE c_id = ${cust[k].c_id} and deleted = 0`;
                }
              }
              con.query(sql3, async function (errsql1, sql1res) {
                if (errsql1) {
                  console.log(errsql1);
                  resolve({ status: 0, message: "Something went to wrong" });
                } else {
                  if (sql1res.length > 0) {
                    let sql4 = "";
                    let cust_data = [];
                    Object.keys(sql1res).map(async (ak) => {
                      let responsee1 = await new Promise(
                        async (resolve, reject) => {
                          let sum = 0;
                          let actual_amount = 0;
                          let profit = 0;
                          if (
                            cust[k].service_type == 10 ||
                            cust[k].service_type == 17 ||
                            cust[k].service_type == 20
                          ) {
                            let certificate =
                              sql1res[ak].a_certificate.split(",");
                            certificate.map(async (certi) => {
                              sql4 += `SELECT s_amount,actual_price,profit FROM serviceprice WHERE service = ${cust[k].service_type}  AND country = ${sql1res[ak].a_country} AND s_type = ${sql1res[ak].a_type}  AND deleted = 0;`;
                            });
                            let responsee = await new Promise(
                              (resolve, reject) => {
                                con.query(sql4, async function (err2, result2) {
                                  if (err2) {
                                    console.log(err2);
                                    resolve({
                                      status: 0,
                                      message: "Something went to wrong",
                                    });
                                  } else {
                                    await result2.map(async (res) => {
                                      if (res.length == 0) {
                                        sum = sum + parseInt(0);
                                        actual_amount =
                                          actual_amount + parseInt(0);
                                        profit = profit + parseInt(0);
                                      } else if (res[0]) {
                                        sum = sum + parseInt(res[0].s_amount);
                                        actual_amount =
                                          actual_amount +
                                          parseInt(res[0].actual_price);
                                        profit =
                                          profit + parseInt(res[0].profit);
                                      } else {
                                        sum = sum + parseInt(res.s_amount);
                                        actual_amount =
                                          actual_amount +
                                          parseInt(res.actual_price);
                                        profit = profit + parseInt(res.profit);
                                      }
                                    });

                                    sql1res[ak] = {
                                      ...sql1res[ak],
                                      total_amount: sum,
                                      actual_amount: actual_amount,
                                      profit_amount: profit,
                                    };
                                    resolve({
                                      sum: sum,
                                      cust: sql1res[ak],
                                    });
                                  }
                                });
                              }
                            );
                            cust_data.push(responsee.cust);
                          } else {
                            let country = sql1res[ak].v_country.split(",");
                            country.map((coun) => {
                              sql4 += `SELECT s_amount,actual_price,profit FROM serviceprice WHERE service = ${cust[k].service_type}  AND country = ${coun} AND s_type = ${sql1res[ak].v_type} AND deleted = 0;`;
                            });
                            let responsee = await new Promise(
                              (resolve, reject) => {
                                con.query(sql4, async function (err2, result2) {
                                  if (err2) {
                                    console.log(err2);
                                    resolve({
                                      status: 0,
                                      message: "Something went to wrong",
                                    });
                                  } else {
                                    await result2.map(async (res) => {
                                      if (res.length == 0) {
                                        sum = sum + parseInt(0);
                                        actual_amount =
                                          actual_amount + parseInt(0);
                                        profit = profit + parseInt(0);
                                      } else if (res[0]) {
                                        sum = sum + parseInt(res[0].s_amount);
                                        actual_amount =
                                          actual_amount +
                                          parseInt(res[0].actual_price);
                                        profit =
                                          profit + parseInt(res[0].profit);
                                      } else {
                                        sum = sum + parseInt(res.s_amount);
                                        actual_amount =
                                          actual_amount +
                                          parseInt(res.actual_price);
                                        profit = profit + parseInt(res.profit);
                                      }
                                    });
                                    sql1res[ak] = {
                                      ...sql1res[ak],
                                      total_amount: sum,
                                      actual_amount: actual_amount,
                                      profit_amount: profit,
                                    };
                                    resolve({
                                      sum: sum,
                                      cust: sql1res[ak],
                                    });
                                  }
                                });
                              }
                            );
                            cust_data.push(responsee.cust);
                          }
                          resolve({
                            cust_data: cust_data,
                          });
                        }
                      );
                      applicate_list[k].applicates = responsee1.cust_data;
                      if (k == cust.length - 1) {
                        resolve({
                          status: 1,
                          applicate_data: applicate_list,
                          user_data: response1.user_data,
                        });
                      }
                    });
                  } else {
                    resolve({
                      status: 0,
                      message: "Something went to wrong",
                    });
                  }
                }
              });
            });
          }
        });
      });

      return response;
    }
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function sendleadstatusmail() {
  try {
    let date_ob = moment().format("YYYY-MM-DD");
    let date = new Date(date_ob);
    date.setDate(date.getDate() - 2);
    let date1 = moment(date).format("DD-MM-YYYY");

    sql = `SELECT * FROM elead WHERE deleted = 0 and updated_date = '${date1}' `;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              result: result,
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    let record = [];
    response.result.map(async (k) => {
      record.push(k);
    });
    await setleadmailtemp(record);
    return record;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

//2703
async function sendServiceStatusMail() {
  try {
    let today_date = moment().format("YYYY-MM-DD");
    let date = new Date(today_date);
    date.setDate(date.getDate() - 1);
    let date1 = moment(date).format("DD-MM-YYYY");
    cust = [];
    applicate_list = [];
    sql2 = `SELECT customer.*,visa.v_id,details.detail_id,details.status_id FROM customer,visa,details WHERE customer.c_id=visa.c_id AND visa.v_id=details.service_id AND details.service_type=8 AND details.deleted=0 AND visa.deleted=0 AND customer.deleted=0 and customer.is_cancel = 0 AND details.updated_date ='${date1}' AND details.status_id In(23) GROUP BY customer.c_id UNION  SELECT customer.*,attestation.a_id,details.detail_id,details.status_id FROM customer,attestation,details WHERE customer.c_id=attestation.c_id AND attestation.a_id=details.service_id AND details.service_type=10 AND details.deleted=0 AND attestation.deleted=0 AND customer.is_cancel = 0 AND customer.deleted=0 AND  details.updated_date ='${date1}' AND details.status_id In(23) GROUP BY customer.c_id UNION SELECT customer.*,apostille.a_id,details.detail_id,details.status_id FROM customer,apostille,details WHERE customer.c_id=apostille.c_id AND apostille.a_id=details.service_id AND details.service_type=17 AND details.deleted=0 AND apostille.deleted=0 AND customer.deleted=0 and customer.is_cancel = 0   AND details.updated_date ='${date1}' AND details.status_id In(23) GROUP BY customer.c_id UNION SELECT customer.*,translation.a_id,details.detail_id,details.status_id FROM customer,translation,details WHERE customer.c_id=translation.c_id AND translation.a_id=details.service_id AND details.service_type=20 AND details.deleted=0 AND translation.deleted=0 AND customer.deleted=0 and customer.is_cancel = 0   AND details.updated_date ='${date1}' AND details.status_id In(23) GROUP BY customer.c_id`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql2, async function (err2, result2) {
        if (err2) {
          console.log(err2);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result2.length > 0) {
            for (let i = 0; i < result2.length; i += 1) {
              sqlllll = `select due_amt from payment where deleted=0 and c_id=${result2[i].c_id} order by payment_id DESC limit 1`;
              let responsee = await new Promise((resolve, reject) => {
                con.query(sqlllll, async function (err, result) {
                  if (err2) {
                    console.log(err2);
                    resolve({ status: 0, message: "Something went to wrong" });
                  } else {
                    if (result.length > 0) {
                      resolve({ status: 1, result: result[0].due_amt });
                    } else {
                      resolve({
                        status: 0,
                        message: "Something went to wrong",
                      });
                    }
                  }
                });
              });
              cust.push({
                service_type: result2[i].c_s_type,
                c_id: result2[i].c_id,
                c_name: result2[i].c_name,
                c_prefix: result2[i].c_prefix,
                c_email: result2[i].c_email,
                c_tax: result2[i].c_tax,
                status: result2[i].status_id,
                created_id: result2[i].created_id,
                due_amt: responsee.result,
                applicates: [],
              });
              applicate_list.push({
                service_type: result2[i].c_s_type,
                c_id: result2[i].c_id,
                c_name: result2[i].c_name,
                c_prefix: result2[i].c_prefix,
                c_email: result2[i].c_email,
                c_tax: result2[i].c_tax,
                status: result2[i].status_id,
                created_id: result2[i].created_id,
                due_amt: responsee.result,
                applicates: [],
              });
            }
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
          Object.keys(cust).map((k) => {
            if (cust[k].service_type == 10) {
              sql3 = `Select attestation.*,details.collector,details.d_c_id,(SELECT name FROM attributes WHERE attribute_id=details.status_id)as status_name ,(SELECT name FROM attributes WHERE attribute_id=details.d_c_id)as certificate_name,(SELECT name FROM attributes WHERE attribute_id=attestation.a_country)as country_name,(SELECT name FROM attributes WHERE attribute_id=attestation.a_type)as type FROM attestation RIGHT JOIN details ON  attestation.a_id=details.service_id WHERE  details.service_type=10 AND attestation.c_id = ${cust[k].c_id} and attestation.deleted = 0 `;
            } else if (cust[k].service_type == 8) {
              sql3 = `Select visa.*,details.collector,details.d_c_id,(SELECT name FROM attributes WHERE attribute_id=details.status_id)as status_name,(SELECT name FROM attributes WHERE attribute_id=details.d_c_id)as country_name,(SELECT name FROM attributes WHERE attribute_id=visa.v_type)as type,(SELECT GROUP_CONCAT(attributes.name SEPARATOR ',') as name FROM attributes where FIND_IN_SET (attributes.attribute_id , visa.v_supporting_doc)) as certificate_name  FROM visa RIGHT JOIN details ON  visa.v_id=details.service_id   WHERE   details.service_type=8 AND visa.c_id = ${cust[k].c_id} and visa.deleted = 0`;
            } else if (cust[k].service_type == 17) {
              sql3 = `Select apostille.*,details.collector,details.d_c_id,(SELECT name FROM attributes WHERE attribute_id=details.status_id)as status_name,(SELECT name FROM attributes WHERE attribute_id=details.d_c_id)as certificate_name,(SELECT name FROM attributes WHERE attribute_id=apostille.a_country)as country_name,(SELECT name FROM attributes WHERE attribute_id=apostille.a_type)as type  FROM apostille RIGHT JOIN details ON apostille.a_id=details.service_id  WHERE  details.service_type=17 AND apostille.c_id = ${cust[k].c_id} and apostille.deleted = 0`;
            } else {
              sql3 = `Select translation.*,details.collector,details.d_c_id,(SELECT name FROM attributes WHERE attribute_id=details.status_id)as status_name,(SELECT name FROM attributes WHERE attribute_id=details.d_c_id)as certificate_name,(SELECT name FROM attributes WHERE attribute_id=translation.a_country)as country_name,(SELECT name FROM attributes WHERE attribute_id=translation.a_type)as type  FROM translation RIGHT JOIN details ON translation.a_id=details.service_id  WHERE  details.service_type=20 AND translation.c_id = ${cust[k].c_id} and translation.deleted = 0`;
            }
            con.query(sql3, async function (errsql1, sql1res) {
              if (errsql1) {
                console.log(errsql1);
                resolve({ status: 0, message: "Something went to wrong" });
              } else {
                if (sql1res.length > 0) {
                  let cust_data = [];
                  sql1res.map((k) => {
                    cust_data.push(k);
                  });

                  applicate_list[k].applicates = cust_data;
                  if (k == cust.length - 1) {
                    resolve({
                      status: 1,
                      applicate_data: applicate_list,
                    });
                  }
                } else {
                  resolve({
                    status: 0,
                    applicate_data: [],
                    message: "Something went to wrong",
                  });
                }
              }
            });
          });
        }
      });
    });
    let record = [];

    response.applicate_data.map(async (k) => {
      record.push(k);
    });
    await sendServiceStatusMailTemp(record);
    return record;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function sendServiceStatusMailTemp(data1) {
  try {
    const getrow = (index) => {
      let rows = "";
      data1[index].applicates.map((a) => {
        data1[index].service_type == 8
          ? (rows =
            rows +
            `<tr><td style="border: 1px solid #333;padding:5px;"> ${a.v_name} </td>
<td style="border: 1px solid #333;padding:5px;"> ${a.type} </td>
<td style="border: 1px solid #333;padding:5px;"> ${a.country_name} </td>
<td style="border: 1px solid #333;padding:5px;"> ${a.certificate_name} </td>
<td style="border: 1px solid #333;padding:5px;"> ${a.status_name} </td></tr>`)
          : (rows =
            rows +
            `<tr><td style="border: 1px solid #333;padding:5px;"> ${a.a_name
            } </td>
<td style="border: 1px solid #333;padding:5px;"> ${a.type} </td>
<td style="border: 1px solid #333;padding:5px;"> ${a.country_name} </td>
<td style="border: 1px solid #333;padding:5px;"> ${a.certificate_name} </td>
<td style="border: 1px solid #333;padding:5px;"> ${a.status_name} </td>   
${data1[index].status == 23
              ? `<td style="border: 1px solid #333;padding:5px;">${a.collector}</td>`
              : ""
            }
</tr> `);
      });
      return rows;
    };
    let response = await new Promise(async (resolve, reject) => {
      let messa1 = [];
      data1.map(async (data, index) => {
        let table1 = `<div>
<table style="border-collapse: collapse;" >
  <tr style="border: 1px solid #333;padding:5px;">
    <th style="border: 1px solid #333;padding:5px;"> Name </th>
    <th style="border: 1px solid #333;padding:5px;"> Type </th>
    <th style="border: 1px solid #333;padding:5px;"> Country </th>
    <th style="border: 1px solid #333;padding:5px;"> Certificate </th>
    <th style="border: 1px solid #333;padding:5px;"> Status </th>
    ${data.status == 23
            ? '<th style="border: 1px solid #333;padding:5px;">Collected By</th>'
            : ""
          }
  </tr>
  ${getrow(index)}
</table>
</div>`;
        let message = await sendmessage.getTemplate(8);
        if (message.status != 0) {
          messa1.push(message);
          messa1[index].template = messa1[index].template.replace(
            "{:name:}",
            data.c_prefix + " " + data.c_name
          );
          messa1[index].template = messa1[index].template.replace(
            "{:table:}",
            table1
          );
          messa1[index].template = messa1[index].template.replace(
            "{:due_amt:}",
            data.due_amt
          );
          let senderMailSetting = await sendmessage.getEmailSetting(
            data.created_id
          );

          sqlll = `SELECT u_email FROM users WHERE u_id = ${data.created_id} `;
          let ccmail = await new Promise((resolve, reject) => {
            con.query(sqlll, async function (err1, result1) {
              if (err1) {
                console.log(err1);
                resolve({ status: 0, message: "Something went to wrong" });
              } else {
                if (result1.length > 0) {
                  resolve({ status: 1, result: result1[0].u_email });
                } else {
                  resolve({
                    status: 0,
                    message: "Something went to wrong",
                  });
                }
              }
            });
          });

          let mess =
            (messa1[index].header == 1
              ? typeof senderMailSetting.email_template_header !=
                undefined && senderMailSetting.email_template_header != undefined &&
                senderMailSetting.email_template_header != null
                ? senderMailSetting.email_template_header
                : ""
              : "") +
            messa1[index].template +
            (messa1[index].b_d_id != 0
              ? messa1[index].b_d_id == 1
                ? senderMailSetting.gst_bankdetails
                : messa1[index].b_d_id == 2
                  ? senderMailSetting.ngst_bankdetails
                  : messa1[index].b_d_id == 3
                    ? senderMailSetting.general_bankdetails
                    : ""
              : "") +
            // (data.created_id == 1
            //   ? data.c_tax == 0
            //     ? senderMailSetting.bank_details
            //     : senderMailSetting.nongst_bank_details
            //   : data.c_tax == 0
            //     ? senderMailSetting.b_bank_details
            //     : senderMailSetting.b_nongst_bank_deatils) +
            (messa1[index].footer == 1
              ? senderMailSetting.email_template_footer
              : "") +
            (messa1.signature == 1 ? senderMailSetting.email_signature : "");
          CCMailSetting = await sendmessage.getEmailSetting(1);

          sendmessagenow = sendmessage.customermessagesend(
            senderMailSetting,
            data.c_email,
            mess,
            `${message.subject} || ${data.c_prefix + " " + data.c_name}`,
            "", //CCMailSetting.e_username,  // user mail
            ccmail.result, // reply mail
            1,
            "info@hyderabadattestation.com"
          );
          resolve({
            status: 1,
            message: "Lead status updated mail is Scheduled...",
          });
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}
async function setleadmailtemp(data1) {
  let response = await new Promise(async (resolve, reject) => {
    let messa1 = [];
    data1.map(async (data, index) => {
      let etemp = 0;

      if (data.l_status == 1) {
        etemp = parseInt(9);
      } else if (data.l_status == 2) {
        etemp = parseInt(10);
      } else if (data.l_status == 3) {
        etemp = parseInt(11);
      } else if (data.l_status == 4) {
        etemp = parseInt(12);
      } else if (data.l_status == 5) {
        etemp = parseInt(13);
      } else if (data.l_status == 6) {
        etemp = parseInt(14);
      }
      let message = await sendmessage.getTemplate(etemp);
      if (message.status != 0) {
        messa1.push(message);
        let senderMailSetting = await sendmessage.getEmailSetting(
          data.l_created_by
        );

        sqlll = `SELECT u_email FROM users WHERE u_id = ${data.l_created_by} `;
        let ccmail = await new Promise((resolve, reject) => {
          con.query(sqlll, async function (err1, result1) {
            if (err1) {
              console.log(err1);
              resolve({ status: 0, message: "Something went to wrong" });
            } else {
              if (result1.length > 0) {
                resolve({ status: 1, result: result1[0].u_email });
              } else {
                resolve({
                  status: 0,
                  message: "Something went to wrong",
                });
              }
            }
          });
        });

        messa1[index].template = messa1[index].template.replace(
          "{:name:}",
          data.l_name_prefix + " " + data.l_name
        );
        let mess =
          (messa1[index].header == 1
            ? typeof senderMailSetting.email_template_header !=
              undefined && senderMailSetting.email_template_header != undefined &&
              senderMailSetting.email_template_header != null
              ? senderMailSetting.email_template_header
              : ""
            : "") +
          messa1[index].template +
          (messa1[index].b_d_id != 0
            ? messa1[index].b_d_id == 1
              ? senderMailSetting.gst_bankdetails
              : messa1[index].b_d_id == 2
                ? senderMailSetting.ngst_bankdetails
                : messa1[index].b_d_id == 3
                  ? senderMailSetting.general_bankdetails
                  : ""
            : "") +
          (messa1[index].footer == 1
            ? senderMailSetting.email_template_footer
            : "") +
          (messa1[index].signature == 1
            ? senderMailSetting.email_signature
            : "");

        CCMailSetting = await sendmessage.getEmailSetting(1);

        sendmessagenow = sendmessage.customermessagesend(
          senderMailSetting,
          data.l_email,
          mess,
          message.subject,
          ccmail.result, //CCMailSetting.e_username,  // user mail
          ccmail.result, // reply mail
          1
        );
        resolve({
          status: 1,
          message: "Lead status updated mail is Scheduled...",
        });
      }
    });
  });
  return response;
}

async function downloadallinvoicepdfwithbranch(data) {
  try {
    let customer = [];
    generalsetting = `SELECT * FROM gsetting where s_id=1`;
    let response1 = await new Promise((resolve, reject) => {
      con.query(generalsetting, function (err, sresult) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (sresult.length > 0) {
            resolve({ gsettingdata: sresult[0] });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    if (data.user_type == 0) {
      // console.log(data.allocate_id, "*&^^^^^^^^^^^^^^^");
      if (data.status == 1) {
        sql = `SELECT customer.c_id,branch.state_id,customer.c_tax,customer.u_id,customer.created_id,customer.login_u_id FROM customer,branch WHERE customer.branch_id=branch.branch_id AND customer.deleted=0 and customer.is_block = 1 and customer.is_cancel=0 AND branch.deleted=0`;
        if (
          typeof data.i_branch_id != "undefined" &&
          data.i_branch_id != "undefined" &&
          data.i_branch_id != "null"
        ) {
          sql += ` and customer.branch_id=${data.i_branch_id}`;
        }
        if (
          typeof data.allocate_id != "undefined" &&
          data.allocate_id != "null" &&
          data.allocate_id != 0 &&
          data.allocate_id != -1
        ) {
          sql += ` and customer.u_id=${data.allocate_id}`;
        }
        if (typeof data.g_val != "undefined" && data.g_val != "null") {
          sql += ` and customer.c_tax=${data.g_val}`;
        }
        if (
          typeof data.s_date != undefined &&
          typeof data.e_date != undefined &&
          data.s_date != "undefined" &&
          data.e_date != "undefined" &&
          data.s_date != "null" &&
          data.e_date != "null"
        ) {
          sql += ` and STR_TO_DATE(customer.c_date,"%d-%m-%Y") >= STR_TO_DATE('${data.s_date}',"%d-%m-%Y") and STR_TO_DATE(customer.c_date,"%d-%m-%Y") <= STR_TO_DATE('${data.e_date}',"%d-%m-%Y")`;
        }
      } else if (data.status == 2) {
        sql = `SELECT customer.*,payment.*,(SELECT state_id FROM branch WHERE customer.branch_id = branch.branch_id  AND branch.deleted=0)as state_id FROM payment,customer WHERE 
        payment.c_id=customer.c_id AND customer.deleted=0 AND customer.is_block = 1 and customer.is_cancel=0 AND payment.deleted=0 AND payment.due_amt=0`;
        if (typeof data.g_val != "undefined" && data.g_val != "null") {
          sql += ` and customer.c_tax=${data.g_val}`;
        }
        if (
          typeof data.i_branch_id != "undefined" &&
          data.i_branch_id != "undefined" &&
          data.i_branch_id != "null"
        ) {
          sql += ` and customer.branch_id=${data.i_branch_id}`;
        }
        if (
          typeof data.allocate_id != "undefined" &&
          data.allocate_id != "null" &&
          data.allocate_id != 0 &&
          data.allocate_id != -1
        ) {
          sql += ` and customer.u_id=${data.allocate_id}`;
        }
        if (
          typeof data.s_date != undefined &&
          typeof data.e_date != undefined &&
          data.s_date != "undefined" &&
          data.e_date != "undefined" &&
          data.s_date != "null" &&
          data.e_date != "null"
        ) {
          sql += ` and STR_TO_DATE(customer.c_date,"%d-%m-%Y") >= STR_TO_DATE('${data.s_date}',"%d-%m-%Y") and STR_TO_DATE(customer.c_date,"%d-%m-%Y") <= STR_TO_DATE('${data.e_date}',"%d-%m-%Y")`;
        }
        sql += ` AND payment_id IN (SELECT max(payment_id) FROM payment GROUP by c_id)`;
      } else if (data.status == 3) {
        sql = `SELECT customer.*,payment.*,(SELECT state_id FROM branch WHERE customer.branch_id = branch.branch_id  AND branch.deleted=0)as state_id FROM payment,customer WHERE 
        payment.c_id=customer.c_id AND customer.deleted=0 AND payment.deleted=0 AND customer.is_block = 1 and customer.is_cancel=0 AND payment.due_amt!=0`;
        if (typeof data.g_val != "undefined" && data.g_val != "null") {
          sql += ` and customer.c_tax=${data.g_val}`;
        }
        if (
          typeof data.i_branch_id != "undefined" &&
          data.i_branch_id != "undefined" &&
          data.i_branch_id != "null"
        ) {
          sql += ` and customer.branch_id=${data.i_branch_id}`;
        }
        if (
          typeof data.allocate_id != "undefined" &&
          data.allocate_id != "null" &&
          data.allocate_id != 0 &&
          data.allocate_id != -1
        ) {
          sql += ` and customer.u_id=${data.allocate_id}`;
        }
        if (
          typeof data.s_date != undefined &&
          typeof data.e_date != undefined &&
          data.s_date != "undefined" &&
          data.e_date != "undefined" &&
          data.s_date != "null" &&
          data.e_date != "null"
        ) {
          sql += ` and STR_TO_DATE(customer.c_date,"%d-%m-%Y") >= STR_TO_DATE('${data.s_date}',"%d-%m-%Y") and STR_TO_DATE(customer.c_date,"%d-%m-%Y") <= STR_TO_DATE('${data.e_date}',"%d-%m-%Y")`;
        }
        sql += ` AND payment_id IN (SELECT max(payment_id) FROM payment GROUP by c_id)`;
      }
    } else if (data.user_type == 1) {
      if (data.status == 1) {
        sql = `SELECT customer.c_id,branch.state_id,customer.c_tax,customer.u_id,customer.created_id,customer.login_u_id FROM customer,branch WHERE customer.branch_id=branch.branch_id AND customer.deleted=0 and customer.is_block = 1 and customer.is_cancel=0 AND branch.deleted=0 
        and (customer.branch_id=${data.login_branch_id} or customer.foreign_branch = ${data.login_branch_id})`;
        if (
          typeof data.allocate_id != "undefined" &&
          data.allocate_id != "null" &&
          data.allocate_id != 0 &&
          data.allocate_id != -1
        ) {
          sql += ` and customer.u_id=${data.allocate_id}`;
        }
        if (typeof data.g_val != "undefined" && data.g_val != "null") {
          sql += ` and customer.c_tax=${data.g_val}`;
        }
        if (
          typeof data.s_date != undefined &&
          typeof data.e_date != undefined &&
          data.s_date != "undefined" &&
          data.e_date != "undefined" &&
          data.s_date != "null" &&
          data.e_date != "null"
        ) {
          sql += ` and STR_TO_DATE(customer.c_date,"%d-%m-%Y") >= STR_TO_DATE('${data.s_date}',"%d-%m-%Y") and STR_TO_DATE(customer.c_date,"%d-%m-%Y") <= STR_TO_DATE('${data.e_date}',"%d-%m-%Y")`;
        }
      } else if (data.status == 2) {
        sql = `SELECT customer.*,payment.*,(SELECT state_id FROM branch WHERE customer.branch_id = branch.branch_id  AND branch.deleted=0)as state_id FROM payment,customer WHERE 
        payment.c_id=customer.c_id AND customer.deleted=0 AND customer.is_block = 1 and customer.is_cancel=0 AND payment.due_amt=0 and (customer.branch_id=${data.login_branch_id} or customer.foreign_branch = ${data.login_branch_id})`;
        if (typeof data.g_val != "undefined" && data.g_val != "null") {
          sql += ` and customer.c_tax=${data.g_val}`;
        }
        if (
          typeof data.allocate_id != "undefined" &&
          data.allocate_id != "null" &&
          data.allocate_id != 0 &&
          data.allocate_id != -1
        ) {
          sql += ` and customer.u_id=${data.allocate_id}`;
        }
        if (
          typeof data.s_date != undefined &&
          typeof data.e_date != undefined &&
          data.s_date != "undefined" &&
          data.e_date != "undefined" &&
          data.s_date != "null" &&
          data.e_date != "null"
        ) {
          sql += ` and STR_TO_DATE(customer.c_date,"%d-%m-%Y") >= STR_TO_DATE('${data.s_date}',"%d-%m-%Y") and STR_TO_DATE(customer.c_date,"%d-%m-%Y") <= STR_TO_DATE('${data.e_date}',"%d-%m-%Y")`;
        }
        sql += ` AND payment_id IN (SELECT max(payment_id) FROM payment GROUP by c_id)`;
      } else if (data.status == 3) {
        sql = `SELECT customer.*,payment.*,(SELECT state_id FROM branch WHERE customer.branch_id = branch.branch_id  AND branch.deleted=0)as state_id FROM payment,customer WHERE 
        payment.c_id=customer.c_id AND customer.deleted=0 AND customer.is_block = 1 and customer.is_cancel=0 AND payment.due_amt!=0 and (customer.branch_id=${data.login_branch_id} or customer.foreign_branch = ${data.login_branch_id})`;
        if (typeof data.g_val != "undefined" && data.g_val != "null") {
          sql += ` and customer.c_tax=${data.g_val}`;
        }
        if (
          typeof data.allocate_id != "undefined" &&
          data.allocate_id != "null" &&
          data.allocate_id != 0 &&
          data.allocate_id != -1
        ) {
          sql += ` and customer.u_id=${data.allocate_id}`;
        }
        if (
          typeof data.s_date != undefined &&
          typeof data.e_date != undefined &&
          data.s_date != "undefined" &&
          data.e_date != "undefined" &&
          data.s_date != "null" &&
          data.e_date != "null"
        ) {
          sql += ` and STR_TO_DATE(customer.c_date,"%d-%m-%Y") >= STR_TO_DATE('${data.s_date}',"%d-%m-%Y") and STR_TO_DATE(customer.c_date,"%d-%m-%Y") <= STR_TO_DATE('${data.e_date}',"%d-%m-%Y")`;
        }
        sql += ` AND payment_id IN (SELECT max(payment_id) FROM payment GROUP by c_id)`;
      }
    } else if (data.user_type == 3) {
      if (data.status == 1) {
        sql = `SELECT customer.c_id,branch.state_id,customer.c_tax,customer.u_id,customer.created_id,customer.login_u_id FROM customer,branch WHERE customer.branch_id=branch.branch_id AND customer.deleted=0 and customer.is_block = 1 and customer.is_cancel=0 AND branch.deleted=0 
        and customer.u_id=${data.u_id}`;
        if (typeof data.g_val != "undefined" && data.g_val != "null") {
          sql += ` and customer.c_tax=${data.g_val}`;
        }
        if (
          typeof data.s_date != undefined &&
          typeof data.e_date != undefined &&
          data.s_date != "undefined" &&
          data.e_date != "undefined" &&
          data.s_date != "null" &&
          data.e_date != "null"
        ) {
          sql += ` and STR_TO_DATE(customer.c_date,"%d-%m-%Y") >= STR_TO_DATE('${data.s_date}',"%d-%m-%Y") and STR_TO_DATE(customer.c_date,"%d-%m-%Y") <= STR_TO_DATE('${data.e_date}',"%d-%m-%Y")`;
        }
      } else if (data.status == 2) {
        sql = `SELECT customer.*,payment.*,(SELECT state_id FROM branch WHERE customer.branch_id = branch.branch_id  AND branch.deleted=0)as state_id FROM payment,customer WHERE 
        payment.c_id=customer.c_id AND customer.deleted=0 AND customer.is_cancel=0 AND payment.due_amt=0 and customer.u_id=${data.u_id}`;
        if (typeof data.g_val != "undefined" && data.g_val != "null") {
          sql += ` and customer.c_tax=${data.g_val}`;
        }
        if (
          typeof data.s_date != undefined &&
          typeof data.e_date != undefined &&
          data.s_date != "undefined" &&
          data.e_date != "undefined" &&
          data.s_date != "null" &&
          data.e_date != "null"
        ) {
          sql += ` and STR_TO_DATE(customer.c_date,"%d-%m-%Y") >= STR_TO_DATE('${data.s_date}',"%d-%m-%Y") and STR_TO_DATE(customer.c_date,"%d-%m-%Y") <= STR_TO_DATE('${data.e_date}',"%d-%m-%Y")`;
        }
        sql += ` AND payment_id IN (SELECT max(payment_id) FROM payment GROUP by c_id)`;
      } else if (data.status == 3) {
        sql = `SELECT customer.*,payment.*,(SELECT state_id FROM branch WHERE customer.branch_id = branch.branch_id  AND branch.deleted=0)as state_id FROM payment,customer WHERE 
        payment.c_id=customer.c_id AND customer.deleted=0 AND customer.is_block = 1 and customer.is_cancel=0 AND payment.due_amt!=0 and customer.u_id=${data.u_id}`;
        if (typeof data.g_val != "undefined" && data.g_val != "null") {
          sql += ` and customer.c_tax=${data.g_val}`;
        }
        if (
          typeof data.s_date != undefined &&
          typeof data.e_date != undefined &&
          data.s_date != "undefined" &&
          data.e_date != "undefined" &&
          data.s_date != "null" &&
          data.e_date != "null"
        ) {
          sql += ` and STR_TO_DATE(customer.c_date,"%d-%m-%Y") >= STR_TO_DATE('${data.s_date}',"%d-%m-%Y") and STR_TO_DATE(customer.c_date,"%d-%m-%Y") <= STR_TO_DATE('${data.e_date}',"%d-%m-%Y")`;
        }
        sql += ` AND payment_id IN (SELECT max(payment_id) FROM payment GROUP by c_id)`;
      }
    }
    // console.log(sql, "$$$$$$$$$$$$$$$$");
    let response2 = await new Promise((resolve, reject) => {
      con.query(sql, function (err, sresult) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (sresult.length > 0) {
            // console.log("₹₹₹₹₹₹₹₹₹₹₹₹₹₹₹₹");
            sresult.forEach(function (r) {
              // console.log(
              //   r.login_u_id && r.login_u_id != 0 ? r.login_u_id : r.created_id,
              //   r.login_u_id,
              //   r.created_id,
              //   "dfrgdfjgdfkg"
              // );
              customer.push({
                cid: r.c_id,
                sid: r.state_id,
                c_tax: r.c_tax,
                cuid:
                  r.login_u_id && r.login_u_id != 0
                    ? r.login_u_id
                    : r.created_id,
              });
            });
            resolve({
              customerid: customer,
            });
          } else {
            resolve({
              status: 0,
              customerid: [],
              message: "Something went to wrong",
            });
          }
        }
      });
    });

    const promises = response2.customerid.map(async (e) => {
      var array = [];
      // request details from GitHub’s API with Axios
      let newobj = {
        id: e.cid,
        uid: e.cuid,
      };
      // console.log(newobj, "newobjnewobjnewobjnewobj");
      let tu = await getinvoicedata(newobj).then(function (getresponse) {
        // console.log(getresponse, "getresponse");
        array.push(getresponse);
      });
      return array;
    });
    let obj = [];
    const results = await Promise.all(promises);

    results.map((r) => {
      r.map((r1) => {
        if (r1.status == 1) {
          obj.push(r1);
        }
      });
    });
    // console.log(obj, "objobjobjobj");
    let ino = 0;
    if (data.status == 1) {
      ino = "all";
    } else if (data.status == 2) {
      ino = "paid";
    } else if (data.status == 3) {
      ino = "due";
    }

    if (typeof data.g_val != "undefined") {
      if (data.g_val == 1) {
        ino += "_GST";
      } else if (data.g_val == 0) {
        ino += "_NON GST";
      }
    }

    let response3 = await new Promise((resolve, reject) => {
      pdf
        .create(allinvoicetemplate(obj, response1.gsettingdata, customer), {
          childProcessOptions: {
            env: {
              OPENSSL_CONF: "/dev/null",
            },
          },
        })
        .toFile(
          `${__dirname}/public/Assets/invoice_pdf/invoice_${ino}.pdf`,
          (err) => {
            if (err) {
              return console.log("error");
            }
            resolve({
              ino: ino,
            });
          }
        );
    });

    if (
      data.is_email == "1" &&
      ((typeof data.allocate_id != "undefined" &&
        data.allocate_id != 0 &&
        data.allocate_id != -1) ||
        (data.user_type == 3 &&
          typeof data.u_id != "undefined" &&
          data.u_id != 0))
    ) {
      if (data.user_type == 3) {
        getuseremail = `SELECT * FROM users where deleted=0 and u_id=${data.u_id}`;
      } else {
        getuseremail = `SELECT * FROM users where deleted=0 and u_id=${data.allocate_id}`;
      }
      let uresponse = await new Promise((resolve, reject) => {
        con.query(getuseremail, function (err, sresult) {
          if (err) {
            console.log(err);
            resolve({ status: 0, message: "Something went to wrong" });
          } else {
            if (sresult.length > 0) {
              resolve({
                u_email: sresult[0].u_email,
                u_name: sresult[0].u_name,
              });
            } else {
              resolve({
                status: 0,
                message: "Something went to wrong",
              });
            }
          }
        });
      });
      let response = await new Promise(async (resolve, reject) => {
        senderMailSetting = await sendmessage.getEmailSetting(data.u_id);

        sqlll = `SELECT u_email FROM users WHERE u_id = ${data.u_id} `;
        let ccmail = await new Promise((resolve, reject) => {
          con.query(sqlll, async function (err1, result1) {
            if (err1) {
              console.log(err1);
              resolve({ status: 0, message: "Something went to wrong" });
            } else {
              if (result1.length > 0) {
                resolve({ status: 1, result: result1[0].u_email });
              } else {
                resolve({
                  status: 0,
                  message: "Something went to wrong",
                });
              }
            }
          });
        });

        let message = await sendmessage.getTemplate(2);
        if (message.status != 0) {
          message.template = message.template.replace(
            "{:name:}",
            uresponse.u_name
          );
          let mess =
            (message.header == 1
              ? typeof senderMailSetting.email_template_header !=
                undefined && senderMailSetting.email_template_header != undefined &&
                senderMailSetting.email_template_header != null
                ? senderMailSetting.email_template_header
                : ""
              : "") +
            message.template +
            (message.b_d_id != 0
              ? message.b_d_id == 1
                ? senderMailSetting.gst_bankdetails
                : message.b_d_id == 2
                  ? senderMailSetting.ngst_bankdetails
                  : message.b_d_id == 3
                    ? senderMailSetting.general_bankdetails
                    : ""
              : "") +
            (message.footer == 1
              ? senderMailSetting.email_template_footer
              : "") +
            (message.signature == 1 ? senderMailSetting.email_signature : "");

          CCMailSetting = await sendmessage.getEmailSetting(2);
          let att = [];
          att.push({ url: `invoice_${response3.ino}.pdf` });
          let pathname = __dirname + "/public/Assets/invoice_pdf";
          sendmessagenow = sendmessage.messagesend(
            senderMailSetting,
            uresponse.u_email,
            mess,
            message.subject,
            att,
            // CCMailSetting.cc_email, //cc mail// CCMailSetting.e_username,
            ccmail.result, // reply mail
            1,
            pathname
          );
          sendmessagenow = sendmessage.messagesend(
            senderMailSetting,
            CCMailSetting.cc_email,
            mess,
            message.subject,
            att,
            // CCMailSetting.cc_email, //cc mail// CCMailSetting.e_username,
            ccmail.result, // reply mail
            1,
            pathname
          );
          resolve({
            status: 1,
            message: "Lead mail send to customer successfully",
          });
        }
      });
    }

    return response3;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function insertLeadCustomer(data) {
  try {
    sqlll = `SELECT u_name FROM users WHERE u_id = ${data.c_u_id} `;
    let ress = await new Promise((resolve, reject) => {
      con.query(sqlll, async function (err1, result1) {
        if (err1) {
          console.log(err1);
          resolve({ status: 0, message: "Customer Not Updated" });
        } else {
          if (result1.length > 0) {
            resolve({ status: 1, result: result1[0].u_name });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    sql12 = `SELECT b_name FROM branch WHERE branch_id = ${data.c_branch_id} `;
    let res = await new Promise((resolve, reject) => {
      con.query(sql12, async function (err1, result1) {
        if (err1) {
          console.log(err1);
          resolve({ status: 0, message: "Customer Not Updated" });
        } else {
          if (result1.length > 0) {
            resolve({ status: 1, result: result1[0].b_name });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });

    //changes
    let currdate = moment().format("DDMMYYhhmmss");
    let tracking_id = `${res.result.substring(
      0,
      2
    )}${currdate}${ress.result.substring(0, 1)}`;
    //2803
    sql1 = `INSERT INTO lead_customer (m_c_id,c_date,c_prefix,c_name,c_mo_no,c_email,c_address,c_gst_no,c_state,c_s_type,c_total_customer,c_tax,c_gst,c_remark,created_id,u_id,branch_id,d_address,tracking_id,marketing_user,created_branch_id,arn_no,f_z_type,refrence_by,city,pincode,login_u_id,l_id) VALUES (
      ${data.lead_id},'${data.l_date}','${data.l_name_prefix}',
            '${mysql_real_escape_string(data.l_name)}','${data.co_no
      }','${mysql_real_escape_string(data.l_email)}','${mysql_real_escape_string(
        data.l_address
      )}','${typeof data.m_c_gst == "undefined" ? "" : data.m_c_gst}',${data.m_c_state
      },${data.l_service},${data.c_total_customer},${data.c_tax},'${typeof data.c_gst == "undefined" ? "" : data.c_gst
      }','${typeof data.c_remark == "undefined"
        ? ""
        : mysql_real_escape_string(data.c_remark)
      }', ${data.l_created_by},${data.c_u_id},${data.c_branch_id
      },'${mysql_real_escape_string(data.d_address)}','${mysql_real_escape_string(
        tracking_id
      )}',${data.l_source == 271 ? data.reference_id : 0},${data.l_created_branch_id != 0
        ? data.l_created_branch_id
        : data.l_branch_id
      },'${typeof data.arn_no == "undefined" || data.arn_no == "" ? "" : data.arn_no
      }',${typeof data.f_z_type == "undefined" ? 0 : data.f_z_type},${data.l_source == 282 ? data.reference_id : 0
      },'${typeof data.city == "undefined" ||
        data.city == null ||
        data.city == "" ||
        data.city == undefined
        ? ""
        : data.city
      }','${typeof data.pincode == "undefined" ||
        data.pincode == "" ||
        data.pincode == null ||
        data.pincode == undefined
        ? ""
        : data.pincode
      }',${data.login_u_id},${data.lead_id})`;
    let response1 = await new Promise((resolve, reject) => {
      con.query(sql1, async function (err1, result1) {
        if (err1) {
          console.log(err1);
          resolve({ status: 0, message: "Customer Not Updated" });
        } else {
          if (result1) {
            resolve({
              status: 1,
              c_id: result1.insertId,
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    if (data.l_service == 8) {
      let k = 0;
      amount = await getcustomeramount(data);

      for (i = 0; i < data.applicationdata.length; i++) {
        sql2 = `INSERT INTO lead_visa (c_id,v_prefix,v_name,v_code,v_passport,v_type,v_country,v_supporting_doc,created_id,pg_no,tracking_id,process_limit_date,process_limit_mail_date) VALUES (${response1.c_id
          },'${data.applicationdata[i].v_prefix}','${mysql_real_escape_string(
            data.applicationdata[i].v_name
          )}',${data.applicationdata[i].v_code},'${data.applicationdata[i].v_passport
          }',${data.applicationdata[i].v_type},'${data.applicationdata[
            i
          ].v_country.toString()}','${data.applicationdata[
            i
          ].a_supporting_doc.toString()}',${data.created_id},${data.applicationdata[i].pg_no
          },'${tracking_id}','${data.applicationdata[i].process_limit_date}','${data.applicationdata[i].process_limit_date
          }')`;
        let response2 = await new Promise((resolve, reject) => {
          con.query(sql2, async function (err2, result2) {
            if (err2) {
              console.log(err2);
              resolve({ status: 0, message: "Something went wrong" });
            } else {
              if (result2) {
                resolve({
                  status: 1,
                  result: result2.insertId,
                });
              } else {
                resolve({
                  status: 0,
                  message: "Something went to wrong",
                });
              }
            }
          });
        });
        for (j = 0; j < data.applicationdata[i].v_country.length; j++) {
          sql3 = `INSERT INTO lead_details (service_type,service_id,amount,d_c_id,tracking_id) VALUES (${data.l_service
            },${response2.result},${amount.result[k]},${data.applicationdata[i].v_country[j]
            },'${mysql_real_escape_string(tracking_id)}')`;
          k = k + 1;
          let response3 = await new Promise((resolve, reject) => {
            con.query(sql3, async function (err3, result3) {
              if (err3) {
                console.log(err3);
                resolve({ status: 0, message: "Something went wrong" });
              } else {
                if (result3) {
                  resolve({
                    status: 1,
                    result: result3,
                  });
                } else {
                  resolve({
                    status: 0,
                    message: "Something went to wrong",
                  });
                }
              }
            });
          });
        }
      }
    } else {
      amount = await getcustomeramount(data);

      for (i = 0; i < data.applicationdata.length; i++) {
        if (data.l_service == 10) {
          sql2 = `INSERT INTO lead_attestation`;
        } else if (data.l_service == 17) {
          sql2 = `INSERT INTO lead_apostille`;
        } else {
          sql2 = `INSERT INTO lead_translation`;
        }
        sql2 += `(c_id,a_prefix,a_name,a_code,a_country,a_type,a_certificate,a_supporting_doc,a_extra_doc,created_id,pg_no,tracking_id,process_limit_date,process_limit_mail_date,no_of_certificates) VALUES (${response1.c_id
          },'${data.applicationdata[i].a_prefix}','${mysql_real_escape_string(
            data.applicationdata[i].a_name
          )}',${data.applicationdata[i].a_code},${data.applicationdata[i].a_country
          },${data.applicationdata[i].a_type},
        '${data.applicationdata[i].a_certificate.toString()}',
                      '${typeof data.applicationdata[i].a_supporting_doc ==
            "undefined"
            ? ""
            : data.applicationdata[i].a_supporting_doc.toString()
          }',
                      '${typeof data.applicationdata[i].a_extra_doc ==
            "undefined"
            ? ""
            : data.applicationdata[i].a_extra_doc.toString()
          }',${data.created_id},${data.applicationdata[i].pg_no
          },'${tracking_id}','${data.applicationdata[i].process_limit_date}','${data.applicationdata[i].process_limit_date
          }',${data.applicationdata[i].no_of_certificates})`;
        let response2 = await new Promise((resolve, reject) => {
          con.query(sql2, async function (err2, result2) {
            if (err2) {
              console.log(err2);
              resolve({ status: 0, message: "Something went wrong" });
            } else {
              if (result2) {
                resolve({
                  status: 1,
                  result: result2.insertId,
                });
              } else {
                resolve({
                  status: 0,
                  message: "Something went to wrong",
                });
              }
            }
          });
        });
        for (j = 0; j < data.applicationdata[i].a_certificate.length; j++) {
          sql3 = `INSERT INTO lead_details (service_type,service_id,amount,d_c_id,tracking_id) VALUES (${data.l_service
            },${response2.result},${amount.result[i]},${data.applicationdata[i].a_certificate[j]
            },'${mysql_real_escape_string(tracking_id)}')`;
          let response3 = await new Promise((resolve, reject) => {
            con.query(sql3, async function (err3, result3) {
              if (err3) {
                console.log(err3);
                resolve({ status: 0, message: "Something went wrong" });
              } else {
                if (result3) {
                  resolve({
                    status: 1,
                    result: result3,
                  });
                } else {
                  resolve({
                    status: 0,
                    message: "Something went to wrong",
                  });
                }
              }
            });
          });
        }
      }
    }
    let responseinvoice = await new Promise((resolve, reject) => {
      if (data.c_tax == "1") {
        //1003
        // getinvoiceno = `SELECT *,invoice_no FROM lead_payment,lead_customer WHERE lead_payment.c_id=lead_customer.c_id and lead_payment.c_tax = "1" and lead_customer.branch_id=${data.c_branch_id} and lead_payment.deleted=0 and lead_customer.deleted=0  ORDER BY lead_customer.c_id DESC limit 1`;
        let getinvoiceno = `SELECT *,invoice_no FROM lead_payment JOIN lead_customer ON lead_payment.c_id=lead_customer.c_id and lead_payment.c_tax = "1" and lead_customer.branch_id=${data.c_branch_id} and lead_payment.deleted=0 ORDER BY lead_payment.payment_id DESC,lead_customer.c_id DESC limit 1;`;

        // const now = new Date();
        // const cvalue = date.format(now, "YY");
        // const currentYear = new Date().getFullYear().toString().slice(-2);
        // const previousYear = currentYear - 1;
        const cvalue = moment().format("MM");
        const last2 = new Date().getFullYear().toString().substring(2);
        const last2Num = Number(last2);
        var today = new Date();
        if (today.getMonth() + 1 <= 3) {
          fiscalyear = last2Num - 1 + "-" + last2Num;
        } else {
          fiscalyear = last2Num + "-" + (last2Num + 1);
        }
        let invoice_no = 0;
        con.query(getinvoiceno, async function (errino, inoresult) {
          if (errino) {
            console.log(errino);
            resolve({ status: 0, message: "Something went wrong" });
          } else {
            if (inoresult.length > 0 && inoresult[0].invoice_no != 0) {
              //1003
              let ino = inoresult[0].invoice_no;
              let n_ino = ino.split("/");
              if (fiscalyear == n_ino[2]) {
                invoice_no =
                  "PI/" +
                  res.result.substring(0, 2) +
                  "/" +
                  fiscalyear +
                  "/" +
                  "g" +
                  cvalue +
                  "/" +
                  ++n_ino[4];
              } else {
                invoice_no =
                  "PI/" +
                  res.result.substring(0, 2) +
                  "/" +
                  fiscalyear +
                  "/" +
                  "g" +
                  cvalue +
                  "/" +
                  1;
              }
            } else {
              invoice_no =
                "PI/" +
                res.result.substring(0, 2) +
                "/" +
                fiscalyear +
                "/" +
                "g" +
                cvalue +
                "/" +
                1;
            }
            resolve({ status: 1, ino: invoice_no });
          }
        });
      } else {
        //1003
        // getinvoiceno = `SELECT *,invoice_no FROM lead_payment,lead_customer WHERE lead_payment.c_id=lead_customer.c_id and lead_payment.c_tax = "0" and lead_customer.branch_id=${data.c_branch_id} and lead_payment.deleted=0 AND lead_customer.deleted = 0 ORDER BY lead_customer.c_id DESC limit 1;`;
        let getinvoiceno = `SELECT *,invoice_no FROM lead_payment JOIN lead_customer ON lead_payment.c_id=lead_customer.c_id and lead_payment.c_tax = "0" and lead_customer.branch_id=${data.c_branch_id} and lead_payment.deleted=0 ORDER BY lead_payment.payment_id DESC,lead_customer.c_id DESC limit 1;`;

        // const now = new Date();
        // const cvalue = date.format(now, "YY");
        // const currentYear = new Date().getFullYear().toString().slice(-2);
        // const previousYear = currentYear - 1;
        const cvalue = moment().format("MM");
        const last2 = new Date().getFullYear().toString().substring(2);
        const last2Num = Number(last2);
        var today = new Date();
        if (today.getMonth() + 1 <= 3) {
          fiscalyear = last2Num - 1 + "-" + last2Num;
        } else {
          fiscalyear = last2Num + "-" + (last2Num + 1);
        }
        let invoice_no = 0;
        con.query(getinvoiceno, async function (errino, inoresult) {
          if (errino) {
            console.log(errino);
            resolve({ status: 0, message: "Something went wrong" });
          } else {
            if (inoresult.length > 0 && inoresult[0].invoice_no != 0) {
              //1003
              let ino = inoresult[0].invoice_no;
              let n_ino = ino.split("/");
              if (fiscalyear == n_ino[2]) {
                invoice_no =
                  "PI/" +
                  res.result.substring(0, 2) +
                  "/" +
                  fiscalyear +
                  "/" +
                  cvalue +
                  "/" +
                  ++n_ino[4];
              } else {
                invoice_no =
                  "PI/" +
                  res.result.substring(0, 2) +
                  "/" +
                  fiscalyear +
                  "/" +
                  cvalue +
                  "/" +
                  1;
              }
            } else {
              invoice_no =
                "PI/" +
                res.result.substring(0, 2) +
                "/" +
                fiscalyear +
                "/" +
                cvalue +
                "/" +
                1;
            }
            resolve({ status: 1, ino: invoice_no });
          }
        });
      }
    });
    // getinvoiceno = `SELECT invoice_no FROM lead_payment order by payment_id DESC limit 1`;
    // let responseinvoice = await new Promise((resolve, reject) => {
    //   const now = new Date();
    //   const cvalue = date.format(now, "YY");
    //   const currentYear = new Date().getFullYear().toString().slice(-2);
    //   const previousYear = currentYear - 1;
    //   let invoice_no = 0;
    //   con.query(getinvoiceno, async function (errino, inoresult) {
    //     if (errino) {
    //       resolve({ status: 0, message: "Something went wrong" });
    //     }
    //     if (inoresult.length > 0 && inoresult[0].invoice_no != 0) {
    //       let ino = inoresult[0].invoice_no;
    //       let n_ino = ino.split("/");
    //       invoice_no = "PI/" + previousYear + "-" + cvalue + "/" + ++n_ino[2];
    //     } else {
    //       invoice_no = "PI/" + previousYear + "-" + cvalue + "/" + 1;
    //     }
    //     resolve({ status: 1, ino: invoice_no });
    //   });
    // });
    lastpayment = `SELECT p_receipt_no FROM lead_payment WHERE deleted=0 AND (receive_amt!='' AND receive_amt!=0) order by payment_id  DESC limit 1`;
    const rlast2 = new Date().getFullYear().toString().substring(2);
    const rlast2Num = Number(rlast2);
    var rtoday = new Date();
    let financialYear;
    if (rtoday.getMonth() + 1 <= 3) {
      financialYear = rlast2Num - 1 + "-" + rlast2Num;
    } else {
      financialYear = rlast2Num + "-" + (rlast2Num + 1);
    }
    let rec_no = 0;
    let response11 = await new Promise((resolve, reject) => {
      con.query(lastpayment, function (err1, result1) {
        if (err1) {
          console.log(err1);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result1.length > 0 && result1[0].p_receipt_no != 0) {
            let rno = result1[0].p_receipt_no;
            let n_rno = rno.split("_");
            if (financialYear == n_rno[0]) {
              rec_no = financialYear + "_" + ++n_rno[1];
            } else {
              rec_no = financialYear + "_" + 1;
            }
          } else {
            rec_no = financialYear + "_" + 1;
          }
          resolve({
            status: 1,
            result: rec_no,
          });
        }
      });
    });
    // let rec_no = parseInt(response11.result) + 1;
    sql4 = `INSERT INTO lead_payment(payment_date,c_id,total_amount,courier,embassy_fees,dis_amt,net_amt,sgst,cgst,igst,created_id,due_amt,u_id,tracking_id,invoice_no,p_receipt_no,exp_charge,coupon_amt,c_tax,created_branch_id) VALUES ('${data.l_date
      }',${response1.c_id},'${data.total_amount}',
                '${data.courier}','${data.embassy_fees}','${data.dis_amt}','${data.net_amt
      }','${data.sgst}','${data.cgst}','${data.igst}',${data.created_id},'${data.net_amt
      }',${data.c_u_id},'${mysql_real_escape_string(tracking_id)}','${responseinvoice.ino
      }','${rec_no}','${data.exp_charge}','${data.coupon_amt}','${data.c_tax}',${data.created_branch_id
      })`;
    let response4 = await new Promise(async (resolve, reject) => {
      con.query(sql4, async function (err4, result4) {
        if (err4) {
          console.log(err4);
          resolve({ status: 0, message: "Something went wrong" });
        } else {
          if (result4) {
            const performa_date = moment().format("DD-MM-YYYY");
            sql12 = `UPDATE elead SET proforma_status=1,l_status=615,performa_date='${performa_date}' WHERE  lead_id =${data.lead_id}`;
            // let res = await new Promise((resolve, reject) => {
            con.query(sql12, async function (err12, result12) {
              if (err12) {
                console.log(err12);
                resolve({ status: 0, message: "Customer Not Updated" });
              } else {
                if (result12.length > 0) {
                  resolve({
                    status: 1,
                    message: "Lead Proforma_status Updated",
                  });
                } else {
                  resolve({
                    status: 0,
                    message: "Something went to wrong",
                  });
                }
              }
            });
            // });
            //2803
            resolve({
              status: 1,
              message: "Customer Inserted Successfully....",
              lead_id: data.lead_id,
              allocatedTo: data.l_allocate_to,
              login_u_id: data.login_u_id,
              l_created_by: data.l_created_by,
            });
          }
        }
      });
    });
    return response4;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

//Proforma Invoice
// async function getproformainvoicedata(data) {
//   try {
//     sql11 = `SELECT * FROM lead_customer WHERE m_c_id = ${data.id}`;
//     let response11 = await new Promise((resolve, reject) => {
//       con.query(sql11, function (err11, result11) {
//         if (err11) {
//           console.log(err11);
//           resolve({ status: 0, message: "Something went to wrong" });
//         } else {
//           if (result11.length > 0) {
//             resolve({
//               id: result11[0].c_id,
//               uid: result11[0].u_id,
//             });
//           } else {
//             resolve({
//               status: 0,
//               message: "Something went to wrong",
//             });
//           }
//         }
//       });
//     });

//     // if (response11.uid == 1) {
//     //   sql = `select * from gsetting`;
//     // } else {
//     sql = `SELECT *,branch.b_hsn_code as hsn_code,b_bank_details as bank_details,b_nongst_bank_deatils as nongst_bank_details,company_name as c_name,branch.b_gstno as c_gstno FROM users,branch WHERE users.branch_id=branch.branch_id AND u_id=${response11.uid} AND users.deleted=0 AND branch.deleted=0`;
//     // }
//     let response = await new Promise((resolve, reject) => {
//       con.query(sql, function (err, result) {
//         if (err) {
//           console.log(err);
//           resolve({ status: 0, message: "Something went to wrong" });
//         } else {
//           if (result.length > 0) {
//             resolve({
//               settingdata: result[0],
//             });
//           } else {
//             resolve({
//               status: 0,
//               message: "Something went to wrong",
//             });
//           }
//         }
//       });
//     });

//     getuserdata = `select * from users where u_id=${response11.uid} and deleted=0`;
//     let userdata = await new Promise((resolve, reject) => {
//       con.query(getuserdata, function (err, userres) {
//         if (err) {
//           console.log(err);
//           resolve({ status: 0, message: "Something went to wrong" });
//         } else {
//           if (userres.length > 0) {
//             if (userres[0].user_type == 3) {
//               getnuserquery = `select * from users where u_id=${userres[0].p_u_id} and deleted=0`;
//             } else {
//               getnuserquery = `select * from users where u_id=${response11.uid} and deleted=0`;
//             }
//             con.query(getnuserquery, function (err, nuserres) {
//               if (err) {
//                 console.log(err);
//                 resolve({ status: 0, message: "Something went to wrong" });
//               } else {
//                 resolve({
//                   // userdata: nuserres[0],
//                   userdata: userres[0],
//                 });
//               }
//             });
//           } else {
//             resolve({
//               status: 0,
//               message: "Something went to wrong",
//             });
//           }
//         }
//       });
//     });

//     sql1 = `SELECT  *,(SELECT name FROM attributes WHERE attributes.attribute_id = lead_customer.c_state)as state,(SELECT b_name FROM branch WHERE branch.branch_id = lead_customer.branch_id)as bname,(SELECT u_name FROM users WHERE users.u_id = lead_customer.created_id)as cname,(SELECT b_name FROM branch WHERE branch.branch_id = lead_customer.created_branch_id)as cbname,(SELECT invoice_signature FROM users WHERE users.u_id = lead_customer.created_id)as invoice_signature FROM lead_customer WHERE deleted = 0 AND c_id=${response11.id}`;
//     let response1 = await new Promise((resolve, reject) => {
//       con.query(sql1, function (err, result) {
//         if (err) {
//           console.log(err);
//           resolve({ status: 0, message: "Something went to wrong" });
//         } else {
//           if (result.length > 0) {
//             result.forEach(function (result) {
//               resolve({
//                 c_s_type: result.c_s_type,
//                 customerdata: result,
//               });
//             });
//           } else {
//             resolve({
//               status: 0,
//               message: "Something went to wrong",
//             });
//           }
//         }
//       });
//     });
//     //1503
//     if (response1.c_s_type == 10) {
//       // sql2 = `SELECT *,(SELECT name FROM attributes WHERE attributes.attribute_id =lead_details.d_c_id) as cerficates,(SELECT name FROM attributes WHERE attributes.attribute_id =lead_attestation.a_type)as attestation_type,(SELECT name FROM attributes WHERE attributes.attribute_id =lead_attestation.a_country) as country_name,(SELECT c_name FROM lead_customer WHERE lead_customer.c_id =lead_attestation.c_id)as customer_name,(SELECT c_date FROM lead_customer WHERE lead_customer.c_id =lead_attestation.c_id)as r_date FROM lead_attestation RIGHT JOIN lead_details ON lead_attestation.a_id=lead_details.service_id WHERE lead_attestation.c_id=${response11.id} AND lead_details.service_type=10 AND lead_details.deleted=0 AND lead_attestation.deleted=0;`;
//       //1603
//       sql2 = `SELECT *,(SELECT GROUP_CONCAT(attributes.name SEPARATOR ',') as name FROM attributes where FIND_IN_SET (attributes.attribute_id , lead_attestation.a_certificate)) as cerficates,(SELECT name FROM attributes WHERE attributes.attribute_id =lead_attestation.a_type)as attestation_type,(SELECT name FROM attributes WHERE attributes.attribute_id =lead_attestation.a_country) as country_name,(SELECT c_name FROM lead_customer WHERE lead_customer.c_id =lead_attestation.c_id)as customer_name,(SELECT c_date FROM lead_customer WHERE lead_customer.c_id =lead_attestation.c_id)as r_date FROM lead_attestation RIGHT JOIN lead_details ON lead_attestation.a_id=lead_details.service_id WHERE lead_attestation.c_id=${response11.id} AND lead_details.service_type=10 AND lead_details.deleted=0 AND lead_attestation.deleted=0 GROUP by lead_attestation.a_id;`;
//     } else if (response1.c_s_type == 8) {
//       sql2 = `SELECT *,(SELECT name FROM attributes WHERE attributes.attribute_id =lead_details.d_c_id) as v_country,(SELECT name FROM attributes WHERE attributes.attribute_id =lead_visa.v_type)as visa_type,(SELECT c_name FROM lead_customer WHERE lead_customer.c_id =lead_visa.c_id)as customer_name,(SELECT c_date FROM lead_customer WHERE lead_customer.c_id =lead_visa.c_id)as r_date FROM lead_visa RIGHT JOIN lead_details ON lead_visa.v_id=lead_details.service_id WHERE lead_visa.c_id=${response11.id} AND lead_details.service_type=8 AND lead_details.deleted=0 AND lead_visa.deleted=0;`;
//     } else if (response1.c_s_type == 17) {
//       // sql2 = `SELECT *,(SELECT name FROM attributes WHERE attributes.attribute_id =lead_details.d_c_id) as ap_cerficates,(SELECT name FROM attributes WHERE attributes.attribute_id =lead_apostille.a_type)as apostille_type,(SELECT name FROM attributes WHERE attributes.attribute_id =lead_apostille.a_country) as country_name,(SELECT c_name FROM lead_customer WHERE lead_customer.c_id =lead_apostille.c_id)as customer_name,(SELECT c_date FROM lead_customer WHERE lead_customer.c_id =lead_apostille.c_id)as r_date FROM lead_apostille RIGHT JOIN lead_details ON lead_apostille.a_id=lead_details.service_id WHERE lead_apostille.c_id=${response11.id} AND lead_details.service_type=10 AND lead_details.deleted=0 AND lead_apostille.deleted=0;`;
//       //1603
//       sql2 = `SELECT *,(SELECT GROUP_CONCAT(attributes.name SEPARATOR ',') as name FROM attributes where FIND_IN_SET (attributes.attribute_id , lead_apostille.a_certificate)) as cerficates,(SELECT name FROM attributes WHERE attributes.attribute_id =lead_apostille.a_type)as apostille_type,(SELECT name FROM attributes WHERE attributes.attribute_id =lead_apostille.a_country) as country_name,(SELECT c_name FROM lead_customer WHERE lead_customer.c_id =lead_apostille.c_id)as customer_name,(SELECT c_date FROM lead_customer WHERE lead_customer.c_id =lead_apostille.c_id)as r_date FROM lead_apostille RIGHT JOIN lead_details ON lead_apostille.a_id=lead_details.service_id WHERE lead_apostille.c_id=${response11.id} AND lead_details.service_type=10 AND lead_details.deleted=0 AND lead_apostille.deleted=0 GROUP by lead_apostille.a_id;`;
//     } else {
//       // sql2 = `SELECT *,(SELECT name FROM attributes WHERE attributes.attribute_id =lead_details.d_c_id) as ap_cerficates,(SELECT name FROM attributes WHERE attributes.attribute_id =lead_translation.a_type)as apostille_type,(SELECT name FROM attributes WHERE attributes.attribute_id =lead_translation.a_country) as country_name,(SELECT c_name FROM lead_customer WHERE lead_customer.c_id =lead_translation.c_id)as customer_name,(SELECT c_date FROM lead_customer WHERE lead_customer.c_id =lead_translation.c_id)as r_date FROM lead_translation RIGHT JOIN lead_details ON lead_translation.a_id=lead_details.service_id WHERE lead_translation.c_id=${response11.id} AND lead_details.service_type=20 AND lead_details.deleted=0 AND lead_translation.deleted=0;`;
//       //1603
//       sql2 = `SELECT *,(SELECT GROUP_CONCAT(attributes.name SEPARATOR ',') as name FROM attributes where FIND_IN_SET (attributes.attribute_id , lead_translation.a_certificate)) as cerficates,(SELECT name FROM attributes WHERE attributes.attribute_id =lead_translation.a_type)as apostille_type,(SELECT name FROM attributes WHERE attributes.attribute_id =lead_translation.a_country) as country_name,(SELECT c_name FROM lead_customer WHERE lead_customer.c_id =lead_translation.c_id)as customer_name,(SELECT c_date FROM lead_customer WHERE lead_customer.c_id =lead_translation.c_id)as r_date FROM lead_translation RIGHT JOIN lead_details ON lead_translation.a_id=lead_details.service_id WHERE lead_translation.c_id=${response11.id} AND lead_details.service_type=20 AND lead_details.deleted=0 AND lead_translation.deleted=0 GROUP by lead_translation.a_id;`;
//     }

//     let response2 = await new Promise((resolve, reject) => {
//       con.query(sql2, function (err, result) {
//         if (err) {
//           console.log(err);
//           resolve({ status: 0, message: "Something went to wrong" });
//         } else {
//           if (result.length > 0) {
//             paymentquery = `SELECT *,(SELECT c_s_type FROM lead_customer WHERE lead_customer.c_id = lead_payment.c_id)as c_s_type,(SELECT c_state FROM lead_customer WHERE lead_customer.c_id = lead_payment.c_id)as c_state FROM lead_payment WHERE c_id = ${response11.id} AND deleted=0 ORDER BY payment_id DESC LIMIT 1;`;
//             con.query(paymentquery, function (err, paymentres) {
//               if (err) {
//                 console.log(err);
//                 resolve({ status: 0, message: "Something went to wrong" });
//               } else {
//                 if (paymentres.length > 0) {
//                   paymentres.forEach(function (presult) {
//                     resolve({
//                       status: 1,
//                       list: result,
//                       paymentres: presult,
//                       settingdata: response.settingdata,
//                       customerdata: response1.customerdata,
//                       userdata: userdata.userdata,
//                     });
//                   });
//                 } else {
//                   resolve({
//                     status: 0,
//                     message: "Something went to wrong",
//                   });
//                 }
//               }
//             });
//           } else {
//             resolve({
//               status: 0,
//               message: "Something went to wrong",
//             });
//           }
//         }
//       });
//     });
//     return response2;
//   } catch (error) {
//     console.log(error);
//     return { status: 0, message: "Invalid Call Try Again" };
//   }
// }

//Proforma Invoice
async function getproformainvoicedata(data) {
  try {
    sql11 = `SELECT * FROM lead_customer WHERE m_c_id = ${data.id} AND deleted = 0`;
    let response11 = await new Promise((resolve, reject) => {
      con.query(sql11, function (err11, result11) {
        if (err11) {
          console.log(err11);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result11.length > 0) {
            resolve({
              id: result11[0].c_id,
              uid: result11[0].u_id,
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });

    // if (response11.uid == 1) {
    //   sql = `select * from gsetting`;
    // } else {
    sql = `SELECT *,attributes.name as state_name,attributes.TIN_number,branch.b_hsn_code as hsn_code,b_bank_details as bank_details,b_nongst_bank_deatils as nongst_bank_details,company_name as c_name,branch.b_gstno as c_gstno FROM users,branch,attributes WHERE attributes.attribute_id = branch.state_id AND users.branch_id=branch.branch_id AND u_id=${response11.uid} AND users.deleted=0 AND branch.deleted=0`;
    // }
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              settingdata: result[0],
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });

    getuserdata = `select * from users where u_id=${response11.uid} and deleted=0`;
    let userdata = await new Promise((resolve, reject) => {
      con.query(getuserdata, function (err, userres) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (userres.length > 0) {
            if (userres[0].user_type == 3) {
              getnuserquery = `select * from users where u_id=${userres[0].p_u_id} and deleted=0`;
            } else {
              getnuserquery = `select * from users where u_id=${response11.uid} and deleted=0`;
            }
            con.query(getnuserquery, function (err, nuserres) {
              if (err) {
                console.log(err);
                resolve({ status: 0, message: "Something went to wrong" });
              } else {
                resolve({
                  // userdata: nuserres[0],
                  userdata: userres[0],
                });
              }
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    sql1 = `SELECT  *,(SELECT name FROM attributes WHERE attributes.attribute_id = lead_customer.c_state)as state,
    (SELECT TIN_number FROM attributes WHERE attributes.attribute_id = lead_customer.c_state)as TIN_number,(SELECT b_name FROM branch WHERE branch.branch_id = lead_customer.branch_id)as bname,(SELECT u_name FROM users WHERE users.u_id = lead_customer.created_id)as cname,(SELECT b_name FROM branch WHERE branch.branch_id = lead_customer.created_branch_id)as cbname,(SELECT invoice_signature FROM users WHERE users.u_id = ${data.uid})as invoice_signature FROM lead_customer WHERE deleted = 0 AND c_id=${response11.id}`;
    let response1 = await new Promise((resolve, reject) => {
      con.query(sql1, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            result.forEach(function (result) {
              resolve({
                c_s_type: result.c_s_type,
                customerdata: result,
              });
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    //1503
    if (response1.c_s_type == 10) {
      // sql2 = `SELECT *,(SELECT name FROM attributes WHERE attributes.attribute_id =lead_details.d_c_id) as cerficates,(SELECT name FROM attributes WHERE attributes.attribute_id =lead_attestation.a_type)as attestation_type,(SELECT name FROM attributes WHERE attributes.attribute_id =lead_attestation.a_country) as country_name,(SELECT c_name FROM lead_customer WHERE lead_customer.c_id =lead_attestation.c_id)as customer_name,(SELECT c_date FROM lead_customer WHERE lead_customer.c_id =lead_attestation.c_id)as r_date FROM lead_attestation RIGHT JOIN lead_details ON lead_attestation.a_id=lead_details.service_id WHERE lead_attestation.c_id=${response11.id} AND lead_details.service_type=10 AND lead_details.deleted=0 AND lead_attestation.deleted=0;`;
      //1603
      sql2 = `SELECT *,(SELECT GROUP_CONCAT(attributes.name SEPARATOR ',') as name FROM attributes where FIND_IN_SET (attributes.attribute_id , lead_attestation.a_certificate)) as cerficates,(SELECT name FROM attributes WHERE attributes.attribute_id =lead_attestation.a_type)as attestation_type,(SELECT name FROM attributes WHERE attributes.attribute_id =lead_attestation.a_country) as country_name,(SELECT c_name FROM lead_customer WHERE lead_customer.c_id =lead_attestation.c_id AND lead_customer.deleted = 0)as customer_name,(SELECT c_date FROM lead_customer WHERE lead_customer.c_id =lead_attestation.c_id AND lead_customer.deleted = 0)as r_date FROM lead_attestation RIGHT JOIN lead_details ON lead_attestation.a_id=lead_details.service_id WHERE lead_attestation.c_id=${response11.id} AND lead_details.service_type=10 AND lead_details.deleted=0 AND lead_attestation.deleted=0 GROUP by lead_attestation.a_id;`;
    } else if (response1.c_s_type == 8) {
      //2303
      sql2 = `SELECT *,(SELECT name FROM attributes WHERE attributes.attribute_id =lead_details.d_c_id) as v_country,(SELECT GROUP_CONCAT(attributes.name SEPARATOR ',') as name FROM attributes where FIND_IN_SET (attributes.attribute_id , lead_visa.v_supporting_doc)) as v_supporting_doc,(SELECT name FROM attributes WHERE attributes.attribute_id =lead_visa.v_type)as visa_type,(SELECT c_name FROM lead_customer WHERE lead_customer.c_id =lead_visa.c_id AND lead_customer.deleted = 0)as customer_name,(SELECT c_date FROM lead_customer WHERE lead_customer.c_id =lead_visa.c_id AND lead_customer.deleted = 0)as r_date FROM lead_visa RIGHT JOIN lead_details ON lead_visa.v_id=lead_details.service_id WHERE lead_visa.c_id=${response11.id} AND lead_details.service_type=8 AND lead_details.deleted=0 AND lead_visa.deleted=0;`;
    } else if (response1.c_s_type == 17) {
      // sql2 = `SELECT *,(SELECT name FROM attributes WHERE attributes.attribute_id =lead_details.d_c_id) as ap_cerficates,(SELECT name FROM attributes WHERE attributes.attribute_id =lead_apostille.a_type)as apostille_type,(SELECT name FROM attributes WHERE attributes.attribute_id =lead_apostille.a_country) as country_name,(SELECT c_name FROM lead_customer WHERE lead_customer.c_id =lead_apostille.c_id)as customer_name,(SELECT c_date FROM lead_customer WHERE lead_customer.c_id =lead_apostille.c_id)as r_date FROM lead_apostille RIGHT JOIN lead_details ON lead_apostille.a_id=lead_details.service_id WHERE lead_apostille.c_id=${response11.id} AND lead_details.service_type=10 AND lead_details.deleted=0 AND lead_apostille.deleted=0;`;
      //1603
      sql2 = `SELECT *,(SELECT GROUP_CONCAT(attributes.name SEPARATOR ',') as name FROM attributes where FIND_IN_SET (attributes.attribute_id , lead_apostille.a_certificate)) as cerficates,(SELECT name FROM attributes WHERE attributes.attribute_id =lead_apostille.a_type)as apostille_type,(SELECT name FROM attributes WHERE attributes.attribute_id =lead_apostille.a_country) as country_name,(SELECT c_name FROM lead_customer WHERE lead_customer.c_id =lead_apostille.c_id AND lead_customer.deleted = 0)as customer_name,(SELECT c_date FROM lead_customer WHERE lead_customer.c_id =lead_apostille.c_id AND lead_customer.deleted = 0)as r_date FROM lead_apostille RIGHT JOIN lead_details ON lead_apostille.a_id=lead_details.service_id WHERE lead_apostille.c_id=${response11.id} AND lead_details.service_type=17 AND lead_details.deleted=0 AND lead_apostille.deleted=0 GROUP by lead_apostille.a_id;`;
    } else {
      // sql2 = `SELECT *,(SELECT name FROM attributes WHERE attributes.attribute_id =lead_details.d_c_id) as ap_cerficates,(SELECT name FROM attributes WHERE attributes.attribute_id =lead_translation.a_type)as apostille_type,(SELECT name FROM attributes WHERE attributes.attribute_id =lead_translation.a_country) as country_name,(SELECT c_name FROM lead_customer WHERE lead_customer.c_id =lead_translation.c_id)as customer_name,(SELECT c_date FROM lead_customer WHERE lead_customer.c_id =lead_translation.c_id)as r_date FROM lead_translation RIGHT JOIN lead_details ON lead_translation.a_id=lead_details.service_id WHERE lead_translation.c_id=${response11.id} AND lead_details.service_type=20 AND lead_details.deleted=0 AND lead_translation.deleted=0;`;
      //1603
      sql2 = `SELECT *,(SELECT GROUP_CONCAT(attributes.name SEPARATOR ',') as name FROM attributes where FIND_IN_SET (attributes.attribute_id , lead_translation.a_certificate)) as cerficates,(SELECT name FROM attributes WHERE attributes.attribute_id =lead_translation.a_type)as apostille_type,(SELECT name FROM attributes WHERE attributes.attribute_id =lead_translation.a_country) as country_name,(SELECT c_name FROM lead_customer WHERE lead_customer.c_id =lead_translation.c_id AND lead_customer.deleted = 0)as customer_name,(SELECT c_date FROM lead_customer WHERE lead_customer.c_id =lead_translation.c_id AND lead_customer.deleted = 0)as r_date FROM lead_translation RIGHT JOIN lead_details ON lead_translation.a_id=lead_details.service_id WHERE lead_translation.c_id=${response11.id} AND lead_details.service_type=20 AND lead_details.deleted=0 AND lead_translation.deleted=0 GROUP by lead_translation.a_id;`;
    }

    let response2 = await new Promise((resolve, reject) => {
      con.query(sql2, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            paymentquery = `SELECT *,(SELECT c_s_type FROM lead_customer WHERE lead_customer.c_id = lead_payment.c_id AND lead_customer.deleted = 0)as c_s_type,(SELECT c_state FROM lead_customer WHERE lead_customer.c_id = lead_payment.c_id AND lead_customer.deleted = 0)as c_state FROM lead_payment WHERE c_id = ${response11.id} AND deleted=0 ORDER BY payment_id DESC LIMIT 1;`;
            con.query(paymentquery, function (err, paymentres) {
              if (err) {
                console.log(err);
                resolve({ status: 0, message: "Something went to wrong" });
              } else {
                if (paymentres.length > 0) {
                  paymentres.forEach(function (presult) {
                    resolve({
                      status: 1,
                      list: result,
                      paymentres: presult,
                      settingdata: response.settingdata,
                      customerdata: response1.customerdata,
                      userdata: userdata.userdata,
                    });
                  });
                } else {
                  resolve({
                    status: 0,
                    list: [],
                    paymentres: [],
                    settingdata: response.settingdata,
                    customerdata: [],
                    userdata: userdata.userdata,
                  });
                }
              }
            });
          } else {
            resolve({
              status: 0,
              list: [],
              paymentres: [],
              settingdata: response.settingdata,
              customerdata: [],
              userdata: userdata.userdata,
            });
          }
        }
      });
    });
    return response2;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

//0703
async function getproformainvoice(a_data) {
  try {
    let p_data = JSON.parse(a_data.addressdata);
    let convert_data = JSON.parse(a_data.convertdata);
    let newobj = {
      id: p_data.customerdata.m_c_id,
      uid: p_data.uid,
    };
    let response = await new Promise(async (resolve, reject) => {
      let invoice_data = await getproformainvoicedata(newobj);
      let n_ino = invoice_data.paymentres.invoice_no.split("/");

      let imageAsBase64;
      if (
        fs.existsSync(
          `./public/Assets/images/${
          // invoice_data.customerdata.u_id == 1 ? "adminlogo" :
          "branchlogo"
          }/${invoice_data.settingdata.logo}`
        )
      ) {
        imageAsBase64 = fs.readFileSync(
          `./public/Assets/images/${
          // invoice_data.customerdata.u_id == 1 ? "adminlogo" :
          "branchlogo"
          }/${invoice_data.settingdata.logo}`,
          { encoding: "base64" }
        );
      }
      let signatureAsBase64;
      if (
        fs.existsSync(
          `./public/Assets/images/invoicesignature/${invoice_data.customerdata.invoice_signature}`
        )
      ) {
        signatureAsBase64 = fs.readFileSync(
          `./public/Assets/images/invoicesignature/${invoice_data.customerdata.invoice_signature}`,
          { encoding: "base64" }
        );
      }
      pdf
        .create(
          pdfTemplate6(
            invoice_data,
            p_data.userdata,
            p_data.b_state_id,
            p_data.generalsetting,
            convert_data,
            imageAsBase64,
            signatureAsBase64
          ),
          {
            childProcessOptions: {
              env: {
                OPENSSL_CONF: "/dev/null",
              },
            },
          }
        )
        .toFile(
          `${__dirname}/public/Assets/proforma_invoice_pdf/invoice_${n_ino[4]}.pdf`,
          (err) => {
            if (err) {
              return console.log("error");
            }
            resolve({
              ino: n_ino[4],
            });
          }
        );
    });
    return response;
  } catch (err) {
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function getselectionamount(data) {
  try {
    sql = `SELECT s_amount FROM serviceprice WHERE country = ${data.a_country} AND s_type = ${data.a_type}  AND deleted = 0;`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, async function (err, results) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went wrong" });
        } else {
          if (results.length <= 0) {
            resolve({
              s_amount: 0,
            });
          } else {
            resolve({
              s_amount: results[0].s_amount,
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function updateService(data) {
  try {
    sql = `UPDATE serviceprice SET service = ${data.service},country= ${data.country},s_type=${data.s_type},s_amount="${data.s_amount}",profit= "${data.profit}",actual_price= "${data.actual_price}",charge_type= ${data.charge_type} WHERE serviceprice.service_id = ${data.service_id}`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.affectedRows > 0) {
            resolve({
              status: 1,
              message: "Service Price updated successfully",
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function updateDispatchDate(data) {
  try {
    sql = `UPDATE details SET dispatching_date	='${data.dispatching_date}' WHERE detail_id =${data.detail_id}`;

    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.affectedRows > 0) {
            resolve({
              status: 1,
              message: "Dispatch date update successfully",
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function getallEmailtemplate() {
  try {
    sql = `SELECT *,(row_number() over ( order by email_template.e_t_id DESC) ) AS row_no FROM email_template WHERE type=1 AND deleted=0  order by email_template.e_t_id DESC`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              bData: result,
            });
          } else {
            resolve({
              status: 1,
              bData: [],
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function sendleademail(data, recordname) {
  try {
    senderMailSetting = await sendmessage.getEmailSetting(data.uid);
    sqlll = `SELECT u_email FROM users WHERE u_id = ${data.uid} `;
    let ccmail = await new Promise((resolve, reject) => {
      con.query(sqlll, async function (err1, result1) {
        if (err1) {
          console.log(err1);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result1.length > 0) {
            resolve({ status: 1, result: result1[0].u_email });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    let message = await sendmessage.getTemplate(data.e_t_id);
    if (message.status != 0) {
      data.templatebody = data.templatebody.replace(
        "{:name:}",
        data.prefix + " " + data.name
      );
      let mess =
        (message.header == 1
          ? typeof senderMailSetting.email_template_header !=
            undefined && senderMailSetting.email_template_header != undefined &&
            senderMailSetting.email_template_header != null
            ? senderMailSetting.email_template_header
            : ""
          : "") +
        message.template +
        (message.b_d_id != 0
          ? message.b_d_id == 1
            ? senderMailSetting.gst_bankdetails
            : message.b_d_id == 2
              ? senderMailSetting.ngst_bankdetails
              : message.b_d_id == 3
                ? senderMailSetting.general_bankdetails
                : ""
          : "") +
        (message.footer == 1 ? senderMailSetting.email_template_footer : "") +
        (message.signature == 1 ? senderMailSetting.email_signature : "");
    }
    let sendmessagenow;
    if (message.status != 0) {
      CCMailSetting = await sendmessage.getEmailSetting(1);
      let pathname = __dirname + "/public/Assets/images/temlateattachfile";
      sendmessagenow = await sendmessage.custommailsend(
        senderMailSetting,
        data.l_email,
        data.templatebody,
        data.templatsubject,
        recordname,
        ccmail.result, //CCMailSetting.e_username,  // user mail
        ccmail.result, // reply mail
        1,
        pathname
      );
    }
    let response = await new Promise(async (resolve, reject) => {
      if (sendmessagenow.status == 1) {
        if (data.type == 0) {
          sql = `INSERT INTO template_history(lead_id,cus_id,template_body,created_id,created_branch_id,template_subject) VALUES (${data.lead_id
            },0,'${mysql_real_escape_string(data.templatebody)}',${data.uid},${data.branch_id
            },'${mysql_real_escape_string(data.templatsubject)}')`;
        } else {
          sql = `INSERT INTO template_history(lead_id,cus_id,template_body,created_id,created_branch_id,template_subject) VALUES (0,${data.lead_id
            },'${mysql_real_escape_string(data.templatebody)}',${data.uid},${data.branch_id
            },'${mysql_real_escape_string(data.templatsubject)}')`;
        }
        con.query(sql, function (err, result) {
          if (err) {
            console.log(err);
            resolve({ status: 0, message: "Something went to wrong" });
          } else {
            if (result.affectedRows > 0) {
              if (recordname != undefined) {
                let record = [];
                for (i = 0; i < recordname.length; i++) {
                  record.push([result.insertId, recordname[i]]);
                }
                sql1 = `INSERT INTO template_attachment (t_h_id,url) VALUES ?`;
                con.query(sql1, [record], function (err1, result1) {
                  if (err1) {
                    console.log(err1);
                    resolve({ status: 0, message: "Something went to wrong" });
                  } else {
                    if (result1.affectedRows > 0) {
                      console.log("History Inserted");
                      resolve({
                        status: 1,
                        message: "Mail send to customer successfully",
                      });
                    } else {
                      resolve({
                        status: 0,
                        message: "Something went wrong when Mail sent to Customer",
                      });
                    }
                  }
                });
              } else {
                console.log("History Inserted");
                resolve({
                  status: 1,
                  message: "Mail send to customer successfully",
                });
              }
            } else {
              resolve({
                status: 0,
                message: "Something went to wrong when Inserting mail History",
              });
            }
          }
        });
      }
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}
//grishma
async function getcustomer(data) {
  try {
    sql = `SELECT  *,(SELECT COUNT(*) FROM customer  WHERE is_cancel = 0 and deleted =0 AND m_c_id = ${data.m_c_id
      })as trows,(SELECT name FROM attributes WHERE attributes.attribute_id = customer.c_state)as state FROM customer WHERE is_cancel = 0 and deleted = 0  AND m_c_id = ${data.m_c_id
      } ORDER BY c_id DESC limit ${(data.page - 1) * data.perpage},${data.perpage
      }`;

    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              cData: result,
              // c_id: result.c_id,
            });
          } else {
            resolve({ status: 1, message: "No Records to Display..." });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function searchcustomers(data) {
  try {
    sql = `SELECT * FROM elead WHERE l_created_by=${data.m_c_id} AND l_source=282 AND convert_status=0`;
    if (typeof data.c_name != "undefined" && data.c_name != "") {
      sql += ` and elead.l_name like '%${data.c_name}%'`;
    }
    if (typeof data.c_date != "undefined" && data.c_date != "") {
      sql += ` and STR_TO_DATE(elead.l_date,"%y-%m-%d")=STR_TO_DATE('${data.c_date}',"%y-%m-%d")`;
    }
    if (
      typeof data.service != "undefined" &&
      data.service != "" &&
      data.service != 0
    ) {
      sql += ` and elead.l_service='${data.service}'`;
    }
    sql1 = sql;
    sql += ` limit ${(data.page - 1) * data.perpage},${data.perpage}`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql1, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            con.query(sql, function (err, res) {
              if (err) {
                console.log(err);
                resolve({ status: 0, message: "Something went to wrong" });
              } else {
                if (res.length > 0) {
                  resolve({
                    status: 1,
                    data: res,
                    t_rows: result.length,
                  });
                }
              }
            });
          } else {
            resolve({
              status: 0,
              data: [],
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function getattestations(data) {
  try {
    sql = `Select *,(Select COUNT(*) from customer INNER join attestation on attestation.c_id = customer.c_id INNER JOIN details on attestation.a_id = details.service_id Where customer.m_c_id =${data.m_c_id} AND details.service_type = 10 and customer.deleted=0 and details.deleted=0 and attestation.deleted=0)as trows,(SELECT name FROM attributes WHERE attributes.attribute_id =attestation.a_type)as application_type,(SELECT name FROM attributes WHERE attributes.attribute_id =attestation.a_country)as application_country,(SELECT name FROM attributes WHERE attributes.attribute_id =details.d_c_id)as application_certificate ,(SELECT name FROM attributes WHERE attributes.attribute_id =details.status_id)as application_status from customer INNER join attestation on attestation.c_id = customer.c_id INNER JOIN details on attestation.a_id = details.service_id Where customer.m_c_id =${data.m_c_id} AND details.service_type = 10 and customer.is_cancel = 0  and customer.deleted=0 and details.deleted=0 and attestation.deleted=0 ORDER BY details.service_id DESC`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve(result);
          } else {
            // resolve({ status: 1, message: "No Records to Display..." });
            resolve();
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function searchAttestations(data) {
  try {
    sql = `Select *,(Select COUNT(*) from customer INNER join attestation on attestation.c_id = customer.c_id INNER JOIN details on attestation.a_id = details.service_id Where customer.m_c_id =${data.m_c_id} AND details.service_type = 10 and customer.deleted=0 and details.deleted=0 and attestation.deleted=0)as trows,(SELECT name FROM attributes WHERE attributes.attribute_id =attestation.a_type)as attestation_type,(SELECT name FROM attributes WHERE attributes.attribute_id =attestation.a_country)as attestation_country,(SELECT name FROM attributes WHERE attributes.attribute_id =details.d_c_id)as attestation_certificate ,(SELECT name FROM attributes WHERE attributes.attribute_id =details.status_id)as attestation_status from customer INNER join attestation on attestation.c_id = customer.c_id INNER JOIN details on attestation.a_id = details.service_id Where customer.m_c_id =${data.m_c_id} AND details.service_type = 10 and customer.deleted=0 and details.deleted=0 and attestation.deleted=0 `;

    if (typeof data.c_name != "undefined" && data.c_name != "") {
      sql += ` and customer.c_name like '%${data.c_name}%'`;
    }
    if (
      typeof data.status_id != "undefined" &&
      data.status_id != "" &&
      data.status_id != 0
    ) {
      sql += ` and details.status_id=${data.status_id}`;
    }

    if (
      typeof data.a_country != "undefined" &&
      data.a_country != "" &&
      data.a_country != 0
    ) {
      sql += ` and attestation.a_country=${data.a_country}`;
    }
    if (
      data.tracking_id != "undefined" &&
      data.tracking_id != "" &&
      data.tracking_id.length != 2
    ) {
      sql += ` and details.tracking_id like '%${data.tracking_id}%'`;
    }

    sql1 = sql;
    sql += ` limit ${(data.page - 1) * data.perpage},${data.perpage}`;

    let response = await new Promise((resolve, reject) => {
      con.query(sql1, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            con.query(sql, function (err, res) {
              if (err) {
                console.log(err);
                resolve({ status: 0, message: "Something went to wrong" });
              } else {
                if (res.length > 0) {
                  resolve({
                    status: 1,
                    data: res,
                    t_rows: result.length,
                  });
                }
              }
            });
          } else {
            resolve({
              status: 0,
              data: [],
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}
async function getapostilles(data) {
  try {
    sql = `Select *,(Select COUNT(*) from customer INNER join apostille on apostille.c_id = customer.c_id INNER JOIN details on apostille.a_id = details.service_id Where customer.m_c_id =${data.m_c_id} AND details.service_type = 17 and customer.deleted=0 and details.deleted=0 and apostille.deleted=0)as trows,(SELECT name FROM attributes WHERE attributes.attribute_id =apostille.a_type)as application_type,(SELECT name FROM attributes WHERE attributes.attribute_id =apostille.a_country)as application_country,(SELECT name FROM attributes WHERE attributes.attribute_id =details.d_c_id)as application_certificate ,(SELECT name FROM attributes WHERE attributes.attribute_id =details.status_id)as application_status from customer INNER join apostille on apostille.c_id = customer.c_id INNER JOIN details on apostille.a_id = details.service_id Where customer.m_c_id =${data.m_c_id} AND details.service_type = 17 and customer.is_cancel = 0  and customer.deleted=0 and details.deleted=0 and apostille.deleted=0 ORDER BY details.service_id DESC`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve(result);
          } else {
            // resolve({ status: 1, message: "No Records to Display..." });
            resolve();
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function searchapostilles(data) {
  try {
    sql = `Select *,(Select COUNT(*) from customer INNER join apostille on apostille.c_id = customer.c_id INNER JOIN details on apostille.a_id = details.service_id Where customer.m_c_id =${data.m_c_id} AND details.service_type = 17 and customer.deleted=0 and details.deleted=0 and apostille.deleted=0)as trows,(SELECT name FROM attributes WHERE attributes.attribute_id =apostille.a_type)as apostille_type,(SELECT name FROM attributes WHERE attributes.attribute_id =apostille.a_country)as apostille_country,(SELECT name FROM attributes WHERE attributes.attribute_id =details.d_c_id)as apostille_certificate ,(SELECT name FROM attributes WHERE attributes.attribute_id =details.status_id)as apostille_status from customer INNER join apostille on apostille.c_id = customer.c_id INNER JOIN details on apostille.a_id = details.service_id Where customer.m_c_id =${data.m_c_id} AND details.service_type = 17 and customer.deleted=0 and details.deleted=0 and apostille.deleted=0 `;

    if (typeof data.c_name != "undefined" && data.c_name != "") {
      sql += ` and customer.c_name like '%${data.c_name}%'`;
    }
    if (
      typeof data.status_id != "undefined" &&
      data.status_id != "" &&
      data.status_id != 0
    ) {
      sql += ` and details.status_id=${data.status_id}`;
    }

    if (
      typeof data.a_country != "undefined" &&
      data.a_country != "" &&
      data.a_country != 0
    ) {
      sql += ` and apostille.a_country=${data.a_country}`;
    }
    if (
      data.tracking_id != "undefined" &&
      data.tracking_id != "" &&
      data.tracking_id.length != 2
    ) {
      sql += ` and details.tracking_id like '%${data.tracking_id}%'`;
    }

    sql1 = sql;
    sql += ` limit ${(data.page - 1) * data.perpage},${data.perpage}`;

    let response = await new Promise((resolve, reject) => {
      con.query(sql1, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            con.query(sql, function (err, res) {
              if (err) {
                console.log(err);
                resolve({ status: 0, message: "Something went to wrong" });
              } else {
                if (res.length > 0) {
                  resolve({
                    status: 1,
                    data: res,
                    t_rows: result.length,
                  });
                }
              }
            });
          } else {
            resolve({
              status: 0,
              data: [],
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function searchtranslations(data) {
  try {
    sql = `Select *,(Select COUNT(*) from customer INNER join translation on translation.c_id = customer.c_id INNER JOIN details on translation.a_id = details.service_id Where customer.m_c_id =${data.m_c_id} AND details.service_type = 20 and customer.deleted=0 and details.deleted=0 and translation.deleted=0)as trows,(SELECT name FROM attributes WHERE attributes.attribute_id =translation.a_type)as translation_type,(SELECT name FROM attributes WHERE attributes.attribute_id =translation.a_country)as translation_country,(SELECT name FROM attributes WHERE attributes.attribute_id =details.d_c_id)as translation_certificate ,(SELECT name FROM attributes WHERE attributes.attribute_id =details.status_id)as translation_status from customer INNER join translation on translation.c_id = customer.c_id INNER JOIN details on translation.a_id = details.service_id Where customer.m_c_id =${data.m_c_id} AND details.service_type = 20 and customer.deleted=0 and details.deleted=0 and translation.deleted=0 `;

    if (typeof data.c_name != "undefined" && data.c_name != "") {
      sql += ` and customer.c_name like '%${data.c_name}%'`;
    }
    if (
      typeof data.status_id != "undefined" &&
      data.status_id != "" &&
      data.status_id != 0
    ) {
      sql += ` and details.status_id=${data.status_id}`;
    }

    if (
      typeof data.a_country != "undefined" &&
      data.a_country != "" &&
      data.a_country != 0
    ) {
      sql += ` and translation.a_country=${data.a_country}`;
    }
    if (
      data.tracking_id != "undefined" &&
      data.tracking_id != "" &&
      data.tracking_id.length != 2
    ) {
      sql += ` and details.tracking_id like '%${data.tracking_id}%'`;
    }

    sql1 = sql;
    sql += ` limit ${(data.page - 1) * data.perpage},${data.perpage}`;

    let response = await new Promise((resolve, reject) => {
      con.query(sql1, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            con.query(sql, function (err, res) {
              if (err) {
                console.log(err);
                resolve({ status: 0, message: "Something went to wrong" });
              } else {
                if (res.length > 0) {
                  resolve({
                    status: 1,
                    data: res,
                    t_rows: result.length,
                  });
                }
              }
            });
          } else {
            resolve({
              status: 0,
              data: [],
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function getvisas(data) {
  try {
    sql = `Select *,visa.v_prefix as a_prefix,visa.v_name as a_name,(SELECT name FROM attributes WHERE attributes.attribute_id =visa.v_type)as application_type,(SELECT name FROM attributes WHERE attributes.attribute_id =details.d_c_id)as application_country,(SELECT name FROM attributes WHERE attributes.attribute_id =details.status_id)as application_status from customer INNER join visa on visa.c_id = customer.c_id INNER JOIN details on visa.v_id = details.service_id Where customer.m_c_id =${data.m_c_id} AND details.service_type = 8 and customer.is_cancel = 0  and customer.deleted=0 and details.deleted=0 and visa.deleted=0 ORDER BY details.service_id DESC`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve(result);
          } else {
            // resolve({ status: 1, message: "No Records to Display..." });
            resolve();
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function searchvisas(data) {
  try {
    sql = `Select *,(Select COUNT(*) from customer INNER join visa on visa.c_id = customer.c_id INNER JOIN details on visa.v_id = details.service_id Where customer.m_c_id =${data.m_c_id} AND details.service_type = 8 and customer.deleted=0 and details.deleted=0 and visa.deleted=0)as trows,(SELECT name FROM attributes WHERE attributes.attribute_id =visa.v_type)as visa_type,(SELECT name FROM attributes WHERE attributes.attribute_id =details.d_c_id)as visa_country ,(SELECT name FROM attributes WHERE attributes.attribute_id =details.status_id)as visa_status from customer INNER join visa on visa.c_id = customer.c_id INNER JOIN details on visa.v_id = details.service_id Where customer.m_c_id =${data.m_c_id} AND details.service_type = 8 and customer.deleted=0 and details.deleted=0 and visa.deleted=0 `;

    if (typeof data.c_name != "undefined" && data.c_name != "") {
      sql += ` and customer.c_name like '%${data.c_name}%'`;
    }
    if (
      typeof data.status_id != "undefined" &&
      data.status_id != "" &&
      data.status_id != 0
    ) {
      sql += ` and details.status_id=${data.status_id}`;
    }

    if (
      typeof data.a_country != "undefined" &&
      data.a_country != "" &&
      data.a_country != 0
    ) {
      sql += ` and details.d_c_id=${data.a_country}`;
    }
    if (
      data.tracking_id != "undefined" &&
      data.tracking_id != "" &&
      data.tracking_id.length != 2
    ) {
      sql += ` and details.tracking_id like '%${data.tracking_id}%'`;
    }

    sql1 = sql;
    sql += ` limit ${(data.page - 1) * data.perpage},${data.perpage}`;

    let response = await new Promise((resolve, reject) => {
      con.query(sql1, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            con.query(sql, function (err, res) {
              if (res.length > 0) {
                resolve({
                  status: 1,
                  data: res,
                  t_rows: result.length,
                });
              }
            });
          } else {
            resolve({
              status: 0,
              data: [],
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function getpayments(data) {
  try {
    sql = `SELECT *,(SELECT COUNT(*) FROM payment,customer WHERE payment.c_id=customer.c_id AND payment.deleted =0 AND payment.receive_amt != 0 AND customer.m_c_id=${data.m_c_id
      })as trows FROM payment,customer WHERE payment.c_id=customer.c_id AND payment.deleted =0 AND payment.receive_amt != 0 AND customer.m_c_id=${data.m_c_id
      } ORDER BY payment_id DESC limit ${(data.page - 1) * data.perpage},${data.perpage
      }`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              result: result,
            });
          } else {
            resolve({ status: 1, message: "No Records to Display..." });
          }
        }
      });
    });

    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function searchpayments(data) {
  try {
    sql = `SELECT *,(SELECT COUNT(*) FROM payment,customer WHERE payment.c_id=customer.c_id AND payment.deleted =0 AND payment.receive_amt != 0 AND customer.m_c_id=${data.m_c_id})as trows FROM payment,customer WHERE payment.c_id=customer.c_id AND payment.deleted =0 AND payment.receive_amt != 0 AND customer.m_c_id=${data.m_c_id} `;

    // if (typeof data.mode_id != "undefined" && data.mode_id != "") {
    //   sql += ` and p.mode_id='${data.mode_id}'`;
    // }
    if (typeof data.s_date != "undefined" && data.s_date != "") {
      sql += ` and STR_TO_DATE(payment.payment_date,"%d-%m-%Y")>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y")`;
    }
    if (typeof data.e_date != "undefined" && data.e_date != "") {
      sql += ` and STR_TO_DATE(payment.payment_date,"%d-%m-%Y")<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y")`;
    }
    if (
      typeof data.t_id != "undefined" &&
      data.t_id != "" &&
      data.t_id.length != 2
    ) {
      sql += ` and payment.tracking_id like '%${data.t_id}%'`;
    }
    sql1 = sql;

    sql += ` limit ${(data.page - 1) * data.perpage},${data.perpage}`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql1, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            con.query(sql, function (err, res) {
              if (res.length > 0) {
                resolve({
                  status: 1,
                  data: res,
                  t_rows: result.length,
                });
              }
            });
          } else {
            resolve({
              status: 0,
              data: [],
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function getcustomertdslist(data) {
  try {
    sql = `SELECT *,(SELECT COUNT(*) FROM payment  WHERE deleted =0 AND is_tds = 1)as trows FROM payment INNER JOIN customer ON payment.c_id = customer.c_id WHERE payment.is_tds = 1 AND customer.m_c_id=${data.m_c_id
      } AND payment.deleted = 0 ORDER BY payment_id DESC limit ${(data.page - 1) * data.perpage
      },${data.perpage}`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              result: result,
            });
          } else {
            resolve({ status: 1, result: [] });
          }
        }
      });
    });

    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function searchtdsdata(data) {
  try {
    sql = `SELECT *,(SELECT COUNT(*) FROM payment  WHERE deleted =0 AND is_tds = 1 )as trows FROM payment INNER JOIN customer ON payment.c_id = customer.c_id WHERE payment.is_tds = 1 AND customer.m_c_id=${data.m_c_id} AND payment.deleted = 0 ORDER BY payment_id DESC`;

    if (typeof data.s_date != "undefined" && data.s_date != "") {
      sql += ` and STR_TO_DATE(payment.payment_date,"%d-%m-%Y")>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y")`;
    }
    if (typeof data.e_date != "undefined" && data.e_date != "") {
      sql += ` and STR_TO_DATE(payment.payment_date,"%d-%m-%Y")<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y")`;
    }
    sql1 = sql;
    sql += ` limit ${(data.page - 1) * data.perpage},${data.perpage}`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql1, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            con.query(sql, function (err, res) {
              if (err) {
                console.log(err);
                resolve({ status: 0, message: "Something went to wrong" });
              } else {
                if (res.length > 0) {
                  resolve({
                    status: 1,
                    result: res,
                    t_rows: result.length,
                  });
                }
              }
            });
          } else {
            resolve({
              status: 0,
              result: [],
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function getapplicants(data) {
  try {
    if (data.c_s_type == 8) {
      sql = `SELECT *,(SELECT name FROM attributes where attributes.attribute_id = visa.v_type) as type,(SELECT GROUP_CONCAT(attributes.name SEPARATOR ',') as name FROM attributes where FIND_IN_SET (attributes.attribute_id , visa.v_country)) as country,(SELECT GROUP_CONCAT(attributes.name SEPARATOR ',') as name FROM attributes where FIND_IN_SET (attributes.attribute_id , visa.v_supporting_doc)) as supporting_doc_name FROM visa WHERE deleted = 0 AND c_id = ${data.c_id};`;
    } else if (data.c_s_type == 10) {
      sql = `SELECT *,(SELECT name  FROM attributes where attributes.attribute_id = attestation.a_type) as type,(SELECT name  FROM attributes where attributes.attribute_id = attestation.a_country) as country,(SELECT GROUP_CONCAT(attributes.name SEPARATOR ',') as name FROM attributes where FIND_IN_SET (attributes.attribute_id , attestation.a_certificate)) as a_certificate_name,(SELECT GROUP_CONCAT(attributes.name SEPARATOR ',') as name FROM attributes where FIND_IN_SET (attributes.attribute_id , attestation.a_supporting_doc)) as supporting_doc_name FROM attestation WHERE deleted = 0 AND c_id = ${data.c_id}`;
    } else if (data.c_s_type == 17) {
      sql = `SELECT *,(SELECT name  FROM attributes where attributes.attribute_id = apostille.a_type) as type,(SELECT name  FROM attributes where attributes.attribute_id = apostille.a_country) as country,(SELECT GROUP_CONCAT(attributes.name SEPARATOR ',') as name FROM attributes where FIND_IN_SET (attributes.attribute_id , apostille.a_certificate)) as a_certificate_name,(SELECT GROUP_CONCAT(attributes.name SEPARATOR ',') as name FROM attributes where FIND_IN_SET (attributes.attribute_id , apostille.a_supporting_doc)) as supporting_doc_name FROM apostille WHERE apostille.deleted = 0 AND apostille.c_id = ${data.c_id}`;
    } else {
      sql = `SELECT *,(SELECT name  FROM attributes where attributes.attribute_id = translation.a_type) as type,(SELECT name  FROM attributes where attributes.attribute_id = translation.a_country) as country,(SELECT GROUP_CONCAT(attributes.name SEPARATOR ',') as name FROM attributes where FIND_IN_SET (attributes.attribute_id , translation.a_certificate)) as a_certificate_name,(SELECT GROUP_CONCAT(attributes.name SEPARATOR ',') as name FROM attributes where FIND_IN_SET (attributes.attribute_id , translation.a_supporting_doc)) as supporting_doc_name FROM translation WHERE translation.deleted = 0 AND translation.c_id = ${data.c_id}`;
    }
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              cData: result,
              // c_id: result.c_id,
            });
          } else {
            resolve({ status: 1, message: "No Records to Display..." });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function insertfeedback(data, filename) {
  try {
    let curr_date = moment().format("DD-MM-YYYY");

    if (filename != undefined) {
      sql = `INSERT INTO feedback (m_c_id,feedback,attechment,date) VALUES (${data.m_c_id
        },'${mysql_real_escape_string(
          data.feedback
        )}','${mysql_real_escape_string(filename)}','${mysql_real_escape_string(
          curr_date
        )}')`;
    } else {
      sql = `INSERT INTO feedback (m_c_id,feedback,date) VALUES (${data.m_c_id
        },'${mysql_real_escape_string(
          data.feedback
        )}','${mysql_real_escape_string(curr_date)}')`;
    }
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.affectedRows > 0) {
            resolve({
              status: 1,
              message: "Customer Feedback Insert successfully",
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function getCustomerfeedback(data) {
  try {
    sql = `SELECT *,(SELECT COUNT(*) FROM feedback  WHERE deleted =0 )as trows FROM feedback WHERE m_c_id =${data.m_c_id
      } and deleted =0 ORDER BY f_id DESC limit ${(data.page - 1) * data.perpage
      },${data.perpage}`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              data: result,
            });
          } else {
            resolve({
              status: 0,
              data: [],
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function allinvoice(data) {
  try {
    sql = `SELECT * FROM payment WHERE c_id=${data.c_id} AND deleted = 0 `;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            let gst = [];
            let ngst = [];
            result.forEach(function (res) {
              let ino = res.invoice_no;
              let n_ino = ino.split("/");
              if (n_ino[2] == "g") {
                gst.push(res);
              } else {
                ngst.push(res);
              }
            });
            resolve({
              status: 1,
              gst: gst,
              ngst: ngst,
            });
          }
          if (result.length == 0) {
            resolve({ status: 1, gst: [], ngst: [] });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function insertGoal(data) {
  try {
    let userid = JSON.parse(data.u_id);
    let record = [];
    for (i = 0; i < userid.length; i++) {
      record.push([
        mysql_real_escape_string(data.g_title),
        mysql_real_escape_string(data.description),
        data.g_date,
        data.branch_id,
        userid[i],
        data.created_id,
      ]);
    }
    sql = `INSERT INTO goal(g_title,description,g_date,branch_id,u_id,created_id) VALUES ?`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, [record], (error, res) => {
        if (error) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (res.affectedRows > 0) {
            resolve({
              status: 1,
              message: "Goal Inserted Successfully",
              data: res,
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function getAllGoal() {
  try {
    sql = `SELECT *,(row_number() over (order by goal.g_id DESC)) AS row_no,(SELECT b_name FROM branch WHERE branch_id = goal.branch_id) as branch_name,(SELECT u_name FROM users WHERE users.u_id = goal.created_id) as createdBy,(SELECT u_name FROM users WHERE users.u_id = goal.u_id) as user_name  FROM goal WHERE deleted = 0 ORDER BY g_id DESC`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              Data: result,
            });
          } else {
            resolve({
              status: 1,
              Data: [],
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function updateGoal(data) {
  try {
    sql = `UPDATE goal SET g_title='${mysql_real_escape_string(
      data.g_title
    )}',description='${mysql_real_escape_string(data.description)}',g_date='${data.g_date
      }',branch_id='${data.branch_id}',u_id='${data.u_id}' WHERE g_id=${data.g_id
      }`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.affectedRows > 0) {
            resolve({
              status: 1,
              message: "Goal updated successfully",
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function deleteGoal(data) {
  try {
    sql = `UPDATE goal SET deleted=1 WHERE g_id=${data.id}`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.affectedRows > 0) {
            resolve({
              status: 1,
              message: "Goal deleted successfully",
            });
          } else {
            resolve({
              status: 0,
              Data: [],
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function getAllGoalList(data) {
  try {
    sql = `SELECT * FROM goal WHERE u_id = ${data.u_id}`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              data: result,
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function getallDashTask(data) {
  try {
    let record = [];
    getuserquery = `select * from users where u_id=${data.id} and deleted=0`;
    let response = await new Promise((resolve, reject) => {
      con.query(getuserquery, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            if (result[0].user_type == 1) {
              getallchilduser = `select * from users where ((p_u_id=${data.id} OR p_u_id=1) and branch_id=${result[0].branch_id}) and deleted=0`;
              con.query(getallchilduser, function (err, res) {
                if (err) {
                  console.log(err);
                  resolve({ status: 0, message: "Something went to wrong" });
                } else {
                  res.forEach(function (r) {
                    record.push(r.u_id);
                  });
                  resolve({
                    record: record,
                    type: result[0].user_type,
                  });
                }
              });
            } else {
              resolve({
                type: result[0].user_type,
              });
            }
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    let getleadquery = "";
    if (response.type == 1) {
      getleadquery = `SELECT *,(SELECT u_name FROM users WHERE users.u_id=task.u_id)as createdBy,(SELECT u_name FROM users WHERE users.u_id=task.allocate_id)as allocateTo FROM task ,users WHERE task.deleted=0 and task.t_status=0 and users.deleted=0 and (task.u_id IN(${record}) or task.allocate_id IN(${record})) GROUP by task.t_id ORDER BY priority DESC`;
    } else if (response.type == 3) {
      getleadquery = `SELECT *,(SELECT u_name FROM users WHERE users.u_id=task.u_id)as createdBy,(SELECT u_name FROM users WHERE users.u_id=task.allocate_id)as allocateTo FROM task WHERE deleted = 0 and t_status=0 and (u_id=${data.id} OR allocate_id=${data.id}) ORDER BY priority DESC`;
    } else {
      getleadquery = `SELECT *,(SELECT u_name FROM users WHERE users.u_id=task.u_id)as createdBy,(SELECT u_name FROM users WHERE users.u_id=task.allocate_id)as allocateTo FROM task WHERE deleted = 0 and t_status=0 ORDER BY priority DESC`;
    }
    let response1 = await new Promise((resolve, reject) => {
      con.query(getleadquery, function (err1, result1) {
        if (err1) {
          console.log(err1);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result1.length > 0) {
            resolve({
              status: 1,
              data: result1,
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    return response1;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function getTaskUsers(data) {
  try {
    sql = `SELECT * FROM users WHERE u_id=${data.uid} and deleted=0`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            let sql1 = "";
            if (result[0].user_type == 0) {
              // sql1 = `SELECT * FROM users WHERE user_type!=0 AND user_type!=2 AND branch_id=${data.bid} AND deleted=0`;
              sql1 = `SELECT * FROM users WHERE user_type!=2 AND branch_id=${data.bid} AND deleted=0`;
            } else {
              // sql1 = `SELECT * FROM users,roles WHERE users.r_id=roles.r_id AND (users.p_u_id=${data.uid} OR users.branch_id=${data.bid}) AND user_type!=0 and users.deleted=0`;
              sql1 = `SELECT * FROM users,roles WHERE users.r_id=roles.r_id AND (users.p_u_id=${data.uid} OR users.branch_id=${data.bid})  and users.deleted=0 OR users.user_type = 1 Group by u_id `;
              // sql1=`SELECT * FROM users,roles WHERE users.r_id=roles.r_id AND (users.p_u_id=${data.uid} OR users.branch_id=${data.bid})  and users.deleted=0 `
            }
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
          con.query(sql1, function (err, res) {
            if (err) {
              console.log(err);
              resolve({ status: 0, message: "Something went to wrong" });
            } else {
              if (typeof res != "undefined" && res.length > 0) {
                resolve({
                  status: 1,
                  uData: res,
                });
              } else {
                resolve({
                  status: 0,
                  uData: [],
                });
              }
            }
          });
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function branchtransfer(data) {
  try {
    if (data.branch_id != 0) {
      let curr_date = moment().format("DD-MM-YYYY");
      sql = `SELECT u_name,u_id,u_email,(SELECT b_name from branch where branch_id = ${data.old_branch})as branch_name FROM users WHERE branch_id = ${data.branch_id} and u_id=${data.u_id} and deleted =0`;

      let response = await new Promise((resolve, reject) => {
        con.query(sql, async function (err, result) {
          if (err) {
            console.log(err);
            resolve({ status: 0, message: "Something went to wrong" });
          } else {
            if (result.length > 0) {
              // resolve({ status: 1, foreign_branch:result[0].u_id});
              let modedetail = "";
              if (data.mode == 1) {
                modedetail = `,awb_no='${data.awb_no}'`;
              } else if (data.mode == 2) {
                modedetail = `,d_p_name='${data.d_p_name}'`;
              } else if (data.mode == 3) {
                modedetail = `,o_mode=${data.o_mode}`;
              }
              let mode = "";
              if (data.mode == 1) {
                mode = `This is courier mode and this is your AWB Number : ${data.awb_no}`;
              } else if (data.mode == 2) {
                mode = `This is hand delivery mode and this is your Delivery Person Name : ${data.d_p_name}`;
              } else if (data.mode == 3) {
                mode = `This is Online mode and this is ${data.o_mode == 1 ? "By Whatsapp" : "By Email"
                  }`;
              }
              sql1 = `UPDATE customer SET foreign_branch = ${data.branch_id},foreign_branchuser=${data.u_id},cust_transffered_date='${curr_date}',transfer_status=1,mode=${data.mode} ${modedetail} WHERE c_id =${data.c_id} and deleted =0`;

              con.query(sql1, async function (err1, result1) {
                if (err) {
                  console.log(err);
                  resolve({ status: 0, message: "Something went to wrong" });
                } else {
                  if (result1.affectedRows > 0) {
                    resolve({
                      status: 1,
                      message:
                        "Customer Successfully transfer to another branch....",
                      u_id: result[0].u_id,
                    });
                    let message = await sendmessage.getTemplate(47);
                    // message.template = message.template.replace(
                    //   "{:name:}",
                    //   data.c_name
                    // );
                    // message.template = message.template.replace(
                    //   "{:branch:}",
                    //   result[0].branch_name
                    // );
                    if (message.status != 0) {
                      message.template = message.template.replace(
                        "{:name:}",
                        result[0].u_name
                      );
                      message.template = message.template.replace(
                        "{:cname:}",
                        data.c_name
                      );
                      message.template = message.template.replace(
                        "{:branch:}",
                        result[0].branch_name
                      );
                      message.template = message.template.replace(
                        "{:mode:}",
                        mode
                      );
                      let senderMailSetting = await sendmessage.getEmailSetting(
                        data.login_id
                      );

                      sqlll = `SELECT u_email FROM users WHERE u_id = ${data.login_id} `;
                      let ccmail = await new Promise((resolve, reject) => {
                        con.query(sqlll, async function (err1, result1) {
                          if (err1) {
                            console.log(err1);
                            resolve({
                              status: 0,
                              message: "Something went to wrong",
                            });
                          } else {
                            if (result1.length > 0) {
                              resolve({
                                status: 1,
                                result: result1[0].u_email,
                              });
                            } else {
                              resolve({
                                status: 0,
                                message: "Something went to wrong",
                              });
                            }
                          }
                        });
                      });

                      let mess =
                        (message.header == 1
                          ? typeof senderMailSetting.email_template_header !=
                            undefined && senderMailSetting.email_template_header !=
                            undefined &&
                            senderMailSetting.email_template_header != null
                            ? senderMailSetting.email_template_header
                            : ""
                          : "") +
                        message.template +
                        (message.b_d_id != 0
                          ? message.b_d_id == 1
                            ? senderMailSetting.gst_bankdetails
                            : message.b_d_id == 2
                              ? senderMailSetting.ngst_bankdetails
                              : message.b_d_id == 3
                                ? senderMailSetting.general_bankdetails
                                : ""
                          : "") +
                        (message.footer == 1
                          ? senderMailSetting.email_template_footer
                          : "") +
                        (message.signature == 1
                          ? senderMailSetting.email_signature
                          : "");
                      CCMailSetting = await sendmessage.getEmailSetting(1);
                      sendmessagenow = sendmessage.customermessagesend(
                        senderMailSetting,
                        result[0].u_email,
                        mess,
                        message.subject,
                        ccmail.result, //CCMailSetting.e_username,  // user mail
                        ccmail.result, // reply mail
                        1
                      );
                    }
                  } else {
                    resolve({
                      status: 0,
                      message: "Something went to wrong",
                    });
                  }
                }
              });
              sql3 = `INSERT INTO customer_comment (c_id,u_id,comment,cc_date) VALUES (${data.c_id},'${data.u_id}','This customer is tranasfer to ${result[0].u_name} ${mode}','${curr_date}')`;
              let response = await new Promise((resolve, reject) => {
                con.query(sql3, function (err, result) {
                  if (err) {
                    console.log(err);
                    resolve({ status: 0, message: "Something went to wrong" });
                  } else {
                    if (result.affectedRows > 0) {
                      resolve({
                        status: 1,
                        message: "Customer Conversation Insert successfully",
                      });
                    } else {
                      resolve({
                        status: 0,
                        message: "Something went to wrong",
                      });
                    }
                  }
                });
              });
              resolve({
                status: 1,
                message: "Customer Successfully transfer to another branch....",
                u_id: result[0].u_id,
              });
            } else {
              resolve({
                status: 0,
                message: "Branch does not have Branch Admin....",
                u_id: 0,
              });
            }
          }
        });
      });
      return response;
    } else {
      let response = await new Promise((resolve, reject) => {
        sql1 = `UPDATE customer SET foreign_branch = ${data.branch_id
          },foreign_branchuser=${data.branch_id
          },transfer_status=0,mode=0,awb_no=${null},d_p_name=${null},o_mode=0 WHERE c_id =${data.c_id
          } and deleted =0`;
        con.query(sql1, function (err, result) {
          if (err) {
            console.log(err);
            resolve({ status: 0, message: "Something went to wrong" });
          } else {
            if (result.affectedRows > 0) {
              resolve({
                status: 1,
                message: "Customer Successfully transfer to another branch....",
              });
            } else {
              resolve({
                status: 0,
                message: "Something went to wrong",
              });
            }
          }
        });
        resolve({
          status: 1,
          message: "Customer Successfully transfer to Original branch....",
        });
      });
      return response;
    }
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function fetchmanagerbranch(data) {
  try {
    sql = `SELECT *,(SELECT u_name FROM users WHERE u_id=${data.uid}) FROM manager_allocation,branch WHERE manager_id=${data.uid} and manager_allocation.branch_id=branch.branch_id and branch.deleted=0 and manager_allocation.deleted=0;`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              data: result,
            });
          } else {
            resolve({ status: 0, message: "No Records to Display..." });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function fetchbranchuserdata(data) {
  try {
    sql = `SELECT * FROM users WHERE branch_id=${data.bid} and user_type=1 AND deleted=0;`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              data: result[0],
            });
          } else {
            resolve({ status: 0, message: "No Records to Display..." });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function getrevenuedata(data) {
  try {
    if (data.user_type == 0) {
      sql = `SELECT SUM(paid_amt) as amount,SUBSTRING(STR_TO_DATE(payment.payment_date,'%d-%m-%Y'),1,7) as month FROM payment,customer WHERE 
      payment.c_id=customer.c_id and customer.branch_id=${data.branch_name}`;
      if (data.u_name != 0) {
        sql += ` and payment.u_id=${data.u_name}`;
      }
      sql += ` AND payment_id IN (SELECT max(payment_id) FROM payment GROUP by c_id) 
      GROUP by SUBSTRING(STR_TO_DATE(payment.payment_date,'%d-%m-%Y'),1,7);`;
    } else if (data.user_type == 1) {
      sql = `SELECT SUM(paid_amt) as amount,SUBSTRING(STR_TO_DATE(payment.payment_date,'%d-%m-%Y'),1,7) as month FROM payment,customer WHERE 
      payment.c_id=customer.c_id`;
      if (data.u_name != 0) {
        sql += ` and payment.u_id=${data.u_name}`;
      }
      if (data.branch_name == 0) {
        sql += ` and customer.branch_id=${data.ubranch_id}`;
      }
      sql += ` AND payment_id IN (SELECT max(payment_id) FROM payment GROUP by c_id) 
      GROUP by SUBSTRING(STR_TO_DATE(payment.payment_date,'%d-%m-%Y'),1,7);`;
    }

    let response = await new Promise(async (resolve, reject) => {
      con.query(sql, function (err, res) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (res.length > 0) {
            resolve({
              status: 1,
              data: res,
            });
          } else {
            resolve({
              status: 0,
              data: [],
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}
//0504
async function getactivitylog(data) {
  try {
    // sql = `select *,(SELECT u_name FROM users WHERE users.u_id=status_activity_log.u_id)as username,(SELECT name FROM attributes WHERE attributes.attribute_id=status_activity_log.old_status_id)as old_status_name,(SELECT name FROM attributes WHERE attributes.attribute_id=status_activity_log.new_status_id)as new_status_name from status_activity_log Where status_activity_log.detail_id = ${data.detail_id} ORDER BY activity_id DESC`;

    sql = `SELECT s_tbl.*,users.u_name as username,a1.name AS old_status_name,a2.name AS new_status_name,a3.name AS courier_name,details.collector,details.awb_no,details.reason FROM  status_activity_log s_tbl LEFT JOIN users ON users.u_id=s_tbl.u_id  LEFT JOIN attributes a1 ON a1.attribute_id=s_tbl.old_status_id LEFT JOIN attributes a2 ON a2.attribute_id=s_tbl.new_status_id LEFT JOIN details ON details.detail_id = s_tbl.detail_id LEFT JOIN attributes a3 ON a3.attribute_id= details.courier_id Where s_tbl.detail_id = ${data.detail_id} ORDER BY s_tbl.activity_id DESC`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              result: result,
            });
          } else {
            resolve({
              status: 1,
              result: [],
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function addlogouttime(data) {
  try {
    let current_time = moment().format("HH:mm:ss");
    sql1 = `Select a_id From login_activity_log Where u_id = ${data.u_id} ORDER BY a_id DESC Limit 1`;
    let ress = await new Promise((resolve, reject) => {
      con.query(sql1, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({ status: 1, result: result[0].a_id });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });

    sql2 = `UPDATE users SET check_in_status = '0' WHERE users.u_id = ${data.u_id}`;
    let response2 = await new Promise((resolve, reject) => {
      con.query(sql2, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.affectedRows > 0) {
            resolve({ status: 1, result: "Done..." });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });

    sql = `UPDATE login_activity_log SET logout_time = '${current_time}' WHERE u_id = ${data.u_id} and a_id =${ress.result}`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.affectedRows > 0) {
            resolve({ status: 1, result: "Done..." });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });

    sql11 = `SELECT * FROM login_activity_log where u_id = ${data.u_id} ORDER BY a_id DESC Limit 1;`;
    let resp1 = await new Promise((resolve, reject) => {
      con.query(sql11, async function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            const startTime = moment(result[0].login_time, "HH:mm:ss ");
            const endTime = moment(result[0].logout_time, "HH:mm:ss ");
            const duration = moment.duration(endTime.diff(startTime));
            const hours = parseInt(duration.asHours());
            const minutes = parseInt(duration.asMinutes()) % 60;
            sql = `UPDATE login_activity_log SET total_duration = '${hours} hours and ${minutes} minutes' WHERE u_id = ${data.u_id} and a_id =${result[0].a_id}`;
            // let res1 = await new Promise((resolve, reject) => {
            con.query(sql, function (err, resu) {
              if (err) {
                console.log(err);
                resolve({ status: 0, message: "Something went to wrong" });
              } else {
                if (result.affectedRows > 0) {
                  resolve({ status: 1, result: "Done..." });
                }
              }
            });
            // })
          }
          resolve({ status: 1, result: "Logout Successfully..." });
        }
      });
    });
    return resp1;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function login_logout_report(data) {
  try {
    sql = `SELECT *,(SELECT u_name FROM users WHERE users.u_id = login_activity_log.u_id)as name FROM login_activity_log where logout_time != "" and total_duration != ""  and deleted =0`;
    sql1 = sql;
    sql += ` limit ${(data.page - 1) * data.perpage},${data.perpage}`;

    let response = await new Promise((resolve, reject) => {
      con.query(sql1, async function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            con.query(sql, async function (err, sresult) {
              if (err) {
                console.log(err);
                resolve({ status: 0, message: "Something went to wrong" });
              } else {
                if (sresult.length > 0) {
                  resolve({
                    status: 1,
                    trows: result.length,
                    result: sresult,
                    adata: result,
                  });
                } else {
                  resolve({
                    status: 1,
                    result: [],
                  });
                }
              }
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function searchlogin_logout_report(data) {
  try {
    sql2 = `SELECT *,(SELECT u_name FROM users  WHERE users.u_id = login_activity_log.u_id)as name FROM login_activity_log INNER JOIN users ON users.u_id = login_activity_log.u_id where login_activity_log.logout_time != "" and login_activity_log.total_duration != ""  and login_activity_log.deleted =0 `;
    if (
      typeof data.s_date != "undefined" &&
      data.s_date != "" &&
      typeof data.e_date != "undefined" &&
      data.e_date != ""
    ) {
      sql2 += ` and STR_TO_DATE(login_activity_log.date,"%d-%m-%y") >= STR_TO_DATE('${data.s_date}',"%d-%m-%y") and STR_TO_DATE(login_activity_log.date,"%d-%m-%y") <= STR_TO_DATE('${data.e_date}',"%d-%m-%y")`;
    }
    if (
      typeof data.u_name != "undefined" &&
      data.u_name != "" &&
      data.u_name != 0
    ) {
      sql2 += ` and (login_activity_log.u_id=${data.u_name}) `;
    }
    sql3 = sql2;
    sql2 += ` limit ${(data.page - 1) * data.perpage},${data.perpage}`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql3, async function (err3, result3) {
        if (err3) {
          console.log(err3);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result3.length > 0) {
            con.query(sql2, function (err, res) {
              if (err) {
                console.log(err);
                resolve({ status: 0, message: "Something went to wrong" });
              } else {
                if (res.length > 0) {
                  resolve({
                    status: 1,
                    data: res,
                    t_rows: result3.length,
                    adata: result3,
                  });
                }
              }
            });
          } else {
            resolve({
              status: 1,
              data: [],
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

//0603
async function getAllHoldApplication(data) {
  try {
    let curdate = moment().format("DD-MM-YYYY");
    let insdate = moment().add(-2, "d").format("DD-MM-YYYY");

    let cbranchid;
    if (data.branch_id == undefined) {
      cbranchid = 0;
    } else {
      cbranchid = data.branch_id;
    }

    let getbadmin = `SELECT users.* FROM users JOIN branch WHERE branch.branch_id=users.branch_id and users.branch_id=${cbranchid} AND user_type=1 AND users.deleted=0`;

    let bresponse = await new Promise(async (resolve, reject) => {
      con.query(getbadmin, async function (err, results) {
        if (err) {
          console.log(err);
          console.log("Something went wrong");
        } else {
          if (results != undefined) {
            if (results.length > 0) {
              resolve({
                status: 1,
                results: results[0],
              });
            } else {
              console.log("There is no data Found....");
              resolve({
                status: 0,
                results: [],
              });
            }
          } else {
            resolve({
              status: 0,
              results: [],
            });
          }
        }
      });
    });

    let sadmin = `SELECT users.* FROM users where u_id=1 and users.deleted=0`;
    let sresponse = await new Promise(async (resolve, reject) => {
      con.query(sadmin, async function (err, results) {
        if (err) {
          console.log(err);
          console.log("Something went wrong");
        } else {
          if (results != undefined) {
            if (results.length > 0) {
              resolve({
                status: 1,
                results: results[0],
              });
            } else {
              console.log("There is no data Found....");
              resolve({
                status: 0,
                results: [],
              });
            }
          } else {
            resolve({
              status: 0,
              results: [],
            });
          }
        }
      });
    });
    let record = [];
    getuserquery = `select * from users where u_id=${data.u_id} and deleted=0`;
    let response = await new Promise((resolve, reject) => {
      con.query(getuserquery, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            if (result[0].user_type == 1) {
              getallchilduser = `select * from users where (p_u_id=${data.u_id} and branch_id=${result[0].branch_id}) and deleted=0`;
              con.query(getallchilduser, function (err, res) {
                if (err) {
                  console.log(err);
                  resolve({ status: 0, message: "Something went to wrong" });
                } else {
                  res.forEach(function (r) {
                    record.push(r.u_id);
                  });
                  resolve({
                    record: record,
                    type: result[0].user_type,
                  });
                }
              });
            } else {
              resolve({
                type: result[0].user_type,
              });
            }
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    // if (response.type == 1) {
    //   sql = `SELECT customer.*,visa.v_id,details.detail_id,details.status_id,details.delivery_date FROM customer,visa,details WHERE customer.c_id=visa.c_id AND visa.v_id=details.service_id AND details.service_type=8 AND details.deleted=0 AND visa.deleted=0 AND customer.deleted=0 AND details.status_id=20 AND customer.c_date='${insdate}' AND customer.branch_id=${data.branch_id} GROUP BY customer.c_id UNION  SELECT customer.*,attestation.a_id,details.detail_id,details.status_id,details.delivery_date FROM customer,attestation,details WHERE customer.c_id=attestation.c_id AND attestation.a_id=details.service_id AND details.service_type=10 AND details.deleted=0 AND attestation.deleted=0 AND customer.deleted=0 AND details.status_id=20 AND customer.c_date='${insdate}' AND customer.branch_id=${data.branch_id} GROUP BY customer.c_id UNION SELECT customer.*,apostille.a_id,details.detail_id,details.status_id,details.delivery_date FROM customer,apostille,details WHERE customer.c_id=apostille.c_id AND apostille.a_id=details.service_id AND details.service_type=8 AND details.deleted=0 AND apostille.deleted=0 AND customer.deleted=0 AND details.status_id=20 AND customer.c_date='${insdate}' AND customer.branch_id=${data.branch_id} GROUP BY customer.c_id UNION SELECT customer.*,translation.a_id,details.detail_id,details.status_id,details.delivery_date FROM customer,translation,details WHERE customer.c_id=translation.c_id AND translation.a_id=details.service_id AND details.service_type=8 AND details.deleted=0 AND translation.deleted=0 AND customer.deleted=0 AND details.status_id=20 AND customer.c_date='${insdate}' AND customer.branch_id=${data.branch_id} GROUP BY customer.c_id`;
    // } else {
    //   if (data.u_id != 1) {
    //     sql = `SELECT customer.*,visa.v_id,details.detail_id,details.status_id,details.delivery_date FROM customer,visa,details WHERE customer.c_id=visa.c_id AND visa.v_id=details.service_id AND details.service_type=8 AND details.deleted=0 AND visa.deleted=0 AND customer.deleted=0 AND details.status_id=20 AND customer.c_date='${insdate}' AND customer.u_id=${data.u_id} GROUP BY customer.c_id UNION  SELECT customer.*,attestation.a_id,details.detail_id,details.status_id,details.delivery_date FROM customer,attestation,details WHERE customer.c_id=attestation.c_id AND attestation.a_id=details.service_id AND details.service_type=10 AND details.deleted=0 AND attestation.deleted=0 AND customer.deleted=0 AND details.status_id=20 AND customer.c_date='${insdate}' AND customer.u_id=${data.u_id} GROUP BY customer.c_id UNION SELECT customer.*,apostille.a_id,details.detail_id,details.status_id,details.delivery_date FROM customer,apostille,details WHERE customer.c_id=apostille.c_id AND apostille.a_id=details.service_id AND details.service_type=8 AND details.deleted=0 AND apostille.deleted=0 AND customer.deleted=0 AND details.status_id=20 AND customer.c_date='${insdate}' AND customer.u_id=${data.u_id} GROUP BY customer.c_id UNION SELECT customer.*,translation.a_id,details.detail_id,details.status_id,details.delivery_date FROM customer,translation,details WHERE customer.c_id=translation.c_id AND translation.a_id=details.service_id AND details.service_type=8 AND details.deleted=0 AND translation.deleted=0 AND customer.deleted=0 AND details.status_id=20 AND customer.c_date='${insdate}' AND customer.u_id=${data.u_id} GROUP BY customer.c_id`;
    //   } else {
    //     sql = `SELECT customer.*,visa.v_id,details.detail_id,details.status_id,details.delivery_date FROM customer,visa,details WHERE customer.c_id=visa.c_id AND visa.v_id=details.service_id AND details.service_type=8 AND details.deleted=0 AND visa.deleted=0 AND customer.deleted=0 AND details.status_id=20 AND customer.c_date='${insdate}' GROUP BY customer.c_id UNION  SELECT customer.*,attestation.a_id,details.detail_id,details.status_id,details.delivery_date FROM customer,attestation,details WHERE customer.c_id=attestation.c_id AND attestation.a_id=details.service_id AND details.service_type=10 AND details.deleted=0 AND attestation.deleted=0 AND customer.deleted=0 AND details.status_id=20 AND customer.c_date='${insdate}' GROUP BY customer.c_id UNION SELECT customer.*,apostille.a_id,details.detail_id,details.status_id,details.delivery_date FROM customer,apostille,details WHERE customer.c_id=apostille.c_id AND apostille.a_id=details.service_id AND details.service_type=8 AND details.deleted=0 AND apostille.deleted=0 AND customer.deleted=0 AND details.status_id=20 AND customer.c_date='${insdate}' GROUP BY customer.c_id UNION SELECT customer.*,translation.a_id,details.detail_id,details.status_id,details.delivery_date FROM customer,translation,details WHERE customer.c_id=translation.c_id AND translation.a_id=details.service_id AND details.service_type=8 AND details.deleted=0 AND translation.deleted=0 AND customer.deleted=0 AND details.status_id=20 AND customer.c_date='${insdate}' GROUP BY customer.c_id`;
    //   }
    // }
    let branchallocation;
    if (response.type == 2) {
      branchallocation = await getzonemanagerbranch(data.u_id);
    }
    if (response.type == 1) {
      sql = `SELECT customer.*,visa.v_id,details.detail_id,details.status_id,details.delivery_date,details.extra_comment FROM customer,visa,details WHERE customer.c_id=visa.c_id AND visa.v_id=details.service_id AND details.service_type=8 AND details.deleted=0 AND (details.h_read_satus=0 OR (details.h_read_satus=1 AND details.next_r_date='${curdate}')) AND visa.deleted=0 AND customer.deleted=0 AND (details.status_id=20 or details.status_id=16) AND (STR_TO_DATE(customer.c_date,'%d-%m-%Y') >= STR_TO_DATE('${insdate}','%d-%m-%Y') OR details.next_r_date='${curdate}') AND (customer.created_branch_id=${data.branch_id} OR customer.branch_id=${data.branch_id}) GROUP BY customer.c_id
       UNION SELECT customer.*,attestation.a_id,details.detail_id,details.status_id,details.delivery_date,details.extra_comment FROM customer,attestation,details WHERE customer.c_id=attestation.c_id AND attestation.a_id=details.service_id AND details.service_type=10 AND details.deleted=0 AND (details.h_read_satus=0 OR (details.h_read_satus=1 AND details.next_r_date='${curdate}')) AND attestation.deleted=0 AND customer.deleted=0 AND (details.status_id=20 or details.status_id=16) AND (STR_TO_DATE(customer.c_date,'%d-%m-%Y') >= STR_TO_DATE('${insdate}','%d-%m-%Y') OR details.next_r_date='${curdate}') AND (customer.created_branch_id=${data.branch_id} OR customer.branch_id=${data.branch_id}) GROUP BY customer.c_id UNION SELECT customer.*,apostille.a_id,details.detail_id,details.status_id,details.delivery_date,details.extra_comment FROM customer,apostille,details WHERE customer.c_id=apostille.c_id AND apostille.a_id=details.service_id AND details.service_type=17 AND details.deleted=0 AND (details.h_read_satus=0 OR (details.h_read_satus=1 AND details.next_r_date='${curdate}')) AND apostille.deleted=0 AND customer.deleted=0 AND (details.status_id=20 or details.status_id=16) AND (STR_TO_DATE(customer.c_date,'%d-%m-%Y') >= STR_TO_DATE('${insdate}','%d-%m-%Y') OR details.next_r_date='${curdate}') AND (customer.created_branch_id=${data.branch_id} OR customer.branch_id=${data.branch_id}) GROUP BY customer.c_id UNION SELECT customer.*,translation.a_id,details.detail_id,details.status_id,details.delivery_date,details.extra_comment FROM customer,translation,details WHERE customer.c_id=translation.c_id AND translation.a_id=details.service_id AND details.service_type=20 AND details.deleted=0 AND (details.h_read_satus=0 OR (details.h_read_satus=1 AND details.next_r_date='${curdate}')) AND translation.deleted=0 AND customer.deleted=0 AND (details.status_id=20 or details.status_id=16) AND (STR_TO_DATE(customer.c_date,'%d-%m-%Y') >= STR_TO_DATE('${insdate}','%d-%m-%Y') OR details.next_r_date='${curdate}') AND(customer.created_branch_id=${data.branch_id} OR customer.branch_id=${data.branch_id}) GROUP BY customer.c_id`;
    } else if (response.type == 2) {
      sql = `SELECT customer.*,visa.v_id,details.detail_id,details.status_id,details.delivery_date,details.extra_comment FROM customer,visa,details WHERE customer.c_id=visa.c_id AND visa.v_id=details.service_id AND details.service_type=8 AND details.deleted=0 AND (details.h_read_satus=0 OR (details.h_read_satus=1 AND details.next_r_date='${curdate}')) AND visa.deleted=0 AND customer.deleted=0 AND (details.status_id=20 or details.status_id=16) AND (STR_TO_DATE(customer.c_date,'%d-%m-%Y') >= STR_TO_DATE('${insdate}','%d-%m-%Y') OR details.next_r_date='${curdate}') AND (customer.created_branch_id IN (${branchallocation.branchdata}) OR customer.branch_id IN (${branchallocation.branchdata})) GROUP BY customer.c_id UNION SELECT customer.*,attestation.a_id,details.detail_id,details.status_id,details.delivery_date,details.extra_comment FROM customer,attestation,details WHERE customer.c_id=attestation.c_id AND attestation.a_id=details.service_id AND details.service_type=10 AND details.deleted=0 AND (details.h_read_satus=0 OR (details.h_read_satus=1 AND details.next_r_date='${curdate}')) AND attestation.deleted=0 AND customer.deleted=0 AND (details.status_id=20 or details.status_id=16) AND (STR_TO_DATE(customer.c_date,'%d-%m-%Y') >= STR_TO_DATE('${insdate}','%d-%m-%Y') OR details.next_r_date='${curdate}') AND (customer.created_branch_id IN (${branchallocation.branchdata}) OR customer.branch_id IN (${branchallocation.branchdata})) GROUP BY customer.c_id UNION SELECT customer.*,apostille.a_id,details.detail_id,details.status_id,details.delivery_date,details.extra_comment FROM customer,apostille,details WHERE customer.c_id=apostille.c_id AND apostille.a_id=details.service_id AND details.service_type=17 AND details.deleted=0 AND (details.h_read_satus=0 OR (details.h_read_satus=1 AND details.next_r_date='${curdate}')) AND apostille.deleted=0 AND customer.deleted=0 AND (details.status_id=20 or details.status_id=16) AND (STR_TO_DATE(customer.c_date,'%d-%m-%Y') >= STR_TO_DATE('${insdate}','%d-%m-%Y') OR details.next_r_date='${curdate}') AND (customer.created_branch_id IN (${branchallocation.branchdata}) OR customer.branch_id IN (${branchallocation.branchdata})) GROUP BY customer.c_id
      UNION SELECT customer.*,translation.a_id,details.detail_id,details.status_id,details.delivery_date,details.extra_comment FROM customer,translation,details WHERE customer.c_id=translation.c_id AND translation.a_id=details.service_id AND details.service_type=20 AND details.deleted=0 AND (details.h_read_satus=0 OR (details.h_read_satus=1 AND details.next_r_date='${curdate}')) AND translation.deleted=0 AND customer.deleted=0 AND (details.status_id=20 or details.status_id=16) AND (STR_TO_DATE(customer.c_date,'%d-%m-%Y') >= STR_TO_DATE('${insdate}','%d-%m-%Y') OR details.next_r_date='${curdate}') AND (customer.created_branch_id IN (${branchallocation.branchdata}) OR customer.branch_id IN (${branchallocation.branchdata})) GROUP BY customer.c_id`;
    } else {
      if (data.u_id != 1) {
        sql = `SELECT customer.*,visa.v_id,details.detail_id,details.status_id,details.delivery_date,details.extra_comment FROM customer,visa,details WHERE customer.c_id=visa.c_id AND visa.v_id=details.service_id AND details.service_type=8 AND details.deleted=0 AND (details.h_read_satus=0 OR (details.h_read_satus=1 AND details.next_r_date='${curdate}')) AND visa.deleted=0 AND customer.deleted=0 AND (details.status_id=20 or details.status_id=16) AND (STR_TO_DATE(customer.c_date,'%d-%m-%Y') >= STR_TO_DATE('${insdate}','%d-%m-%Y') OR details.next_r_date='${curdate}') AND (customer.created_id=${data.u_id} OR customer.u_id=${data.u_id}) GROUP BY customer.c_id UNION  SELECT customer.*,attestation.a_id,details.detail_id,details.status_id,details.delivery_date,details.extra_comment FROM customer,attestation,details WHERE customer.c_id=attestation.c_id AND attestation.a_id=details.service_id AND details.service_type=10 AND details.deleted=0 AND (details.h_read_satus=0 OR (details.h_read_satus=1 AND details.next_r_date='${curdate}')) AND attestation.deleted=0 AND customer.deleted=0 AND (details.status_id=20 or details.status_id=16) AND (STR_TO_DATE(customer.c_date,'%d-%m-%Y') >= STR_TO_DATE('${insdate}','%d-%m-%Y') OR details.next_r_date='${curdate}') AND (customer.created_id=${data.u_id} OR customer.u_id=${data.u_id}) GROUP BY customer.c_id 
        UNION SELECT customer.*,apostille.a_id,details.detail_id,details.status_id,details.delivery_date,details.extra_comment FROM customer,apostille,details WHERE customer.c_id=apostille.c_id AND apostille.a_id=details.service_id AND details.service_type=17 AND details.deleted=0 AND (details.h_read_satus=0 OR (details.h_read_satus=1 AND details.next_r_date='${curdate}')) AND apostille.deleted=0 AND customer.deleted=0 AND (details.status_id=20 or details.status_id=16) AND (STR_TO_DATE(customer.c_date,'%d-%m-%Y') >= STR_TO_DATE('${insdate}','%d-%m-%Y') OR details.next_r_date='${curdate}') AND (customer.created_id=${data.u_id} OR customer.u_id=${data.u_id}) GROUP BY customer.c_id UNION SELECT customer.*,translation.a_id,details.detail_id,details.status_id,details.delivery_date,details.extra_comment FROM customer,translation,details WHERE customer.c_id=translation.c_id AND translation.a_id=details.service_id AND details.service_type=20 AND details.deleted=0 AND (details.h_read_satus=0 OR (details.h_read_satus=1 AND details.next_r_date='${curdate}')) AND translation.deleted=0 AND customer.deleted=0 AND (details.status_id=20 or details.status_id=16) AND (STR_TO_DATE(customer.c_date,'%d-%m-%Y') >= STR_TO_DATE('${insdate}','%d-%m-%Y') OR details.next_r_date='${curdate}') AND (customer.created_id=${data.u_id} OR customer.u_id=${data.u_id}) GROUP BY customer.c_id`;
      } else {
        sql = `SELECT customer.*,visa.v_id,details.detail_id,details.status_id,details.delivery_date,details.extra_comment FROM customer,visa,details WHERE customer.c_id=visa.c_id AND visa.v_id=details.service_id AND details.service_type=8 AND details.deleted=0 AND (details.h_read_satus=0 OR (details.h_read_satus=1 AND details.next_r_date='${curdate}')) AND visa.deleted=0 AND customer.deleted=0 AND (details.status_id=20 or details.status_id=16) AND (STR_TO_DATE(customer.c_date,'%d-%m-%Y') >= STR_TO_DATE('${insdate}','%d-%m-%Y') OR details.next_r_date='${curdate}') GROUP BY customer.c_id UNION  SELECT customer.*,attestation.a_id,details.detail_id,details.status_id,details.delivery_date,details.extra_comment FROM customer,attestation,details WHERE customer.c_id=attestation.c_id AND attestation.a_id=details.service_id AND details.service_type=10 AND details.deleted=0 AND (details.h_read_satus=0 OR (details.h_read_satus=1 AND details.next_r_date='${curdate}')) AND attestation.deleted=0 AND customer.deleted=0 AND (details.status_id=20 or details.status_id=16) AND (STR_TO_DATE(customer.c_date,'%d-%m-%Y') >= STR_TO_DATE('${insdate}','%d-%m-%Y') OR details.next_r_date='${curdate}') GROUP BY customer.c_id UNION SELECT customer.*,apostille.a_id,details.detail_id,details.status_id,details.delivery_date,details.extra_comment FROM customer,apostille,details WHERE customer.c_id=apostille.c_id AND apostille.a_id=details.service_id AND details.service_type=17 AND details.deleted=0 AND (details.h_read_satus=0 OR (details.h_read_satus=1 AND details.next_r_date='${curdate}')) AND apostille.deleted=0 AND customer.deleted=0 AND (details.status_id=20 or details.status_id=16) AND (STR_TO_DATE(customer.c_date,'%d-%m-%Y') >= STR_TO_DATE('${insdate}','%d-%m-%Y') OR details.next_r_date='${curdate}') GROUP BY customer.c_id UNION SELECT customer.*,translation.a_id,details.detail_id,details.status_id,details.delivery_date,details.extra_comment FROM customer,translation,details WHERE customer.c_id=translation.c_id AND translation.a_id=details.service_id AND details.service_type=20 AND details.deleted=0 AND (details.h_read_satus=0 OR (details.h_read_satus=1 AND details.next_r_date='${curdate}')) AND translation.deleted=0 AND customer.deleted=0 AND (details.status_id=20 or details.status_id=16) AND (STR_TO_DATE(customer.c_date,'%d-%m-%Y') >= STR_TO_DATE('${insdate}','%d-%m-%Y') OR details.next_r_date='${curdate}') GROUP BY customer.c_id`;
      }
    }
    let response1 = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              counter: result.length,
              data: result,
              bresponse: bresponse.results,
              sresponse: sresponse.results,
            });
          } else {
            resolve({
              status: 0,
              counter: 0,
              data: [],
              bresponse: bresponse.results,
              sresponse: sresponse.results,
            });
          }
        }
      });
    });
    return response1;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function insertnextholdcomment(data) {
  try {
    sql = `update details set next_r_date='${data.next_r_date}',next_c_date='${data.next_c_date
      }',extra_comment='${mysql_real_escape_string(
        data.extra_comment
      )}',h_read_satus = 1 where detail_id=${data.detail_id}`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.affectedRows > 0) {
            resolve({
              status: 1,
              message: "FollowUp insert successfully..",
            });
          } else {
            resolve({ status: 0, message: "No Records to Display..." });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function getTranslationCustomer(data) {
  try {
    let record = [];
    getuserquery = `select * from users where u_id=${data.u_id} and deleted=0`;
    let response = await new Promise((resolve, reject) => {
      con.query(getuserquery, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            if (result[0].user_type == 1) {
              getallchilduser = `select * from users where (p_u_id=${data.u_id} and branch_id=${result[0].branch_id}) and deleted=0`;
              con.query(getallchilduser, function (err, res) {
                if (err) {
                  console.log(err);
                  resolve({ status: 0, message: "Something went to wrong" });
                } else {
                  res.forEach(function (r) {
                    record.push(r.u_id);
                  });
                  resolve({
                    record: record,
                    type: result[0].user_type,
                  });
                }
              });
            } else {
              resolve({
                type: result[0].user_type,
              });
            }
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    let getTranslationPaginationQuery = "";
    let sql = "";
    if (response.type == 1) {
      sql = `SELECT *,(SELECT SUM(receive_amt) FROM draft_payment  WHERE draft_payment.c_id = customer.c_id and draft_payment.deleted=0 and draft_payment.receive_amt!=0  and draft_payment.approved_status =0 and draft_payment.deleted = 0 ) as total_draft,details.under_process_date AS process_date,(SELECT name FROM attributes WHERE attributes.attribute_id  =translation.a_type)as translation_type,(SELECT c_date FROM customer WHERE customer.c_id =translation.c_id)as r_date,(SELECT name FROM attributes WHERE attributes.attribute_id =translation.a_country)as translation_country,(SELECT name FROM attributes WHERE attributes.attribute_id =details.d_c_id)as translation_certificate,(SELECT c_prefix FROM customer WHERE customer.c_id=translation.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=translation.c_id) AS customer_name,(SELECT c_s_type FROM customer WHERE customer.c_id=translation.c_id) AS c_s_type,
      (SELECT c_id FROM customer WHERE customer.c_id=translation.c_id) as my_C_id,
      (SELECT u_id FROM customer WHERE customer.c_id=translation.c_id) AS cuid,(SELECT user_type FROM users where users.u_id  = (SELECT u_id FROM customer WHERE customer.c_id=translation.c_id)) as cutype,
      (SELECT payment.due_amt FROM payment where payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=translation.c_id) ORDER BY payment.payment_id DESC LIMIT 1) as my_Due_Amt,
      (SELECT payment.paid_amt FROM payment where payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=translation.c_id) ORDER BY payment.payment_id DESC LIMIT 1) as my_paid_amt,
      (SELECT payment.net_amt FROM payment where payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=translation.c_id) ORDER BY payment.payment_id DESC LIMIT 1) as my_net_amt,
      (SELECT payment.tds_amt FROM payment where payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=translation.c_id) ORDER BY payment.payment_id DESC LIMIT 1) as my_tds_amt,
      (SELECT draft_payment.d_p_id FROM draft_payment where draft_payment.deleted=0 and draft_payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=translation.c_id) and draft_payment.approved_status=0 and draft_payment.due_amt=0 ORDER BY draft_payment.d_p_id DESC LIMIT 1) as Draf_payment      
      FROM details,translation,customer WHERE customer.c_id=translation.c_id AND details.service_id=translation.a_id AND details.service_type=20 AND details.deleted = 0  AND translation.deleted = 0  AND customer.deleted = 0 AND customer.is_cancel = 0 AND (customer.branch_id =${data.branch_id} OR customer.foreign_branch = ${data.branch_id})`;

      getTranslationPaginationQuery = `SELECT COUNT(details.detail_id) as trows
      FROM details,translation,customer WHERE customer.c_id=translation.c_id AND details.service_id=translation.a_id AND details.service_type=20 AND details.deleted = 0  AND translation.deleted = 0  AND customer.deleted = 0 AND customer.is_cancel = 0 AND (customer.branch_id =${data.branch_id} OR customer.foreign_branch = ${data.branch_id})`;
    } else {
      if (data.u_id != 1) {
        sql = `SELECT *,(SELECT SUM(receive_amt) FROM draft_payment  WHERE draft_payment.c_id = customer.c_id and draft_payment.deleted=0 and draft_payment.receive_amt!=0  and draft_payment.approved_status =0 and draft_payment.deleted = 0 ) as total_draft,details.under_process_date AS process_date,(SELECT name FROM attributes WHERE attributes.attribute_id  =translation.a_type)as translation_type,(SELECT c_date FROM customer WHERE customer.c_id =translation.c_id)as r_date,(SELECT name FROM attributes WHERE attributes.attribute_id =translation.a_country)as translation_country,(SELECT name FROM attributes WHERE attributes.attribute_id =details.d_c_id)as translation_certificate,(SELECT c_prefix FROM customer WHERE customer.c_id=translation.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=translation.c_id) AS customer_name,(SELECT c_s_type FROM customer WHERE customer.c_id=translation.c_id) AS c_s_type,
        (SELECT c_id FROM customer WHERE customer.c_id=translation.c_id) as my_C_id,
        (SELECT branch_id FROM customer WHERE customer.c_id=translation.c_id) AS branch_id,(SELECT u_id FROM customer WHERE customer.c_id=translation.c_id) AS cuid,(SELECT user_type FROM users where users.u_id  = (SELECT u_id FROM customer WHERE customer.c_id=translation.c_id)) as cutype,
        (SELECT payment.due_amt FROM payment where payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=translation.c_id) ORDER BY payment.payment_id DESC LIMIT 1) as my_Due_Amt,
        (SELECT payment.paid_amt FROM payment where payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=translation.c_id) ORDER BY payment.payment_id DESC LIMIT 1) as my_paid_amt,
        (SELECT payment.net_amt FROM payment where payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=translation.c_id) ORDER BY payment.payment_id DESC LIMIT 1) as my_net_amt,
        (SELECT payment.tds_amt FROM payment where payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=translation.c_id) ORDER BY payment.payment_id DESC LIMIT 1) as my_tds_amt,
        (SELECT draft_payment.d_p_id FROM draft_payment where draft_payment.deleted=0 and draft_payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=translation.c_id) and draft_payment.approved_status=0 and draft_payment.due_amt=0 ORDER BY draft_payment.d_p_id DESC LIMIT 1) as Draf_payment
        FROM details,translation,customer WHERE translation.c_id=customer.c_id AND details.service_id=translation.a_id and (customer.u_id=${data.u_id} or customer.foreign_branchuser=${data.u_id} OR customer.created_id = ${data.u_id}) AND details.service_type=20 AND details.deleted = 0 AND translation.deleted = 0 AND customer.deleted = 0 AND customer.is_cancel = 0`;

        getTranslationPaginationQuery = `SELECT COUNT(details.detail_id) as trows
        FROM details,translation,customer WHERE translation.c_id=customer.c_id AND details.service_id=translation.a_id and (customer.u_id=${data.u_id} or customer.foreign_branchuser=${data.u_id} OR customer.created_id = ${data.u_id}) AND details.service_type=20 AND details.deleted = 0 AND translation.deleted = 0 AND customer.deleted = 0 AND customer.is_cancel = 0`;
      } else {
        sql = `SELECT *,(SELECT SUM(receive_amt) FROM draft_payment  WHERE draft_payment.c_id = customer.c_id and draft_payment.deleted=0 and draft_payment.receive_amt!=0  and draft_payment.approved_status =0 and draft_payment.deleted = 0 ) as total_draft,details.under_process_date AS process_date,(SELECT name FROM attributes WHERE attributes.attribute_id  =translation.a_type)as translation_type,(SELECT c_date FROM customer WHERE customer.c_id =translation.c_id)as r_date,(SELECT name FROM attributes WHERE attributes.attribute_id =translation.a_country)as translation_country,(SELECT name FROM attributes WHERE attributes.attribute_id =details.d_c_id)as translation_certificate,(SELECT c_prefix FROM customer WHERE customer.c_id=translation.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=translation.c_id) AS customer_name,(SELECT c_s_type FROM customer WHERE customer.c_id=translation.c_id) AS c_s_type,
        (SELECT c_id FROM customer WHERE customer.c_id=translation.c_id) as my_C_id,
        (SELECT branch_id FROM customer WHERE customer.c_id=translation.c_id) AS branch_id,(SELECT u_id FROM customer WHERE customer.c_id=translation.c_id) AS cuid,(SELECT user_type FROM users where users.u_id  = (SELECT u_id FROM customer WHERE customer.c_id=translation.c_id)) as cutype,
        (SELECT payment.due_amt FROM payment where payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=translation.c_id) ORDER BY payment.payment_id DESC LIMIT 1) as my_Due_Amt,
        (SELECT payment.paid_amt FROM payment where payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=translation.c_id) ORDER BY payment.payment_id DESC LIMIT 1) as my_paid_amt,
        (SELECT payment.net_amt FROM payment where payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=translation.c_id) ORDER BY payment.payment_id DESC LIMIT 1) as my_net_amt,
        (SELECT payment.tds_amt FROM payment where payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=translation.c_id) ORDER BY payment.payment_id DESC LIMIT 1) as my_tds_amt,
        (SELECT draft_payment.d_p_id FROM draft_payment where draft_payment.deleted=0 and draft_payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=translation.c_id) and draft_payment.approved_status=0 and draft_payment.due_amt=0 ORDER BY draft_payment.d_p_id DESC LIMIT 1) as Draf_payment
        FROM details,translation,customer WHERE customer.c_id=translation.c_id and details.service_id=translation.a_id  AND details.service_type=20 AND details.deleted = 0 AND translation.deleted = 0 AND customer.deleted = 0 AND customer.is_cancel = 0`;

        getTranslationPaginationQuery = `SELECT COUNT(details.detail_id) as trows
        FROM details,translation,customer WHERE customer.c_id=translation.c_id and details.service_id=translation.a_id  AND details.service_type=20 AND details.deleted = 0 AND translation.deleted = 0 AND customer.deleted = 0 AND customer.is_cancel = 0`;
      }
    }
    sql += ` ORDER BY detail_id  DESC limit ${(data.page - 1) * data.perPage},${data.perPage
      }`;
    let resp = await new Promise((resolve, reject) => {
      con.query(getTranslationPaginationQuery, function (err1, lres1) {
        if (err1) {
          console.log(err1);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (lres1.length > 0) {
            resolve({
              status: 1,
              t_rows: lres1[0].trows,
            });
          } else {
            resolve({
              status: 0,
              data: [],
            });
          }
        }
      });
    });
    let response1 = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              data: result,
              trows: resp.t_rows,
            });
          } else {
            resolve({
              status: 0,
              data: [],
            });
          }
        }
      });
    });
    return response1;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}


async function updateTranslationCustomer(data1) {
  try {
    let status_change_date = moment().format("DD-MM-YYYY HH:mm:ss");
    sql4 = `SELECT * FROM translation INNER JOIN payment ON translation.c_id = payment.c_id INNER JOIN customer ON translation.c_id = customer.c_id WHERE translation.c_id = ${data1.c_id} ORDER BY payment_id DESC LIMIT 1 `;

    let response3 = await new Promise((resolve, reject) => {
      con.query(sql4, async function (err4, result4) {
        if (err4) {
          console.log(err4);
          resolve({ status: 0, message: "Something went wrong" });
        } else {
          if (result4.length > 0) {
            result4.forEach(function (result) {
              resolve({
                result: result,
              });
            });
          } else {
            resolve({
              result: 0,
            });
          }
        }
      });
    });
    let sum = 0;
    let sum1 = [];
    let embassy = parseInt(response3.result.embassy_fees);

    paymentrecord = `SELECT * FROM payment WHERE c_id = ${data1.c_id} and deleted = 0 ORDER BY payment_id DESC limit 1;`;
    let payment = await new Promise((resolve, reject) => {
      con.query(paymentrecord, async function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Customer Not Updated" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              result: result[0],
              result1: result[0].payment_id,
              result2: result[0].invoice_no,
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    sql12 = `SELECT b_name FROM branch WHERE branch_id = ${data1.branch_id} `;
    let res = await new Promise((resolve, reject) => {
      con.query(sql12, async function (err1, result1) {
        if (err1) {
          console.log(err1);
          resolve({ status: 0, message: "Customer Not Updated" });
        } else {
          if (result1.length > 0) {
            resolve({ status: 1, result: result1[0].b_name });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    let responseinvoice = await new Promise((resolve, reject) => {
      if (data1.c_tax == "1") {
        // let getinvoiceno = `SELECT *,invoice_no FROM payment,customer WHERE payment.c_id=customer.c_id and payment.c_tax = "1" and customer.branch_id=${data1.branch_id} and payment.deleted=0 ORDER BY customer.c_id DESC limit 1;`;
        let getinvoiceno = `SELECT *,invoice_no FROM payment JOIN customer ON payment.c_id=customer.c_id and payment.c_tax = "1" and customer.branch_id=${data1.branch_id} and payment.deleted=0 ORDER BY payment.payment_id DESC,customer.c_id DESC limit 1;`;
        // const now = new Date();
        // const cvalue = date.format(now, "YY");
        // const currentYear = new Date().getFullYear().toString().slice(-2);
        // const previousYear = currentYear - 1;
        const cvalue = moment().format("MM");
        const last2 = new Date().getFullYear().toString().substring(2);
        const last2Num = Number(last2);
        var today = new Date();
        if (today.getMonth() + 1 <= 3) {
          fiscalyear = last2Num - 1 + "-" + last2Num;
        } else {
          fiscalyear = last2Num + "-" + (last2Num + 1);
        }
        let invoice_no = 0;
        con.query(getinvoiceno, async function (errino, inoresult) {
          if (errino) {
            console.log(errino);
            resolve({ status: 0, message: "Something went wrong" });
          } else {
            if (inoresult.length > 0 && inoresult[0].invoice_no != 0) {
              let sql = `UPDATE payment SET invoice_status = 1 WHERE payment_id=${payment.result1
                } AND deleted = 0  `;
              con.query(sql, async function (err, result) {
                if (err) {
                  console.log(err);
                  resolve({ status: 0, message: "Something went to wrong" });
                } else {
                  if (result.affectedRows > 0) {
                    resolve({
                      status: 1,
                      message: "Payment Updated successfully",
                    });
                  } else {
                    resolve({
                      status: 0,
                      message: "Something went to wrong",
                    });
                  }
                }
              });
              //1003
              let ino = inoresult[0].invoice_no;
              let n_ino = ino.split("/");
              if (fiscalyear == n_ino[1]) {
                invoice_no =
                  res.result.substring(0, 2) +
                  "/" +
                  fiscalyear +
                  "/" +
                  "g" +
                  cvalue +
                  "/" +
                  ++n_ino[3];
              } else {
                invoice_no =
                  res.result.substring(0, 2) +
                  "/" +
                  fiscalyear +
                  "/" +
                  "g" +
                  cvalue +
                  "/" +
                  1;
              }
            } else {
              let sql = `UPDATE payment SET invoice_status = 1 WHERE payment_id=${payment.result1
                } AND deleted = 0  `;
              con.query(sql, async function (err, result) {
                if (err) {
                  console.log(err);
                  resolve({ status: 0, message: "Something went to wrong" });
                } else {
                  if (result.affectedRows > 0) {
                    resolve({
                      status: 1,
                      message: "Payment Updated successfully",
                    });
                  } else {
                    resolve({
                      status: 0,
                      message: "Something went to wrong",
                    });
                  }
                }
              });
              invoice_no =
                res.result.substring(0, 2) +
                "/" +
                fiscalyear +
                "/" +
                "g" +
                cvalue +
                "/" +
                1;
            }
            resolve({ status: 1, ino: invoice_no });
          }
        });
      } else {
        //1003
        // getinvoiceno = `SELECT *,invoice_no FROM payment,customer WHERE payment.c_id=customer.c_id and payment.c_tax = "0" and customer.branch_id=${data1.branch_id} and payment.deleted=0 ORDER BY customer.c_id DESC limit 1;`;
        let getinvoiceno = `SELECT *,invoice_no FROM payment JOIN customer ON payment.c_id=customer.c_id and payment.c_tax = "0" and customer.branch_id=${data1.branch_id} and payment.deleted=0 ORDER BY payment.payment_id DESC,customer.c_id DESC limit 1;`;

        // const now = new Date();
        // const cvalue = date.format(now, "YY");
        // const currentYear = new Date().getFullYear().toString().slice(-2);
        // const previousYear = currentYear - 1;
        const cvalue = moment().format("MM");
        const last2 = new Date().getFullYear().toString().substring(2);
        const last2Num = Number(last2);
        var today = new Date();
        if (today.getMonth() + 1 <= 3) {
          fiscalyear = last2Num - 1 + "-" + last2Num;
        } else {
          fiscalyear = last2Num + "-" + (last2Num + 1);
        }
        let invoice_no = 0;
        con.query(getinvoiceno, async function (errino, inoresult) {
          if (errino) {
            console.log(errino);
            resolve({ status: 0, message: "Something went wrong" });
          } else {
            if (inoresult.length > 0 && inoresult[0].invoice_no != 0) {
              let sql = `UPDATE payment SET invoice_status = 1 WHERE payment_id=${payment.result1
                } AND deleted = 0  `;
              con.query(sql, async function (err, result) {
                if (err) {
                  console.log(err);
                  resolve({ status: 0, message: "Something went to wrong" });
                } else {
                  if (result.affectedRows > 0) {
                    resolve({
                      status: 1,
                      message: "Payment Updated successfully",
                    });
                  } else {
                    resolve({
                      status: 0,
                      message: "Something went to wrong",
                    });
                  }
                }
              });
              //1003
              let ino = inoresult[0].invoice_no;
              let n_ino = ino.split("/");
              if (fiscalyear == n_ino[1]) {
                invoice_no =
                  res.result.substring(0, 2) +
                  "/" +
                  fiscalyear +
                  "/" +
                  cvalue +
                  "/" +
                  ++n_ino[3];
              } else {
                invoice_no =
                  res.result.substring(0, 2) +
                  "/" +
                  fiscalyear +
                  "/" +
                  cvalue +
                  "/" +
                  1;
              }
            } else {
              let sql = `UPDATE payment SET invoice_status = 1 WHERE payment_id=${payment.result1
                } AND deleted = 0  `;
              con.query(sql, async function (err, result) {
                if (err) {
                  console.log(err);
                  resolve({ status: 0, message: "Something went to wrong" });
                } else {
                  if (result.affectedRows > 0) {
                    resolve({
                      status: 1,
                      message: "Payment Updated successfully",
                    });
                  } else {
                    resolve({
                      status: 0,
                      message: "Something went to wrong",
                    });
                  }
                }
              });
              invoice_no =
                res.result.substring(0, 2) +
                "/" +
                fiscalyear +
                "/" +
                cvalue +
                "/" +
                1;
            }
            resolve({ status: 1, ino: invoice_no });
          }
        });
      }
    });

    let response = await new Promise((resolve, reject) => {
      data1.applicationdata.map(async (data, index) => {
        if (data1.old_total_customer > index) {
          sql = `UPDATE translation SET a_prefix='${data.a_prefix
            }',a_name='${mysql_real_escape_string(data.a_name)}',a_code=${data.a_code
            },a_certificate='${data.a_certificate}',a_type=${data.a_type
            },a_country='${data.a_country}',a_supporting_doc='${data.a_supporting_doc
            }',a_extra_doc = '${data.a_extra_doc}',process_limit_date='${data.process_limit_date
            }',process_limit_mail_date='${data.process_limit_date
            }',no_of_certificates=${data.no_of_certificates} WHERE a_id=${data.a_id
            }`;
          con.query(sql, async function (err, result) {
            if (err) {
              console.log(err);
              resolve({ status: 0, message: "Something went to wrong" });
            } else {
              if (result.affectedRows > 0) {
                if (data.no_of_certificates > 0) {
                  for (
                    let index = 0;
                    index < data.a_certificate.length;
                    index++
                  ) {
                    console.log(
                      index,
                      data.a_certificate[index],
                      "!ft45645234rgdfrgdfgsd35"
                    );
                    // data.a_certificate.map(async (k, index) => {
                    // console.log(k, "kkkkkkkkkkkkkkkkk");

                    let sql1 = `SELECT detail_id FROM details WHERE d_c_id=${data.a_certificate[index]} AND service_id=${data.a_id} AND service_type = 20`;
                    con.query(sql1, async function (err111, result111) {
                      if (err111) {
                        console.log(err111);
                        resolve({
                          status: 0,
                          message: "Something went to wrong",
                        });
                      } else {
                        sql2 = `SELECT s_amount FROM serviceprice WHERE service = 20  AND country = ${data.a_country} AND s_type = ${data.a_type} and deleted = 0;`;

                        let response2 = await new Promise((resolve, reject) => {
                          con.query(sql2, async function (err2, result2) {
                            if (err2) {
                              console.log(err2);
                              resolve({
                                status: 0,
                                message: "Something went wrong",
                              });
                            } else {
                              if (result2.length > 0) {
                                result2.forEach(async function (result) {
                                  resolve({
                                    result: result.s_amount,
                                  });
                                });
                              } else {
                                resolve({
                                  result: parseInt(0),
                                });
                              }
                            }
                          });
                        });
                        let sqll = `SELECT document_type FROM attributes Where attribute_id=${data.a_certificate[index]}`;
                        let resp = await new Promise((resolve, reject) => {
                          con.query(sqll, async function (err1, result1) {
                            if (err1) {
                              console.log(err1);
                              resolve({
                                status: 0,
                                message: "Something went wrong",
                              });
                            } else {
                              if (result1.length > 0) {
                                resolve({
                                  status: 1,
                                  result: result1[0].document_type,
                                });
                              } else {
                                resolve({ status: 0, result: [] });
                              }
                            }
                          });
                        });
                        sql3 = `SELECT amount as embassy_fees FROM embassyfees WHERE service_type = 20  AND country = ${data.a_country} AND document = ${resp.result} AND deleted = 0;`;
                        let response3 = await new Promise((resolve, reject) => {
                          con.query(sql3, async function (err2, result2) {
                            if (err2) {
                              console.log(err2);
                              resolve({
                                status: 0,
                                message: "Something went wrong",
                              });
                            } else {
                              if (result2 == undefined) {
                                resolve({
                                  embassy_fees: parseInt(0),
                                });
                              } else {
                                if (result2.length > 0) {
                                  result2.forEach(async function (result) {
                                    resolve({
                                      embassy_fees: result.embassy_fees,
                                    });
                                  });
                                } else {
                                  resolve({
                                    embassy_fees: parseInt(0),
                                  });
                                }
                              }
                            }
                          });
                        });
                        if (result111.length > 0 || result111.length == 0) {
                          if (
                            result111.length > 0 &&
                            index < result111.length
                          ) {
                            sum = sum + parseInt(response2.result);
                            // embassy = embassy + parseInt(response2.embassy_fees);
                            sum1.push(parseInt(response2.result));

                            result111.forEach(async function (result1) {
                              sql3 = `UPDATE details SET amount = ${response2.result} WHERE deleted = 0 AND detail_id = ${result1.detail_id} AND service_type = 20`;

                              con.query(sql3, async function (err3, result3) {
                                if (err3) {
                                  console.log(err3);
                                  resolve({
                                    status: 0,
                                    message: "Something went Wrong",
                                  });
                                } else {
                                  if (result3.affectedRows > 0) {
                                    resolve({
                                      status: 1,
                                    });
                                  } else {
                                    resolve({
                                      status: 0,
                                      message: "Something went to wrong",
                                    });
                                  }
                                }
                              });
                            });
                          } else {
                            sum = sum + parseInt(response2.result);
                            embassy =
                              parseInt(embassy) +
                              parseInt(response3.embassy_fees);
                            sum1.push(parseInt(response2.result));
                            let status_change_date = moment().format(
                              "DD-MM-YYYY HH:mm:ss"
                            );
                            // result1.forEach(async function (result1) {
                            sqlll = `INSERT INTO details (service_type,service_id,d_c_id,amount,tracking_id,status_change_date) VALUES ('${data1.c_s_type}',${data.a_id} ,${data.a_certificate[index]},${response2.result},'${data.tracking_id}','${status_change_date}')`;

                            con.query(sqlll, async function (err3, result3) {
                              if (err3) {
                                console.log(err3);
                                resolve({
                                  status: 0,
                                  message: "Something went Wrong",
                                });
                              } else {
                                if (result3 == undefined) {
                                  resolve({
                                    status: 0,
                                    result: [],
                                  });
                                } else {
                                  if (result3.affectedRows > 0) {
                                    resolve({
                                      status: 1,
                                      result: result3,
                                    });
                                  }
                                }
                              }
                              // });
                            });
                          }
                        } else {
                          resolve({
                            status: 0,
                            message: "Something went Wrong...",
                          });
                        }
                      }
                    });
                    // });
                  }
                } else {
                  for (
                    let index = 0;
                    index < data.a_certificate.length;
                    index++
                  ) {
                    // data.a_certificate.map(async (k) => {
                    console.log(
                      index,
                      data.a_certificate[index],
                      "!@ssfsdfsd35"
                    );
                    let sql1 = `SELECT detail_id FROM details WHERE d_c_id=${data.a_certificate[index]} AND service_id=${data.a_id} AND service_type = 20`;
                    con.query(sql1, async function (err111, result111) {
                      if (err111) {
                        console.log(err111);
                        resolve({
                          status: 0,
                          message: "Something went to wrong",
                        });
                      } else {
                        sql2 = `SELECT s_amount FROM serviceprice WHERE service = 20  AND country = ${data.a_country} AND s_type = ${data.a_type} and deleted = 0;`;

                        let response2 = await new Promise((resolve, reject) => {
                          con.query(sql2, async function (err2, result2) {
                            if (err2) {
                              console.log(err2);
                              resolve({
                                status: 0,
                                message: "Something went wrong",
                              });
                            } else {
                              if (result2.length > 0) {
                                result2.forEach(async function (result) {
                                  resolve({
                                    result: result.s_amount,
                                  });
                                });
                              } else {
                                resolve({
                                  result: parseInt(0),
                                });
                              }
                            }
                          });
                        });
                        let sqll = `SELECT document_type FROM attributes Where attribute_id=${data.a_certificate[index]}`;
                        let resp = await new Promise((resolve, reject) => {
                          con.query(sqll, async function (err1, result1) {
                            if (err1) {
                              console.log(err1);
                              resolve({
                                status: 0,
                                message: "Something went wrong",
                              });
                            } else {
                              if (result1.length > 0) {
                                resolve({
                                  status: 1,
                                  result: result1[0].document_type,
                                });
                              } else {
                                resolve({ status: 0, result: [] });
                              }
                            }
                          });
                        });
                        sql3 = `SELECT amount as embassy_fees FROM embassyfees WHERE service_type = 20 AND country = ${data.a_country} AND document = ${resp.result} AND deleted = 0;`;
                        let response3 = await new Promise((resolve, reject) => {
                          con.query(sql3, async function (err2, result2) {
                            if (err2) {
                              console.log(err2);
                              resolve({
                                status: 0,
                                message: "Something went wrong",
                              });
                            } else {
                              if (result2 == undefined) {
                                resolve({
                                  embassy_fees: parseInt(0),
                                });
                              } else {
                                if (result2.length > 0) {
                                  result2.forEach(async function (result) {
                                    resolve({
                                      embassy_fees: result.embassy_fees,
                                    });
                                  });
                                } else {
                                  resolve({
                                    embassy_fees: parseInt(0),
                                  });
                                }
                              }
                            }
                          });
                        });
                        if (result111.length > 0 || result111.length == 0) {
                          if (result111.length > 0) {
                            sum = sum + parseInt(response2.result);
                            // embassy = embassy + parseInt(response2.embassy_fees);
                            sum1.push(parseInt(response2.result));

                            result111.forEach(async function (result1) {
                              sql3 = `UPDATE details SET amount = ${response2.result} WHERE deleted = 0 AND detail_id = ${result1.detail_id} AND service_type = 20`;

                              con.query(sql3, async function (err3, result3) {
                                if (err3) {
                                  console.log(err3);
                                  resolve({
                                    status: 0,
                                    message: "Something went Wrong",
                                  });
                                } else {
                                  if (result3.affectedRows > 0) {
                                    resolve({
                                      status: 1,
                                    });
                                  } else {
                                    resolve({
                                      status: 0,
                                      message: "Something went to wrong",
                                    });
                                  }
                                }
                              });
                            });
                          } else {
                            sum = sum + parseInt(response2.result);
                            embassy =
                              parseInt(embassy) +
                              parseInt(response3.embassy_fees);
                            sum1.push(parseInt(response2.result));
                            let status_change_date = moment().format(
                              "DD-MM-YYYY HH:mm:ss"
                            );
                            // result1.forEach(async function (result1) {
                            sqlll = `INSERT INTO details (service_type,service_id,d_c_id,amount,tracking_id,status_change_date) VALUES ('${data1.c_s_type}',${data.a_id} ,${data.a_certificate[index]},${response2.result},'${data.tracking_id}','${status_change_date}')`;

                            con.query(sqlll, async function (err3, result3) {
                              if (err3) {
                                console.log(err3);
                                resolve({
                                  status: 0,
                                  message: "Something went Wrong",
                                });
                              } else {
                                if (result3 == undefined) {
                                  resolve({
                                    status: 0,
                                    result: [],
                                  });
                                } else {
                                  if (result3.affectedRows > 0) {
                                    resolve({
                                      status: 1,
                                      result: result3,
                                    });
                                  }
                                }
                              }
                              // });
                            });
                          }
                        } else {
                          resolve({
                            status: 0,
                            message: "Something went Wrong...",
                          });
                        }
                      }
                    });
                    // });
                  }
                }
              } else {
                resolve({
                  status: 0,
                  message: "Something went to wrong",
                });
              }
            }
          });
        } else {
          sql = `INSERT INTO translation (c_id,a_prefix,a_name,a_code,a_country,a_type,a_certificate,a_supporting_doc,a_extra_doc,created_id,pg_no,tracking_id,process_limit_date,process_limit_mail_date,no_of_certificates) VALUES (${data1.c_id
            },'${data.a_prefix}','${mysql_real_escape_string(data.a_name)}',${data.a_code
            },${data.a_country},${data.a_type},
                    '${data.a_certificate.sort().toString()}',
                    '${typeof data.a_supporting_doc == "undefined"
              ? ""
              : data.a_supporting_doc.toString()
            }',
                    '${typeof data.a_extra_doc == "undefined"
              ? ""
              : data.a_extra_doc.toString()
            }',${data1.created_id},${data.pg_no
            },'${mysql_real_escape_string(data1.tracking_id)}','${data.process_limit_date
            }','${data.process_limit_date}',${data.no_of_certificates})`;
          con.query(sql, async function (err, result) {
            if (err) {
              console.log(err);
              resolve({ status: 0, message: "Something went to wrong" });
            } else {
              if (result.affectedRows > 0) {
                if (data.no_of_certificates > 0) {
                  for (
                    let index = 0;
                    index < data.a_certificate.length;
                    index++
                  ) {
                    console.log(
                      index,
                      data.a_certificate[index],
                      "13423434335454335"
                    );
                    // data.a_certificate.map(async (k) => {
                    sql1 = `SELECT detail_id FROM details WHERE d_c_id=${data.a_certificate[index]} AND service_id=${result.insertId} AND service_type = 20`;
                    con.query(sql1, async function (err111, result111) {
                      if (err111) {
                        console.log(err111);
                        resolve({
                          status: 0,
                          message: "Something went to wrong",
                        });
                      } else {
                        sql2 = `SELECT s_amount FROM serviceprice WHERE service = 20  AND country = ${data.a_country} AND s_type = ${data.a_type} and deleted = 0;`;

                        let response2 = await new Promise((resolve, reject) => {
                          con.query(sql2, async function (err2, result2) {
                            if (err2) {
                              console.log(err2);
                              resolve({
                                status: 0,
                                message: "Something went wrong",
                              });
                            } else {
                              if (result2.length > 0) {
                                result2.forEach(async function (result) {
                                  resolve({
                                    result: result.s_amount,
                                  });
                                });
                              } else {
                                resolve({
                                  result: parseInt(0),
                                });
                              }
                            }
                          });
                        });

                        let sqll = `SELECT document_type FROM attributes Where attribute_id=${data.a_certificate[index]}`;

                        let resp = await new Promise((resolve, reject) => {
                          con.query(sqll, async function (err1, result1) {
                            if (err1) {
                              console.log(err1);
                              resolve({
                                status: 0,
                                message: "Something went wrong",
                              });
                            } else {
                              if (result1.length > 0) {
                                resolve({
                                  status: 1,
                                  result: result1[0].document_type,
                                });
                              } else {
                                resolve({ status: 0, result: [] });
                              }
                            }
                          });
                        });
                        sql3 = `SELECT amount as embassy_fees FROM embassyfees WHERE service_type = 20  AND country = ${data.a_country} AND document = ${resp.result} AND deleted = 0;`;
                        let response3 = await new Promise((resolve, reject) => {
                          con.query(sql3, async function (err2, result2) {
                            if (err2) {
                              console.log(err2);
                              resolve({
                                status: 0,
                                message: "Something went wrong",
                              });
                            } else {
                              if (result2.length > 0) {
                                result2.forEach(async function (result) {
                                  resolve({
                                    embassy_fees: result.embassy_fees,
                                  });
                                });
                              } else {
                                resolve({
                                  embassy_fees: parseInt(0),
                                });
                              }
                            }
                          });
                        });

                        if (result111.length > 0 || result111.length == 0) {
                          if (
                            result111.length > 0 &&
                            index < result111.length
                          ) {
                            sum = sum + parseInt(response2.result);
                            // embassy = embassy + parseInt(response2.embassy_fees);
                            sum1.push(parseInt(response2.result));

                            result111.forEach(async function (result1) {
                              sql3 = `UPDATE details SET amount = ${response2.result} WHERE deleted = 0 AND detail_id = ${result1.detail_id} AND service_type = 20`;

                              con.query(sql3, async function (err3, result3) {
                                if (err3) {
                                  console.log(err3);
                                  resolve({
                                    status: 0,
                                    message: "Something went Wrong",
                                  });
                                } else {
                                  if (result3.affectedRows > 0) {
                                    resolve({
                                      status: 1,
                                    });
                                  } else {
                                    resolve({
                                      status: 0,
                                      message: "Something went to wrong",
                                    });
                                  }
                                }
                              });
                            });
                          } else {
                            sum = sum + parseInt(response2.result);
                            embassy =
                              parseInt(embassy) +
                              parseInt(response3.embassy_fees);
                            sum1.push(parseInt(response2.result));
                            sqlll = `INSERT INTO details (service_type,service_id,d_c_id,amount,tracking_id,status_change_date) VALUES ('${data1.c_s_type}' , ${result.insertId} ,${data.a_certificate[index]},${response2.result},'${data1.tracking_id}','${status_change_date}')`;

                            con.query(sqlll, async function (err3, result3) {
                              if (err3) {
                                console.log(err3);
                                resolve({
                                  status: 0,
                                  message: "Something went Wrong",
                                });
                              } else {
                                if (result3.affectedRows > 0) {
                                  resolve({
                                    status: 1,
                                    result: result3,
                                  });
                                } else {
                                  resolve({
                                    status: 0,
                                    message: "Something went to wrong",
                                  });
                                }
                              }
                            });
                          }
                        } else {
                          resolve({
                            status: 0,
                            message: "Something went Wrong...",
                          });
                        }
                      }
                    });
                  }
                } else {
                  for (
                    let index = 0;
                    index < data.a_certificate.length;
                    index++
                  ) {
                    // data.a_certificate.map(async (k) => {
                    sql1 = `SELECT detail_id FROM details WHERE d_c_id=${data.a_certificate[index]} AND service_id=${result.insertId} AND service_type = 20`;
                    con.query(sql1, async function (err111, result111) {
                      if (err111) {
                        console.log(err111);
                        resolve({
                          status: 0,
                          message: "Something went to wrong",
                        });
                      } else {
                        sql2 = `SELECT s_amount FROM serviceprice WHERE service = 20  AND country = ${data.a_country} AND s_type = ${data.a_type} and deleted = 0;`;

                        let response2 = await new Promise((resolve, reject) => {
                          con.query(sql2, async function (err2, result2) {
                            if (err2) {
                              console.log(err2);
                              resolve({
                                status: 0,
                                message: "Something went wrong",
                              });
                            } else {
                              if (result2.length > 0) {
                                result2.forEach(async function (result) {
                                  resolve({
                                    result: result.s_amount,
                                  });
                                });
                              } else {
                                resolve({
                                  result: parseInt(0),
                                });
                              }
                            }
                          });
                        });

                        let sqll = `SELECT document_type FROM attributes Where attribute_id=${data.a_certificate[index]}`;

                        let resp = await new Promise((resolve, reject) => {
                          con.query(sqll, async function (err1, result1) {
                            if (err1) {
                              console.log(err1);
                              resolve({
                                status: 0,
                                message: "Something went wrong",
                              });
                            } else {
                              if (result1.length > 0) {
                                resolve({
                                  status: 1,
                                  result: result1[0].document_type,
                                });
                              } else {
                                resolve({ status: 0, result: [] });
                              }
                            }
                          });
                        });
                        sql3 = `SELECT amount as embassy_fees FROM embassyfees WHERE service_type = 20  AND country = ${data.a_country} AND document = ${resp.result} AND deleted = 0;`;
                        let response3 = await new Promise((resolve, reject) => {
                          con.query(sql3, async function (err2, result2) {
                            if (err2) {
                              console.log(err2);
                              resolve({
                                status: 0,
                                message: "Something went wrong",
                              });
                            } else {
                              if (result2.length > 0) {
                                result2.forEach(async function (result) {
                                  resolve({
                                    embassy_fees: result.embassy_fees,
                                  });
                                });
                              } else {
                                resolve({
                                  embassy_fees: parseInt(0),
                                });
                              }
                            }
                          });
                        });

                        if (result111.length > 0 || result111.length == 0) {
                          if (result111.length > 0) {
                            sum = sum + parseInt(response2.result);
                            // embassy = embassy + parseInt(response2.embassy_fees);
                            sum1.push(parseInt(response2.result));

                            result111.forEach(async function (result1) {
                              sql3 = `UPDATE details SET amount = ${response2.result} WHERE deleted = 0 AND detail_id = ${result1.detail_id} AND service_type = 20`;

                              con.query(sql3, async function (err3, result3) {
                                if (err3) {
                                  console.log(err3);
                                  resolve({
                                    status: 0,
                                    message: "Something went Wrong",
                                  });
                                } else {
                                  if (result3.affectedRows > 0) {
                                    resolve({
                                      status: 1,
                                    });
                                  } else {
                                    resolve({
                                      status: 0,
                                      message: "Something went to wrong",
                                    });
                                  }
                                }
                              });
                            });
                          } else {
                            sum = sum + parseInt(response2.result);
                            embassy =
                              parseInt(embassy) +
                              parseInt(response3.embassy_fees);
                            sum1.push(parseInt(response2.result));
                            sqlll = `INSERT INTO details (service_type,service_id,d_c_id,amount,tracking_id,status_change_date) VALUES ('${data1.c_s_type}' , ${result.insertId} ,${data.a_certificate[index]},${response2.result},'${data1.tracking_id}','${status_change_date}')`;

                            con.query(sqlll, async function (err3, result3) {
                              if (err3) {
                                console.log(err3);
                                resolve({
                                  status: 0,
                                  message: "Something went Wrong",
                                });
                              } else {
                                if (result3.affectedRows > 0) {
                                  resolve({
                                    status: 1,
                                    result: result3,
                                  });
                                } else {
                                  resolve({
                                    status: 0,
                                    message: "Something went to wrong",
                                  });
                                }
                              }
                            });
                          }
                        } else {
                          resolve({
                            status: 0,
                            message: "Something went Wrong...",
                          });
                        }
                      }
                    });
                  }
                }
              } else {
                resolve({
                  status: 0,
                  message: "Something went to wrong",
                });
              }
            }
          });
        }
      });
    });

    let response4 = new Promise((resolve, reject) => {
      let c_gst = 0;
      let s_gst = 0;
      let i_gst = 0;
      let netamt = 0;

      let s1 =
        sum +
        parseInt(response3.result.courier) +
        parseInt(response3.result.exp_charge) -
        parseInt(response3.result.dis_amt) -
        parseInt(response3.result.coupon_amt);

      if (response3.result.c_tax == 1) {
        if (response3.result.c_gst == 1) {
          if (data1.branch_state_id == response3.result.c_state) {
            c_gst = (s1 * data1.s_c_gst) / 100;
            s_gst = (s1 * data1.s_s_gst) / 100;
            netamt = s1 + c_gst + s_gst + parseInt(embassy);
          } else {
            i_gst = (s1 * data1.s_i_gst) / 100;
            netamt = s1 + i_gst + parseInt(embassy);
          }
        } else {
          netamt = s1 + parseInt(embassy);
        }
      } else {
        netamt = s1 + parseInt(embassy);
      }
      //1003
      sql5 = `INSERT INTO payment(payment_date,c_id,total_amount,courier,embassy_fees,dis_amt,net_amt,sgst,cgst,igst,created_id,paid_amt ,due_amt,u_id,is_tds,tds_amt,tracking_id,exp_charge,coupon_amt,c_tax,created_branch_id,p_receipt_no,invoice_no,is_draft_taken,payment_refund) VALUES ('${response3.result.payment_date
        }',${response3.result.c_id},'${sum}',
                  '${response3.result.courier}','${embassy}','${response3.result.dis_amt
        }','${netamt}','${s_gst}','${c_gst}','${i_gst}',${response3.result.created_id
        },'${response3.result.paid_amt}','${netamt - response3.result.paid_amt - response3.result.tds_amt
        }',${response3.result.u_id},${response3.result.is_tds} , '${response3.result.tds_amt
        }','${mysql_real_escape_string(response3.result.tracking_id)}','${response3.result.exp_charge
        }','${response3.result.coupon_amt}','${response3.result.c_tax}',${response3.result.created_branch_id
        },'${payment.result.p_receipt_no}','${response3.result.invoice_no}',${response3.result.is_draft_taken
        },'${response3.result.payment_refund}')`;
      con.query(sql5, async function (err5, result5) {
        if (err5) {
          console.log(err5);
          resolve({ status: 0, message: "Something went wrong" });
        } else {
          if (result5.affectedRows > 0) {
            resolve({
              status: 1,
              igst: i_gst,
              sgst: s_gst,
              cgst: c_gst,
              net_before: s1,
              serviceprice: response3.result,
              total_amt: sum,
              net_amt: netamt,
              amount: sum1,
              embassy_fees: embassy,
              message: "Translation Updated Successfully....",
            });
          } else {
            resolve({
              status: 0,
              result: 0,
              message: "Something went wrong..",
            });
          }
        }
      });
    });
    return response4;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function searchTranslationCustomer(data) {
  try {
    let record = [];
    getuserquery = `select * from users where u_id=${data.u_id} and deleted=0`;
    let response = await new Promise((resolve, reject) => {
      con.query(getuserquery, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            if (result[0].user_type == 1) {
              getallchilduser = `select * from users where (p_u_id=${data.u_id} or branch_id=${result[0].branch_id}) and deleted=0`;
              con.query(getallchilduser, function (err, res) {
                if (err) {
                  console.log(err);
                  resolve({ status: 0, message: "Something went to wrong" });
                } else {
                  res.forEach(function (r) {
                    record.push(r.u_id);
                  });
                  resolve({
                    record: record,
                    type: result[0].user_type,
                    s_u_permission: result[0].s_u_permission,
                  });
                }
              });
            } else {
              resolve({
                type: result[0].user_type,
                s_u_permission: result[0].s_u_permission,
              });
            }
          }
        }
      });
    });
    let sql = "";
    let searchTranslationPaginationQuery = "";
    if (
      response.type == 1 ||
      (response.type == 3 && response.s_u_permission == 1)
    ) {
      sql = `SELECT *,(SELECT SUM(receive_amt) FROM draft_payment  WHERE draft_payment.c_id = customer.c_id and draft_payment.deleted=0 and draft_payment.receive_amt!=0  and draft_payment.approved_status =0 and draft_payment.deleted = 0 ) as total_draft,details.under_process_date AS process_date,(SELECT name FROM attributes WHERE attributes.attribute_id  =translation.a_type)as translation_type,(SELECT c_date FROM customer WHERE customer.c_id =translation.c_id)as r_date,(SELECT name FROM attributes WHERE attributes.attribute_id =translation.a_country)as translation_country,(SELECT name FROM attributes WHERE attributes.attribute_id =details.d_c_id)as translation_certificate,(SELECT c_prefix FROM customer WHERE customer.c_id=translation.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=translation.c_id) AS customer_name,(SELECT c_s_type FROM customer WHERE customer.c_id=translation.c_id) AS c_s_type,
      (SELECT c_id FROM customer WHERE customer.c_id=translation.c_id) as my_C_id,
      (SELECT u_id FROM customer WHERE customer.c_id=translation.c_id) AS cuid,(SELECT user_type FROM users where users.u_id  = (SELECT u_id FROM customer WHERE customer.c_id=translation.c_id)) as cutype,
      (SELECT payment.due_amt FROM payment where payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=translation.c_id) ORDER BY payment.payment_id DESC LIMIT 1) as my_Due_Amt, (SELECT payment.paid_amt FROM payment where payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=translation.c_id) ORDER BY payment.payment_id DESC LIMIT 1) as my_paid_amt,
      (SELECT payment.net_amt FROM payment where payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=translation.c_id) ORDER BY payment.payment_id DESC LIMIT 1) as my_net_amt,
      (SELECT payment.tds_amt FROM payment where payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=translation.c_id) ORDER BY payment.payment_id DESC LIMIT 1) as my_tds_amt,
      (SELECT draft_payment.d_p_id FROM draft_payment where draft_payment.deleted=0 and draft_payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=translation.c_id) and draft_payment.approved_status=0 and draft_payment.due_amt=0 ORDER BY draft_payment.d_p_id DESC LIMIT 1) as Draf_payment FROM details,translation,customer WHERE customer.c_id=translation.c_id AND details.service_id=translation.a_id and (customer.branch_id =${data.branch_id} OR customer.foreign_branch = ${data.branch_id}) AND details.service_type=20 AND details.deleted = 0  AND translation.deleted = 0  AND customer.deleted = 0 AND customer.is_cancel = 0`;

      searchTranslationPaginationQuery = `SELECT COUNT(details.detail_id) as trows FROM details,translation,customer WHERE customer.c_id=translation.c_id AND details.service_id=translation.a_id and (customer.branch_id =${data.branch_id} OR customer.foreign_branch = ${data.branch_id}) AND details.service_type=20 AND details.deleted = 0  AND translation.deleted = 0  AND customer.deleted = 0 AND customer.is_cancel = 0`;
    } else {
      if (data.u_id != 1) {
        sql = `SELECT *,(SELECT SUM(receive_amt) FROM draft_payment  WHERE draft_payment.c_id = customer.c_id and draft_payment.deleted=0 and draft_payment.receive_amt!=0  and draft_payment.approved_status =0 and draft_payment.deleted = 0 ) as total_draft,details.under_process_date AS process_date,(SELECT name FROM attributes WHERE attributes.attribute_id  =translation.a_type)as translation_type,(SELECT c_date FROM customer WHERE customer.c_id =translation.c_id)as r_date,(SELECT name FROM attributes WHERE attributes.attribute_id =translation.a_country)as translation_country,(SELECT name FROM attributes WHERE attributes.attribute_id =details.d_c_id)as translation_certificate,(SELECT c_prefix FROM customer WHERE customer.c_id=translation.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=translation.c_id) AS customer_name,(SELECT c_s_type FROM customer WHERE customer.c_id=translation.c_id) AS c_s_type,
        (SELECT c_id FROM customer WHERE customer.c_id=translation.c_id) as my_C_id,
        (SELECT branch_id FROM customer WHERE customer.c_id=translation.c_id) AS branch_id,(SELECT u_id FROM customer WHERE customer.c_id=translation.c_id) AS cuid,(SELECT user_type FROM users where users.u_id  = (SELECT u_id FROM customer WHERE customer.c_id=translation.c_id)) as cutype,
        (SELECT payment.due_amt FROM payment where payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=translation.c_id) ORDER BY payment.payment_id DESC LIMIT 1) as my_Due_Amt, (SELECT payment.paid_amt FROM payment where payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=translation.c_id) ORDER BY payment.payment_id DESC LIMIT 1) as my_paid_amt,
        (SELECT payment.net_amt FROM payment where payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=translation.c_id) ORDER BY payment.payment_id DESC LIMIT 1) as my_net_amt,
        (SELECT payment.tds_amt FROM payment where payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=translation.c_id) ORDER BY payment.payment_id DESC LIMIT 1) as my_tds_amt,
        (SELECT draft_payment.d_p_id FROM draft_payment where draft_payment.deleted=0 and draft_payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=translation.c_id) and draft_payment.approved_status=0 and draft_payment.due_amt=0 ORDER BY draft_payment.d_p_id DESC LIMIT 1) as Draf_payment FROM details,translation,customer  WHERE customer.c_id=translation.c_id and details.service_id=translation.a_id AND (customer.u_id=${data.u_id} or customer.foreign_branchuser=${data.u_id} OR customer.created_id = ${data.u_id}) AND details.service_type=20 AND details.deleted = 0  AND translation.deleted = 0  AND customer.deleted = 0 AND customer.is_cancel = 0`;

        searchTranslationPaginationQuery = `SELECT COUNT(details.detail_id) as trows FROM details,translation,customer  WHERE customer.c_id=translation.c_id and details.service_id=translation.a_id AND (customer.u_id=${data.u_id} or customer.foreign_branchuser=${data.u_id} OR customer.created_id = ${data.u_id}) AND details.service_type=20 AND details.deleted = 0  AND translation.deleted = 0  AND customer.deleted = 0 AND customer.is_cancel = 0`;
      } else {
        sql = `SELECT *,(SELECT SUM(receive_amt) FROM draft_payment  WHERE draft_payment.c_id = customer.c_id and draft_payment.deleted=0 and draft_payment.receive_amt!=0  and draft_payment.approved_status =0 and draft_payment.deleted = 0 ) as total_draft,details.under_process_date AS process_date,(SELECT name FROM attributes WHERE attributes.attribute_id  =translation.a_type)as translation_type,(SELECT c_date FROM customer WHERE customer.c_id =translation.c_id)as r_date,(SELECT name FROM attributes WHERE attributes.attribute_id =translation.a_country)as translation_country,(SELECT name FROM attributes WHERE attributes.attribute_id =details.d_c_id)as translation_certificate,(SELECT c_prefix FROM customer WHERE customer.c_id=translation.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=translation.c_id) AS customer_name,(SELECT c_s_type FROM customer WHERE customer.c_id=translation.c_id) AS c_s_type,
        (SELECT c_id FROM customer WHERE customer.c_id=translation.c_id) as my_C_id,
        (SELECT branch_id FROM customer WHERE customer.c_id=translation.c_id) AS branch_id,(SELECT u_id FROM customer WHERE customer.c_id=translation.c_id) AS cuid,(SELECT user_type FROM users where users.u_id  = (SELECT u_id FROM customer WHERE customer.c_id=translation.c_id)) as cutype,
        (SELECT payment.due_amt FROM payment where payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=translation.c_id) ORDER BY payment.payment_id DESC LIMIT 1) as my_Due_Amt, (SELECT payment.paid_amt FROM payment where payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=translation.c_id) ORDER BY payment.payment_id DESC LIMIT 1) as my_paid_amt,
        (SELECT payment.net_amt FROM payment where payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=translation.c_id) ORDER BY payment.payment_id DESC LIMIT 1) as my_net_amt,
        (SELECT payment.tds_amt FROM payment where payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=translation.c_id) ORDER BY payment.payment_id DESC LIMIT 1) as my_tds_amt,
        (SELECT draft_payment.d_p_id FROM draft_payment where draft_payment.deleted=0 and draft_payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=translation.c_id) and draft_payment.approved_status=0 and draft_payment.due_amt=0 ORDER BY draft_payment.d_p_id DESC LIMIT 1) as Draf_payment FROM details,translation,customer  WHERE customer.c_id=translation.c_id and details.service_id=translation.a_id  AND details.service_type=20  AND details.deleted = 0  AND translation.deleted = 0  AND customer.deleted = 0 AND customer.is_cancel = 0`;
        searchTranslationPaginationQuery = `SELECT COUNT(details.detail_id) as trows FROM details,translation,customer  WHERE customer.c_id=translation.c_id and details.service_id=translation.a_id  AND details.service_type=20  AND details.deleted = 0  AND translation.deleted = 0  AND customer.deleted = 0 AND customer.is_cancel = 0`;
      }
    }

    // sql = `SELECT *,(SELECT COUNT(*) FROM translation) as trows,(SELECT c_name FROM customer WHERE customer.c_id =translation.c_id)as customer_name,(SELECT c_date FROM customer WHERE customer.c_id =translation.c_id)as r_date,(SELECT name FROM attributes WHERE attributes.attribute_id =translation.a_type)as translation_type,(SELECT name FROM attributes WHERE attributes.attribute_id =translation.a_country)as country_name,(SELECT GROUP_CONCAT(attributes.name) as name FROM attributes where FIND_IN_SET (attributes.attribute_id , translation.a_certificate)) as certificate FROM translation,customer WHERE customer.c_id=translation.c_id and translation.deleted=0`;
    if (typeof data.c_name != "undefined" && data.c_name != "") {
      sql += ` and customer.c_name like '%${data.c_name}%'`;
      searchTranslationPaginationQuery += ` and customer.c_name like '%${data.c_name}%'`;
    }
    if (typeof data.c_mo_no != "undefined" && data.c_mo_no != "") {
      sql += ` and customer.c_mo_no like '%${data.c_mo_no}%'`;
      searchTranslationPaginationQuery += ` and customer.c_mo_no like '%${data.c_mo_no}%'`;
    }
    if (
      typeof data.status_id != "undefined" &&
      data.status_id != "" &&
      data.status_id != 0
    ) {
      sql += ` and details.status_id=${data.status_id}`;
      searchTranslationPaginationQuery += ` and details.status_id=${data.status_id}`;
    }

    if (
      typeof data.s_date != "undefined" &&
      data.s_date != "" &&
      typeof data.e_date != "undefined" &&
      data.e_date != ""
    ) {
      sql += ` and (STR_TO_DATE(customer.c_date,'%d-%m-%Y')>='${data.s_date}' AND STR_TO_DATE(customer.c_date,'%d-%m-%Y')<='${data.e_date}')`;
      searchTranslationPaginationQuery += ` and (STR_TO_DATE(customer.c_date,'%d-%m-%Y')>='${data.s_date}' AND STR_TO_DATE(customer.c_date,'%d-%m-%Y')<='${data.e_date}')`;
    }

    if (
      typeof data.a_country != "undefined" &&
      data.a_country != "" &&
      data.a_country != 0
    ) {
      sql += ` and translation.a_country=${data.a_country}`;
      searchTranslationPaginationQuery += ` and translation.a_country=${data.a_country}`;
    }
    if (
      data.tracking_id != "undefined" &&
      data.tracking_id != "" &&
      data.tracking_id.length != 2
    ) {
      sql += ` and details.tracking_id like '%${data.tracking_id}%'`;
      searchTranslationPaginationQuery += ` and details.tracking_id like '%${data.tracking_id}%'`;
    }
    if (typeof data.c_email != "undefined" && data.c_email != "") {
      sql += ` and customer.c_email like '%${data.c_email}%'`;
      searchTranslationPaginationQuery += ` and customer.c_email like '%${data.c_email}%'`;
    }

    sql += ` ORDER BY detail_id DESC limit ${(data.page - 1) * data.perpage},${data.perpage
      }`;
    let resp = await new Promise((resolve, reject) => {
      con.query(searchTranslationPaginationQuery, function (err1, lres1) {
        if (err1) {
          console.log(err1);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (lres1.length > 0) {
            resolve({
              status: 1,
              t_rows: lres1[0].trows,
            });
          } else {
            resolve({
              status: 0,
              data: [],
            });
          }
        }
      });
    });
    let response1 = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              data: result,
              t_rows: resp.t_rows,
            });
          } else {
            resolve({
              status: 0,
              data: [],
            });
          }
        }
      });
    });
    return response1;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function deleteTranslationCustomer(data, date) {
  try {
    //details deleted 1
    let sql = `UPDATE details SET deleted=1 WHERE detail_id =${data.id}`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.affectedRows > 0) {
            //get translation id of deleted record
            sql1 = `SELECT service_id,d_c_id FROM details WHERE detail_id =${data.id}`;

            con.query(sql1, function (err1, result1) {
              if (err1) {
                console.log(err1);
                resolve({ status: 0, message: "Something went to wrong" });
              } else {
                if (result1.length > 0) {
                  resolve({
                    status: 1,
                    result: result1[0],
                  });
                }
              }
            });
          }
        }
      });
    });

    //get ceritificate of customer
    let sql2 = `SELECT a_certificate FROM translation WHERE a_id=${response.result.service_id}`;
    let response2 = await new Promise((resolve, reject) => {
      con.query(sql2, function (err2, result2) {
        if (err2) {
          console.log(err2);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result2.length > 0) {
            resolve({
              result: result2[0].a_certificate,
            });
          }
        }
      });
    });

    //certificate covert string to array and only not deleted ceritificate push in array
    let crecord = [];
    response2.result.split(",").map(async (k) => {
      if (response.result.d_c_id != parseInt(k)) {
        crecord.push(parseInt(k));
      }
    });

    //update new certificate record in translation table
    let sql3 = `UPDATE translation SET a_certificate='${crecord.toString()}'  WHERE a_id=${response.result.service_id
      } `;
    let response3 = await new Promise((resolve, reject) => {
      con.query(sql3, function (err3, result3) {
        if (err3) {
          console.log(err3);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result3.affectedRows > 0) {
            //get translation customer record which is updated
            sql4 = `SELECT * FROM translation WHERE a_id=${response.result.service_id}`;
            con.query(sql4, function (err4, result4) {
              if (err4) {
                console.log(err4);
                resolve({ status: 0, message: "Something went to wrong" });
              } else {
                if (result4.length > 0) {
                  resolve({
                    result: result4,
                  });
                }
              }
            });
          }
        }
      });
    });
    let sqll = `SELECT document_type FROM attributes Where attribute_id=${response.result.d_c_id}`;
    let resp = await new Promise((resolve, reject) => {
      con.query(sqll, async function (err1, result1) {
        if (err1) {
          console.log(err1);
          resolve({ status: 0, message: "Something went wrong" });
        } else {
          if (result1.length > 0) {
            resolve({ status: 1, result: result1[0].document_type });
          } else {
            resolve({ status: 0, result: [] });
          }
        }
      });
    });

    let sqlll = `SELECT amount as embassy_fees FROM embassyfees WHERE service_type = 20  AND country = ${response3.result[0].a_country} AND document = ${resp.result} AND deleted = 0;`;
    let resp1 = await new Promise(async (resolve, reject) => {
      con.query(sqlll, async function (err2, result2) {
        if (err2) {
          console.log(err2);
          resolve({ status: 0, message: "Something went wrong" });
        } else {
          if (result2.length > 0) {
            result2.forEach(async function (result) {
              resolve({
                embassy_fees: result.embassy_fees,
              });
            });
          } else {
            resolve({
              embassy_fees: parseInt(0),
            });
          }
        }
      });
    });

    //if all certificate was deleted then update translation customer  deleted 1
    if (response3.result[0].a_certificate == []) {
      sql20 = `UPDATE translation SET deleted=1 WHERE a_id=${response.result.service_id}`;
      let res20 = await new Promise((resolve, reject) => {
        con.query(sql20, function (err20, result20) {
          if (err20) {
            console.log(err20);
            resolve({ status: 0, message: "Something went to wrong" });
          } else {
            if (result20.affectedRows > 0) {
              resolve({ status: 1 });
            }
          }
        });
      });
    }

    //get last record of payment
    sql6 = `SELECT * FROM payment WHERE c_id=${response3.result[0].c_id} ORDER BY payment_id DESC LIMIT 1`;
    let response6 = await new Promise((resolve, reject) => {
      con.query(sql6, function (err6, result6) {
        if (err6) {
          console.log(err6);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result6.length > 0) {
            resolve({ status: 1, result: result6 });
          }
        }
      });
    });

    //get amount of 1 certificate and calculate new total amount as well as net amount
    let sql8 = `SELECT s_amount FROM serviceprice WHERE service = 20  AND country = ${response3.result[0].a_country} AND s_type = ${response3.result[0].a_type} and deleted = 0;`;
    let response5 = await new Promise((resolve, reject) => {
      con.query(sql8, function (err8, result8) {
        if (err8) {
          console.log(err8);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          let samount;
          if (result8.length <= 0) {
            samount = 0;
          } else {
            samount = result8[0].s_amount;
          }
          //last total amount of payment - 1 certificate amount
          let embassy =
            response6.result[0].embassy_fees > parseInt(resp1.embassy_fees)
              ? response6.result[0].embassy_fees - parseInt(resp1.embassy_fees)
              : response6.result[0].embassy_fees;

          let total_amt = response6.result[0].total_amount - samount;

          let c_gst = 0;
          let s_gst = 0;
          let i_gst = 0;
          let netamt = 0;

          //if total amount 0 then automatically netamount is 0
          if (total_amt != 0) {
            let s1 =
              total_amt +
              parseInt(response6.result[0].courier) +
              parseInt(response6.result[0].exp_charge) -
              parseInt(response6.result[0].dis_amt) -
              parseInt(response6.result[0].coupon_amt);

            if (response6.result[0].c_tax == 1) {
              if (response6.result[0].c_gst == 1) {
                if (data.branch_state_id == response6.result[0].c_state) {
                  c_gst = (s1 * data.s_c_gst) / 200;
                  s_gst = (s1 * data.s_s_gst) / 200;
                  netamt = s1 + c_gst + s_gst + parseInt(embassy);
                } else {
                  i_gst = (s1 * data.s_i_gst) / 200;
                  netamt = s1 + i_gst + parseInt(embassy);
                }
              } else {
                netamt = s1 + parseInt(embassy);
              }
            } else {
              netamt = s1 + parseInt(embassy);
            }
          } else {
            embassy = 0;
          }

          if (result8.length > 0) {
            //insert update payment record which is generated after delete 1  certificate
            sql9 = `INSERT INTO payment (payment_date,c_id,total_amount,courier,dis_amt,mode_id,chk_dd_no,chk_dd_date,bank_name,net_amt,paid_amt,embassy_fees,due_amt,u_id,service_tax,igst,cgst,sgst,exp_charge,coupon_amt,c_tax,is_draft_taken,is_tds,tds_amt,p_receipt_no,invoice_no,payment_refund ) VALUES ('${date}',${response6.result[0].c_id
              },'${total_amt}','${response6.result[0].courier}','${response6.result[0].dis_amt
              }',${response6.result[0].mode_id},'${response6.result[0].chk_dd_no != null
                ? response6.result[0].chk_dd_no
                : ""
              }','${response6.result[0].chk_dd_date != null
                ? response6.result[0].chk_dd_date
                : ""
              }','${response6.result[0].bank_name != null
                ? response6.result[0].bank_name
                : ""
              }','${netamt}','${response6.result[0].paid_amt}','${embassy}','${parseInt(netamt) -
              parseInt(response6.result[0].paid_amt) -
              parseInt(response6.result[0].tds_amt)
              }',${response6.result[0].u_id},'${response6.result[0].service_tax
              }','${i_gst}','${c_gst}','${s_gst}','${response6.result[0].exp_charge
              }',
             '${response6.result[0].coupon_amt}','${response6.result[0].c_tax
              }',${response6.result[0].is_draft_taken},${response6.result[0].is_tds
              },'${response6.result[0].tds_amt}','${response6.result[0].p_receipt_no
              }','${response6.result[0].invoice_no}','${response6.result[0].payment_refund
              }' )`;

            con.query(sql9, function (err9, result9) {
              if (err9) {
                console.log(err9);
                resolve({ status: 0, message: "Something went to wrong" });
              } else {
                if (result9.affectedRows > 0) {
                  resolve({ status: 1, message: "Delete Successfully...." });
                }
              }
            });
          } else {
            resolve({ status: 1, message: "Delete Successfully...." });
          }
        }
      });
    });
    return response5;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function gettranslationcustomerbyid(data) {
  try {
    sql = `SELECT translation.c_id
  FROM details
  INNER JOIN translation ON translation.a_id=details.service_id WHERE details.detail_id = ${data.detail_id}`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            result.forEach(function (res) {
              resolve({
                status: 1,
                result: res.c_id,
              });
            });
          }
        }
      });
    });
    sql1 = ` SELECT * FROM translation  WHERE deleted = 0 AND c_id = ${response.result}`;
    let response1 = await new Promise((resolve, reject) => {
      con.query(sql1, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              result: result,
            });
          }
        }
      });
    });
    return response1;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function updateTranslationStatus(data, date) {
  try {
    if (data.a_status == 24) {
      sql = `UPDATE translation SET a_status=${data.a_status},dispatch_date='${date}' WHERE a_id =${data.a_id}`;
    } else if (data.a_status == 21) {
      sql = `UPDATE translation SET a_status=${data.a_status},process_date='${date}' WHERE a_id =${data.a_id}`;
    } else {
      sql = `UPDATE translation SET a_status=${data.a_status
        },dispatch_date=${null} WHERE a_id =${data.a_id}`;
    }
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.affectedRows > 0) {
            resolve({
              status: 1,
              message: "translation Status update successfully",
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function translationpdf(data) {
  try {
    let response = await new Promise(async (resolve, reject) => {
      let newobj = {
        c_date: data.c_date,
        branch_name: data.branch_name,
        branch_id: data.branch_id,
        u_id: data.u_id,
        a_code: data.a_code,
        created_id: data.created_id,
      };

      let translation_data = await translationcoverletter(newobj);
      // 08-04
      let imageAsBase64;
      if (
        fs.existsSync(
          `./public/Assets/images/${
          // translation_data.user_data.u_id == 1 ? "adminlogo" :
          "branchlogo"
          }/${translation_data.settingdata.logo}`
        )
      ) {
        imageAsBase64 = fs.readFileSync(
          `./public/Assets/images/${
          // translation_data.user_data.u_id == 1 ? "adminlogo" :
          "branchlogo"
          }/${translation_data.settingdata.logo}`,
          { encoding: "base64" }
        );
      }

      pdf
        .create(pdfTemplate7(translation_data, imageAsBase64, data), {
          childProcessOptions: {
            env: {
              OPENSSL_CONF: "/dev/null",
            },
          },
        })
        .toFile(
          `${__dirname}/public/Assets/translation_pdf/translation_${data.i_no}.pdf`,
          (err) => {
            if (err) {
              return console.log("error");
            }
            resolve({
              ino: data.i_no,
              message: "done",
            });
          }
        );
    });

    if (data.status_id == 1) {
      let response1 = await new Promise(async (resolve, reject) => {
        const resp = await sendtranslationmail(data);
        resolve({
          result: resp,
          ino: response.ino,
          message: "Mail send sucessfully...",
        });
      });
      return response1;
    } else {
      return response;
    }
  } catch (err) {
    return { status: 0, message: "Invalid Call Try Again1" };
  }
}

//0603
async function translationcoverletter(data) {
  try {
    // if (data.u_id == 1) {
    //   sql = `select * from gsetting`;
    // } else {
    sql = `SELECT *,branch.b_hsn_code as hsn_code,b_bank_details as bank_details,company_name as c_name,branch.b_gstno as c_gstno FROM users,branch WHERE users.branch_id=branch.branch_id AND u_id=${data.u_id} AND users.deleted=0 AND branch.deleted=0`;
    // }
    let responsee = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            con.query(sql, function (err, res) {
              if (err) {
                console.log(err);
                resolve({ status: 0, message: "Something went to wrong" });
              } else {
                if (res.length > 0) {
                  resolve({
                    settingdata: res[0],
                  });
                }
              }
            });
          }
        }
      });
    });

    sqll = `SELECT * FROM users WHERE u_id = ${data.u_id}`;

    let response = await new Promise((resolve, reject) => {
      con.query(sqll, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            result.forEach(function (result) {
              resolve({
                status: 1,
                user_type: result.user_type,
                user_data: result,
              });
            });
          } else {
            resolve({
              status: 0,
              user_type: "Something went wrong...",
            });
          }
        }
      });
    });
    let translation = [];
    let translation1 = [];
    let translation_list = [];
    let undercorrection_list = [];
    let user = "";
    if (response.user_type == 0) {
      user = ` and (customer.foreign_branch = ${data.branch_name} OR customer.branch_id = ${data.branch_name})`;
    } else if (response.user_type == 1) {
      user = ` and (customer.foreign_branch = ${data.branch_id} OR customer.branch_id = ${data.branch_id})`;
    } else if (
      response.user_data.c_l_permission != 0 &&
      response.user_type == 3
    ) {
      user = ` and (customer.foreign_branch = ${data.branch_id} OR customer.branch_id = ${data.branch_id})`;
    } else {
      user = ` and (customer.u_id=${data.u_id} OR customer.foreign_branchuser=${data.u_id})`;
    }

    sql2 = `SELECT a_id,a_country,customer.c_id,attributes.name AS country_name FROM translation INNER JOIN customer ON customer.c_id = translation.c_id LEFT JOIN attributes ON attributes.attribute_id = translation.a_country INNER JOIN details ON translation.a_id=details.service_id WHERE  translation.deleted = 0 ${user} and translation.a_code=${data.a_code} AND STR_TO_DATE(details.under_correction_date,"%d-%m-%Y")=STR_TO_DATE('${data.c_date}',"%d-%m-%Y") AND details.status_id=273 AND details.service_type=20 GROUP by translation.a_country`;

    let response2 = await new Promise((resolve, reject) => {
      con.query(sql2, function (err, res) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (res.length > 0) {
            for (let i = 0; i < res.length; i += 1) {
              translation1.push({
                translation_country: res[i].a_country,
                country_name: res[i].country_name,
                translation_users: [],
              });
              undercorrection_list.push({
                translation_country: res[i].a_country,
                country_name: res[i].country_name,
                translation_users: [],
              });
            }
            Object.keys(translation1).map((k) => {
              sql = `SELECT d1.reason,translation.a_id,translation.a_prefix,translation.a_name,GROUP_CONCAT(att_tbl.name SEPARATOR ',')  AS a_certificate_name,GROUP_CONCAT(DISTINCT att_tbl1.name SEPARATOR ',')  AS supporting_doc_name,att_tbl2.name AS translation_type  FROM translation LEFT JOIN customer ON customer.c_id = translation.c_id LEFT JOIN details d1 ON d1.service_id = translation.a_id LEFT JOIN attributes att_tbl ON d1.service_type=20 and translation.a_id = d1.service_id and d1.d_c_id = att_tbl.attribute_id  AND STR_TO_DATE(d1.under_correction_date,"%d-%m-%Y")=STR_TO_DATE('${data.c_date}',"%d-%m-%Y") AND d1.status_id = 273 LEFT JOIN attributes att_tbl1 ON FIND_IN_SET (att_tbl1.attribute_id , translation.a_supporting_doc) LEFT JOIN  attributes att_tbl2 ON att_tbl2.attribute_id = translation.a_type WHERE STR_TO_DATE(d1.under_correction_date,"%d-%m-%Y")=STR_TO_DATE('${data.c_date}',"%d-%m-%Y") AND d1.status_id = 273 AND translation.a_code=${data.a_code} AND translation.a_country=${translation1[k].translation_country}  ${user} AND d1.service_type=20 GROUP by translation.a_id`;
              con.query(sql, function (errsql1, sql1res) {
                if (errsql1) {
                  resolve({ status: 0, message: "Something went to wrong" });
                } else {
                  if (sql1res.length > 0) {
                    let att_data = [];
                    Object.keys(sql1res).map((ak) => {
                      att_data.push(sql1res[ak]);
                    });
                    undercorrection_list[k].translation_users = att_data;
                    if (k == translation1.length - 1) {
                      resolve({
                        status: 1,
                        country: undercorrection_list,
                      });
                    }
                  } else {
                    resolve({
                      status: 0,
                      message: "Something went to wrong",
                    });
                  }
                }
              });
            });
          } else {
            resolve({
              status: 0,
              country: [],
            });
          }
        }
      });
    });

    sql1 = `SELECT a_id,a_country,customer.c_id,attributes.name AS country_name FROM translation INNER JOIN customer ON customer.c_id = translation.c_id LEFT JOIN attributes ON attributes.attribute_id = translation.a_country INNER JOIN details ON translation.a_id=details.service_id WHERE  translation.deleted = 0 ${user} and translation.a_code=${data.a_code} AND STR_TO_DATE(details.under_process_date,"%d-%m-%Y")=STR_TO_DATE('${data.c_date}',"%d-%m-%Y") AND details.status_id=21 AND details.service_type=20 GROUP BY translation.a_country`;
    let i_no = Math.floor(Math.random() * 1000);
    let response1 = await new Promise((resolve, reject) => {
      con.query(sql1, function (err, res) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (res.length > 0) {
            for (let i = 0; i < res.length; i += 1) {
              translation.push({
                translation_country: res[i].a_country,
                country_name: res[i].country_name,
                translation_user: [],
              });
              translation_list.push({
                translation_country: res[i].a_country,
                country_name: res[i].country_name,
                translation_user: [],
              });
            }
            Object.keys(translation).map((k) => {
              sql = `SELECT translation.a_id,translation.a_prefix,translation.a_name,GROUP_CONCAT(att_tbl.name SEPARATOR ',')  AS a_certificate_name,GROUP_CONCAT(DISTINCT att_tbl1.name SEPARATOR ',')  AS supporting_doc_name,att_tbl2.name AS translation_type  FROM translation LEFT JOIN customer ON customer.c_id = translation.c_id LEFT JOIN details d1 ON d1.service_id = translation.a_id LEFT JOIN attributes att_tbl ON d1.service_type=20 and translation.a_id = d1.service_id and d1.d_c_id = att_tbl.attribute_id  AND STR_TO_DATE(d1.under_process_date,"%d-%m-%Y")=STR_TO_DATE('${data.c_date}',"%d-%m-%Y") AND d1.status_id = 21 LEFT JOIN attributes att_tbl1 ON FIND_IN_SET (att_tbl1.attribute_id , translation.a_supporting_doc) LEFT JOIN  attributes att_tbl2 ON att_tbl2.attribute_id = translation.a_type   WHERE STR_TO_DATE(d1.under_process_date,"%d-%m-%Y")=STR_TO_DATE('${data.c_date}',"%d-%m-%Y") AND d1.status_id = 21 AND translation.a_code=${data.a_code} AND translation.a_country=${translation[k].translation_country}  ${user} AND d1.service_type=20
              GROUP by translation.a_id`;

              con.query(sql, function (errsql1, sql1res) {
                if (errsql1) {
                  console.log(errsql1);
                  resolve({ status: 0, message: "Something went to wrong" });
                } else {
                  if (sql1res.length > 0) {
                    let att_data = [];
                    Object.keys(sql1res).map((ak) => {
                      att_data.push(sql1res[ak]);
                    });

                    translation_list[k].translation_user = att_data;
                    if (k == translation.length - 1) {
                      resolve({
                        status: 1,
                        country: translation_list,
                        ulist: response2.country,
                        user_data: response.user_data,
                        settingdata: responsee.settingdata,
                        i_no: i_no,
                      });
                    }
                  }
                }
              });
            });
            // 08-04
          } else {
            resolve({
              status: response2.status,
              country: [],
              ulist: response2.country,
              user_data: response.user_data,
              settingdata: responsee.settingdata,
              i_no: i_no,
            });
          }
        }
      });
    });
    return response1;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function sendtranslationmail(data) {
  try {
    let response = await new Promise(async (resolve, reject) => {
      let senderMailSetting = await sendmessage.getEmailSetting(data.u_id);

      sqlll = `SELECT u_email FROM users WHERE u_id = ${data.u_id} `;
      let ccmail = await new Promise((resolve, reject) => {
        con.query(sqlll, async function (err1, result1) {
          if (err1) {
            console.log(err1);
            resolve({ status: 0, message: "Something went to wrong" });
          } else {
            if (result1.length > 0) {
              resolve({ status: 1, result: result1[0].u_email });
            } else {
              resolve({
                status: 0,
                message: "Something went to wrong",
              });
            }
          }
        });
      });

      let message = await sendmessage.getTemplate(4);
      if (message.status != 0) {
        let mess =
          (message.header == 1
            ? typeof senderMailSetting.email_template_header !=
              undefined && senderMailSetting.email_template_header != undefined &&
              senderMailSetting.email_template_header != null
              ? senderMailSetting.email_template_header
              : ""
            : "") +
          message.template +
          (message.b_d_id != 0
            ? message.b_d_id == 1
              ? senderMailSetting.gst_bankdetails
              : message.b_d_id == 2
                ? senderMailSetting.ngst_bankdetails
                : message.b_d_id == 3
                  ? senderMailSetting.general_bankdetails
                  : ""
            : "") +
          (message.footer == 1 ? senderMailSetting.email_template_footer : "") +
          (message.signature == 1 ? senderMailSetting.email_signature : "");
        CCMailSetting = await sendmessage.getEmailSetting(1);
        let att = [];

        let pathname = __dirname + "/public/Assets/translation_pdf";
        att.push({ url: `translation_${data.i_no}.pdf` });
        sendmessagenow = sendmessage.messagesend(
          senderMailSetting,
          data.email,
          mess,
          ` ${message.subject} || ${data.a_code_name}`,
          att,
          // CCMailSetting.cc_email, //cc mail// CCMailSetting.e_username,
          ccmail.result, // reply mail
          1,
          pathname
        );
        //0404
        sendmessagenow = sendmessage.messagesend(
          senderMailSetting,
          CCMailSetting.cc_email,
          mess,
          ` ${message.subject} || ${data.a_code_name}`,
          att,
          // CCMailSetting.cc_email, //cc mail// CCMailSetting.e_username,
          ccmail.result, // reply mail
          1,
          pathname
        );
        resolve({
          status: 1,
          message:
            "translation cover letter with Attechment send to your mail...",
        });
      }
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function gettranslations(data) {
  try {
    sql = `Select *,(Select COUNT(*) from customer INNER join translation on translation.c_id = customer.c_id INNER JOIN details on translation.a_id = details.service_id Where customer.m_c_id =${data.m_c_id} AND details.service_type = 20 and customer.deleted=0 and details.deleted=0 and translation.deleted=0)as trows,(SELECT name FROM attributes WHERE attributes.attribute_id =translation.a_type)as application_type,(SELECT name FROM attributes WHERE attributes.attribute_id =translation.a_country)as application_country,(SELECT name FROM attributes WHERE attributes.attribute_id =details.d_c_id)as application_certificate ,(SELECT name FROM attributes WHERE attributes.attribute_id =details.status_id)as application_status from customer INNER join translation on translation.c_id = customer.c_id INNER JOIN details on translation.a_id = details.service_id Where customer.m_c_id =${data.m_c_id} AND details.service_type = 20 and customer.is_cancel = 0  and customer.deleted=0 and details.deleted=0 and translation.deleted=0 ORDER BY details.service_id DESC`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve(result);
          } else {
            // resolve({ status: 1, message: "No Records to Display..." });
            resolve();
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function newtasknotification(data) {
  try {
    sql = `SELECT *,(SELECT u_name FROM users where task.u_id=users.u_id and deleted = 0)as u_name FROM task WHERE allocate_id = ${data.u_id} and deleted = 0 and is_read = 0 and t_status = 0 ORDER BY t_id DESC`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              counter: result.length,
              data: result,
            });
          } else {
            resolve({
              status: 0,
              counter: 0,
              data: [],
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function readtasknotification(data) {
  try {
    sql = `UPDATE task SET is_read = 1 where deleted = 0 and is_read = 0 and t_id = ${data.t_id
      }`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.affectedRows > 0) {
            resolve({
              status: 1,
              result: "Task is read by User successfully....",
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function gettaskbyid(data) {
  try {
    sql1 = `SELECT * FROM task_attachment  WHERE  task_attachment.t_id = ${data.t_id}`;
    let response1 = await new Promise((resolve, reject) => {
      con.query(sql1, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              data: result,
            });
          } else {
            resolve({
              status: 0,
              data: 0,
            });
          }
        }
      });
    });
    sql = `SELECT *,(SELECT u_name FROM users where task.u_id=users.u_id and deleted = 0)as createdBy,(SELECT u_name FROM users where task.allocate_id=users.u_id and deleted = 0)as allocateTo FROM task WHERE t_id = ${data.t_id} and deleted = 0  `;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              data: result[0],
              task_image: response1.data,
            });
          } else {
            resolve({
              status: 0,
              data: 0,
              task_image: [],
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function sendloginotp(data) {
  try {
    sql = `SELECT * FROM users WHERE u_email='${data.email}' and deleted = 0`;
    let senderMailSetting = await sendmessage.getEmailSetting(1);
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            sql2 = `SELECT * FROM users WHERE u_email='${data.email}' and deleted = 0 and check_in_status=0`;
            con.query(sql2, function (err2, result2) {
              if (err2) {
                console.log(err2);
                resolve({ status: 0, message: "Something went to wrong" });
              } else {
                if (result2.length > 0) {
                  let otpcode = Math.floor(Math.random() * 1000000) + 1;
                  const sql1 = `UPDATE users SET loginotp=${otpcode}  WHERE u_email='${data.email}'`;
                  con.query(sql1, (err, result1) => {
                    if (err) {
                      console.log(err);
                      resolve({
                        status: 0,
                        message: "Something went to wrong",
                      });
                    } else {
                      if (result1) {
                        // let transporter = nodeMailer.createTransport({
                        //   host: "smtp.gmail.com",
                        //   port: 465,
                        //   secure: true,
                        //   auth: {
                        //     user: "jilsutariyapatel10179@gmail.com",
                        //     pass: "ikpuzimobqspdstm",
                        //   },
                        // });
                        let transporter = nodeMailer.createTransport({
                          host: senderMailSetting.e_host,
                          port: senderMailSetting.e_port,
                          secureConnection: false,
                          auth: {
                            user: senderMailSetting.e_username,
                            pass: senderMailSetting.e_password,
                          },
                        });
                        // let mailOptions = {
                        //   from: '"EAS" <jilsutariyapatel10179@gmail.com>', // sender address
                        //   // to:"vatsalmarkana22@gmail.com", // list of receivers
                        //   to: data.email,
                        //   subject: "One Time Password", // Subject line
                        //   text: `Your Login OTP is:${otpcode}`, // plain text body
                        //   // html: `<b>${code}</b>` // html body
                        // };
                        let mailOptions = {
                          from:
                            '"Excellent Apostille Services" <' +
                            senderMailSetting.e_username +
                            ">", // sender address
                          // to:"vatsalmarkana22@gmail.com", // list of receivers
                          cc: senderMailSetting.e_username,
                          to: data.email,
                          replyTo: senderMailSetting.reply_mail,
                          subject: "One Time Password", // Subject line
                          text: `Your Login OTP is:${otpcode}`, // plain text body
                        };
                        transporter.sendMail(mailOptions, (err, info) => {
                          if (err) {
                            return console.log(err);
                          }
                          res.render("index");
                        });
                        resolve({
                          status: 1,
                          message: "OTP sent succeessfully",
                        });
                      }
                    }
                  });
                } else {
                  resolve({
                    status: 0,
                    message: "This user is already login",
                  });
                }
              }
            });
          } else {
            resolve({
              status: 0,
              message: "Email doesn't exist.....",
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

//0703
async function sendleadinvoicemail(data) {
  try {
    let addressdata = JSON.parse(data.addressdata);
    let convert_data = JSON.parse(data.convertdata);
    let newobj = {
      id: addressdata.customerdata.m_c_id,
      uid: addressdata.uid,
    };
    let response1 = await new Promise(async (resolve, reject) => {
      let invoice_data = await getproformainvoicedata(newobj);
      let n_ino = invoice_data.paymentres.invoice_no.split("/");

      let imageAsBase64;
      if (
        fs.existsSync(
          `./public/Assets/images/${invoice_data.customerdata.u_id == 1 ? "adminlogo" : "branchlogo"
          }/${invoice_data.settingdata.logo}`
        )
      ) {
        imageAsBase64 = fs.readFileSync(
          `./public/Assets/images/${invoice_data.customerdata.u_id == 1 ? "adminlogo" : "branchlogo"
          }/${invoice_data.settingdata.logo}`,
          { encoding: "base64" }
        );
      }
      let signatureAsBase64;
      if (
        fs.existsSync(
          `./public/Assets/images/invoicesignature/${invoice_data.customerdata.invoice_signature}`
        )
      ) {
        signatureAsBase64 = fs.readFileSync(
          `./public/Assets/images/invoicesignature/${invoice_data.customerdata.invoice_signature}`,
          { encoding: "base64" }
        );
      }
      pdf
        .create(
          pdfTemplate6(
            invoice_data,
            addressdata.userdata,
            addressdata.b_state_id,
            addressdata.generalsetting,
            convert_data,
            imageAsBase64,
            signatureAsBase64
          ),
          {
            childProcessOptions: {
              env: {
                OPENSSL_CONF: "/dev/null",
              },
            },
          }
        )
        .toFile(
          `${__dirname}/public/Assets/proforma_invoice_pdf/invoice_${n_ino[4]}.pdf`,
          (err) => {
            if (err) {
              return console.log("error");
            }
            resolve({
              ino: n_ino[4],
            });
          }
        );
    });

    sql = `SELECT * FROM lead_customer WHERE c_id=${data.cid} AND deleted = 0`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, async function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            senderMailSetting = await sendmessage.getEmailSetting(data.uid);

            sqlll = `SELECT u_email FROM users WHERE u_id = ${data.uid} `;
            let ccmail = await new Promise((resolve, reject) => {
              con.query(sqlll, async function (err1, result1) {
                if (err1) {
                  console.log(err1);
                  resolve({ status: 0, message: "Something went to wrong" });
                } else {
                  if (result1.length > 0) {
                    resolve({ status: 1, result: result1[0].u_email });
                  } else {
                    resolve({
                      status: 0,
                      message: "Something went to wrong",
                    });
                  }
                }
              });
            });

            let message = await sendmessage.getTemplate(40);
            if (message.status != 0) {
              message.template = message.template.replace(
                "{:name:}",
                result[0].c_prefix + "" + result[0].c_name
              );
              let mess =
                (message.header == 1
                  ? typeof senderMailSetting.email_template_header !=
                    undefined && senderMailSetting.email_template_header != undefined &&
                    senderMailSetting.email_template_header != null
                    ? senderMailSetting.email_template_header
                    : ""
                  : "") +
                message.template +
                (message.b_d_id != 0
                  ? message.b_d_id == 1
                    ? senderMailSetting.gst_bankdetails
                    : message.b_d_id == 2
                      ? senderMailSetting.ngst_bankdetails
                      : message.b_d_id == 3
                        ? senderMailSetting.general_bankdetails
                        : ""
                  : "") +
                (message.footer == 1
                  ? senderMailSetting.email_template_footer
                  : "") +
                (message.signature == 1
                  ? senderMailSetting.email_signature
                  : "");

              CCMailSetting = await sendmessage.getEmailSetting(1);
              let att = [];
              let n_ino = data.ino.split("/");
              att.push({ url: `invoice_${n_ino[4]}.pdf` });
              let pathname = __dirname + "/public/Assets/proforma_invoice_pdf";
              sendmessagenow = sendmessage.messagesend(
                senderMailSetting,
                result[0].c_email,
                mess,
                message.subject,
                att,
                // CCMailSetting.cc_email, //cc mail// CCMailSetting.e_username,
                ccmail.result, // reply mail
                1,
                pathname
              );
              sendmessagenow = sendmessage.messagesend(
                senderMailSetting,
                CCMailSetting.cc_email,
                mess,
                message.subject,
                att,
                // CCMailSetting.cc_email, //cc mail// CCMailSetting.e_username,
                ccmail.result, // reply mail
                1,
                pathname
              );
              resolve({
                status: 1,
                message: "Mail Send successfully",
              });
            }
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function sendleadwithoutinvoiceemail(data) {
  try {
    sql = `SELECT * FROM lead_customer WHERE c_id=${data.cid} AND deleted = 0`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, async function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            senderMailSetting = await sendmessage.getEmailSetting(data.uid);

            sqlll = `SELECT u_email FROM users WHERE u_id = ${data.uid} `;
            let ccmail = await new Promise((resolve, reject) => {
              con.query(sqlll, async function (err1, result1) {
                if (err1) {
                  console.log(err1);
                  resolve({ status: 0, message: "Something went to wrong" });
                } else {
                  if (result1.length > 0) {
                    resolve({ status: 1, result: result1[0].u_email });
                  } else {
                    resolve({
                      status: 0,
                      message: "Something went to wrong",
                    });
                  }
                }
              });
            });

            let message = await sendmessage.getTemplate(39);
            if (message.status != 0) {
              message.template = message.template.replace(
                "{:name:}",
                result[0].c_prefix + " " + result[0].c_name
              );
              let mess =
                (message.header == 1
                  ? typeof senderMailSetting.email_template_header !=
                    undefined && senderMailSetting.email_template_header != undefined &&
                    senderMailSetting.email_template_header != null
                    ? senderMailSetting.email_template_header
                    : ""
                  : "") +
                message.template +
                (message.b_d_id != 0
                  ? message.b_d_id == 1
                    ? senderMailSetting.gst_bankdetails
                    : message.b_d_id == 2
                      ? senderMailSetting.ngst_bankdetails
                      : message.b_d_id == 3
                        ? senderMailSetting.general_bankdetails
                        : ""
                  : "") +
                (message.footer == 1
                  ? senderMailSetting.email_template_footer
                  : "") +
                (message.signature == 1
                  ? senderMailSetting.email_signature
                  : "");

              CCMailSetting = await sendmessage.getEmailSetting(1);
              sendmessagenow = sendmessage.customermessagesend(
                senderMailSetting,
                result[0].c_email,
                mess,
                message.subject,
                ccmail.result, //CCMailSetting.e_username,  // user mail
                ccmail.result, // reply mail
                1
              );
              resolve({
                status: 1,
                message: "Mail Send successfully",
              });
            }
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function blockCustomer(data) {
  try {
    sql = `UPDATE customer SET is_block=${data.status} WHERE c_id=${data.c_id}`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.affectedRows > 0) {
            resolve({
              status: 1,
              message: "Status update successfully",
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function changeCustomerPassword(data) {
  try {
    let sql = `UPDATE main_customer SET  password='${data.new_password}' WHERE m_c_id = ${data.m_c_id} AND password = '${data.current_password}'`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.affectedRows > 0) {
            resolve({
              status: 1,
              message: "Change Password successfully",
            });
          } else {
            resolve({
              status: 0,
              message: "Current Password Not Matched",
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function gettemplatelistbycate(data) {
  try {
    sql = `SELECT *,(row_number() over ( order by email_template.e_t_id DESC) ) AS row_no,(SELECT name FROM attributes WHERE email_template.c_id=attributes.attribute_id) as category,(SELECT name FROM attributes WHERE email_template.s_c_id=attributes.attribute_id)as subcategory FROM email_template where deleted=0 and status=1 and c_id=${data.cid}`;
    if (data.scid != 0 && data.scid != "undefined") {
      sql += ` and s_c_id=${data.scid}`;
    }
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              sData: result,
            });
          } else {
            resolve({
              status: 0,
              sData: [],
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function gettemplatedata(data) {
  try {
    sql = `SELECT * FROM email_template where deleted=0 and status=1 and e_t_id=${data.etid}`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              sData: result[0],
            });
          } else {
            resolve({
              status: 0,
              sData: [],
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

// async function getcourierchargereport(data) {
//   try {
//     if (data.user_type == 0) {
//       sql = `SELECT *,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname FROM payment,customer WHERE
//       payment.c_id=customer.c_id`;
//       if (typeof data.branch_name != "undefined") {
//         sql += ` and customer.branch_id=${data.branch_name}`;
//       }
//       if (typeof data.u_name != "undefined" && data.u_name != 0) {
//         sql += ` and customer.u_id=${data.u_name}`;
//       }
//       sql += ` AND STR_TO_DATE(payment.payment_date,'%d-%m-%Y')>='${data.s_date}' AND STR_TO_DATE(payment.payment_date,'%d-%m-%Y')<='${data.e_date}' AND payment_id IN (SELECT max(payment_id) FROM payment GROUP by c_id)`;
//       sql2 = sql;

//       //sum
//       sqlsum = `SELECT sum(courier) as c_charge FROM payment,customer WHERE
//       payment.c_id=customer.c_id`;
//       if (typeof data.branch_name != "undefined") {
//         sqlsum += ` and customer.branch_id=${data.branch_name}`;
//       }
//       if (typeof data.u_name != "undefined" && data.u_name != 0) {
//         sqlsum += ` and customer.u_id=${data.u_name}`;
//       }
//       sqlsum += ` AND STR_TO_DATE(payment.payment_date,'%d-%m-%Y')>='${data.s_date}' AND STR_TO_DATE(payment.payment_date,'%d-%m-%Y')<='${data.e_date}' AND payment_id IN (SELECT max(payment_id) FROM payment GROUP by c_id)`;
//       //endsum

//       sql += ` limit ${(data.page - 1) * data.perpage},${data.perpage}`;
//     } else if (data.user_type == 1) {
//       sql = `SELECT *,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname FROM payment,customer WHERE
//       payment.c_id=customer.c_id`;
//       if (typeof data.branch_name == "undefined") {
//         sql += ` and (customer.branch_id=${data.branch_id} or foreign_branch=${data.branch_id})`;
//       }
//       if (typeof data.u_name != "undefined" && data.u_name != 0) {
//         sql += ` and customer.u_id=${data.u_name}`;
//       }
//       sql += ` AND STR_TO_DATE(payment.payment_date,'%d-%m-%Y')>='${data.s_date}' AND STR_TO_DATE(payment.payment_date,'%d-%m-%Y')<='${data.e_date}' AND payment_id IN (SELECT max(payment_id) FROM payment GROUP by c_id)`;
//       sql2 = sql;

//       //sum
//       sqlsum = `SELECT sum(courier) as c_charge FROM payment,customer WHERE
//       payment.c_id=customer.c_id`;
//       if (typeof data.branch_name == "undefined") {
//         sqlsum += ` and (customer.branch_id=${data.branch_id} or foreign_branch=${data.branch_id})`;
//       }
//       if (typeof data.u_name != "undefined" && data.u_name != 0) {
//         sqlsum += ` and customer.u_id=${data.u_name}`;
//       }
//       sqlsum += ` AND STR_TO_DATE(payment.payment_date,'%d-%m-%Y')>='${data.s_date}' AND STR_TO_DATE(payment.payment_date,'%d-%m-%Y')<='${data.e_date}' AND payment_id IN (SELECT max(payment_id) FROM payment GROUP by c_id)`;
//       //endsum

//       sql += ` limit ${(data.page - 1) * data.perpage},${data.perpage}`;
//     } else {
//       sql = `SELECT *,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname FROM payment,customer WHERE
//       payment.c_id=customer.c_id and customer.branch_id=${data.branch_id} and customer.u_id=${data.u_id} AND STR_TO_DATE(payment.payment_date,'%d-%m-%Y')>='${data.s_date}' AND STR_TO_DATE(payment.payment_date,'%d-%m-%Y')<='${data.e_date}' AND payment_id IN (SELECT max(payment_id) FROM payment GROUP by c_id)`;

//       //sum
//       sqlsum = `SELECT sum(courier) as c_charge FROM payment,customer WHERE
//       payment.c_id=customer.c_id and customer.branch_id=${data.branch_id} and customer.u_id=${data.u_id} AND STR_TO_DATE(payment.payment_date,'%d-%m-%Y')>='${data.s_date}' AND STR_TO_DATE(payment.payment_date,'%d-%m-%Y')<='${data.e_date}' AND payment_id IN (SELECT max(payment_id) FROM payment GROUP by c_id)`;
//       //endsum

//       sql2 = sql;
//       sql += ` limit ${(data.page - 1) * data.perpage},${data.perpage}`;
//     }
//     let response = await new Promise((resolve, reject) => {
//       con.query(sql2, function (err, result) {
//         if (err) {
//           resolve({ status: 0, message: "Something went to wrong" });
//         }
//         if (result.length > 0) {
//           con.query(sqlsum, function (err, sumres) {
//             if (err) {
//               resolve({ status: 0, message: "Something went to wrong" });
//             }
//             if (result.length > 0) {
//               con.query(sql, function (err, res) {
//                 if (res.length > 0) {
//                   resolve({
//                     status: 1,
//                     data: res,
//                     adata: result,
//                     tsum: sumres[0],
//                     t_rows: result.length,
//                   });
//                 }
//               });
//             }
//           });
//         } else {
//           resolve({
//             status: 1,
//             data: [],
//           });
//         }
//       });
//     });
//     return response;
//   } catch (error) {
//     return { status: 0, message: "Invalid Call Try Again" };
//   }
// }

async function getcourierchargereport(data) {
  try {
    let sql1 = "";
    if (
      typeof data.courier_id != "undefined" &&
      data.courier_id != "" &&
      data.courier_id != 0
    ) {
      sql1 = ` and details.courier_id=${data.courier_id}`;
    }
    if (data.user_type == 0) {
      if (typeof data.branch_name != "undefined") {
        sql1 += ` AND customer.branch_id=${data.branch_name}`;
      }
      if (typeof data.u_name != "undefined" && data.u_name != 0) {
        sql1 += ` AND customer.u_id=${data.u_name}`;
      }
    } else if (data.user_type == 1) {
      if (typeof data.u_name != "undefined" && data.u_name != 0) {
        sql1 += ` AND customer.u_id=${data.u_name}`;
      } else {
        sql1 += ` AND (customer.branch_id=${data.branch_id} or customer.foreign_branch=${data.branch_id})`;
      }
    } else if (data.user_type == 3) {
      sql1 += ` AND customer.u_id=${data.u_id}`;
    }

    sql = `SELECT customer.*,payment.*,attestation.a_prefix,attestation.a_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =details.courier_id)as courier_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =attestation.a_type)as attestation_type,(SELECT name FROM attributes WHERE attributes.attribute_id =attestation.a_country)as attestation_country,(SELECT name FROM attributes WHERE attributes.attribute_id =details.d_c_id)as attestation_certificate,(SELECT b_name FROM branch WHERE branch.branch_id =customer.branch_id)as bname,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname FROM details,attestation,customer,payment WHERE payment.c_id=customer.c_id and customer.c_id=attestation.c_id AND details.service_id=attestation.a_id  AND details.service_type=10 AND details.deleted = 0 AND attestation.deleted = 0 AND customer.deleted=0 AND STR_TO_DATE(payment.payment_date,'%d-%m-%Y')>='${data.s_date}' AND STR_TO_DATE(payment.payment_date,'%d-%m-%Y')<='${data.e_date}' ${sql1} AND payment.courier != 0 AND payment_id IN (SELECT max(payment_id) FROM payment GROUP by c_id) GROUP by customer.c_id
    UNION 
    
    SELECT customer.*,payment.*,visa.v_prefix as a_prefix,visa.v_name as a_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =details.courier_id)as courier_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =visa.v_type)as attestation_type,(SELECT name FROM attributes WHERE attributes.attribute_id  =details.d_c_id)as attestation_country,(SELECT name FROM attributes WHERE attributes.attribute_id =visa.v_passport)as attestation_certificate,(SELECT b_name FROM branch WHERE branch.branch_id =customer.branch_id)as bname,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname FROM details,visa,customer,payment WHERE payment.c_id=customer.c_id and customer.c_id=visa.c_id AND details.service_id=visa.v_id AND details.service_type=8 AND details.deleted = 0 AND customer.deleted=0 AND visa.deleted = 0  AND STR_TO_DATE(payment.payment_date,'%d-%m-%Y')>='${data.s_date}' AND STR_TO_DATE(payment.payment_date,'%d-%m-%Y')<='${data.e_date}' ${sql1} AND payment.courier != 0 AND payment_id IN (SELECT max(payment_id) FROM payment GROUP by c_id) GROUP by customer.c_id
    UNION 
    
    SELECT customer.*,payment.*,apostille.a_prefix,apostille.a_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =details.courier_id)as courier_name,(SELECT name FROM attributes WHERE attributes.attribute_id  = apostille.a_type)as attestation_type,(SELECT name FROM attributes WHERE attributes.attribute_id =apostille.a_country)as attestation_country,(SELECT name FROM attributes WHERE attributes.attribute_id =details.d_c_id)as attestation_certificate,(SELECT b_name FROM branch WHERE branch.branch_id =customer.branch_id)as bname,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname FROM details,apostille,customer,payment WHERE payment.c_id=customer.c_id and customer.c_id=apostille.c_id AND details.service_id=apostille.a_id  AND details.service_type=17 AND details.deleted = 0  AND apostille.deleted = 0 AND customer.deleted = 0 AND STR_TO_DATE(payment.payment_date,'%d-%m-%Y')>='${data.s_date}' AND STR_TO_DATE(payment.payment_date,'%d-%m-%Y')<='${data.e_date}' ${sql1} AND payment.courier != 0 AND payment_id IN (SELECT max(payment_id) FROM payment GROUP by c_id) GROUP by customer.c_id
    UNION 
    
    SELECT customer.*,payment.*,translation.a_prefix,translation.a_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =details.courier_id)as courier_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =translation.a_type)as attestation_type,(SELECT name FROM attributes WHERE attributes.attribute_id =translation.a_country)as attestation_country,(SELECT name FROM attributes WHERE attributes.attribute_id =details.d_c_id)as attestation_certificate,(SELECT b_name FROM branch WHERE branch.branch_id =customer.branch_id)as bname,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname FROM details,translation,customer,payment WHERE payment.c_id=customer.c_id and customer.c_id=translation.c_id AND details.service_id=translation.a_id  AND details.service_type=20 AND details.deleted = 0 AND customer.deleted = 0 AND translation.deleted = 0
    AND STR_TO_DATE(payment.payment_date,'%d-%m-%Y')>='${data.s_date}' AND STR_TO_DATE(payment.payment_date,'%d-%m-%Y')<='${data.e_date}' ${sql1} AND payment.courier != 0 AND payment_id IN (SELECT max(payment_id) FROM payment GROUP by c_id) GROUP by customer.c_id`;

    asql = sql;
    sql += ` limit ${(data.page - 1) * data.perpage},${data.perpage}`;
    let response = await new Promise((resolve, reject) => {
      con.query(asql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            con.query(sql, function (err, sresult) {
              if (err) {
                console.log(err);
                resolve({ status: 0, message: "Something went to wrong" });
              } else {
                if (sresult.length > 0) {
                  resolve({
                    status: 1,
                    data: sresult,
                    t_rows: result.length,
                    adata: result,
                  });
                }
              }
            });
          } else {
            resolve({
              status: 1,
              data: [],
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function sendtempmail(data) {
  try {
    let response = await new Promise(async (resolve, reject) => {
      senderMailSetting = await sendmessage.getEmailSetting(data.uid);

      sqlll = `SELECT u_email FROM users WHERE u_id = ${data.uid} `;
      let ccmail = await new Promise((resolve, reject) => {
        con.query(sqlll, async function (err1, result1) {
          if (err1) {
            console.log(err1);
            resolve({ status: 0, message: "Something went to wrong" });
          } else {
            if (result1.length > 0) {
              resolve({ status: 1, result: result1[0].u_email });
            } else {
              resolve({
                status: 0,
                message: "Something went to wrong",
              });
            }
          }
        });
      });

      let message = await sendmessage.getTemplate(data.e_t_id);
      if (message.status != 0) {
        let mess =
          (message.header == 1
            ? typeof senderMailSetting.email_template_header !=
              undefined && senderMailSetting.email_template_header != undefined &&
              senderMailSetting.email_template_header != null
              ? senderMailSetting.email_template_header
              : ""
            : "") +
          message.template +
          (message.b_d_id != 0
            ? message.b_d_id == 1
              ? senderMailSetting.gst_bankdetails
              : message.b_d_id == 2
                ? senderMailSetting.ngst_bankdetails
                : message.b_d_id == 3
                  ? senderMailSetting.general_bankdetails
                  : ""
            : "") +
          (message.footer == 1 ? senderMailSetting.email_template_footer : "") +
          (message.signature == 1 ? senderMailSetting.email_signature : "");

        CCMailSetting = await sendmessage.getEmailSetting(1);
        sendmessagenow = sendmessage.customermessagesend(
          senderMailSetting,
          data.e_email,
          mess,
          message.subject,
          ccmail.result, //CCMailSetting.e_username,  // user mail
          ccmail.result, // reply mail
          1
        );
        resolve({
          status: 1,
          message: "Mail send successfully",
        });
      }
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function getuserbyid(data) {
  try {
    sql = `SELECT * FROM users WHERE u_id=${data.u_id}`;

    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              data: result[0],
            });
          } else {
            resolve({ status: 0, message: "Something went to wrong" });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function getfaqcategoryList(data) {
  try {
    sql = `SELECT *,(row_number() over ( order by faq_category.f_c_id  DESC) ) AS row_no FROM faq_category ORDER BY f_c_id DESC`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              data: result,
            });
          } else {
            resolve({
              status: 1,
              data: [],
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function insertFaqCategory(data) {
  try {
    sql = `INSERT INTO faq_category (f_c_name,f_c_status) VALUES ('${mysql_real_escape_string(
      data.f_c_name
    )}', 0)`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.affectedRows > 0) {
            resolve({
              status: 1,
              message: "Category Inserted Successfully",
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function updateFaqCategory(data) {
  try {
    sql = `UPDATE faq_category SET f_c_name = "${mysql_real_escape_string(
      data.f_c_name
    )}" WHERE faq_category.f_c_id = ${data.f_c_id}`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.affectedRows > 0) {
            resolve({
              status: 1,
              message: "Category Updated Successfully",
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function insertFaq(data, filename) {
  try {
    if (filename != undefined) {
      sql = `INSERT INTO faq (f_c_id,f_question,f_answer,f_file) VALUES (${data.f_c_id
        },"${mysql_real_escape_string(
          data.f_question
        )}","${mysql_real_escape_string(
          data.f_answer
        )}","${mysql_real_escape_string(filename)}")`;
    } else {
      sql = `INSERT INTO faq (f_c_id,f_question,f_answer) VALUES (${data.f_c_id
        },"${mysql_real_escape_string(
          data.f_question
        )}","${mysql_real_escape_string(data.f_answer)}")`;
    }
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.affectedRows > 0) {
            resolve({
              status: 1,
              message: "FAQ Inserted Successfully",
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function getfaqList() {
  try {
    sql = `select *,(row_number() over ( order by faq.f_id DESC) ) AS row_no from faq, faq_category WHERE faq.f_c_id = faq_category.f_c_id ORDER BY faq.f_id DESC`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              data: result,
            });
          } else {
            resolve({
              status: 1,
              data: [],
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function updateFaq(data, filename) {
  try {
    if (filename != undefined) {
      sql = `UPDATE faq SET f_c_id = "${data.f_c_id
        }" , f_question = "${mysql_real_escape_string(
          data.f_question
        )}",f_answer = "${mysql_real_escape_string(
          data.f_answer
        )}",f_file="${mysql_real_escape_string(filename)}"  WHERE faq.f_id = ${data.f_id
        }`;
    } else {
      sql = `UPDATE faq SET f_c_id = "${data.f_c_id
        }" , f_question = "${mysql_real_escape_string(
          data.f_question
        )}",f_answer = "${mysql_real_escape_string(
          data.f_answer
        )}"  WHERE faq.f_id = ${data.f_id}`;
    }
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.affectedRows > 0) {
            resolve({
              status: 1,
              message: "FAQ Updated Successfully",
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function deleteFAQ(data) {
  try {
    sql = `DELETE FROM faq WHERE f_id =${data.id}`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.affectedRows > 0) {
            resolve({
              status: 1,
              message: "FAQ Deleted Successfully",
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function deletefaqcategory(data) {
  try {
    sql = `delete from faq_category WHERE f_c_id = ${data.id}`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.affectedRows > 0) {
            sqlfaq = `DELETE FROM faq WHERE f_c_id =${data.id}`;
            con.query(sqlfaq, function (faqerr, faqresult) {
              if (faqerr) {
                console.log(faqerr);
                resolve({ status: 0, message: "Something went to wrong" });
              }
            });
            resolve({
              status: 1,
              message: "FAQ Category Deleted Successfully",
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function getProcessLimitDate(data) {
  try {
    let sql = `SELECT process_limit_days FROM attributes WHERE attribute_id=${data.a_type}`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            let date = new Date();
            date.setDate(date.getDate() + result[0].process_limit_days);

            resolve({
              status: 1,
              process_limit_date: date,
              process_limit_days: result[0].process_limit_days,
            });
          } else {
            resolve({ status: 0, message: "Something went to wrong" });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function sendMailOfProcessLimitDate() {
  try {
    let curr_date = moment().format("DD-MM-YYYY");
    // let response = await new Promise(async (resolve, reject) => {
    let sql = `SELECT attestation.process_limit_mail_date,attestation.a_type,attestation.a_id,(SELECT u_email FROM users WHERE users.u_id = customer.u_id)as u_email,customer.* FROM attestation,customer,details WHERE attestation.c_id = customer.c_id and details.service_type =10 and (details.status_id = 21 or details.status_id = 273 ) and customer.is_block = 1 and customer.is_cancel=0 and customer.deleted = 0  and attestation.deleted=0 and attestation.process_limit_mail_date = '${curr_date}' and attestation.a_id = details.service_id GROUP BY customer.c_id UNION SELECT apostille.process_limit_mail_date,apostille.a_type,apostille.a_id,(SELECT u_email FROM users WHERE users.u_id = customer.u_id)as u_email,customer.* FROM apostille,customer,details WHERE apostille.c_id = customer.c_id and details.service_type =17 and (details.status_id = 21 or details.status_id = 273 ) and apostille.deleted=0 and customer.is_block = 1 and customer.is_cancel=0 and customer.deleted = 0 and apostille.process_limit_mail_date ='${curr_date}' and apostille.a_id = details.service_id GROUP BY customer.c_id UNION SELECT translation.process_limit_mail_date,translation.a_type,translation.a_id,(SELECT u_email FROM users WHERE users.u_id = customer.u_id)as u_email,customer.* FROM translation,customer,details WHERE translation.c_id = customer.c_id and details.service_type =20 and (details.status_id = 21 or details.status_id = 273 ) and customer.is_block = 1 and customer.is_cancel=0 and customer.deleted = 0 and translation.deleted=0  and translation.process_limit_mail_date = '${curr_date}' and translation.a_id = details.service_id GROUP BY customer.c_id UNION SELECT visa.process_limit_mail_date,visa.v_type as a_type,visa.v_id as a_id,(SELECT u_email FROM users WHERE users.u_id = customer.u_id)as u_email,customer.* FROM visa,customer,details WHERE visa.c_id = customer.c_id and details.service_type =8 and (details.status_id = 21 or details.status_id = 273 ) and visa.deleted=0 and customer.is_block = 1 and customer.is_cancel=0 and customer.deleted = 0 and visa.process_limit_mail_date = '${curr_date}' and visa.v_id = details.service_id GROUP BY customer.c_id  `;
    con.query(sql, async function (err, results) {
      if (err) {
        console.log(err);
        console.log("Something went wrong");
      } else {
        if (results.length > 0) {
          let messa1 = [];
          results.map(async (data, index) => {
            if (data.c_s_type == 10) {
              sqll = `Select attestation.*,details.d_c_id,details.service_type,(SELECT name FROM attributes WHERE attribute_id=details.status_id)as status_name ,(SELECT name FROM attributes WHERE attribute_id=details.d_c_id)as certificate_name,(SELECT name FROM attributes WHERE attribute_id=attestation.a_country)as country_name,(SELECT name FROM attributes WHERE attribute_id=attestation.a_type)as type FROM attestation RIGHT JOIN details ON  attestation.a_id=details.service_id WHERE  details.service_type=10 AND attestation.c_id = ${data.c_id} and attestation.deleted = 0 `;
            } else if (data.c_s_type == 8) {
              sqll = `Select visa.*,details.d_c_id,details.service_type,(SELECT name FROM attributes WHERE attribute_id=details.status_id)as status_name,(SELECT name FROM attributes WHERE attribute_id=details.d_c_id)as country_name,(SELECT name FROM attributes WHERE attribute_id=visa.v_type)as type,(SELECT GROUP_CONCAT(attributes.name SEPARATOR ',') as name FROM attributes where FIND_IN_SET (attributes.attribute_id , visa.v_supporting_doc)) as certificate_name  FROM visa RIGHT JOIN details ON  visa.v_id=details.service_id   WHERE   details.service_type=8 AND visa.c_id = ${data.c_id} and visa.deleted = 0`;
            } else if (data.c_s_type == 17) {
              sqll = `Select apostille.*,details.d_c_id,details.service_type,(SELECT name FROM attributes WHERE attribute_id=details.status_id)as status_name,(SELECT name FROM attributes WHERE attribute_id=details.d_c_id)as certificate_name,(SELECT name FROM attributes WHERE attribute_id=apostille.a_country)as country_name,(SELECT name FROM attributes WHERE attribute_id=apostille.a_type)as type  FROM apostille RIGHT JOIN details ON apostille.a_id=details.service_id  WHERE  details.service_type=17 AND apostille.c_id = ${data.c_id} and apostille.deleted = 0`;
            } else {
              sqll = `Select translation.*,details.d_c_id,details.service_type,(SELECT name FROM attributes WHERE attribute_id=details.status_id)as status_name,(SELECT name FROM attributes WHERE attribute_id=details.d_c_id)as certificate_name,(SELECT name FROM attributes WHERE attribute_id=translation.a_country)as country_name,(SELECT name FROM attributes WHERE attribute_id=translation.a_type)as type  FROM translation RIGHT JOIN details ON translation.a_id=details.service_id  WHERE  details.service_type=20 AND translation.c_id = ${data.c_id} and translation.deleted = 0`;
            }
            con.query(sqll, async function (errr, resultss) {
              if (errr) {
                console.log(errr);
                console.log("Something went wrong");
              } else {
                if (resultss.length > 0) {
                  const getrow = (index) => {
                    let rows = "";
                    resultss.map((a) => {
                      a.service_type == 8
                        ? (rows =
                          rows +
                          `<tr><td style="border: 1px solid #333;padding:5px;"> ${a.v_name} </td>
          <td style="border: 1px solid #333;padding:5px;"> ${a.type} </td>
          <td style="border: 1px solid #333;padding:5px;"> ${a.country_name} </td>
          <td style="border: 1px solid #333;padding:5px;"> ${a.certificate_name} </td>
          <td style="border: 1px solid #333;padding:5px;"> ${a.status_name} </td></tr>`)
                        : (rows =
                          rows +
                          `<tr><td style="border: 1px solid #333;padding:5px;"> ${a.a_name} </td>
          <td style="border: 1px solid #333;padding:5px;"> ${a.type} </td>
          <td style="border: 1px solid #333;padding:5px;"> ${a.country_name} </td>
          <td style="border: 1px solid #333;padding:5px;"> ${a.certificate_name} </td>
          <td style="border: 1px solid #333;padding:5px;"> ${a.status_name} </td></tr>`);
                    });
                    return rows;
                  };
                  let table1 = `<div>
    <table style="border-collapse: collapse;" >
      <tr style="border: 1px solid #333;padding:5px;">
        <th style="border: 1px solid #333;padding:5px;"> Name </th>
        <th style="border: 1px solid #333;padding:5px;"> Type </th>
        <th style="border: 1px solid #333;padding:5px;"> Country </th>
        <th style="border: 1px solid #333;padding:5px;"> Certificate </th>
        <th style="border: 1px solid #333;padding:5px;"> Status </th>
      </tr>
      ${getrow(index)}
    </table>
    </div>`;
                  let message = await sendmessage.getTemplate(44);
                  if (message.status != 0) {
                    message.template = message.template.replace(
                      "{:name:}",
                      data.c_prefix + " " + data.c_name
                    );
                    message.template = message.template.replace(
                      "{:table:}",
                      table1
                    );
                    messa1.push(message);
                    let senderMailSetting = await sendmessage.getEmailSetting(
                      data.created_id
                    );

                    sqlll = `SELECT u_email FROM users WHERE u_id = ${data.created_id} `;
                    let ccmail = await new Promise((resolve, reject) => {
                      con.query(sqlll, async function (err1, result1) {
                        if (err1) {
                          console.log(err1);
                          resolve({
                            status: 0,
                            message: "Something went to wrong",
                          });
                        } else {
                          if (result1.length > 0) {
                            resolve({ status: 1, result: result1[0].u_email });
                          } else {
                            resolve({
                              status: 0,
                              message: "Something went to wrong",
                            });
                          }
                        }
                      });
                    });

                    let mess =
                      (messa1[index].header == 1
                        ? typeof senderMailSetting.email_template_header !=
                          undefined && senderMailSetting.email_template_header !=
                          undefined &&
                          senderMailSetting.email_template_header != null
                          ? senderMailSetting.email_template_header
                          : ""
                        : "") +
                      messa1[index].template +
                      (messa1[index].b_d_id != 0
                        ? messa1[index].b_d_id == 1
                          ? senderMailSetting.gst_bankdetails
                          : messa1[index].b_d_id == 2
                            ? senderMailSetting.ngst_bankdetails
                            : messa1[index].b_d_id == 3
                              ? senderMailSetting.general_bankdetails
                              : ""
                        : "") +
                      // (data.created_id == 1
                      //   ? data.c_tax == 0
                      //     ? senderMailSetting.bank_details
                      //     : senderMailSetting.nongst_bank_details
                      //   : data.c_tax == 0
                      //     ? senderMailSetting.b_bank_details
                      //     : senderMailSetting.b_nongst_bank_deatils) +
                      (messa1[index].footer == 1
                        ? senderMailSetting.email_template_footer
                        : "") +
                      (messa1[index].signature == 1
                        ? senderMailSetting.email_signature
                        : "");
                    CCMailSetting = await sendmessage.getEmailSetting(1);
                    sendmessagenow = sendmessage.customermessagesend(
                      senderMailSetting,
                      data.u_email, // data.c_email,
                      mess,
                      `${message.subject} || ${data.c_prefix + " " + data.c_name
                      }`,
                      ccmail.result, //CCMailSetting.e_username,  // user mail
                      ccmail.result, // reply mail
                      1
                    );
                  }
                }
              }
            });
          });
        } else {
          console.log("There is no data Found....");
        }
      }
    });
    // });
    let sql1 = `SELECT attestation.process_limit_mail_date,attestation.a_type,attestation.a_id,customer.* FROM attestation,customer,details WHERE attestation.c_id = customer.c_id and details.service_type =10 and (details.status_id = 21 or details.status_id = 273 ) and attestation.deleted=0 and attestation.process_limit_mail_date = '${curr_date}' and attestation.a_id = details.service_id  UNION SELECT apostille.process_limit_mail_date,apostille.a_type,apostille.a_id,customer.* FROM apostille,customer,details WHERE apostille.c_id = customer.c_id and details.service_type =17 and (details.status_id = 21 or details.status_id = 273 ) and apostille.deleted=0 and apostille.process_limit_mail_date ='${curr_date}' and apostille.a_id = details.service_id UNION SELECT translation.process_limit_mail_date,translation.a_type,translation.a_id,customer.* FROM translation,customer,details WHERE translation.c_id = customer.c_id and details.service_type =20 and (details.status_id = 21 or details.status_id = 273 ) and translation.deleted=0 and translation.process_limit_mail_date = '${curr_date}' and translation.a_id = details.service_id  UNION SELECT visa.process_limit_mail_date,visa.v_type as a_type,visa.v_id as a_id,customer.* FROM visa,customer,details WHERE visa.c_id = customer.c_id and details.service_type =8 and (details.status_id = 21 or details.status_id = 273 ) and visa.deleted=0 and visa.process_limit_mail_date = '${curr_date}' and visa.v_id = details.service_id `;
    con.query(sql1, async function (err, results) {
      if (err) {
        console.log(err);
        console.log("Something went wrong");
      } else {
        if (results.length > 0) {
          results.map(async (data, index) => {
            let day = await getProcessLimitDate({
              a_type: data.a_type,
            });
            let date_ob = moment(
              data.process_limit_mail_date,
              "DD-MM-YYYY"
            ).format("YYYY-MM-DD");
            let date = new Date(date_ob);
            date.setDate(date.getDate() + day.process_limit_days);
            let pdate = moment(date).format("DD-MM-YYYY");

            let sql2 = "";
            if (data.c_s_type == 10) {
              sql2 = `Update attestation SET process_limit_mail_date='${pdate}' where a_id=${data.a_id}`;
            } else if (data.c_s_type == 17) {
              sql2 += `Update apostille SET process_limit_mail_date='${pdate}' where a_id=${data.a_id} `;
            } else if (data.c_s_type == 20) {
              sql2 += `Update translation SET process_limit_mail_date='${pdate}' where a_id=${data.a_id} `;
            } else {
              sql2 += `Update visa SET process_limit_mail_date='${pdate}' where v_id =${data.a_id}`;
            }

            con.query(sql2, function (err2, result2) {
              if (err2) {
                console.log(err2);
                console.log("Something went to wrong");
              } else {
                if (result2.affectedRows > 0) {
                  console.log("mail sent successfully");
                }
              }
            });
          });
        } else {
          console.log("There is no data Found....");
        }
      }
    });
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function insertTarget(data) {
  try {
    sql = `SELECT * FROM target WHERE month="${data.month}" and u_id=${data.u_id}`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({ status: 0, message: "Already Exists" });
          } else {
            sql1 = `INSERT INTO target (month,u_id,t_target) VALUES ("${data.month}",${data.u_id},${data.t_target})`;
            con.query(sql1, function (err, result) {
              if (err) {
                console.log(err);
                resolve({ status: 0, message: "Something went to wrong" });
              } else {
                if (result.affectedRows > 0) {
                  resolve({
                    status: 1,
                    message: "Target Inserted Successfully",
                  });
                }
              }
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function getTarget() {
  try {
    sql = `SELECT *,(row_number() over ( order by target.t_id DESC) ) AS row_no,(SELECT u_name FROM users WHERE users.u_id=target.u_id)AS u_name FROM target ORDER BY t_id DESC`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              data: result,
            });
          } else {
            resolve({
              status: 1,
              data: [],
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function updateTarget(data) {
  try {
    sql = `UPDATE target SET month = "${data.month}",t_target = "${data.t_target}"  WHERE t_id  = ${data.t_id}`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.affectedRows > 0) {
            resolve({
              status: 1,
              message: "Target Updated Successfully",
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function userTargetReport(data) {
  try {
    // sql = `SELECT
    // DATE_FORMAT(STR_TO_DATE(elead.convert_date,'%d-%m-%Y'), "%m-%Y") as month,
    // elead.l_allocate_to as user_id,
    // (select target.t_target FROM target where target.u_id = ${data.id} AND target.month = DATE_FORMAT(STR_TO_DATE(elead.convert_date,'%d-%m-%Y'), "%m-%Y")) as target,
    // COUNT(elead.lead_id) as complete FROM elead where convert_status=1 AND  elead.l_allocate_to = ${data.id} GROUP by DATE_FORMAT(STR_TO_DATE(elead.convert_date,'%d-%m-%Y'), "%m-%Y")
    // UNION
    // select target.month as month, target.u_id as user_id, target.t_target as target ,
    // (SELECT COUNT(elead.lead_id  ) FROM elead WHERE convert_status=1 AND elead.l_allocate_to=${data.id} AND DATE_FORMAT(STR_TO_DATE(elead.convert_date,'%d-%m-%Y'), "%m-%Y") =target.month)as complete
    // from target WHERE target.u_id = ${data.id} ORDER BY month DESC`;

    // sql = `
    // select target.month as month, target.u_id as user_id, target.t_target as target,
    // (SELECT COUNT(customer.c_id) FROM customer WHERE  (customer.created_id = ${data.id} OR customer.marketing_user = ${data.id}) AND DATE_FORMAT(STR_TO_DATE(customer.c_date,'%d-%m-%Y'), "%m-%Y") = DATE_FORMAT(STR_TO_DATE(target.month,"%m-%Y"), "%m-%Y"))as complete
    // from target WHERE target.u_id = ${data.id} ORDER BY month DESC;`;

    sql = `
    Select target.month as month, target.u_id as user_id, target.t_target as target,(Select COUNT(customer.created_id) from customer left join payment on payment.c_id = customer.c_id AND payment.payment_id IN (
      SELECT MAX(payment_id)
      FROM payment
      GROUP BY c_id
  )  where payment.due_amt = 0 AND DATE_FORMAT(customer.created_timestamp, "%m-%Y") = target.month AND customer.target_count = 1 AND customer.deleted = 0 AND customer.is_block = 1 AND customer.is_cancel = 0 AND (customer.created_id = ${data.id} OR customer.marketing_user =${data.id}))as complete from target WHERE target.u_id =${data.id} ORDER BY month DESC;`;
    let finalData = [];
    let response = await new Promise((resolve, reject) => {
      con.query(sql, async function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            for (let i = 0; i < result.length; i++) {
              allData = `Select customer.tracking_id from  customer left join payment on payment.c_id = customer.c_id AND payment.payment_id IN (
              SELECT MAX(payment_id)
              FROM payment
              GROUP BY c_id
            )  WHERE payment.due_amt = 0 AND DATE_FORMAT(customer.created_timestamp, "%m-%Y") = '${result[i].month}' AND customer.target_count = 1 AND customer.deleted = 0 AND customer.is_block = 1 AND customer.is_cancel = 0 AND (customer.created_id = ${data.id} OR customer.marketing_user =${data.id})`;
              let resp = await new Promise((resolve, reject) => {
                con.query(allData, function (err, res) {
                  if (err) {
                    console.log(err);
                    resolve({ status: 0, message: "Something went to wrong" });
                  } else {
                    if (res.length > 0) {
                      finalData.push({
                        ...result[i],
                        tracking_id: res,
                      });
                      resolve({
                        status: 1,
                        data: finalData,
                      });
                    } else {
                      finalData.push({
                        ...result[i],
                        tracking_id: [],
                      });
                      resolve({
                        status: 1,
                        data: finalData,
                      });
                    }
                  }
                });
              });
            }
            resolve({
              status: 1,
              data: finalData,
            });
          } else {
            resolve({
              status: 0,
              data: [],
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function adminAllocateReport(data) {
  try {
    let sql = `SELECT DATE_FORMAT(STR_TO_DATE(elead.l_date,'%d-%m-%Y'), "%m-%Y") AS month,COUNT(elead.lead_id) AS count FROM elead where elead.l_created_by = 1 and elead.deleted = 0 `;

    if (
      typeof data.branch_name != "undefined" &&
      data.branch_name != "" &&
      data.branch_name != 0
    ) {
      sql += ` and elead.l_branch_id=${data.branch_name}`;
    }
    if (
      typeof data.u_name != "undefined" &&
      data.u_name != "" &&
      data.u_name != 0
    ) {
      sql += ` and elead.l_allocate_to = ${data.u_name}`;
    }
    sql += ` GROUP BY
          MONTH(STR_TO_DATE(elead.l_date,'%d-%m-%Y')),
          YEAR(STR_TO_DATE(elead.l_date,'%d-%m-%Y'))`;

    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              data: result,
            });
          } else {
            resolve({
              status: 0,
              data: [],
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}
//1503
async function gettotalinvoice(data) {
  try {
    if (data.user_type == 0) {
      if (data.status == 1) {
        sql = `SELECT COUNT(*) as total_invoice,customer.* FROM customer WHERE customer.deleted=0 AND customer.is_block = 1 and customer.is_cancel=0`;
        if (typeof data.i_branch_id != "undefined") {
          sql += ` and customer.branch_id=${data.i_branch_id}`;
        }
        if (
          typeof data.allocate_id != "undefined" &&
          data.allocate_id != 0 &&
          data.allocate_id != -1
        ) {
          sql += ` and customer.u_id=${data.allocate_id}`;
        }
        if (data.s_date != undefined && data.e_date != undefined) {
          sql += ` and STR_TO_DATE(customer.c_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}','%d-%m-%Y') and STR_TO_DATE(customer.c_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}','%d-%m-%Y')`;
        }
        if (typeof data.g_val != "undefined") {
          sql += ` and customer.c_tax=${data.g_val}`;
        }
        sql += ` GROUP by c_date`;
      } else if (data.status == 2) {
        sql = `SELECT COUNT(*) as total_invoice,customer.* FROM payment,customer WHERE 
        payment.c_id=customer.c_id AND customer.deleted=0 AND customer.is_block = 1 and customer.is_cancel=0 AND payment.due_amt!=0`;
        if (typeof data.i_branch_id != "undefined") {
          sql += ` and customer.branch_id=${data.i_branch_id}`;
        }
        if (
          typeof data.allocate_id != "undefined" &&
          data.allocate_id != 0 &&
          data.allocate_id != -1
        ) {
          sql += ` and customer.u_id=${data.allocate_id}`;
        }
        if (data.s_date != undefined && data.e_date != undefined) {
          sql += ` and STR_TO_DATE(customer.c_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}','%d-%m-%Y') and STR_TO_DATE(customer.c_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}','%d-%m-%Y')`;
        }
        if (typeof data.g_val != "undefined") {
          sql += ` and customer.c_tax=${data.g_val}`;
        }
        sql += ` AND payment_id IN (SELECT max(payment_id) FROM payment GROUP by c_id) GROUP BY c_date`;
      } else if (data.status == 3) {
        sql = `SELECT COUNT(*) as total_invoice,customer.* FROM payment,customer WHERE 
        payment.c_id=customer.c_id AND customer.deleted=0 AND customer.is_block = 1 and customer.is_cancel=0 AND payment.due_amt=0`;
        if (typeof data.i_branch_id != "undefined") {
          sql += ` and customer.branch_id=${data.i_branch_id}`;
        }
        if (
          typeof data.allocate_id != "undefined" &&
          data.allocate_id != 0 &&
          data.allocate_id != -1
        ) {
          sql += ` and customer.u_id=${data.allocate_id}`;
        }
        if (data.s_date != undefined && data.e_date != undefined) {
          sql += ` and STR_TO_DATE(customer.c_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}','%d-%m-%Y') and STR_TO_DATE(customer.c_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}','%d-%m-%Y')`;
        }
        if (typeof data.g_val != "undefined") {
          sql += ` and customer.c_tax=${data.g_val}`;
        }
        sql += ` AND payment_id IN (SELECT max(payment_id) FROM payment GROUP by c_id) GROUP BY c_date`;
      }
    } else if (data.user_type == 1) {
      let sqla = "";
      if (
        typeof data.allocate_id != "undefined" &&
        data.allocate_id != 0 &&
        data.allocate_id != -1
      ) {
        sqla += ` and customer.u_id=${data.allocate_id}`;
      }
      if (data.s_date != undefined && data.e_date != undefined) {
        sqla += ` and STR_TO_DATE(customer.c_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}','%d-%m-%Y') and STR_TO_DATE(customer.c_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}','%d-%m-%Y')`;
      }
      if (typeof data.g_val != "undefined") {
        sqla += ` and customer.c_tax=${data.g_val}`;
      }
      if (data.status == 1) {
        sql = `SELECT COUNT(*) as total_invoice,customer.* FROM customer WHERE customer.deleted=0 AND customer.is_block = 1 and customer.is_cancel=0  and customer.branch_id=${data.login_branch_id} ${sqla} GROUP by c_date`;
      } else if (data.status == 2) {
        sql = `SELECT COUNT(*) as total_invoice,customer.* FROM payment,customer WHERE 
        payment.c_id=customer.c_id AND customer.deleted=0 AND customer.is_block = 1 and customer.is_cancel=0 AND payment.due_amt!=0 and customer.branch_id=${data.login_branch_id} ${sqla} AND payment_id IN (SELECT max(payment_id) FROM payment GROUP by c_id) GROUP BY c_date`;
      } else if (data.status == 3) {
        sql = `SELECT COUNT(*) as total_invoice,customer.* FROM payment,customer WHERE 
        payment.c_id=customer.c_id AND customer.deleted=0 AND customer.is_block = 1 and customer.is_cancel=0 AND payment.due_amt=0 and customer.branch_id=${data.login_branch_id} ${sqla} AND payment_id IN (SELECT max(payment_id) FROM payment GROUP by c_id) GROUP BY c_date`;
      }
    } else if (data.user_type == 3) {
      let sqla = "";
      if (data.s_date != undefined && data.e_date != undefined) {
        sqla += ` and STR_TO_DATE(customer.c_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}','%d-%m-%Y') and STR_TO_DATE(customer.c_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}','%d-%m-%Y')`;
      }
      if (typeof data.g_val != "undefined") {
        sqla += ` and customer.c_tax=${data.g_val}`;
      }
      if (data.status == 1) {
        sql = `SELECT COUNT(*) as total_invoice,customer.* FROM customer WHERE customer.deleted=0 AND customer.is_block = 1 and customer.is_cancel=0 and customer.u_id=${data.u_id} ${sqla} GROUP by c_date`;
      } else if (data.status == 2) {
        sql = `SELECT COUNT(*) as total_invoice,customer.* FROM payment,customer WHERE 
        payment.c_id=customer.c_id AND customer.deleted=0 AND customer.is_block = 1 and customer.is_cancel=0 AND payment.due_amt!=0 and customer.u_id=${data.u_id} ${sqla} AND payment_id IN (SELECT max(payment_id) FROM payment GROUP by c_id) GROUP BY c_date`;
      } else if (data.status == 3) {
        sql = `SELECT COUNT(*) as total_invoice,customer.* FROM payment,customer WHERE 
        payment.c_id=customer.c_id AND customer.deleted=0 AND customer.is_block = 1 and customer.is_cancel=0 AND payment.due_amt=0 and customer.u_id=${data.u_id} ${sqla} AND payment_id IN (SELECT max(payment_id) FROM payment GROUP by c_id) GROUP BY c_date`;
      }
    }
    cust = [];
    applicate_list = [];
    if (data.user_type == 0) {
      if (data.status == 1) {
        sql2 = `SELECT *,(SELECT embassy_fees FROM payment WHERE customer.c_id = payment.c_id  ORDER by payment.payment_id DESC LIMIT 1)as embassy_fees FROM customer WHERE customer.deleted = 0  AND customer.is_block = 1 and customer.is_cancel=0 and  STR_TO_DATE(customer.c_date,"%d-%m-%y")>=STR_TO_DATE('${data.s_date}',"%d-%m-%y") and STR_TO_DATE(customer.c_date,"%d-%m-%y")<=STR_TO_DATE('${data.e_date}',"%d-%m-%y")`;
        if (typeof data.i_branch_id != "undefined") {
          sql2 += ` and customer.branch_id=${data.i_branch_id}`;
        }
        if (
          typeof data.allocate_id != "undefined" &&
          data.allocate_id != 0 &&
          data.allocate_id != -1
        ) {
          sql2 += ` and customer.u_id=${data.allocate_id}`;
        }
        if (typeof data.g_val != "undefined") {
          sql2 += ` and customer.c_tax=${data.g_val}`;
        }
      } else if (data.status == 2) {
        sql2 = `SELECT *,(SELECT embassy_fees FROM payment WHERE customer.c_id = payment.c_id  ORDER by payment.payment_id DESC LIMIT 1)as embassy_fees FROM customer,payment WHERE payment.c_id=customer.c_id and customer.deleted = 0  AND customer.is_block = 1 and customer.is_cancel=0 AND payment.due_amt!=0 and  STR_TO_DATE(customer.c_date,"%d-%m-%y")>=STR_TO_DATE('${data.s_date}',"%d-%m-%y") and STR_TO_DATE(customer.c_date,"%d-%m-%y")<=STR_TO_DATE('${data.e_date}',"%d-%m-%y")`;
        if (typeof data.i_branch_id != "undefined") {
          sql2 += ` and customer.branch_id=${data.i_branch_id}`;
        }
        if (
          typeof data.allocate_id != "undefined" &&
          data.allocate_id != 0 &&
          data.allocate_id != -1
        ) {
          sql2 += ` and customer.u_id=${data.allocate_id}`;
        }
        if (typeof data.g_val != "undefined") {
          sql2 += ` and customer.c_tax=${data.g_val}`;
        }
        sql2 += ` AND payment_id IN (SELECT max(payment_id) FROM payment GROUP by c_id)`;
      } else if (data.status == 3) {
        sql2 = `SELECT *,(SELECT embassy_fees FROM payment WHERE customer.c_id = payment.c_id  ORDER by payment.payment_id DESC LIMIT 1)as embassy_fees FROM customer,payment WHERE payment.c_id=customer.c_id and customer.deleted = 0  AND customer.is_block = 1 and customer.is_cancel=0 AND payment.due_amt=0 and  STR_TO_DATE(customer.c_date,"%d-%m-%y")>=STR_TO_DATE('${data.s_date}',"%d-%m-%y") and STR_TO_DATE(customer.c_date,"%d-%m-%y")<=STR_TO_DATE('${data.e_date}',"%d-%m-%y")`;
        if (typeof data.i_branch_id != "undefined") {
          sql2 += ` and customer.branch_id=${data.i_branch_id}`;
        }
        if (
          typeof data.allocate_id != "undefined" &&
          data.allocate_id != 0 &&
          data.allocate_id != -1
        ) {
          sql2 += ` and customer.u_id=${data.allocate_id}`;
        }
        if (typeof data.g_val != "undefined") {
          sql2 += ` and customer.c_tax=${data.g_val}`;
        }
        sql2 += ` AND payment_id IN (SELECT max(payment_id) FROM payment GROUP by c_id)`;
      }
    } else if (data.user_type == 1) {
      let sqla = "";
      if (
        typeof data.allocate_id != "undefined" &&
        data.allocate_id != 0 &&
        data.allocate_id != -1
      ) {
        sqla += ` and customer.u_id=${data.allocate_id}`;
      }
      if (typeof data.g_val != "undefined") {
        sqla += ` and customer.c_tax=${data.g_val}`;
      }
      if (data.status == 1) {
        sql2 = `SELECT *,(SELECT embassy_fees FROM payment WHERE customer.c_id = payment.c_id  ORDER by payment.payment_id DESC LIMIT 1)as embassy_fees FROM customer WHERE customer.deleted = 0  AND customer.is_block = 1 and customer.is_cancel=0 and customer.branch_id=${data.login_branch_id} ${sqla} and  STR_TO_DATE(customer.c_date,"%d-%m-%y")>=STR_TO_DATE('${data.s_date}',"%d-%m-%y") and STR_TO_DATE(customer.c_date,"%d-%m-%y")<=STR_TO_DATE('${data.e_date}',"%d-%m-%y")`;
      } else if (data.status == 2) {
        sql2 = `SELECT *,(SELECT embassy_fees FROM payment WHERE customer.c_id = payment.c_id  ORDER by payment.payment_id DESC LIMIT 1)as embassy_fees FROM customer,payment WHERE payment.c_id=customer.c_id and customer.deleted = 0  AND customer.is_block = 1 and  customer.is_cancel=0 AND payment.due_amt!=0 and customer.branch_id=${data.login_branch_id} ${sqla} and  STR_TO_DATE(customer.c_date,"%d-%m-%y")>=STR_TO_DATE('${data.s_date}',"%d-%m-%y") and STR_TO_DATE(customer.c_date,"%d-%m-%y")<=STR_TO_DATE('${data.e_date}',"%d-%m-%y") AND payment_id IN (SELECT max(payment_id) FROM payment GROUP by c_id)`;
      } else if (data.status == 3) {
        sql2 = `SELECT *,(SELECT embassy_fees FROM payment WHERE customer.c_id = payment.c_id  ORDER by payment.payment_id DESC LIMIT 1)as embassy_fees FROM customer,payment WHERE payment.c_id=customer.c_id and customer.deleted = 0  AND customer.is_block = 1 and  customer.is_cancel=0 AND payment.due_amt=0 and customer.branch_id=${data.login_branch_id} ${sqla} and  STR_TO_DATE(customer.c_date,"%d-%m-%y")>=STR_TO_DATE('${data.s_date}',"%d-%m-%y") and STR_TO_DATE(customer.c_date,"%d-%m-%y")<=STR_TO_DATE('${data.e_date}',"%d-%m-%y") AND payment_id IN (SELECT max(payment_id) FROM payment GROUP by c_id)`;
      }
    } else if (data.user_type == 3) {
      let sqla = "";
      if (typeof data.g_val != "undefined") {
        sqla += ` and customer.c_tax=${data.g_val}`;
      }
      if (data.status == 1) {
        sql2 = `SELECT *,(SELECT embassy_fees FROM payment WHERE customer.c_id = payment.c_id  ORDER by payment.payment_id DESC LIMIT 1)as embassy_fees FROM customer WHERE customer.deleted = 0  AND customer.is_block = 1 and  customer.is_cancel=0 and customer.u_id=${data.u_id} ${sqla} and STR_TO_DATE(customer.c_date,"%d-%m-%y")>=STR_TO_DATE('${data.s_date}',"%d-%m-%y") and STR_TO_DATE(customer.c_date,"%d-%m-%y")<=STR_TO_DATE('${data.e_date}',"%d-%m-%y")`;
      } else if (data.status == 2) {
        sql2 = `SELECT *,(SELECT embassy_fees FROM payment WHERE customer.c_id = payment.c_id  ORDER by payment.payment_id DESC LIMIT 1)as embassy_fees FROM customer,payment WHERE payment.c_id=customer.c_id and customer.deleted = 0  AND customer.is_block = 1 and  customer.is_cancel=0 AND payment.due_amt!=0 and customer.u_id=${data.u_id} ${sqla} and  STR_TO_DATE(customer.c_date,"%d-%m-%y")>=STR_TO_DATE('${data.s_date}',"%d-%m-%y") and STR_TO_DATE(customer.c_date,"%d-%m-%y")<=STR_TO_DATE('${data.e_date}',"%d-%m-%y") AND payment_id IN (SELECT max(payment_id) FROM payment GROUP by c_id)`;
      } else if (data.status == 3) {
        sql2 = `SELECT *,(SELECT embassy_fees FROM payment WHERE customer.c_id = payment.c_id  ORDER by payment.payment_id DESC LIMIT 1)as embassy_fees FROM customer,payment WHERE payment.c_id=customer.c_id and customer.deleted = 0  AND customer.is_block = 1 and  customer.is_cancel=0 AND payment.due_amt=0 and customer.u_id=${data.u_id} ${sqla} and  STR_TO_DATE(customer.c_date,"%d-%m-%y")>=STR_TO_DATE('${data.s_date}',"%d-%m-%y") and STR_TO_DATE(customer.c_date,"%d-%m-%y")<=STR_TO_DATE('${data.e_date}',"%d-%m-%y") AND payment_id IN (SELECT max(payment_id) FROM payment GROUP by c_id)`;
      }
    }
    let response = await new Promise((resolve, reject) => {
      con.query(sql2, async function (err2, result2) {
        if (err2) {
          console.log(err2);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result2.length > 0) {
            for (let i = 0; i < result2.length; i += 1) {
              cust.push({
                customer: result2[i],
                service_type: result2[i].c_s_type,
                c_id: result2[i].c_id,
                applicates: {},
              });
              applicate_list.push({
                customer: result2[i],
                service_type: result2[i].c_s_type,
                c_id: result2[i].c_id,
                applicates: {},
              });
            }
          } else {
            resolve({
              status: 0,
              applicate_data: [],
            });
          }
          Object.keys(cust).map((k) => {
            if (cust[k].service_type == 10) {
              sql3 = `Select * FROM attestation  WHERE c_id = ${cust[k].c_id} and deleted = 0`;
            } else if (cust[k].service_type == 8) {
              sql3 = `Select * FROM visa  WHERE c_id = ${cust[k].c_id} and deleted = 0`;
            } else if (cust[k].service_type == 17) {
              sql3 = `Select * FROM apostille  WHERE c_id = ${cust[k].c_id} and deleted = 0`;
            } else {
              sql3 = `Select * FROM translation  WHERE c_id = ${cust[k].c_id} and deleted = 0`;
            }
            con.query(sql3, async function (errsql1, sql1res) {
              if (errsql1) {
                console.log(errsql1);
                resolve({ status: 0, message: "Something went to wrong" });
              } else {
                if (sql1res.length > 0) {
                  let sql4 = "";
                  let cust_data = [];
                  Object.keys(sql1res).map(async (ak) => {
                    let responsee1 = await new Promise(
                      async (resolve, reject) => {
                        let sum = 0;
                        let actual_amount = 0;
                        let profit = 0;

                        if (
                          cust[k].service_type == 10 ||
                          cust[k].service_type == 17 ||
                          cust[k].service_type == 20
                        ) {
                          let certificate =
                            sql1res[ak].a_certificate.split(",");
                          certificate.map(async (certi) => {
                            sql4 += `SELECT s_amount,actual_price,profit FROM serviceprice WHERE service = ${cust[k].service_type}  AND country = ${sql1res[ak].a_country} AND s_type = ${sql1res[ak].a_type}  AND deleted = 0;`;
                          });
                          var newobj = {};
                          let responsee = await new Promise(
                            (resolve, reject) => {
                              con.query(sql4, async function (err2, result23) {
                                if (err2) {
                                  console.log(err2);
                                  resolve({
                                    status: 0,
                                    message: "Something went to wrong",
                                  });
                                } else {
                                  if (result23 == undefined) {
                                    resolve({
                                      sum: 0,
                                      cust: (newobj = {
                                        ...newobj,
                                        [cust[k].customer.c_date]: {
                                          total_amount: 0,
                                          actual_amount: 0,
                                          profit_amount: 0,
                                          c_date: cust[k].customer.c_date,
                                        },
                                      }),
                                    });
                                  } else {
                                    if (result23.length > 0) {
                                      await result23.map(async (res) => {
                                        if (res.length == 0) {
                                          sum = sum + parseInt(0);
                                          actual_amount =
                                            actual_amount + parseInt(0);
                                          profit = profit + parseInt(0);
                                        } else if (res[0]) {
                                          sum = sum + parseInt(res[0].s_amount);
                                          actual_amount =
                                            actual_amount +
                                            parseInt(res[0].actual_price);
                                          profit =
                                            profit + parseInt(res[0].profit);
                                        } else {
                                          sum = sum + parseInt(res.s_amount);
                                          actual_amount =
                                            actual_amount +
                                            parseInt(res.actual_price);
                                          profit =
                                            profit + parseInt(res.profit);
                                        }
                                      });
                                      newobj = {
                                        ...newobj,
                                        [cust[k].customer.c_date]: {
                                          total_amount: sum,
                                          actual_amount: actual_amount,
                                          profit_amount: profit,
                                          c_date: cust[k].customer.c_date,
                                        },
                                      };
                                    } else {
                                      newobj = {
                                        ...newobj,
                                        [cust[k].customer.c_date]: {
                                          total_amount: 0,
                                          actual_amount: 0,
                                          profit_amount: 0,
                                          c_date: cust[k].customer.c_date,
                                        },
                                      };
                                    }
                                  }

                                  resolve({
                                    sum: sum,
                                    cust: newobj,
                                  });
                                }
                              });
                            }
                          );
                          cust_data.push(responsee.cust);
                        } else {
                          let country = sql1res[ak].v_country.split(",");
                          country.map((coun) => {
                            sql4 += `SELECT s_amount,actual_price,profit FROM serviceprice WHERE service = ${cust[k].service_type}  AND country = ${coun} AND s_type = ${sql1res[ak].v_type} AND deleted = 0;`;
                          });
                          let responsee = await new Promise(
                            (resolve, reject) => {
                              con.query(sql4, async function (err2, result2) {
                                if (err2) {
                                  console.log(err2);
                                  resolve({
                                    status: 0,
                                    message: "Something went to wrong",
                                  });
                                } else {
                                  if (result2 == undefined) {
                                    resolve({
                                      sum: 0,
                                      cust: (newobj = {
                                        ...newobj,
                                        [cust[k].customer.c_date]: {
                                          total_amount: 0,
                                          actual_amount: 0,
                                          profit_amount: 0,
                                          c_date: cust[k].customer.c_date,
                                        },
                                      }),
                                    });
                                  } else {
                                    if (result2.length > 0) {
                                      await result2.map(async (res) => {
                                        if (res.length == 0) {
                                          sum = sum + parseInt(0);
                                          actual_amount =
                                            actual_amount + parseInt(0);
                                          profit = profit + parseInt(0);
                                        } else if (res[0]) {
                                          sum = sum + parseInt(res[0].s_amount);
                                          actual_amount =
                                            actual_amount +
                                            parseInt(res[0].actual_price);
                                          profit =
                                            profit + parseInt(res[0].profit);
                                        } else {
                                          sum = sum + parseInt(res.s_amount);
                                          actual_amount =
                                            actual_amount +
                                            parseInt(res.actual_price);
                                          profit =
                                            profit + parseInt(res.profit);
                                        }
                                      });
                                      newobj = {
                                        ...newobj,
                                        [cust[k].customer.c_date]: {
                                          total_amount: sum,
                                          actual_amount: actual_amount,
                                          profit_amount: profit,
                                          c_date: cust[k].customer.c_date,
                                        },
                                      };
                                    } else {
                                      newobj = {
                                        ...newobj,
                                        [cust[k].customer.c_date]: {
                                          total_amount: 0,
                                          actual_amount: 0,
                                          profit_amount: 0,
                                          c_date: cust[k].customer.c_date,
                                        },
                                      };
                                    }
                                  }
                                  resolve({
                                    sum: sum,
                                    cust: newobj,
                                  });
                                }
                              });
                            }
                          );
                          cust_data.push(responsee.cust);
                        }
                        resolve({
                          cust_data: cust_data,
                        });
                      }
                    );
                    applicate_list[k].applicates = responsee1.cust_data;
                    if (k == cust.length - 1) {
                      resolve({
                        status: 1,
                        applicate_data: applicate_list,
                      });
                    }
                  });
                }
              }
            });
          });
        }
      });
    });
    let response2 = await new Promise((resolve, reject) => {
      con.query(sql, function (err, sresult) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (sresult.length > 0) {
            resolve({
              status: 1,
              data: sresult,
              applicate_data: response.applicate_data,
            });
          } else {
            resolve({
              status: 1,
              data: [],
            });
          }
        }
      });
    });
    return response2;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function approvedpayment(data) {
  try {
    sql2 = `SELECT c_email,c_s_type,c_prefix,c_tax,c_name,created_id FROM customer WHERE c_id = ${data.c_id} AND deleted = 0;`;
    console.log("sql2", sql2);
    let response2 = await new Promise((resolve, reject) => {
      con.query(sql2, async function (err, results) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (results.length > 0) {
            resolve({
              status: 1,
              result: results[0].c_email,
              type: results[0].c_s_type,
              c_tax: results[0].c_tax,
              c_name: results[0].c_name,
              c_prefix: results[0].c_prefix,
              created_id: results[0].created_id,
            });
          }
        }
      });
    });

    sql123 = `SELECT *,(SELECT c_s_type FROM customer WHERE customer.c_id = payment.c_id)as c_s_type,(SELECT c_state FROM customer WHERE customer.c_id = payment.c_id)as c_state ,(SELECT c_name FROM customer WHERE customer.c_id = payment.c_id)as c_name,(SELECT c_prefix FROM customer WHERE customer.c_id = payment.c_id)as c_prefix,(SELECT branch_id FROM customer WHERE customer.c_id = payment.c_id)as branch_id,(SELECT is_draft_taken FROM draft_payment WHERE draft_payment.deleted=0 and c_id=${data.c_id} ORDER by d_p_id DESC LIMIT 1)as is_drafttds_taken FROM payment WHERE c_id = ${data.c_id} AND deleted=0  ORDER BY payment_id DESC LIMIT 1;`;
    let response123 = await new Promise((resolve, reject) => {
      con.query(sql123, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            result.forEach(function (result) {
              resolve({
                status: 1,
                c_s_type: result.c_s_type,
                payment: result,
              });
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    //GRISHMA-1402
    sql = `SELECT paid_amt,payment.* FROM payment WHERE c_id = ${data.c_id} AND deleted=0 ORDER BY payment_id DESC LIMIT 1;`;

    let response = await new Promise((resolve, reject) => {
      con.query(sql, async function (err, results) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (results.length > 0) {
            results.forEach(function (result) {
              resolve({
                status: 1,
                result: result,
                paid_amt: result.paid_amt,
                payment_id: result.payment_id,
              });
            });
          }
        }
      });
    });
    //grishma
    if (response.paid_amt == 0) {
      sql1 = `UPDATE payment SET payment_date='${data.payment_date}',mode_id=${data.mode_id
        },paid_amt= '${data.receive_amt}',due_amt='${parseInt(response123.payment.due_amt) - parseInt(data.receive_amt)
        }',receive_amt='${data.receive_amt}',u_id =${data.u_id},chk_dd_no='${data.chk_dd_no != null ? data.chk_dd_no : ""
        }',chk_dd_date='${data.chk_dd_date != null ? data.chk_dd_date : ""
        }',bank_name='${data.bank_name != "null" ? data.bank_name : ""
        }',created_id=${data.created_id}  WHERE payment_id=${response.payment_id
        }  AND deleted = 0`;
    } else {
      lastpayment = `SELECT p_receipt_no FROM payment WHERE (receive_amt!='' AND receive_amt!=0) order by payment_id  DESC limit 1`;
      const rlast2 = new Date().getFullYear().toString().substring(2);
      const rlast2Num = Number(rlast2);
      var rtoday = new Date();
      let financialYear;
      if (rtoday.getMonth() + 1 <= 3) {
        financialYear = rlast2Num - 1 + "-" + rlast2Num;
      } else {
        financialYear = rlast2Num + "-" + (rlast2Num + 1);
      }
      let rec_no = 0;
      let response11 = await new Promise((resolve, reject) => {
        con.query(lastpayment, function (err1, result1) {
          if (err1) {
            console.log(err1);
            resolve({ status: 0, message: "Something went to wrong" });
          } else {
            if (result1.length > 0 && result1[0].p_receipt_no != 0) {
              let rno = result1[0].p_receipt_no;
              let n_rno = rno.split("_");
              if (financialYear == n_rno[0]) {
                rec_no = financialYear + "_" + ++n_rno[1];
              } else {
                rec_no = financialYear + "_" + 1;
              }
            } else {
              rec_no = financialYear + "_" + 1;
            }
            resolve({
              status: 1,
              result: rec_no,
            });
          }
        });
      });
      //GRISHMA1402

      paymentrecord = `SELECT * FROM payment WHERE c_id = ${data.c_id} and deleted = 0 ORDER BY payment_id DESC limit 1;`;
      let payment = await new Promise((resolve, reject) => {
        con.query(paymentrecord, async function (err, result) {
          if (err) {
            console.log(err);
            resolve({ status: 0, message: "Customer Not Updated" });
          } else {
            if (result.length > 0) {
              resolve({
                status: 1,
                result: result[0],
                result1: result[0].payment_id,
              });
            } else {
              resolve({
                status: 0,
                message: "Something went to wrong",
              });
            }
          }
        });
      });

      // let rec_no = parseInt(response11.result) + 1;
      sql1 = `INSERT INTO payment(payment_date,c_id,total_amount,extra_amt,courier,service_tax,mode_id,payment_desc,chk_dd_no,chk_dd_date,embassy_fees,dis_amt,net_amt,paid_amt,due_amt,sgst,cgst,igst,created_id,receive_amt,u_id,is_tds,tds_amt,invoice_no,tracking_id,bank_name,coupon_amt,exp_charge,c_tax,p_receipt_no,created_branch_id,is_draft_taken,payment_refund) VALUES ('${data.payment_date
        }',${data.c_id},'${payment.result.total_amount}','${payment.result.extra_amt
        }',
      '${payment.result.courier}','${payment.result.service_tax}',${data.mode_id
        },'${payment.result.payment_desc != null ? payment.result.payment_desc : ""
        }','${data.chk_dd_no != null ? data.chk_dd_no : ""}','${data.chk_dd_date
        }','${payment.result.embassy_fees}','${payment.result.dis_amt}','${payment.result.net_amt
        }','${parseInt(payment.result.paid_amt) + parseInt(data.receive_amt)}','${parseInt(payment.result.due_amt) - parseInt(data.receive_amt)
        }','${payment.result.sgst}','${payment.result.cgst}','${payment.result.igst
        }',${data.created_id},'${data.receive_amt}',${data.u_id},${payment.result.is_tds
        },'${payment.result.tds_amt}','${payment.result.invoice_no
        }','${mysql_real_escape_string(payment.result.tracking_id)}','${data.bank_name != null ? data.bank_name : ""
        }','${payment.result.coupon_amt}','${payment.result.exp_charge}','${response2.c_tax
        }','${rec_no}',${data.created_branch_id},${payment.result.is_draft_taken
        },'${payment.result.payment_refund}')`;
    }

    let date_ob = moment(data.payment_date, "DD-MM-YYYY").format("YYYY-MM-DD");
    let date = new Date(date_ob);
    let tdate = moment().format("DD-MM-YYYY");
    date.setDate(date.getDate() + 3);
    let td = date.getDate();
    let response1 = await new Promise((resolve, reject) => {
      con.query(sql1, async function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went wrong" });
        } else {
          if (result.affectedRows > 0) {
            //2303
            // //1003
            // if (response.paid_amt == 0) {
            //   let updatecust = `Update customer SET under_process_date = '${tdate}' where c_id = ${data.c_id} and deleted= 0`;
            //   let resp = await new Promise((resolve, reject) => {
            //     con.query(updatecust, async function (custerr1, custresult1) {
            //       if (custerr1) {
            //         resolve({
            //           status: 0,
            //           message: "something went wrong",
            //         });
            //       }
            //       if (custresult1.affectedRows > 0) {
            //         resolve({
            //           status: 1,
            //           message: "Process Date Changed",
            //         });
            //       } else {
            //         resolve({ status: 0, message: "No data found" });
            //       }
            //     });
            //   });
            // }

            sql7 = `UPDATE draft_payment SET approved_status=1 WHERE  d_p_id=${data.d_p_id}`;
            con.query(sql7, async function (err7, result7) {
              if (err7) {
                console.log(err7);
                resolve({ status: 0, message: "Something went wrong" });
              } else {
                if (result7) {
                  resolve({
                    status: 1,
                    message: "Payment Approved successfully",
                  });
                }
              }
            });

            const isFullPaid = await getpayment({ id: data.c_id });

            let custSql = `SELECT created_id,marketing_user,created_branch_id FROM customer WHERE c_id = ${data.c_id} AND customer.target_count = 1 AND deleted = 0;`;
            let cust_created_id = await new Promise((resolve, reject) => {
              con.query(custSql, async function (err, results) {
                if (err) {
                  console.log(err);
                  resolve({
                    status: 0,
                    message: "Something went to wrong",
                  });
                } else {
                  if (results.length > 0) {
                    resolve({
                      status: 1,
                      created_id: results[0].created_id,
                      marketing_user: results[0].marketing_user,
                      branch_id: results[0].created_branch_id,
                    });
                  } else {
                    resolve({
                      status: 1,
                      created_id: 0,
                      marketing_user: 0,
                      branch_id: 0
                    });
                  }
                }
              });
            });
            console.log(cust_created_id, "dhruvi1");
            if (cust_created_id.created_id != 0) {
              const uCommission = await getUserCommision(
                cust_created_id.created_id
              );
              let u_Commission;
              if (
                cust_created_id.marketing_user != 0 &&
                cust_created_id.marketing_user != null
              ) {
                u_Commission = await getUserCommision(
                  cust_created_id.marketing_user
                );
              }
              const commision_date = moment().format("DD-MM-YYYY");

              if (isFullPaid.payment.due_amt == 0) {
                console.log("iffffff33333333333");
                let sq1 = "";
                sq1 = `INSERT INTO user_commision_payment(u_id,created_id,commision_date,c_amount,c_id,p_u_id,p_branch_id) VALUES(${cust_created_id.created_id
                  },${data.u_id},'${mysql_real_escape_string(commision_date)}',${uCommission.u_commission
                  },${data.c_id},${cust_created_id.created_id},${cust_created_id.branch_id});`;
                if (
                  cust_created_id.marketing_user != 0 &&
                  cust_created_id.marketing_user != null
                ) {
                  console.log("iffffff44444444444444");
                  sq1 += `INSERT INTO user_commision_payment(u_id,created_id,commision_date,c_amount,c_id,p_u_id,p_branch_id) VALUES(${cust_created_id.marketing_user
                    },${data.u_id},'${mysql_real_escape_string(
                      commision_date
                    )}',${u_Commission.u_commission},${data.c_id},${cust_created_id.created_id},${cust_created_id.branch_id});`;
                }
                let res11 = await new Promise((resolve, reject) => {
                  con.query(sq1, function (er, res) {
                    if (er) {
                      console.log(er);
                      resolve({
                        status: 0,
                        message: "Something went to wrong",
                      });
                    } else {
                      if (res.affectedRows > 0) {
                        resolve({
                          status: 1,
                          message: "User commission inserted successfully...",
                        });
                      } else {
                        resolve({
                          status: 0,
                          message: "Something went to wrong",
                        });
                      }
                    }
                  });
                });

                updateamt = `UPDATE users SET u_total_commision=u_total_commision+${uCommission.u_commission}  WHERE u_id=${cust_created_id.created_id};`;

                if (
                  cust_created_id.marketing_user != 0 &&
                  cust_created_id.marketing_user != null
                ) {
                  updateamt += `UPDATE users SET u_total_commision=u_total_commision+${u_Commission.u_commission}  WHERE u_id=${cust_created_id.marketing_user};`;
                }
                let res12 = await new Promise((resolve, reject) => {
                  con.query(updateamt, function (er, res) {
                    if (er) {
                      console.log(er);
                      resolve({
                        status: 0,
                        message: "Something went to wrong",
                      });
                    } else {
                      if (res.affectedRows > 0) {
                        resolve({
                          status: 1,
                          message: "Users commission updated successfully...",
                        });
                      } else {
                        resolve({
                          status: 0,
                          message: "Something went to wrong",
                        });
                      }
                    }
                  });
                });
              }
            }

            // var task = cron.schedule(
            //   `00 00 ${td} * *}`,
            //   async () => {
            //     let date1 = moment(date).format("DD-MM-YYYY");
            //     let curr_date = moment().format("DD-MM-YYYY");
            //     if (date1 == curr_date) {
            //       let senderMailSetting = await sendmessage.getEmailSetting(
            //         data.created_id
            //       );

            //       sqlll = `SELECT u_email FROM users WHERE u_id = ${data.created_id} `;
            //       let ccmail = await new Promise((resolve, reject) => {
            //         con.query(sqlll, async function (err1, result1) {
            //           if (err1) {
            //             console.log(err1);
            //             resolve({
            //               status: 0,
            //               message: "Something went to wrong",
            //             });
            //           } else {
            //             if (result1.length > 0) {
            //               resolve({ status: 1, result: result1[0].u_email });
            //             } else {
            //               resolve({
            //                 status: 0,
            //                 message: "Something went to wrong",
            //               });
            //             }
            //           }
            //         });
            //       });

            //       let message = await sendmessage.getTemplate(3);
            //       if (message.status != 0) {
            //         message.template = message.template.replace(
            //           "{:name:}",
            //           response2.c_prefix + " " + response2.c_name
            //         );
            //         let mess =
            //           (message.header == 1
            //             ? senderMailSetting.email_template_header
            //             : "") +
            //           message.template +
            //           (message.b_d_id != 0
            //             ? message.b_d_id == 1
            //               ? senderMailSetting.gst_bankdetails
            //               : message.b_d_id == 2
            //               ? senderMailSetting.ngst_bankdetails
            //               : message.b_d_id == 3
            //               ? senderMailSetting.general_bankdetails
            //               : ""
            //             : "") +
            //           // (data.created_id == 1
            //           //   ? response2.c_tax == 0
            //           //     ? senderMailSetting.bank_details
            //           //     : senderMailSetting.nongst_bank_details
            //           //   : response2.c_tax == 0
            //           //     ? senderMailSetting.b_bank_details
            //           //     : senderMailSetting.b_nongst_bank_deatils) +
            //           (message.footer == 1
            //             ? senderMailSetting.email_template_footer
            //             : "") +
            //           (message.signature == 1
            //             ? senderMailSetting.email_signature
            //             : "");

            //         CCMailSetting = await sendmessage.getEmailSetting(1);

            //         sendmessagenow = sendmessage.customermessagesend(
            //           senderMailSetting,
            //           response2.result,
            //           mess,
            //           message.subject,
            //           ccmail.result, //CCMailSetting.e_username,  // user mail
            //           ccmail.result, // reply mail
            //           1
            //         );
            //       }
            //       if (message.status != 0 && sendmessagenow.status == 1) {
            //         resolve({
            //           status: 1,
            //           message: "Payment Updated successfully",
            //         });
            //       } else {
            //         resolve({
            //           status: 1,
            //           message:
            //             "Payment Update Without Sending Mail successfully",
            //         });
            //       }
            //     } else {
            //       task.stop();
            //     }
            //   },
            //   {
            //     scheduled: true,
            //   }
            // );

            // task.start();
          } else {
            resolve({ status: 0, message: "Something went to wrong" });
          }
        }
      });
    });
    if (response.paid_amt == 0) {
      if (response2.type == 8) {
        sql2 = `SELECT visa.v_id,details.detail_id FROM visa,details WHERE visa.v_id=details.service_id AND service_type=8 AND visa.deleted=0 AND details.deleted=0 AND visa.c_id=${data.c_id}`;
      } else if (response2.type == 10) {
        sql2 = `SELECT attestation.a_id,details.detail_id FROM attestation,details WHERE attestation.a_id=details.service_id AND service_type=10 AND attestation.deleted=0 AND details.deleted=0 AND attestation.c_id=${data.c_id}`;
      } else if (response2.type == 17) {
        sql2 = `SELECT apostille.a_id,details.detail_id FROM apostille,details WHERE apostille.a_id=details.service_id AND service_type=17 AND apostille.deleted=0 AND details.deleted=0 AND apostille.c_id=${data.c_id}`;
      } else {
        sql2 = `SELECT translation.a_id,details.detail_id FROM translation,details WHERE translation.a_id=details.service_id AND service_type=20 AND translation.deleted=0 AND details.deleted=0 AND translation.c_id=${data.c_id}`;
      }
      let response3 = await new Promise((resolve, reject) => {
        con.query(sql2, async function (err2, result2) {
          if (err2) {
            console.log(err2);
            resolve({ status: 0, message: "Something went to wrong" });
          } else {
            if (result2.length > 0) {
              let record = [];
              result2.forEach((k) => {
                record.push(k.detail_id);
              });
              resolve({
                result: record,
              });
            }
          }
        });
      });
    }
    return response1;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function getdraftreceipt(data) {
  try {
    sql1 = `SELECT user_type FROM users WHERE u_id = ${data.uid} and deleted =0`;

    let response1 = await new Promise((resolve, reject) => {
      con.query(sql1, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            result.forEach(function (result) {
              resolve({
                status: 1,
                user_type: result.user_type,
              });
            });
          } else {
            resolve({
              status: 0,
              user_type: "Something went wrong...",
            });
          }
        }
      });
    });
    // sql = `SELECT *,(SELECT COUNT(*) FROM draft_payment WHERE deleted =0 AND receive_amt != 0 and approved_status=0)as trows,(SELECT c_name FROM customer WHERE customer.c_id = draft_payment.c_id AND deleted = 0)AS c_name,(SELECT c_prefix FROM customer WHERE customer.c_id = draft_payment.c_id AND deleted = 0)AS c_prefix,(SELECT branch_id FROM customer WHERE customer.c_id = draft_payment.c_id AND deleted = 0)AS branch_id,(SELECT name FROM attributes WHERE attributes.attribute_id = draft_payment.mode_id)AS mode_name FROM draft_payment WHERE deleted = 0 AND receive_amt != 0 AND approved_status=0  ORDER BY draft_payment.d_p_id  DESC limit ${(data.page - 1) * data.perpage
    //   },${data.perpage}`;
    //0504
    sql = `SELECT customer.*,customer.created_id as craetedId,draft_payment.*,(SELECT name FROM attributes WHERE attributes.attribute_id = draft_payment.mode_id)AS mode_name FROM draft_payment join customer on draft_payment.c_id = customer.c_id WHERE draft_payment.deleted=0 and draft_payment.approved_status=0`;
    if (response1.user_type == 3) {
      sql += ` and draft_payment.u_id=${data.uid}`;
    }
    if (response1.user_type == 1) {
      sql += ` and customer.branch_id= ${data.bid}`;
    }
    if (data.pmode == 0) {
      sql += ` and draft_payment.mode_id = 160`;
    }
    if (data.pmode == 1) {
      sql += ` and draft_payment.mode_id != 160`;
    }
    countquery = sql;
    sql += ` ORDER BY draft_payment.d_p_id DESC limit ${(data.page - 1) * data.perpage
      },${data.perpage}`;

    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            con.query(countquery, function (err, cres) {
              if (err) {
                console.log(err);
                resolve({ status: 0, message: "Something went to wrong" });
              } else {
                if (cres.length > 0) {
                  resolve({
                    status: 1,
                    result: result,
                    trows: cres.length,
                  });
                }
              }
            });
            // resolve({
            //   status: 1,
            //   result: result,
            // });
          } else {
            resolve({ status: 1, message: "No Records to Display..." });
          }
        }
      });
    });

    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function getDraftPaymentData(data) {
  try {
    getuserdata = `select * from users where u_id=${data.u_id} and deleted=0`;
    let res = await new Promise((resolve, reject) => {
      con.query(getuserdata, function (err, userres) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (userres.length > 0) {
            if (userres[0].user_type == 3 && userres[0].p_u_id == 1) {
              getnuserquery = `select * from users where  deleted=0 and u_id=${userres[0].p_u_id} `;
            } else {
              getnuserquery = `select * from users where branch_id=${data.branch_id} and deleted=0`;
            }
            con.query(getnuserquery, function (err, nuserres) {
              if (err) {
                console.log(err);
                resolve({ status: 0, message: "Something went to wrong" });
              } else {
                resolve({
                  userdata: nuserres[0],
                  user: userres[0],
                });
              }
            });
          }
        }
      });
    });
    // if (data.u_id == 1 || (res.user.user_type == 3 && res.user.p_u_id == 1)) {
    //   sql = `select * from gsetting`;
    // } else {
    sql = `SELECT *,branch.b_hsn_code as hsn_code,b_bank_details as bank_details,company_name as c_name,branch.b_gstno as c_gstno FROM users,branch WHERE users.branch_id=branch.branch_id AND branch.branch_id=${data.branch_id} AND users.deleted=0 AND branch.deleted=0`; //08-07
    // }
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              settingdata: result[0],
            });
          }
        }
      });
    });
    //0504
    paymentsql = `SELECT *,(SELECT name from attributes WHERE attributes.attribute_id =draft_payment.mode_id)AS payment_mode,(SELECT name FROM attributes WHERE attributes.attribute_id = customer.c_state)as state,(SELECT b_name FROM branch WHERE branch.branch_id = customer.branch_id)as bname,(SELECT u_name FROM users WHERE users.u_id = customer.created_id)as cname,(SELECT b_name FROM branch WHERE branch.branch_id = customer.created_branch_id)as cbname,(SELECT invoice_signature FROM users WHERE users.u_id = draft_payment.created_id)as invoice_signature  FROM draft_payment,customer  WHERE draft_payment.deleted=0 and draft_payment.c_id=customer.c_id AND d_p_id=${data.id}`;
    let response11 = await new Promise(async (resolve, reject) => {
      con.query(paymentsql, async function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              data: result[0],
              settingdata: response.settingdata,
              user: res.user,
              userdata: res.userdata,
            });
          }
        }
      });
    });
    return response11;
  } catch (err) {
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

//1503
async function getDraftPaymentReceipt(data) {
  try {
    let response = await new Promise(async (resolve, reject) => {
      let invoice_data = await getDraftPaymentData(data);
      let imageAsBase64;
      if (
        fs.existsSync(
          `./public/Assets/images/${
          //   invoice_data.user.u_id == 1 ||
          //   (invoice_data.user.p_u_id == 1 && invoice_data.user.user_type == 3)
          //     ? "adminlogo"
          //     :
          "branchlogo"
          }/${invoice_data.settingdata.logo}`
        )
      ) {
        imageAsBase64 = fs.readFileSync(
          `./public/Assets/images/${
          // invoice_data.user.u_id == 1 ||
          // (invoice_data.user.p_u_id == 1 && invoice_data.user.user_type == 3)
          //   ? "adminlogo"
          //   :
          "branchlogo"
          }/${invoice_data.settingdata.logo}`,
          { encoding: "base64" }
        );
      }
      let signatureAsBase64;
      if (
        fs.existsSync(
          `./public/Assets/images/invoicesignature/${invoice_data.data.invoice_signature}`
        )
      ) {
        signatureAsBase64 = fs.readFileSync(
          `./public/Assets/images/invoicesignature/${invoice_data.data.invoice_signature}`,
          { encoding: "base64" }
        );
      }

      pdf
        .create(
          draftpaymentReceipt(invoice_data, imageAsBase64, signatureAsBase64),
          {
            childProcessOptions: {
              env: {
                OPENSSL_CONF: "/dev/null",
              },
            },
          }
        )
        .toFile(
          `${__dirname}/public/Assets/draft_payment_receipt/draft_payment_receipt_${invoice_data.data.p_receipt_no}.pdf`,
          (err) => {
            if (err) {
              return console.log("error");
            }
            resolve({
              ino: invoice_data.data.p_receipt_no,
            });
          }
        );
    });
    return response;
  } catch (err) {
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function searchdraftpayment(data) {
  try {
    sql1 = `SELECT user_type FROM users WHERE u_id = ${data.uid} and deleted =0`;

    let response1 = await new Promise((resolve, reject) => {
      con.query(sql1, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            result.forEach(function (result) {
              resolve({
                status: 1,
                user_type: result.user_type,
              });
            });
          } else {
            resolve({
              status: 0,
              user_type: "Something went wrong...",
            });
          }
        }
      });
    });
    // sql = `SELECT *,(SELECT name FROM attributes WHERE attributes.attribute_id = draft_payment.mode_id)AS mode_name FROM draft_payment join customer on draft_payment.c_id = customer.c_id WHERE draft_payment.deleted=0 and draft_payment.approved_status=0`;

    // if (typeof data.mode_id != "undefined" && data.mode_id != "") {
    //   sql += ` and draft_payment.mode_id='${data.mode_id}'`;
    // }
    // if (typeof data.s_date != "undefined" && data.s_date != "") {
    //   sql += ` and STR_TO_DATE(draft_payment.payment_date,"%d-%m-%Y")>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y")`;
    // }
    // if (typeof data.e_date != "undefined" && data.e_date != "") {
    //   sql += ` and STR_TO_DATE(draft_payment.payment_date,"%d-%m-%Y")<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y")`;
    // }
    // if (typeof data.c_name != "undefined" && data.c_name != "") {
    //   sql += ` and customer.c_name ='${data.c_name}'`;
    // }
    // sql1 = sql;

    // sql += ` ORDER BY draft_payment.d_p_id  DESC limit ${(data.page - 1) * data.perpage},${data.perpage}`;
    sql = `SELECT *,(SELECT name FROM attributes WHERE attributes.attribute_id = draft_payment.mode_id)AS mode_name FROM draft_payment join customer on draft_payment.c_id = customer.c_id WHERE draft_payment.deleted=0 and draft_payment.approved_status=0`;

    if (
      typeof data.mode_id != "undefined" &&
      data.mode_id != "" &&
      data.mode_id != 0
    ) {
      sql += ` and draft_payment.mode_id='${data.mode_id}'`;
    }
    if (typeof data.s_date != "undefined" && data.s_date != "") {
      sql += ` and STR_TO_DATE(draft_payment.payment_date,"%d-%m-%Y")>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y")`;
    }
    if (typeof data.e_date != "undefined" && data.e_date != "") {
      sql += ` and STR_TO_DATE(draft_payment.payment_date,"%d-%m-%Y")<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y")`;
    }
    if (typeof data.c_name != "undefined" && data.c_name != "") {
      sql += ` and customer.c_name ='${data.c_name}'`;
    }
    if (
      typeof data.t_id != "undefined" &&
      data.t_id != "" &&
      data.t_id.length != 2
    ) {
      sql += ` and draft_payment.tracking_id like '%${data.t_id}%'`;
    }
    if (response1.user_type == 3) {
      sql += ` and payment.u_id=${data.uid}`;
    }
    if (response1.user_type == 1) {
      sql += ` and customer.branch_id= ${data.bid}`;
    }
    if (data.pmode == 0) {
      sql += ` and draft_payment.mode_id = 160`;
    }
    if (data.pmode == 1) {
      sql += ` and draft_payment.mode_id != 160`;
    }
    sql1 = sql;

    sql += ` ORDER BY draft_payment.d_p_id  DESC limit ${(data.page - 1) * data.perpage
      },${data.perpage}`;

    let response = await new Promise((resolve, reject) => {
      con.query(sql1, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            con.query(sql, function (err, res) {
              if (err) {
                console.log(err);
                resolve({ status: 0, message: "Something went to wrong" });
              } else {
                if (res.length > 0) {
                  resolve({
                    status: 1,
                    data: res,
                    t_rows: result.length,
                  });
                }
              }
            });
          } else {
            resolve({
              status: 0,
              data: [],
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function searchAccountSummery(data) {
  try {
    sql1 = `SELECT user_type FROM users WHERE u_id = ${data.u_id} and deleted =0`;

    let response1 = await new Promise((resolve, reject) => {
      con.query(sql1, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            result.forEach(function (result) {
              resolve({
                status: 1,
                user_type: result.user_type,
              });
            });
          } else {
            resolve({
              status: 0,
              user_type: "Something went wrong...",
            });
          }
        }
      });
    });
    if (response1.user_type == 0) {
      // sql2 = `SELECT *, (SELECT SUM(refund_price) FROM refund where refund.c_id = customer.c_id) as credit_amount FROM customer INNER JOIN payment ON customer.c_id = payment.c_id INNER JOIN branch ON branch.branch_id = customer.branch_id`;
      // sql2 = `SELECT customer.*,payment.*,payment.payment_refund as refund_amt FROM customer LEFT JOIN payment ON customer.c_id = payment.c_id WHERE customer.is_cancel = 0 and customer.deleted = 0`;
      sql2 = `SELECT *,payment.payment_refund as refund_amt
      FROM payment,customer
      WHERE payment_id IN (
          SELECT MAX(payment_id)
          FROM payment
          GROUP BY c_id
      ) and payment.c_id = customer.c_id and customer.is_cancel = 0 and customer.deleted = 0`;
    } else if (response1.user_type == 1) {
      // sql2 = `SELECT *, (SELECT SUM(refund_price) FROM refund where refund.c_id = customer.c_id) as credit_amount FROM customer INNER JOIN payment ON customer.c_id = payment.c_id INNER JOIN branch ON branch.branch_id = customer.branch_id WHERE (customer.foreign_branch = ${data.branch_id} OR customer.branch_id = ${data.branch_id}) AND customer.deleted = 0`;
      // sql2 = `SELECT customer.*,payment.*,payment.payment_refund as refund_amt FROM customer LEFT JOIN payment ON customer.c_id = payment.c_id WHERE customer.is_cancel = 0 and customer.deleted = 0 and (customer.foreign_branch = ${data.branch_id} OR customer.branch_id = ${data.branch_id})`;
      sql2 = `SELECT *,payment.payment_refund as refund_amt
      FROM payment,customer
      WHERE payment_id IN (
          SELECT MAX(payment_id)
          FROM payment
          GROUP BY c_id
      ) and payment.c_id = customer.c_id and customer.is_cancel = 0 and customer.deleted = 0 and (customer.foreign_branch = ${data.branch_id} OR customer.branch_id = ${data.branch_id})`;
    } else {
      // sql2 = `SELECT *, (SELECT SUM(refund_price) FROM refund where refund.c_id = customer.c_id) as credit_amount FROM customer INNER JOIN payment ON customer.c_id = payment.c_id INNER JOIN branch ON branch.branch_id = customer.branch_id WHERE (customer.u_id=${data.u_id} or customer.foreign_branchuser=${data.u_id}) AND customer.deleted =0`;
      // sql2 = `SELECT customer.*,payment.*,payment.payment_refund as refund_amt FROM customer LEFT JOIN payment ON customer.c_id = payment.c_id WHERE customer.is_cancel = 0 and customer.deleted = 0 and (customer.u_id=${data.u_id} or customer.foreign_branchuser=${data.u_id})`;
      sql2 = `SELECT *,payment.payment_refund as refund_amt
      FROM payment,customer
      WHERE payment_id IN (
          SELECT MAX(payment_id)
          FROM payment
          GROUP BY c_id
      ) and payment.c_id = customer.c_id and customer.is_cancel = 0 and customer.deleted = 0 and (customer.u_id=${data.u_id} or customer.foreign_branchuser=${data.u_id})`;
    }
    if (typeof data.branch_name != "undefined" && data.branch_name != "") {
      sql2 += ` and customer.branch_id=${data.branch_name}`;
    }
    //0903
    if (
      typeof data.u_name != "undefined" &&
      data.u_name != "" &&
      data.u_name != 0
    ) {
      sql2 += ` and customer.u_id=${data.u_name}`;
    }
    if (typeof data.c_name != "undefined" && data.c_name != "") {
      sql2 += ` and customer.c_name like '%${data.c_name}%'`;
    }
    if (typeof data.s_date != "undefined" && data.s_date != "") {
      sql2 += ` and STR_TO_DATE(customer.c_date,"%d-%m-%Y")>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y")`;
    }
    if (typeof data.e_date != "undefined" && data.e_date != "") {
      sql2 += ` and STR_TO_DATE(customer.c_date,"%d-%m-%Y")<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y")`;
    }
    if (
      typeof data.t_id != "undefined" &&
      data.t_id != "" &&
      data.t_id.length != 2
    ) {
      sql2 += ` and customer.tracking_id like '%${data.t_id}%'`;
    }
    // if (typeof data.p_status != "undefined" && data.p_status != "") {
    //   if (data.p_status == 1) {
    //     sql2 += ` and payment.due_amt ='0'`;
    //   } else {
    //     sql2 += ` and payment.due_amt != '0'`;
    //   }
    // }
    sql2 += ` ORDER by customer.c_id `;
    // sql3 += ` limit ${(data.page - 1) * data.perpage},${data.perpage}`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql2, function (err, res) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (res.length > 0) {
            if (
              typeof data.p_status != "undefined" &&
              data.p_status != "" &&
              data.p_status != 0
            ) {
              if (data.p_status == 2) {
                var result = res.filter(function (el) {
                  return el.due_amt != 0;
                });
                resolve({
                  status: 1,
                  data: result,
                  t_rows: result.length,
                });
              } else {
                var result = res.filter(function (el) {
                  return el.due_amt == 0;
                });
                resolve({
                  status: 1,
                  data: result,
                  t_rows: result.length,
                });
              }
            } else {
              resolve({
                status: 1,
                data: res,
                t_rows: res.length,
              });
            }
          } else {
            resolve({
              status: 0,
              data: [],
              t_rows: 0,
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function sendmailfortranslation(data) {
  try {
    if (data.status_id == 18 || data.status_id == 22) {
      if (data.c_s_type == 10) {
        sql = `SELECT *,(SELECT created_id FROM customer WHERE c_id=${data.c_id} AND deleted=0) as created_id,(SELECT c_s_type FROM customer WHERE c_id=${data.c_id} AND deleted=0) as c_s_type,(SELECT branch_id FROM customer WHERE c_id=${data.c_id} AND deleted=0) as branch_id,(SELECT c_name FROM customer WHERE c_id=${data.c_id} AND deleted=0) as c_name,(SELECT c_prefix FROM customer WHERE c_id=${data.c_id} AND deleted=0) as c_prefix FROM attestation JOIN details ON details.service_id=attestation.a_id AND details.service_type=10 AND attestation.c_id=${data.c_id} AND attestation.deleted=0 AND a_type IN(258);`;
      } else if (data.c_s_type == 17) {
        sql = `SELECT *,(SELECT created_id FROM customer WHERE c_id=${data.c_id} AND deleted=0) as created_id,(SELECT c_s_type FROM customer WHERE c_id=${data.c_id} AND deleted=0) as c_s_type,(SELECT branch_id FROM customer WHERE c_id=${data.c_id} AND deleted=0) as branch_id,(SELECT c_name FROM customer WHERE c_id=${data.c_id} AND deleted=0) as c_name,(SELECT c_prefix FROM customer WHERE c_id=${data.c_id} AND deleted=0) as c_prefix FROM apostille JOIN details ON details.service_id=apostille.a_id AND details.service_type=17 AND apostille.c_id=${data.c_id} AND apostille.deleted=0 AND a_type IN(258);`;
      } else if (data.c_s_type == 20) {
        sql = `SELECT *,(SELECT created_id FROM customer WHERE c_id=${data.c_id} AND deleted=0) as created_id,(SELECT c_s_type FROM customer WHERE c_id=${data.c_id} AND deleted=0) as c_s_type,(SELECT branch_id FROM customer WHERE c_id=${data.c_id} AND deleted=0) as branch_id,(SELECT c_name FROM customer WHERE c_id=${data.c_id} AND deleted=0) as c_name,(SELECT c_prefix FROM customer WHERE c_id=${data.c_id} AND deleted=0) as c_prefix FROM translation JOIN details ON details.service_id=translation.a_id AND details.service_type=20 AND translation.c_id=${data.c_id} AND translation.deleted=0 AND a_type IN(258);`;
      } else if (data.c_s_type == 8) {
        sql = `SELECT *,(SELECT created_id FROM customer WHERE c_id=${data.c_id} AND deleted=0) as created_id,(SELECT c_s_type FROM customer WHERE c_id=${data.c_id} AND deleted=0) as c_s_type,(SELECT branch_id FROM customer WHERE c_id=${data.c_id} AND deleted=0) as branch_id,(SELECT c_name FROM customer WHERE c_id=${data.c_id} AND deleted=0) as c_name,(SELECT c_prefix FROM customer WHERE c_id=${data.c_id} AND deleted=0) as c_prefix FROM visa JOIN details ON details.service_id=visa.v_id AND details.service_type=8 AND visa.c_id=${data.c_id} AND visa.deleted=0 AND v_type IN(258);`;
      }
      let response1 = await new Promise((resolve, reject) => {
        con.query(sql, function (err, result) {
          if (err) {
            console.log(err);
            resolve({ status: 0, message: "Something went to wrong" });
          } else {
            if (result.length > 0) {
              resolve({
                status: 1,
                c_s_type: result[0].c_s_type,
                branch_id: result[0].branch_id,
                c_name: result[0].c_name,
                c_prefix: result[0].c_prefix,
                created_id: result[0].created_id,
              });
            } else {
              resolve({
                status: 0,
                c_s_type: 0,
                branch_id: 0,
                c_name: "",
                c_prefix: "",
                created_id: 0,
              });
            }
          }
        });
      });
      //1003
      if (response1.c_s_type != 0) {
        let emaillist = [];
        // let getemaillist = `SELECT users.* FROM users,user_permission WHERE users.u_id=user_permission.u_id AND (f_id=16 OR users.branch_id=${response1.branch_id}) GROUP by u_id`;
        let getemaillist = `SELECT users.* FROM users,user_permission WHERE users.u_id=user_permission.u_id AND ((f_id=16 and (views = 1 or creates =1)  AND users.branch_id=${response1.branch_id}) or users.u_id=${response1.created_id} or (user_type=1 AND users.branch_id=${response1.branch_id})) GROUP by u_id`;
        let eresponse = await new Promise((resolve, reject) => {
          con.query(getemaillist, function (err, eresult) {
            if (err) {
              console.log(err);
              resolve({ status: 0, message: "Something went to wrong" });
            } else {
              if (eresult.length > 0) {
                eresult.forEach(function (result) {
                  emaillist.push(result.u_email);
                });
                resolve({
                  emaillist: emaillist,
                });
              }
            }
          });
        });
        if (response1.c_s_type == 10) {
          sql1 = `Select attestation.*,details.d_c_id,details.service_type,(SELECT name FROM attributes WHERE attribute_id=details.status_id)as status_name ,(SELECT name FROM attributes WHERE attribute_id=details.d_c_id)as certificate_name,(SELECT name FROM attributes WHERE attribute_id=attestation.a_country)as country_name,(SELECT name FROM attributes WHERE attribute_id=attestation.a_type)as type FROM attestation RIGHT JOIN details ON  attestation.a_id=details.service_id WHERE  details.service_type=10 AND attestation.c_id = ${data.c_id} and attestation.deleted = 0 `;
        } else if (response1.c_s_type == 8) {
          sql1 = `Select visa.*,details.d_c_id,details.service_type,(SELECT name FROM attributes WHERE attribute_id=details.status_id)as status_name,(SELECT name FROM attributes WHERE attribute_id=details.d_c_id)as country_name,(SELECT name FROM attributes WHERE attribute_id=visa.v_type)as type,(SELECT GROUP_CONCAT(attributes.name SEPARATOR ',') as name FROM attributes where FIND_IN_SET (attributes.attribute_id , visa.v_supporting_doc)) as certificate_name  FROM visa RIGHT JOIN details ON  visa.v_id=details.service_id   WHERE   details.service_type=8 AND visa.c_id = ${data.c_id} and visa.deleted = 0`;
        } else if (response1.c_s_type == 17) {
          sql1 = `Select apostille.*,details.d_c_id,details.service_type,(SELECT name FROM attributes WHERE attribute_id=details.status_id)as status_name,(SELECT name FROM attributes WHERE attribute_id=details.d_c_id)as certificate_name,(SELECT name FROM attributes WHERE attribute_id=apostille.a_country)as country_name,(SELECT name FROM attributes WHERE attribute_id=apostille.a_type)as type  FROM apostille RIGHT JOIN details ON apostille.a_id=details.service_id  WHERE  details.service_type=17 AND apostille.c_id = ${data.c_id} and apostille.deleted = 0`;
        } else if (response1.c_s_type == 20) {
          sql1 = `Select translation.*,details.d_c_id,details.service_type,(SELECT name FROM attributes WHERE attribute_id=details.status_id)as status_name,(SELECT name FROM attributes WHERE attribute_id=details.d_c_id)as certificate_name,(SELECT name FROM attributes WHERE attribute_id=translation.a_country)as country_name,(SELECT name FROM attributes WHERE attribute_id=translation.a_type)as type  FROM translation RIGHT JOIN details ON translation.a_id=details.service_id  WHERE  details.service_type=20 AND translation.c_id = ${data.c_id} and translation.deleted = 0`;
        }
        let response2 = await new Promise((resolve, reject) => {
          con.query(sql1, async function (errr, resultss) {
            if (errr) {
              console.log(errr);
              console.log("Something went wrong");
            } else {
              if (resultss.length > 0) {
                const getrow = () => {
                  let rows = "";
                  resultss.map((a) => {
                    a.service_type == 8
                      ? (rows =
                        rows +
                        `<tr><td style="border: 1px solid #333;padding:5px;"> ${a.v_name} </td>
                            <td style="border: 1px solid #333;padding:5px;"> ${a.type} </td>
                            <td style="border: 1px solid #333;padding:5px;"> ${a.country_name} </td>
                            <td style="border: 1px solid #333;padding:5px;"> ${a.certificate_name} </td>
                            <td style="border: 1px solid #333;padding:5px;"> ${a.status_name} </td>
                          </tr>`)
                      : (rows =
                        rows +
                        `<tr><td style="border: 1px solid #333;padding:5px;">${a.a_name} </td>
                          <td style="border: 1px solid #333;padding:5px;"> ${a.type} </td>
                          <td style="border: 1px solid #333;padding:5px;"> ${a.country_name} </td>
                          <td style="border: 1px solid #333;padding:5px;"> ${a.certificate_name} </td>
                          <td style="border: 1px solid #333;padding:5px;"> ${a.status_name} </td>
                          </tr>`);
                  });
                  return rows;
                };
                let table1 = `<div>
                  <table style="border-collapse: collapse;" >
                    <tr style="border: 1px solid #333;padding:5px;">
                      <th style="border: 1px solid #333;padding:5px;"> Name </th> 
                      <th style="border: 1px solid #333;padding:5px;"> Type </th>
                      <th style="border: 1px solid #333;padding:5px;"> Country </th>
                      <th style="border: 1px solid #333;padding:5px;"> Certificate </th>
                      <th style="border: 1px solid #333;padding:5px;"> Status </th>
                    </tr>
                    ${getrow()}
                  </table>
                </div>`;

                let message = await sendmessage.getTemplate(45);
                if (message.status != 0) {
                  message.template = message.template.replace(
                    "{:name:}",
                    response1.c_prefix + " " + response1.c_name
                  );
                  let senderMailSetting = await sendmessage.getEmailSetting(
                    data.u_id
                  );

                  sqlll = `SELECT u_email FROM users WHERE u_id = ${data.u_id} `;
                  let ccmail = await new Promise((resolve, reject) => {
                    con.query(sqlll, async function (err1, result1) {
                      if (err1) {
                        console.log(err1);
                        resolve({
                          status: 0,
                          message: "Something went to wrong",
                        });
                      } else {
                        if (result1.length > 0) {
                          resolve({ status: 1, result: result1[0].u_email });
                        } else {
                          resolve({
                            status: 0,
                            message: "Something went to wrong",
                          });
                        }
                      }
                    });
                  });

                  message.template = message.template.replace(
                    "{:table:}",
                    table1
                  );

                  let mess =
                    (message.header == 1
                      ? typeof senderMailSetting.email_template_header !=
                        undefined && senderMailSetting.email_template_header != undefined &&
                        senderMailSetting.email_template_header != null
                        ? senderMailSetting.email_template_header
                        : ""
                      : "") +
                    message.template +
                    (message.b_d_id != 0
                      ? message.b_d_id == 1
                        ? senderMailSetting.gst_bankdetails
                        : message.b_d_id == 2
                          ? senderMailSetting.ngst_bankdetails
                          : message.b_d_id == 3
                            ? senderMailSetting.general_bankdetails
                            : ""
                      : "") +
                    (message.footer == 1
                      ? senderMailSetting.email_template_footer
                      : "") +
                    (message.signature == 1
                      ? senderMailSetting.email_signature
                      : "");
                  CCMailSetting = await sendmessage.getEmailSetting(1);
                  sendmessagenow = sendmessage.sendmailoftranslation(
                    senderMailSetting,
                    eresponse.emaillist,
                    mess,
                    message.subject,
                    ccmail.result, //CCMailSetting.e_username,  // user mail
                    ccmail.result // reply mail
                  );
                }
              }
            }
          });
        });
      }
    }
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function insertSuggestion(data, filename) {
  try {
    if (filename != undefined) {
      sql = `INSERT INTO suggestion (date,u_id,branch_id,title,message,attachment) VALUES ("${data.date
        }",${data.u_id},${data.branch_id},"${mysql_real_escape_string(
          data.title
        )}","${mysql_real_escape_string(
          data.message
        )}","${mysql_real_escape_string(filename)}")`;
    } else {
      sql = `INSERT INTO suggestion (date,u_id,branch_id,title,message) VALUES ("${data.date
        }",${data.u_id},${data.branch_id},"${mysql_real_escape_string(
          data.title
        )}","${mysql_real_escape_string(data.message)}")`;
    }

    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.affectedRows > 0) {
            resolve({
              status: 1,
              message: "Suggestion insert successfully....",
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function getSuggestion(data) {
  try {
    if (data.u_type == 0) {
      sql = `SELECT *,(SELECT b_name FROM branch WHERE branch_id=suggestion.branch_id)AS branch_name,(SELECT u_name FROM users WHERE u_id=suggestion.u_id)AS user_name FROM suggestion`;
    } else if (data.u_type == 1) {
      sql = `SELECT *,(SELECT b_name FROM branch WHERE branch_id=suggestion.branch_id)AS branch_name,(SELECT u_name FROM users WHERE u_id=suggestion.u_id)AS user_name FROM suggestion WHERE branch_id=${data.branch_id}`;
    } else {
      sql = `SELECT *,(SELECT b_name FROM branch WHERE branch_id=suggestion.branch_id)AS branch_name,(SELECT u_name FROM users WHERE u_id=suggestion.u_id)AS user_name FROM suggestion WHERE u_id=${data.u_id}`;
    }

    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              data: result,
            });
          } else {
            resolve({
              status: 1,
              data: [],
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function updateSuggestion(data, filename) {
  try {
    if (filename != undefined) {
      sql = `UPDATE suggestion SET date="${data.date
        }",title="${mysql_real_escape_string(
          data.title
        )}",message="${mysql_real_escape_string(
          data.message
        )}",attachment="${mysql_real_escape_string(filename)}" WHERE sg_id=${data.sg_id
        }`;
    } else {
      sql = `UPDATE suggestion SET date="${data.date
        }",title="${mysql_real_escape_string(
          data.title
        )}",message="${mysql_real_escape_string(data.message)}" WHERE sg_id=${data.sg_id
        }`;
    }

    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.affectedRows > 0) {
            resolve({
              status: 1,
              message: "Suggestion update successfully....",
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function deleteSuggestion(data) {
  try {
    sql = `DELETE FROM suggestion WHERE sg_id =${data.sg_id}`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.affectedRows > 0) {
            resolve({
              status: 1,
              message: "Suggestion deleted successfully",
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}
//2303
async function userMonthTargetReport(data) {
  try {
    let c_month = moment().format("MM-YYYY");
    // sql = `SELECT
    // DATE_FORMAT(STR_TO_DATE(elead.convert_date,'%d-%m-%Y'), "%m-%Y") as month,
    // elead.l_allocate_to as user_id,
    // (select target.t_target FROM target where target.u_id = ${data.id} AND target.month = DATE_FORMAT(STR_TO_DATE(elead.convert_date,'%d-%m-%Y'), "%m-%Y") AND  target.month ="${c_month}") as target,
    // COUNT(elead.lead_id) as complete FROM elead,customer where customer.l_id = elead.lead_id AND customer.deleted = 0 AND  customer.is_block = 1 AND customer.is_cancel = 0 AND convert_status=1 AND  elead.l_allocate_to = ${data.id} AND DATE_FORMAT(STR_TO_DATE(elead.convert_date,'%d-%m-%Y'), "%m-%Y")="${c_month}" GROUP by DATE_FORMAT(STR_TO_DATE(elead.convert_date,'%d-%m-%Y'), "%m-%Y")  UNION
    // select target.month as month, target.u_id as user_id, target.t_target as target ,
    // (SELECT COUNT(elead.lead_id ) FROM elead,customer WHERE customer.l_id = elead.lead_id AND customer.deleted = 0 AND  customer.is_block = 1 AND customer.is_cancel = 0 AND  elead.convert_status=1 AND elead.l_allocate_to=${data.id} AND DATE_FORMAT(STR_TO_DATE(elead.convert_date,'%d-%m-%Y'), "%m-%Y")="${c_month}" AND DATE_FORMAT(STR_TO_DATE(elead.convert_date,'%d-%m-%Y'), "%m-%Y") =target.month)as complete
    // from target WHERE target.month ="${c_month}" AND target.u_id = ${data.id}
    // `;

    sql1 = `select target.t_target from target where target.u_id = ${data.id} AND  target.month ="${c_month}"`;
    let response1 = await new Promise((resolve, reject) => {
      con.query(sql1, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              target: result[0].t_target,
            });
          } else {
            resolve({
              status: 0,
              target: 0,
            });
          }
        }
      });
    });

    sql = `select DATE_FORMAT(customer.created_timestamp, "%m-%Y") as month,COUNT(customer.created_id) as complete from  customer   left join payment on payment.c_id = customer.c_id AND payment.payment_id IN (
      SELECT MAX(payment_id)
      FROM payment
      GROUP BY c_id
  )  where payment.due_amt = 0 AND  DATE_FORMAT(customer.created_timestamp, "%m-%Y") = "${c_month}" AND customer.target_count = 1 AND customer.deleted = 0 AND customer.is_block = 1 AND customer.is_cancel = 0 AND (customer.created_id = ${data.id} OR customer.marketing_user = ${data.id})`;

    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              data: { ...result[0], target: response1.target },
            });
          } else {
            resolve({
              status: 0,
              data: { target: response1.target },
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function deleteUserTarget(data) {
  try {
    sql = `DELETE FROM target WHERE t_id =${data.t_id}`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.affectedRows > 0) {
            resolve({
              status: 1,
              message: "Target deleted successfully",
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function getMainCustomer(data) {
  try {
    let record = [];
    getuserquery = `select * from users where u_id=${data.id} and deleted=0`;
    let response1 = await new Promise((resolve, reject) => {
      con.query(getuserquery, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            if (result[0].user_type == 1) {
              // Jil After Form Link get Lead with their Responsible Person
              getallchilduser = `select * from users where ((p_u_id=${data.id} OR p_u_id=1 OR p_u_id IN (SELECT users.u_id  from users where users.branch_id= ${result[0].branch_id})) and branch_id=${result[0].branch_id}) and deleted=0`;

              // getallchilduser = `select * from users where ((p_u_id=${data.id} OR p_u_id=1) and branch_id=${result[0].branch_id}) and deleted=0`;
              con.query(getallchilduser, function (err, res) {
                if (err) {
                  console.log(err);
                  resolve({ status: 0, message: "Something went to wrong" });
                } else {
                  res.forEach(function (r) {
                    record.push(r.u_id);
                  });
                  record.push(data.id);
                  resolve({
                    record: record,
                    type: result[0].user_type,
                  });
                }
              });
            } else {
              resolve({
                type: result[0].user_type,
              });
            }
          }
        }
      });
    });
    if (response1.type == 1) {
      sql = `SELECT *,(row_number() over ( order by main_customer.m_c_id DESC) ) AS row_no,(SELECT u_name FROM users WHERE users.u_id=main_customer.created_id)AS createdBy FROM main_customer WHERE created_id IN(${record})  AND deleted=0`;
    } else if (response1.type == 3) {
      sql = `SELECT *,(row_number() over ( order by main_customer.m_c_id DESC) ) AS row_no,(SELECT u_name FROM users WHERE users.u_id=main_customer.created_id)AS createdBy FROM main_customer WHERE created_id=${data.id} AND deleted=0`;
    } else {
      sql = `SELECT *,(row_number() over ( order by main_customer.m_c_id DESC) ) AS row_no,(SELECT u_name FROM users WHERE users.u_id=main_customer.created_id)AS createdBy FROM main_customer WHERE deleted=0`;
    }
    countquery = sql;
    sql += ` ORDER BY main_customer.m_c_id  DESC limit ${(data.page - 1) * data.perpage
      },${data.perpage}`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            con.query(countquery, function (err, cres) {
              if (cres.length > 0) {
                resolve({
                  status: 1,
                  result: result,
                  trows: cres.length,
                });
              }
            });
          } else {
            resolve({
              status: 1,
              result: [],
              trows: 0,
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function updateMainCustomerDetails(data) {
  try {
    sql = `UPDATE main_customer SET m_c_prefix = "${data.m_c_prefix
      }" , m_c_name = "${mysql_real_escape_string(data.m_c_name)}",m_c_mo_no = "${data.m_c_mo_no
      }",m_c_email = "${mysql_real_escape_string(
        data.m_c_email
      )}",m_c_address = "${mysql_real_escape_string(
        data.m_c_address
      )}"  WHERE m_c_id   = ${data.m_c_id}`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.affectedRows > 0) {
            resolve({
              status: 1,
              message: "Main Customer Updated Successfully",
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function sendloginemail(data) {
  try {
    getuserquery = `SELECT * FROM main_customer WHERE m_c_id = ${data.m_c_id} and deleted=0`;
    let response = await new Promise((resolve, reject) => {
      con.query(getuserquery, async function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            senderMailSetting = await sendmessage.getEmailSetting(data.uid);

            sqlll = `SELECT u_email FROM users WHERE u_id = ${data.uid} `;
            let ccmail = await new Promise((resolve, reject) => {
              con.query(sqlll, async function (err1, result1) {
                if (err1) {
                  console.log(err1);
                  resolve({ status: 0, message: "Something went to wrong" });
                } else {
                  if (result1.length > 0) {
                    resolve({ status: 1, result: result1[0].u_email });
                  } else {
                    resolve({
                      status: 0,
                      message: "Something went to wrong",
                    });
                  }
                }
              });
            });

            let message = await sendmessage.getTemplate(17);
            if (message.status != 0) {
              message.template = message.template.replace(
                "{:name:}",
                result[0].m_c_prefix + " " + result[0].m_c_name
              );
              message.template = message.template.replace(
                "{:username:}",
                result[0].m_c_name
              );
              message.template = message.template.replace(
                "{:password:}",
                result[0].password
              );
              let mess =
                (message.header == 1
                  ? typeof senderMailSetting.email_template_header !=
                    undefined && senderMailSetting.email_template_header != undefined &&
                    senderMailSetting.email_template_header != null
                    ? senderMailSetting.email_template_header
                    : ""
                  : "") +
                message.template +
                (message.b_d_id != 0
                  ? message.b_d_id == 1
                    ? senderMailSetting.gst_bankdetails
                    : message.b_d_id == 2
                      ? senderMailSetting.ngst_bankdetails
                      : message.b_d_id == 3
                        ? senderMailSetting.general_bankdetails
                        : ""
                  : "") +
                (message.footer == 1
                  ? senderMailSetting.email_template_footer
                  : "") +
                (message.signature == 1
                  ? senderMailSetting.email_signature
                  : "");

              CCMailSetting = await sendmessage.getEmailSetting(1);
              sendmessagenow = sendmessage.customermessagesend(
                senderMailSetting,
                result[0].m_c_email,
                mess,
                message.subject,
                "", //CCMailSetting.e_username,  // user mail
                ccmail.result, // reply mail
                1,
                "info@hyderabadattestation.com"
              );
              resolve({
                status: 1,
                message: "Mail send to customer successfully",
              });
            }
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function searchMainCustomer(data) {
  try {
    let record = [];
    getuserquery = `select * from users where u_id=${data.id} and deleted=0`;
    let response1 = await new Promise((resolve, reject) => {
      con.query(getuserquery, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            if (result[0].user_type == 1) {
              // Jil After Form Link get Lead with their Responsible Person
              getallchilduser = `select * from users where ((p_u_id=${data.id} OR p_u_id=1 OR p_u_id IN (SELECT users.u_id  from users where users.branch_id= ${result[0].branch_id})) and branch_id=${result[0].branch_id}) and deleted=0`;

              // getallchilduser = `select * from users where ((p_u_id=${data.id} OR p_u_id=1) and branch_id=${result[0].branch_id}) and deleted=0`;
              con.query(getallchilduser, function (err, res) {
                if (err) {
                  console.log(err);
                  resolve({ status: 0, message: "Something went to wrong" });
                } else {
                  res.forEach(function (r) {
                    record.push(r.u_id);
                  });
                  record.push(data.id);
                  resolve({
                    record: record,
                    type: result[0].user_type,
                  });
                }
              });
            } else {
              resolve({
                type: result[0].user_type,
              });
            }
          }
        }
      });
    });
    if (response1.type == 1) {
      sql = `SELECT *,(SELECT u_name FROM users WHERE users.u_id=main_customer.created_id)AS createdBy FROM main_customer WHERE created_id IN(${record}) AND deleted=0`;
    } else if (response1.type == 3) {
      sql = `SELECT *,(SELECT u_name FROM users WHERE users.u_id=main_customer.created_id)AS createdBy FROM main_customer WHERE created_id=${data.id} AND deleted=0`;
    } else {
      sql = `SELECT *,(SELECT u_name FROM users WHERE users.u_id=main_customer.created_id)AS createdBy FROM main_customer WHERE deleted=0`;
    }

    if (typeof data.m_c_name != "undefined" && data.m_c_name != "") {
      sql += ` and main_customer.m_c_name like "%${data.m_c_name}%"`;
    }
    if (typeof data.m_c_email != "undefined" && data.m_c_email != "") {
      sql += ` and main_customer.m_c_email like "%${data.m_c_email}%"`;
    }

    countquery = sql;
    sql += ` ORDER BY main_customer.m_c_id  DESC limit ${(data.page - 1) * data.perpage
      },${data.perpage}`;

    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          resolve({ status: 0, message: "Something went to wrong" });
        }
        if (result.length > 0) {
          con.query(countquery, function (err, cres) {
            if (err) {
              console.log(err);
              resolve({ status: 0, message: "Something went to wrong" });
            } else {
              if (cres.length > 0) {
                resolve({
                  status: 1,
                  result: result,
                  trows: cres.length,
                });
              }
            }
          });
        } else {
          resolve({
            status: 1,
            result: [],
            trows: 0,
          });
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function insertembassyfee(data) {
  try {
    if (data.service == 8) {
      sql = `SELECT * FROM embassyfees WHERE country=${data.country} and service_type=${data.service_type} and document=${data.document}`;
    } else {
      sql = `SELECT * FROM embassyfees WHERE country=${data.country} and service_type=${data.service_type} and document=${data.document} `;
    }
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({ status: 0, message: "Already Exists" });
          } else {
            sql1 = `INSERT INTO embassyfees (service_type,country,document,amount) VALUES (${data.service_type},${data.country},${data.document},'${data.amount}')`;
            con.query(sql1, function (err, result) {
              if (err) {
                console.log(err);
                resolve({ status: 0, message: "Something Went Wrong...." });
              } else {
                if (result.affectedRows > 0) {
                  resolve({
                    status: 1,
                    message: "EmbassyFees Inserted Successfully....",
                  });
                }
              }
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function getembassyfees(data) {
  try {
    sql = `SELECT *,(row_number() over ( order by embassyfees.e_id DESC) ) AS row_no,(SELECT COUNT(*) FROM embassyfees WHERE deleted=0)as trows,(SELECT name FROM attributes WHERE attributes.attribute_id = embassyfees.document)as document_name,(SELECT name FROM attributes WHERE attributes.attribute_id = embassyfees.country)as country_name FROM embassyfees WHERE deleted=0 ORDER BY e_id DESC limit ${(data.page - 1) * data.perpage
      },${data.perpage}`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something Went Wrong...." });
        } else {
          if (result.length > 0) {
            resolve({ status: 1, result: result, t_rows: result.length });
          } else {
            resolve({ status: 1, result: [] });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function updateembassyfees(data) {
  try {
    sql = `SELECT * FROM embassyfees WHERE country=${data.country} and service_type=${data.service_type} and document=${data.document} and e_id != ${data.e_id} `;

    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({ status: 0, message: "Already Exists" });
          } else {
            let sql1 = `Update embassyfees SET country=${data.country},service_type=${data.service_type},document=${data.document},amount=${data.amount} WHERE e_id=${data.e_id} and deleted = 0 `;

            con.query(sql1, function (err, result) {
              if (err) {
                console.log(err);
                resolve({ status: 0, message: "Something Went Wrong...." });
              } else {
                if (result.affectedRows > 0) {
                  resolve({
                    status: 1,
                    message: "EmbassyFees Updated Successfully....",
                  });
                }
              }
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function searchChargeReport(data) {
  try {
    let sql;
    if (data.service_type == 0) {
      sql = `Select *,(SELECT name FROM attributes WHERE attributes.attribute_id = serviceprice.country)as country_name,(SELECT name FROM attributes WHERE attributes.attribute_id = serviceprice.s_type)as service_type From serviceprice WHERE charge_type=${data.charge_type} and deleted = 0 `;
    } else {
      sql = `Select *,(SELECT name FROM attributes WHERE attributes.attribute_id = serviceprice.country)as country_name,(SELECT name FROM attributes WHERE attributes.attribute_id = serviceprice.s_type)as service_type From serviceprice WHERE service = ${data.service_type} and charge_type=${data.charge_type} and deleted = 0 `;
    }

    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something Went Wrong...." });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              result: result,
            });
          } else {
            resolve({
              status: 1,
              result: [],
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function getembassyamount(data) {
  try {
    let data1 = [];
    let sql = "";
    if (data.l_service != undefined) {
      if (data.l_service == 8) {
        for (i = 0; i < data.applicationdata.length; i++) {
          for (j = 0; j < data.applicationdata[i].v_country.length; j++) {
            sql += `SELECT amount as embassy_fees FROM embassyfees WHERE service_type = ${data.l_service}  AND country = ${data.applicationdata[i].v_country[j]} AND document = ${data.applicationdata[i].v_type}  AND deleted = 0;`;
          }
        }
      } else {
        for (i = 0; i < data.applicationdata.length; i++) {
          for (j = 0; j < data.applicationdata[i].a_certificate.length; j++) {
            let sqll = `SELECT document_type FROM attributes Where attribute_id=${data.applicationdata[i].a_certificate[j]}`;
            let resp = await new Promise((resolve, reject) => {
              con.query(sqll, async function (err, result) {
                if (err) {
                  console.log(err);
                  resolve({ status: 0, message: "Something went wrong" });
                } else {
                  if (result.length > 0) {
                    resolve({ status: 1, result: result[0].document_type });
                  } else {
                    resolve({ status: 0, result: [] });
                  }
                }
              });
            });
            sql += `SELECT amount as embassy_fees FROM embassyfees WHERE service_type = ${data.l_service}  AND country = ${data.applicationdata[i].a_country} AND document = ${resp.result} AND deleted = 0;`;
          }
        }
      }
    } else {
      if (data.c_s_type == 8) {
        for (i = 0; i < data.applicationdata.length; i++) {
          for (j = 0; j < data.applicationdata[i].v_country.length; j++) {
            sql += `SELECT amount as embassy_fees FROM embassyfees WHERE service_type = ${data.c_s_type}  AND country = ${data.applicationdata[i].v_country[j]} AND document = ${data.applicationdata[i].v_type}  AND deleted = 0;`;
          }
        }
      } else {
        for (i = 0; i < data.applicationdata.length; i++) {
          for (j = 0; j < data.applicationdata[i].a_certificate.length; j++) {
            let sqll = `SELECT document_type FROM attributes Where attribute_id=${data.applicationdata[i].a_certificate[j]}`;
            let resp = await new Promise((resolve, reject) => {
              con.query(sqll, async function (err, result) {
                if (err) {
                  console.log(err);
                  resolve({ status: 0, message: "Something went wrong" });
                } else {
                  if (result.length > 0) {
                    resolve({ status: 1, result: result[0].document_type });
                  } else {
                    resolve({ status: 0, result: [] });
                  }
                }
              });
            });

            sql += `SELECT amount as embassy_fees FROM embassyfees WHERE service_type = ${data.c_s_type}  AND country = ${data.applicationdata[i].a_country} AND document = ${resp.result}  AND deleted = 0;`;
          }
        }
      }
    }
    let response = await new Promise((resolve, reject) => {
      con.query(sql, async function (err, results) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went wrong" });
        } else {
          if (results.length == 1) {
            results.forEach(function (res) {
              data1.push(res.embassy_fees);

              resolve({
                data: data1,
              });
            });
            resolve({
              data: data1,
            });
          }

          if (results.length > 1) {
            results.forEach(function (result) {
              if (result.length > 0) {
                result.forEach(function (res) {
                  data1.push(res.embassy_fees);

                  resolve({
                    data: data1,
                  });
                });
              } else {
                data1.push(0);

                resolve({
                  data: data1,
                });
              }
            });
          } else {
            resolve({
              data: [],
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function getcourierreport(data) {
  try {
    let sql1 = "";
    if (data.courier_id != 0) {
      sql1 = ` and details.courier_id=${data.courier_id}`;
    }
    if (data.user_type == 0) {
      if (typeof data.branch_name != "undefined") {
        sql1 += ` AND customer.branch_id=${data.branch_name}`;
      }
      if (typeof data.u_name != "undefined" && data.u_name != 0) {
        sql1 += ` AND customer.u_id=${data.u_name}`;
      }
    } else if (data.user_type == 1) {
      if (typeof data.u_name != "undefined" && data.u_name != 0) {
        sql1 += ` AND (customer.u_id=${data.u_name} or customer.foreign_branchuser = ${data.u_name})`;
      } else {
        sql1 += ` AND (customer.branch_id=${data.branch_id} or customer.foreign_branch=${data.branch_id})`;
      }
    } else if (data.user_type == 3) {
      sql1 += ` AND (customer.u_id=${data.u_id} or customer.foreign_branchuser=${data.u_id})`;
    }
    sql1 += ` GROUP BY customer.c_id`;

    let sql = `SELECT customer.c_id,customer.c_prefix,customer.c_name,customer.c_s_type,customer.tracking_id,details.awb_no,(SELECT name FROM attributes WHERE attributes.attribute_id  =details.courier_id)as courier_name,details.delivery_date FROM details,attestation,customer WHERE customer.c_id=attestation.c_id AND details.service_id=attestation.a_id  AND details.service_type=10 AND details.deleted = 0 AND attestation.deleted = 0 AND customer.deleted=0 AND details.status_id=24 AND STR_TO_DATE(details.delivery_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}','%d-%m-%Y') AND STR_TO_DATE(details.delivery_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}','%d-%m-%Y') ${sql1} UNION ALL SELECT customer.c_id,customer.c_prefix,customer.c_name,customer.c_s_type,customer.tracking_id,details.awb_no,(SELECT name FROM attributes WHERE attributes.attribute_id  =details.courier_id)as courier_name,details.delivery_date FROM details,visa,customer WHERE customer.c_id=visa.c_id AND details.service_id=visa.v_id AND details.service_type=8 AND details.deleted = 0 AND customer.deleted=0 AND visa.deleted = 0 AND details.status_id=24  AND STR_TO_DATE(details.delivery_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}','%d-%m-%Y') AND STR_TO_DATE(details.delivery_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}','%d-%m-%Y') ${sql1}
    UNION ALL SELECT customer.c_id,customer.c_prefix,customer.c_name,customer.c_s_type,customer.tracking_id,details.awb_no,(SELECT name FROM attributes WHERE attributes.attribute_id  =details.courier_id)as courier_name,details.delivery_date FROM details,apostille,customer WHERE customer.c_id=apostille.c_id AND details.service_id=apostille.a_id  AND details.service_type=17 AND details.deleted = 0  AND apostille.deleted = 0 AND customer.deleted = 0 AND details.status_id=24 AND STR_TO_DATE(details.delivery_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}','%d-%m-%Y') AND STR_TO_DATE(details.delivery_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}','%d-%m-%Y') ${sql1}
    UNION ALL SELECT customer.c_id,customer.c_prefix,customer.c_name,customer.c_s_type,customer.tracking_id,details.awb_no,(SELECT name FROM attributes WHERE attributes.attribute_id  =details.courier_id)as courier_name,details.delivery_date FROM details,translation,customer WHERE customer.c_id=translation.c_id AND details.service_id=translation.a_id  AND details.service_type=20 AND details.deleted = 0 AND customer.deleted = 0 AND translation.deleted = 0  AND details.status_id=24 AND STR_TO_DATE(details.delivery_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}','%d-%m-%Y') AND STR_TO_DATE(details.delivery_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}','%d-%m-%Y') ${sql1} `;

    let paginateSql = `SELECT COUNT(*) as trows from ( SELECT customer.c_id FROM details,attestation,customer WHERE customer.c_id=attestation.c_id AND details.service_id=attestation.a_id  AND details.service_type=10 AND details.deleted = 0 AND attestation.deleted = 0 AND customer.deleted=0 AND details.status_id=24 AND STR_TO_DATE(details.delivery_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}','%d-%m-%Y') AND STR_TO_DATE(details.delivery_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}','%d-%m-%Y') ${sql1}
    UNION ALL
    SELECT customer.c_id FROM details,visa,customer WHERE customer.c_id=visa.c_id AND details.service_id=visa.v_id AND details.service_type=8 AND details.deleted = 0 AND customer.deleted=0 AND visa.deleted = 0 AND details.status_id=24  AND STR_TO_DATE(details.delivery_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}','%d-%m-%Y') AND STR_TO_DATE(details.delivery_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}','%d-%m-%Y') ${sql1}
    UNION ALL
    SELECT customer.c_id FROM details,apostille,customer WHERE customer.c_id=apostille.c_id AND details.service_id=apostille.a_id  AND details.service_type=17 AND details.deleted = 0  AND apostille.deleted = 0 AND customer.deleted = 0 AND details.status_id=24
    AND STR_TO_DATE(details.delivery_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}','%d-%m-%Y') AND STR_TO_DATE(details.delivery_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}','%d-%m-%Y') ${sql1}
    UNION ALL
    SELECT customer.c_id FROM details,translation,customer WHERE customer.c_id=translation.c_id AND details.service_id=translation.a_id  AND details.service_type=20 AND details.deleted = 0 AND customer.deleted = 0 AND translation.deleted = 0  AND details.status_id=24
    AND STR_TO_DATE(details.delivery_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}','%d-%m-%Y') AND STR_TO_DATE(details.delivery_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}','%d-%m-%Y') ${sql1} ) as trows `;

    sql += ` limit ${(data.page - 1) * data.perpage},${data.perpage}`;
    // console.log(paginateSql, "paginateSql");
    let resp = await new Promise((resolve, reject) => {
      con.query(paginateSql, function (err1, lres1) {
        if (err1) {
          console.log(err1);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (lres1.length > 0) {
            console.log(lres1, "lres1lres1lres1");
            resolve({
              status: 1,
              t_rows: lres1[0].trows,
            });
          } else {
            resolve({
              status: 0,
              data: [],
            });
          }
        }
      });
    });
    let response = await new Promise((resolve, reject) => {
      con.query(sql, async function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            let allData = [];
            for (let i = 0; i < result.length; i++) {
              let applicantData = "";
              if (result[i].c_s_type == 8) {
                applicantData = `select visa.*,visa.v_prefix as a_prefix,visa.v_name as a_name,details.awb_no,(SELECT name FROM attributes WHERE attributes.attribute_id  =details.courier_id)as courier_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =visa.v_type)as attestation_type,(SELECT name FROM attributes WHERE attributes.attribute_id =details.d_c_id)as attestation_country from visa left join details on details.service_id = visa.v_id where visa.c_id = ${result[i].c_id} and details.status_id = 24 and details.service_type = 8`;
              } else if (result[i].c_s_type == 10) {
                applicantData = `select attestation.*,details.awb_no,(SELECT name FROM attributes WHERE attributes.attribute_id  =details.courier_id)as courier_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =attestation.a_type)as attestation_type,(SELECT name FROM attributes WHERE attributes.attribute_id =attestation.a_country)as attestation_country,(SELECT name FROM attributes WHERE attributes.attribute_id =details.d_c_id)as attestation_certificate from attestation left join details on details.service_id = attestation.a_id where attestation.c_id = ${result[i].c_id} and details.status_id = 24 and details.service_type = 10`;
              } else if (result[i].c_s_type == 17) {
                applicantData = `select apostille.*,details.awb_no,(SELECT name FROM attributes WHERE attributes.attribute_id  =details.courier_id)as courier_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =apostille.a_type)as attestation_type,(SELECT name FROM attributes WHERE attributes.attribute_id =apostille.a_country)as attestation_country,(SELECT name FROM attributes WHERE attributes.attribute_id =details.d_c_id)as attestation_certificate from apostille left join details on details.service_id = apostille.a_id where apostille.c_id = ${result[i].c_id} and details.status_id = 24 and details.service_type = 17`;
              } else {
                applicantData = `select translation.*,details.awb_no,(SELECT name FROM attributes WHERE attributes.attribute_id  =details.courier_id)as courier_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =translation.a_type)as attestation_type,(SELECT name FROM attributes WHERE attributes.attribute_id =translation.a_country)as attestation_country,(SELECT name FROM attributes WHERE attributes.attribute_id =details.d_c_id)as attestation_certificate from translation left join details on details.service_id = translation.a_id where translation.c_id = ${result[i].c_id} and details.status_id = 24 and details.service_type = 20`;
              }
              // console.log(
              //   applicantData,
              //   "applicantData@@@@@@@@@@@@@@@@@@@@@@@@"
              // );
              let res = await new Promise((resolve, reject) => {
                con.query(applicantData, function (err11, result11) {
                  if (err11) {
                    console.log(err11);
                    resolve({ status: 0, message: "Something went to wrong" });
                  } else {
                    if (result11.length > 0) {
                      allData.push({ ...result[i], applicantData: result11 });
                      // if(result[i].length - 1 == i){
                      resolve({
                        status: 1,
                        data: allData,
                        t_rows: resp.t_rows,
                      });
                      // }
                    } else {
                      resolve({
                        status: 0,
                        data: [],
                      });
                    }
                  }
                });
                if (result[i].length - 1 == i) {
                  resolve({
                    status: 1,
                    data: allData,
                    t_rows: resp.t_rows,
                  });
                }
              });
            }
            resolve({
              status: 1,
              data: allData,
              t_rows: resp.t_rows,
            });
          } else {
            resolve({
              status: 1,
              data: [],
              t_rows: 0,
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function getallcourierreport(data) {
  try {
    let sql1 = "";
    if (data.courier_id != 0) {
      sql1 = ` and details.courier_id=${data.courier_id}`;
    }
    if (data.user_type == 0) {
      if (typeof data.branch_name != "undefined") {
        sql1 += ` AND customer.branch_id=${data.branch_name}`;
      }
      if (typeof data.u_name != "undefined" && data.u_name != 0) {
        sql1 += ` AND customer.u_id=${data.u_name}`;
      }
    } else if (data.user_type == 1) {
      if (typeof data.u_name != "undefined" && data.u_name != 0) {
        sql1 += ` AND (customer.u_id=${data.u_name} or customer.foreign_branchuser = ${data.u_name})`;
      } else {
        sql1 += ` AND (customer.branch_id=${data.branch_id} or customer.foreign_branch=${data.branch_id})`;
      }
    } else if (data.user_type == 3) {
      sql1 += ` AND (customer.u_id=${data.u_id} or customer.foreign_branchuser=${data.u_id})`;
    }
    sql1 += ` GROUP BY customer.c_id`;

    let sql = `SELECT customer.c_id,customer.c_prefix,customer.c_name,customer.c_s_type,customer.tracking_id,details.awb_no,(SELECT name FROM attributes WHERE attributes.attribute_id  =details.courier_id)as courier_name,details.delivery_date FROM details,attestation,customer WHERE customer.c_id=attestation.c_id AND details.service_id=attestation.a_id  AND details.service_type=10 AND details.deleted = 0 AND attestation.deleted = 0 AND customer.deleted=0 AND details.status_id=24 AND STR_TO_DATE(details.delivery_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}','%d-%m-%Y') AND STR_TO_DATE(details.delivery_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}','%d-%m-%Y') ${sql1} UNION ALL SELECT customer.c_id,customer.c_prefix,customer.c_name,customer.c_s_type,customer.tracking_id,details.awb_no,(SELECT name FROM attributes WHERE attributes.attribute_id  =details.courier_id)as courier_name,details.delivery_date FROM details,visa,customer WHERE customer.c_id=visa.c_id AND details.service_id=visa.v_id AND details.service_type=8 AND details.deleted = 0 AND customer.deleted=0 AND visa.deleted = 0 AND details.status_id=24  AND STR_TO_DATE(details.delivery_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}','%d-%m-%Y') AND STR_TO_DATE(details.delivery_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}','%d-%m-%Y') ${sql1}
    UNION ALL SELECT customer.c_id,customer.c_prefix,customer.c_name,customer.c_s_type,customer.tracking_id,details.awb_no,(SELECT name FROM attributes WHERE attributes.attribute_id  =details.courier_id)as courier_name,details.delivery_date FROM details,apostille,customer WHERE customer.c_id=apostille.c_id AND details.service_id=apostille.a_id  AND details.service_type=17 AND details.deleted = 0  AND apostille.deleted = 0 AND customer.deleted = 0 AND details.status_id=24 AND STR_TO_DATE(details.delivery_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}','%d-%m-%Y') AND STR_TO_DATE(details.delivery_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}','%d-%m-%Y') ${sql1}
    UNION ALL SELECT customer.c_id,customer.c_prefix,customer.c_name,customer.c_s_type,customer.tracking_id,details.awb_no,(SELECT name FROM attributes WHERE attributes.attribute_id  =details.courier_id)as courier_name,details.delivery_date FROM details,translation,customer WHERE customer.c_id=translation.c_id AND details.service_id=translation.a_id  AND details.service_type=20 AND details.deleted = 0 AND customer.deleted = 0 AND translation.deleted = 0  AND details.status_id=24 AND STR_TO_DATE(details.delivery_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}','%d-%m-%Y') AND STR_TO_DATE(details.delivery_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}','%d-%m-%Y') ${sql1} `;

    let response = await new Promise((resolve, reject) => {
      con.query(sql, async function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              data: result,
            });
          } else {
            resolve({
              status: 1,
              data: [],
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function getAllNewLead(data) {
  try {
    let tDate = moment().format("DD-MM-YYYY");
    let record = [];
    getuserquery = `select * from users where u_id=${data.id} and deleted=0`;
    let response = await new Promise((resolve, reject) => {
      con.query(getuserquery, async function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            if (result[0].user_type == 1) {
              // Jil After Form Link get Lead with their Responsible Person
              getallchilduser = `select * from users where ((p_u_id=${data.id} OR p_u_id=1 OR p_u_id IN (SELECT users.u_id  from users where users.branch_id= ${result[0].branch_id})) and branch_id=${result[0].branch_id}) and deleted=0`;

              // getallchilduser = `select * from users where ((p_u_id=${data.id} OR p_u_id=1) and branch_id=${result[0].branch_id}) and deleted=0`;
              con.query(getallchilduser, function (err, res) {
                if (err) {
                  console.log(err);
                  resolve({ status: 0, message: "Something went to wrong" });
                } else {
                  res.forEach(function (r) {
                    record.push(r.u_id);
                  });
                  record.push(data.id);
                  resolve({
                    record: record,
                    type: result[0].user_type,
                    branch_id: result[0].branch_id,
                  });
                }
              });
            } else if (result[0].user_type == 2) {
              let branchallocation = await getzonemanagerbranch(data.id);
              // Jil After Form Link get Lead with their Responsible Person
              getallchilduser = `select * from users where ((p_u_id=${data.id} OR p_u_id=1 OR p_u_id IN (SELECT users.u_id  from users where users.branch_id IN (${branchallocation.branchdata}))) and branch_id IN (${branchallocation.branchdata})) and deleted=0`;
              // getallchilduser = `select * from users where ((p_u_id=${data.id} OR p_u_id=1) and branch_id=${result[0].branch_id}) and deleted=0`;
              con.query(getallchilduser, function (err, res) {
                if (err) {
                  console.log(err);
                  resolve({ status: 0, message: "Something went to wrong" });
                } else {
                  res.forEach(function (r) {
                    record.push(r.u_id);
                  });
                  resolve({
                    record: record,
                    type: result[0].user_type,
                    branch_id: result[0].branch_id,
                  });
                }
              });
            } else {
              resolve({
                type: result[0].user_type,
                branch_id: result[0].branch_id,
              });
            }
          }
        }
      });
    });

    let uids = [];
    let bresponse = `select *,(select u_id FROM users where user_type=1 and deleted=0 AND branch_id=${response.branch_id}) as branch_uid from users where u_id=${data.id} and deleted=0`;
    let bres = await new Promise((resolve, reject) => {
      con.query(bresponse, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result) {
            result.forEach(function (r) {
              resolve({
                buid: r.branch_uid,
              });
            });
          } else {
            resolve({
              buid: 0,
            });
          }
        }
      });
    });
    if (response.type == 1 || response.type == 2) {
      // Jil After Form Link get Lead with their Responsible Person
      getleadquery = `SELECT *,
      (Select u_name from users where elead.l_created_by = users.u_id) as createdBy,
       (SELECT  CASE
            WHEN l_source =282 
               THEN (SELECT m_c_name FROM main_customer WHERE m_c_id=reference_id) 
               ELSE (SELECT u_name FROM users WHERE users.u_id=elead.reference_id)
       END  )as marketing_user,
      (SELECT u_name FROM users WHERE users.u_id=elead.l_allocate_to)as allocatedTo,
      (select users.u_name from users where users.u_id = (select users.marketing_parent_id FROM users where elead.l_created_by = users.u_id)) as resp_per, 
      (SELECT b_name FROM branch WHERE branch.branch_id =elead.l_branch_id)as branch,
      (SELECT name FROM attributes WHERE attributes.attribute_id =elead.l_status)as status,
      (SELECT name FROM attributes WHERE attributes.attribute_id =elead.l_source)as source FROM elead,users WHERE elead.deleted=0 and elead.read_status=0 and elead.convert_status=0 and users.deleted=0 and (elead.l_source=271 or elead.l_source=282 or elead.l_source=599) and (elead.l_created_by IN(${record}) or elead.l_allocate_to IN(${record}) ) GROUP by elead.lead_id `;
    } else {
      // Jil After Form Link get Lead with their Responsible Person
      getleadquery = `SELECT *,
      (Select u_name from users where elead.l_created_by = users.u_id) as createdBy,
      (SELECT  CASE
           WHEN l_source =282 
              THEN (SELECT m_c_name FROM main_customer WHERE m_c_id=reference_id) 
              ELSE (SELECT u_name FROM users WHERE users.u_id=elead.reference_id)
      END  )as marketing_user,
      (SELECT u_name FROM users WHERE users.u_id=elead.l_allocate_to)as allocatedTo,
      (select users.u_name from users where users.u_id = (select users.marketing_parent_id FROM users where elead.l_created_by = users.u_id)) as resp_per, 
      (SELECT b_name FROM branch WHERE branch.branch_id =elead.l_branch_id)as branch,
      (SELECT name FROM attributes WHERE attributes.attribute_id =elead.l_status)as status,
      (SELECT name FROM attributes WHERE attributes.attribute_id =elead.l_source)as source FROM elead, users 
      WHERE elead.deleted=0 and elead.read_status=0 and elead.convert_status=0 and (elead.l_source=271 or elead.l_source=282 or elead.l_source=599) AND users.u_id = elead.l_created_by`;
      if (response.type == 3) {
        // Jil After Form Link get Lead with their Responsible Person
        getleadquery += ` and (elead.l_created_by=${data.id} or elead.l_allocate_to=${data.id} OR elead.reference_id = ${data.id} OR users.marketing_parent_id =${data.id})`;
      }
    }
    getleadquery += ` order by lead_id DESC`;
    let response1 = await new Promise((resolve, reject) => {
      con.query(getleadquery, function (err, cres) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (cres.length > 0) {
            resolve({
              status: 1,
              data: cres,
              counter: cres.length,
              buid: bres.buid,
            });
          } else {
            resolve({
              status: 0,
              data: [],
              counter: 0,
              buid: bres.buid,
            });
          }
        }
      });
    });
    return response1;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

// JIl Cron for auto logout on day end

async function logoutTodayUser() {
  try {
    let date = moment().format("DD-MM-YYYY");
    let time = moment().format("HH:mm:ss");

    let sql = `SELECT * FROM login_activity_log  where date = '${date}' and logout_time = ''`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went wrong" });
        } else {
          if (result.length > 0) {
            result.map((e) => {
              const startTime = moment(e.login_time, "HH:mm:ss ");
              const endTime = moment(time, "HH:mm:ss ");
              const duration = moment.duration(endTime.diff(startTime));
              const hours = parseInt(duration.asHours());
              const minutes = parseInt(duration.asMinutes()) % 60;
              sql2 = `UPDATE users SET check_in_status = '0' WHERE users.u_id = ${e.u_id}`;
              con.query(sql2, function (err, result) {
                if (err) {
                  console.log(err);
                  resolve({ status: 0, message: "Something went to wrong" });
                } else {
                  if (result.affectedRows > 0) {
                    resolve({ status: 1, result: "Done..." });
                  } else {
                    resolve({
                      status: 0,
                      message: "Something went to wrong",
                    });
                  }
                }
              });
              login_activity_sql = `UPDATE login_activity_log SET logout_time='${time}' , total_duration = '${hours} hours and ${minutes} minutes' WHERE u_id = ${e.u_id} and a_id =${e.a_id}`;
              con.query(
                login_activity_sql,
                function (loginactivityerr, loginactivityresult) {
                  if (loginactivityerr) {
                    console.log(loginactivityerr);
                    resolve({ status: 0, message: "Something went wrong" });
                  } else {
                    if (loginactivityresult.affectedRows > 0) {
                      console.log("Activity Log Updated");
                    }
                  }
                }
              );
            });
            resolve({ status: 1, message: "Member Logout Time Update" });
          } else {
            resolve({ status: 1, message: "No User Found" });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function sendMailofDetailStatus() {
  try {
    let curr_date = moment().format("DD-MM-YYYY");
    let insdate = moment().add(-2, "d").format("DD-MM-YYYY");
    let response = await new Promise(async (resolve, reject) => {
      sql = `SELECT customer.*,visa.v_id,details.detail_id,details.status_id,details.delivery_date FROM customer,visa,details WHERE customer.c_id=visa.c_id AND visa.v_id=details.service_id AND details.service_type=8 AND details.deleted=0 AND visa.deleted=0 AND customer.deleted=0 AND details.status_mail_date='${insdate}' GROUP BY customer.c_id 
        UNION  SELECT customer.*,attestation.a_id,details.detail_id,details.status_id,details.delivery_date FROM customer,attestation,details WHERE customer.c_id=attestation.c_id AND attestation.a_id=details.service_id AND details.service_type=10 AND details.deleted=0 AND attestation.deleted=0 AND customer.deleted=0 AND details.status_mail_date='${insdate}' GROUP BY customer.c_id 
        UNION SELECT customer.*,apostille.a_id,details.detail_id,details.status_id,details.delivery_date FROM customer,apostille,details WHERE customer.c_id=apostille.c_id AND apostille.a_id=details.service_id AND details.service_type=17 AND details.deleted=0 AND apostille.deleted=0 AND customer.deleted=0 AND details.status_mail_date='${insdate}' GROUP BY customer.c_id 
        UNION SELECT customer.*,translation.a_id,details.detail_id,details.status_id,details.delivery_date FROM customer,translation,details WHERE customer.c_id=translation.c_id AND translation.a_id=details.service_id AND details.service_type=20 AND details.deleted=0 AND translation.deleted=0 AND customer.deleted=0 AND details.status_mail_date='${insdate}' GROUP BY customer.c_id`;
      con.query(sql, async function (err, results) {
        if (err) {
          log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (results.length > 0) {
            results.forEach(function (result) {
              resolve({
                status: 1,
                result: results,
              });
            });
          }
        }
      });
    });
    let record = [];
    response.result.map(async (k) => {
      record.push(k);
    });
    record.map(async (data, index) => {
      sqlllll = `select due_amt from payment where deleted=0 and c_id=${data.c_id} order by payment_id DESC limit 1`;
      let responsee = await new Promise((resolve, reject) => {
        con.query(sqlllll, async function (errr, resulttt) {
          if (errr) {
            console.log(errr);
            resolve({ status: 0, message: "Something went to wrong" });
          } else {
            if (resulttt.length > 0) {
              resolve({ status: 1, result: resulttt[0].due_amt });
            }
          }
        });
      });

      sql123 = `select awb_no,courier_id,(select name from attributes where attributes.attribute_id= details.courier_id)as courier_name  from details where deleted=0 and  detail_id = ${data.detail_id}`;
      let res123 = await new Promise((resolve, reject) => {
        con.query(sql123, async function (errr, resulttt) {
          if (errr) {
            console.log(errr);
            resolve({ status: 0, message: "Something went to wrong" });
          } else {
            if (resulttt.length > 0) {
              resolve({
                status: 1,
                awb_no: resulttt[0].awb_no,
                courier_name: resulttt[0].courier_name,
              });
            }
          }
        });
      });

      let etemp = 0;
      // if (data.status_id == 13) {
      //   etemp = parseInt(18);
      // } else
      if (data.status_id == 14) {
        etemp = parseInt(19);
      } else if (data.status_id == 15) {
        etemp = parseInt(20);
      } else if (data.status_id == 16) {
        etemp = parseInt(21);
      } else if (data.status_id == 17) {
        etemp = parseInt(22);
      }
      // else if (data.status_id == 18) {
      //   etemp = parseInt(23);
      // }
      else if (data.status_id == 19) {
        etemp = parseInt(24);
      } else if (data.status_id == 20) {
        if (data.c_tax == 0) {
          etemp = parseInt(25);
        } else {
          etemp = parseInt(281);
        }
      }
      // else if (data.status_id == 21) {
      //   etemp = parseInt(26);
      // }
      //1603
      // else if (data.status_id == 22) {
      //   if (responsee.result != "0") {
      //     etemp = parseInt(27);
      //   } else {
      //     etemp = parseInt(28);
      //   }
      // }
      // else if (data.status_id == 23) {
      //   etemp = parseInt(29);
      // }
      // else if (data.status_id == 24) {
      //   etemp = parseInt(30);
      // }
      // else if (data.status_id == 25) {
      //   etemp = parseInt(31);
      // }
      // else if (data.status_id == 26) {
      //   etemp = parseInt(32);
      // }
      let senderMailSetting = await sendmessage.getEmailSetting(
        data.created_id
      );

      sqlll = `SELECT u_email FROM users WHERE u_id = ${data.created_id} `;
      let ccmail = await new Promise((resolve, reject) => {
        con.query(sqlll, async function (err1, result1) {
          if (err1) {
            console.log(err1);
            resolve({ status: 0, message: "Something went to wrong" });
          } else {
            if (result1.length > 0) {
              resolve({ status: 1, result: result1[0].u_email });
            } else {
              resolve({
                status: 0,
                message: "Something went to wrong",
              });
            }
          }
        });
      });

      let message = await sendmessage.getTemplate(etemp);
      if (message.status != 0) {
        message.template = message.template.replace(
          "{:name:}",
          data.c_prefix + " " + data.c_name
        );
        message.template = message.template.replace(
          "{:d_address:}",
          data.d_address
        );
        message.template = message.template.replace(
          "{:due_amt:}",
          responsee.result
        );
        message.template = message.template.replace(
          "{:awb_no:}",
          res123.awb_no
        );
        message.template = message.template.replace(
          "{:courier:}",
          res123.courier_name
        );
        let mess =
          (message.header == 1
            ? typeof senderMailSetting.email_template_header !=
              undefined && senderMailSetting.email_template_header != undefined &&
              senderMailSetting.email_template_header != null
              ? senderMailSetting.email_template_header
              : ""
            : "") +
          message.template +
          (message.b_d_id != 0
            ? message.b_d_id == 1
              ? senderMailSetting.gst_bankdetails
              : message.b_d_id == 2
                ? senderMailSetting.ngst_bankdetails
                : message.b_d_id == 3
                  ? senderMailSetting.general_bankdetails
                  : ""
            : "") +
          // (data.created_id == 1
          //   ? data.c_tax == 0
          //     ? senderMailSetting.bank_details
          //     : senderMailSetting.nongst_bank_details
          //   : data.c_tax == 0
          //     ? senderMailSetting.b_bank_details
          //     : senderMailSetting.b_nongst_bank_deatils) +
          (message.footer == 1 ? senderMailSetting.email_template_footer : "") +
          (message.signature == 1 ? senderMailSetting.email_signature : "");

        CCMailSetting = await sendmessage.getEmailSetting(1);
        sendmessagenow = sendmessage.customermessagesend(
          senderMailSetting,
          data.c_email,
          mess,
          message.subject,
          etemp != 281 && etemp != 25 && ccmail.result, //CCMailSetting.e_username,  // user mail
          ccmail.result, // reply mail
          1,
          "info@hyderabadattestation.com"
        );
      }
      let sql2 = `UPDATE details SET status_mail_date='${curr_date}' WHERE detail_id = ${data.detail_id} `;
      con.query(sql2, async function (errr, resulttt) {
        if (errr) {
          console.log(errr);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (resulttt.length > 0) {
            resolve({ status: 1, message: "Updated Successfully..." });
          }
        }
      });
    });
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function searchallcover(data) {
  try {
    let newobj = {
      c_date: data.c_date,
      branch_name: data.branch_name,
      branch_id: data.branch_id,
      u_id: data.u_id,
      a_code: data.a_code,
      created_id: data.created_id,
    };
    let attestation_data;
    let apostille_data;
    let translation_data;
    if (data.s_type == 0 || data.s_type == 10) {
      attestation_data = await attestationcoverletter(newobj);
    }
    if (data.s_type == 0 || data.s_type == 17) {
      apostille_data = await apostillecoverletter(newobj);
    }
    if (data.s_type == 0 || data.s_type == 20) {
      translation_data = await translationcoverletter(newobj);
    }

    let newobj1 = {
      c_date: data.c_date,
      branch_name: data.branch_name,
      branch_id: data.branch_id,
      u_id: data.u_id,
      v_code: data.a_code,
      created_id: data.created_id,
    };

    let visa_data;
    if (data.s_type == 0 || data.s_type == 8) {
      visa_data = await visacoverletter(newobj1);
    }
    //2303
    // if (data.u_id == 1) {
    //   sql = `select * from gsetting`;
    // } else {
    sql = `SELECT *,branch.b_hsn_code as hsn_code,b_bank_details as bank_details,company_name as c_name,branch.b_gstno as c_gstno FROM users,branch WHERE users.branch_id=branch.branch_id AND u_id=${data.u_id} AND users.deleted=0 AND branch.deleted=0`;
    // }
    let responsee = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            con.query(sql, function (err, res) {
              if (err) {
                console.log(err);
                resolve({ status: 0, message: "Something went to wrong" });
              } else {
                if (res.length > 0) {
                  resolve({
                    settingdata: res[0],
                  });
                }
              }
            });
          }
        }
      });
    });

    let response = await new Promise((resolve, reject) => {
      resolve({
        attestation_data: attestation_data,
        visa_data: visa_data,
        apostille_data: apostille_data,
        translation_data: translation_data,
        settingdata: responsee.settingdata,
      });
    });

    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function allcoverpdf(data) {
  try {
    let response = await new Promise(async (resolve, reject) => {
      let newobj = {
        c_date: data.c_date,
        branch_name: data.branch_name,
        branch_id: data.branch_id,
        u_id: data.u_id,
        a_code: data.a_code,
        created_id: data.created_id,
      };
      let attestation_data;
      let apostille_data;
      let translation_data;
      if (data.s_type == 0 || data.s_type == 10) {
        attestation_data = await attestationcoverletter(newobj);
      } else {
        attestation_data = [];
      }
      if (data.s_type == 0 || data.s_type == 17) {
        apostille_data = await apostillecoverletter(newobj);
      } else {
        apostille_data = [];
      }
      if (data.s_type == 0 || data.s_type == 20) {
        translation_data = await translationcoverletter(newobj);
      } else {
        translation_data = [];
      }

      let newobj1 = {
        c_date: data.c_date,
        branch_name: data.branch_name,
        branch_id: data.branch_id,
        u_id: data.u_id,
        v_code: data.a_code,
        created_id: data.created_id,
      };

      let visa_data;
      if (data.s_type == 0 || data.s_type == 8) {
        visa_data = await visacoverletter(newobj1);
      } else {
        visa_data = [];
      }

      let alldata = {
        attestation_data: attestation_data,
        apostille_data: apostille_data,
        translation_data: translation_data,
        visa_data: visa_data,
      };

      let imageAsBase64;
      if (typeof attestation_data.status != "undefined") {
        if (
          fs.existsSync(
            `./public/Assets/images/${
            // attestation_data.user_data.u_id == 1 ? "adminlogo" :
            "branchlogo"
            }/${attestation_data.settingdata.logo}`
          )
        ) {
          imageAsBase64 = fs.readFileSync(
            `./public/Assets/images/${
            // attestation_data.user_data.u_id == 1 ? "adminlogo" :
            "branchlogo"
            }/${attestation_data.settingdata.logo}`,
            { encoding: "base64" }
          );
        }
      } else if (typeof visa_data.status != "undefined") {
        if (
          fs.existsSync(
            `./public/Assets/images/${
            // visa_data.user_data.u_id == 1 ? "adminlogo" :
            "branchlogo"
            }/${visa_data.settingdata.logo}`
          )
        ) {
          imageAsBase64 = fs.readFileSync(
            `./public/Assets/images/${
            // visa_data.user_data.u_id == 1 ? "adminlogo" :
            "branchlogo"
            }/${visa_data.settingdata.logo}`,
            { encoding: "base64" }
          );
        }
      } else if (typeof apostille_data.status != "undefined") {
        if (
          fs.existsSync(
            `./public/Assets/images/${
            // apostille_data.user_data.u_id == 1 ? "adminlogo" :
            "branchlogo"
            }/${apostille_data.settingdata.logo}`
          )
        ) {
          imageAsBase64 = fs.readFileSync(
            `./public/Assets/images/${
            // apostille_data.user_data.u_id == 1 ? "adminlogo" :
            "branchlogo"
            }/${apostille_data.settingdata.logo}`,
            { encoding: "base64" }
          );
        }
      } else if (typeof translation_data.status != "undefined") {
        if (
          fs.existsSync(
            `./public/Assets/images/${
            // translation_data.user_data.u_id == 1 ? "adminlogo" :
            "branchlogo"
            }/${translation_data.settingdata.logo}`
          )
        ) {
          imageAsBase64 = fs.readFileSync(
            `./public/Assets/images/${
            // translation_data.user_data.u_id == 1 ? "adminlogo" :
            "branchlogo"
            }/${translation_data.settingdata.logo}`,
            { encoding: "base64" }
          );
        }
      }

      pdf
        .create(allcovertemplate(alldata, data, imageAsBase64), {
          childProcessOptions: {
            env: {
              OPENSSL_CONF: "/dev/null",
            },
          },
        })
        .toFile(`${__dirname}/public/Assets/allcover.pdf`, (err) => {
          if (err) {
            return console.log("error");
          }
          resolve({
            message: "done",
          });
        });
    });

    if (data.status_id == 1) {
      let response1 = await new Promise(async (resolve, reject) => {
        const resp = await sendallservicemail(data);
        resolve({
          result: resp,
          ino: response.ino,
          message: "Mail send sucessfully...",
        });
      });
      return response1;
    } else {
      return response;
    }

    // return response;
  } catch (err) {
    return { status: 0, message: "Invalid Call Try Again1" };
  }
}

async function sendallservicemail(data) {
  try {
    let response = await new Promise(async (resolve, reject) => {
      let senderMailSetting = await sendmessage.getEmailSetting(data.u_id);

      sqlll = `SELECT u_email FROM users WHERE u_id = ${data.u_id} `;
      let ccmail = await new Promise((resolve, reject) => {
        con.query(sqlll, async function (err1, result1) {
          if (err1) {
            console.log(err1);
            resolve({ status: 0, message: "Something went to wrong" });
          } else {
            if (result1.length > 0) {
              resolve({ status: 1, result: result1[0].u_email });
            } else {
              resolve({
                status: 0,
                message: "Something went to wrong",
              });
            }
          }
        });
      });

      let message = await sendmessage.getTemplate(4);
      if (message.status != 0) {
        let mess =
          (message.header == 1
            ? typeof senderMailSetting.email_template_header !=
              undefined && senderMailSetting.email_template_header != undefined &&
              senderMailSetting.email_template_header != null
              ? senderMailSetting.email_template_header
              : ""
            : "") +
          message.template +
          (message.b_d_id != 0
            ? message.b_d_id == 1
              ? senderMailSetting.gst_bankdetails
              : message.b_d_id == 2
                ? senderMailSetting.ngst_bankdetails
                : message.b_d_id == 3
                  ? senderMailSetting.general_bankdetails
                  : ""
            : "") +
          (message.footer == 1 ? senderMailSetting.email_template_footer : "") +
          (message.signature == 1 ? senderMailSetting.email_signature : "");
        CCMailSetting = await sendmessage.getEmailSetting(1);
        let att = [];

        let pathname = __dirname + "/public/Assets";
        att.push({ url: `allcover.pdf` });
        sendmessagenow = sendmessage.messagesend(
          senderMailSetting,
          data.email,
          mess,
          message.subject,
          att,
          // CCMailSetting.cc_email, //cc mail// CCMailSetting.e_username,
          ccmail.result, // reply mail
          1,
          pathname
        );
        sendmessagenow = sendmessage.messagesend(
          senderMailSetting,
          CCMailSetting.cc_email,
          mess,
          message.subject,
          att,
          // CCMailSetting.cc_email, //cc mail// CCMailSetting.e_username,
          ccmail.result, // reply mail
          1,
          pathname
        );
        resolve({
          status: 1,
          message:
            "translation cover letter with Attechment send to your mail...",
        });
      }
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function searchstatuswiseleadreport(data) {
  try {
    let record = [];
    getuserquery = `select * from users where u_id=${data.u_id} and deleted=0`;
    let response = await new Promise((resolve, reject) => {
      con.query(getuserquery, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            if (result[0].user_type == 1) {
              // Jil After Form Link get Lead with their Responsible Person
              getallchilduser = `select * from users where ((p_u_id=${data.u_id} OR p_u_id=1 OR p_u_id IN (SELECT users.u_id  from users where users.branch_id= ${result[0].branch_id})) and branch_id=${result[0].branch_id}) and deleted=0`;

              // getallchilduser = `select * from users where ((p_u_id=${data.id} OR p_u_id=1) and branch_id=${result[0].branch_id}) and deleted=0`;
              con.query(getallchilduser, function (err, res) {
                if (err) {
                  console.log(err);
                  resolve({ status: 0, message: "Something went to wrong" });
                } else {
                  res.forEach(function (r) {
                    record.push(r.u_id);
                  });
                  record.push(data.u_id);
                  resolve({
                    record: record,
                    type: result[0].user_type,
                  });
                }
              });
            } else {
              resolve({
                type: result[0].user_type,
              });
            }
          }
        }
      });
    });
    if (response.type == 1) {
      getleadquery = `SELECT lead_id,COUNT(*) as tlead,attributes.name,l_date FROM elead,attributes WHERE elead.l_status=attributes.attribute_id and STR_TO_DATE(l_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}','%d-%m-%Y') AND STR_TO_DATE(l_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}','%d-%m-%Y') and elead.deleted=0`;
      if (
        typeof data.branch_id != "undefined" &&
        data.branch_id != "" &&
        data.user_type == 1
      ) {
        getleadquery += ` and l_branch_id=${data.branch_id}`;
      }
      if (
        typeof data.u_name != "undefined" &&
        data.u_name != "" &&
        data.u_name != 0
      ) {
        getleadquery += ` and (l_created_by=${data.u_name} OR l_allocate_to=${data.u_name} )`;
      }
      getleadquery += ` GROUP by l_status,MONTH(STR_TO_DATE(l_date,'%d-%m-%Y')) ORDER by STR_TO_DATE(l_date,'%d-%m-%Y') DESC`;
    } else if (data.user_type == 0) {
      getleadquery = `SELECT lead_id,COUNT(*) as tlead,attributes.name,l_date FROM elead,attributes WHERE elead.l_status=attributes.attribute_id and STR_TO_DATE(l_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}','%d-%m-%Y') AND STR_TO_DATE(l_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}','%d-%m-%Y') and elead.deleted=0`;
      if (typeof data.branch_name != "undefined" && data.branch_name != "") {
        getleadquery += ` and l_branch_id=${data.branch_name}`;
      }
      if (
        typeof data.u_name != "undefined" &&
        data.u_name != "" &&
        data.u_name != 0
      ) {
        getleadquery += ` and (l_created_by=${data.u_name} OR l_allocate_to=${data.u_name} )`;
      }
      getleadquery += ` GROUP by l_status,MONTH(STR_TO_DATE(l_date,'%d-%m-%Y')) ORDER by STR_TO_DATE(l_date,'%d-%m-%Y') DESC`;
    } else if (data.user_type == 3) {
      getleadquery = `SELECT lead_id,COUNT(*) as tlead,attributes.name,l_date FROM elead,attributes,users WHERE elead.l_created_by=users.u_id AND
      elead.l_status=attributes.attribute_id and STR_TO_DATE(l_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}','%d-%m-%Y') AND STR_TO_DATE(l_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}','%d-%m-%Y') and elead.deleted=0 and (l_created_by=${data.u_id} or l_allocate_to=${data.u_id} 
      OR users.marketing_parent_id =${data.u_id}) GROUP by l_status,MONTH(STR_TO_DATE(l_date,'%d-%m-%Y')) ORDER by STR_TO_DATE(l_date,'%d-%m-%Y') DESC`;
    }
    aleadquery = getleadquery;
    getleadquery += ` limit ${(data.page - 1) * data.perpage},${data.perpage}`;
    let response1 = await new Promise(async (resolve, reject) => {
      con.query(aleadquery, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            con.query(getleadquery, function (err, res) {
              if (err) {
                console.log(err);
                resolve({ status: 0, message: "Something went to wrong" });
              } else {
                if (res.length > 0) {
                  resolve({
                    status: 1,
                    data: res,
                    adata: result,
                    t_rows: result.length,
                  });
                }
              }
            });
          } else {
            resolve({
              status: 1,
              data: [],
              adata: [],
              t_rows: 0,
            });
          }
        }
      });
    });

    return response1;
  } catch (err) {
    return { status: 0, message: "Invalid Call Try Again1" };
  }
}

async function generatecollectedreport(data) {
  try {
    let record = [];
    getuserquery = `select * from users where u_id=${data.u_id} and deleted=0`;
    let response = await new Promise((resolve, reject) => {
      con.query(getuserquery, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            if (result[0].user_type == 1) {
              getallchilduser = `select * from users where (p_u_id=${data.u_id} and branch_id=${result[0].user_type}) and deleted=0`;

              con.query(getallchilduser, function (err, res) {
                if (err) {
                  console.log(err);
                  resolve({ status: 0, message: "Something went to wrong" });
                } else {
                  res.forEach(function (r) {
                    record.push(r.u_id);
                  });
                  record.push(data.u_id);
                  resolve({
                    record: record,
                    type: result[0].user_type,
                  });
                }
              });
            } else {
              resolve({
                type: result[0].user_type,
              });
            }
          }
        }
      });
    });
    if (response.type == 1) {
      if (data.s_type == 10) {
        getattesql = `SELECT customer.*,details.*,attestation.*,(SELECT COUNT(*) FROM details where details.service_type=10 AND details.deleted=0) as trows,(SELECT name FROM attributes WHERE attributes.attribute_id  =attestation.a_code)as code,(SELECT name FROM attributes WHERE attributes.attribute_id  =attestation.a_type)as attestation_type,(SELECT name FROM attributes WHERE attributes.attribute_id  =attestation.a_country)as attestation_country,(SELECT c_prefix FROM customer WHERE customer.c_id=attestation.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=attestation.c_id) AS customer_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =details.d_c_id)as certificate,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname  FROM details,attestation,customer WHERE customer.c_id=attestation.c_id AND details.service_id=attestation.a_id AND details.service_type=10 AND
        STR_TO_DATE(details.collection_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(details.collection_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y") and (customer.foreign_branch = ${data.branch_id} OR customer.branch_id = ${data.branch_id}) and details.deleted=0 and attestation.deleted=0 and customer.deleted=0 and details.status_id=23`;
      } else if (data.s_type == 8) {
        getattesql = `SELECT customer.*,details.*,visa.*,(SELECT COUNT(*) FROM details where details.service_type=8 AND details.deleted=0) as trows,(SELECT name FROM attributes WHERE attributes.attribute_id  =visa.v_code)as code,(SELECT name FROM attributes WHERE attributes.attribute_id  =visa.v_type)as visa_type,(SELECT name FROM attributes WHERE attributes.attribute_id  =details.d_c_id)as visa_country,(SELECT c_prefix FROM customer WHERE customer.c_id=visa.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=visa.c_id) AS customer_name,(SELECT GROUP_CONCAT(attributes.name SEPARATOR ',') as name FROM attributes where FIND_IN_SET (attributes.attribute_id , visa.v_supporting_doc)) as certificatetype,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname  FROM details,visa,customer WHERE customer.c_id=visa.c_id AND details.service_id=visa.v_id AND details.service_type=8 AND details.deleted=0 and visa.deleted=0 and customer.deleted=0 AND STR_TO_DATE(details.collection_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(details.collection_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y") and (customer.foreign_branch = ${data.branch_id} OR customer.branch_id = ${data.branch_id}) and details.status_id=23`;
      } else if (data.s_type == 17) {
        getattesql = `SELECT customer.*,details.*,apostille.*,(SELECT COUNT(*) FROM details where details.service_type=17 AND details.deleted=0) as trows,(SELECT name FROM attributes WHERE attributes.attribute_id  =apostille.a_code)as code,(SELECT name FROM attributes WHERE attributes.attribute_id  =apostille.a_type)as apostille_type,(SELECT name FROM attributes WHERE attributes.attribute_id  =apostille.a_country)as apostille_country,(SELECT c_prefix FROM customer WHERE customer.c_id=apostille.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=apostille.c_id) AS customer_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =details.d_c_id)as certificate,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname  FROM details,apostille,customer WHERE customer.c_id=apostille.c_id AND details.service_id=apostille.a_id AND details.service_type=17 AND details.deleted=0 and apostille.deleted=0 and customer.deleted=0 AND STR_TO_DATE(details.collection_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(details.collection_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y") and (customer.foreign_branch = ${data.branch_id} OR customer.branch_id = ${data.branch_id}) and details.status_id=23`;
      } else {
        getattesql = `SELECT customer.*,details.*,translation.*,(SELECT COUNT(*) FROM details where details.service_type=20 AND details.deleted=0) as trows,(SELECT name FROM attributes WHERE attributes.attribute_id  =translation.a_code)as code,(SELECT name FROM attributes WHERE attributes.attribute_id  =translation.a_type)as translation_type,(SELECT name FROM attributes WHERE attributes.attribute_id  =translation.a_country)as translation_country,(SELECT c_prefix FROM customer WHERE customer.c_id=translation.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=translation.c_id) AS customer_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =details.d_c_id)as certificate,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname  FROM details,translation,customer WHERE customer.c_id=translation.c_id AND details.service_id=translation.a_id AND details.service_type=20 AND details.deleted=0 and translation.deleted=0 and customer.deleted=0 AND STR_TO_DATE(details.collection_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(details.collection_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y") and (customer.foreign_branch = ${data.branch_id} OR customer.branch_id = ${data.branch_id}) and details.status_id=23`;
      }
    } else {
      if (data.s_type == 10) {
        getattesql = `SELECT customer.*,details.*,attestation.*,(SELECT COUNT(*) FROM details where details.service_type=10 AND details.deleted=0) as trows,(SELECT name FROM attributes WHERE attributes.attribute_id  =attestation.a_code)as code,(SELECT name FROM attributes WHERE attributes.attribute_id  =attestation.a_type)as attestation_type,(SELECT name FROM attributes WHERE attributes.attribute_id  =attestation.a_country)as attestation_country,(SELECT c_prefix FROM customer WHERE customer.c_id=attestation.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=attestation.c_id) AS customer_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =details.d_c_id)as certificate,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname FROM details,attestation,customer WHERE customer.c_id=attestation.c_id AND details.service_id=attestation.a_id AND details.service_type=10 AND details.deleted=0 and attestation.deleted=0 and customer.deleted=0 and STR_TO_DATE(details.collection_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(details.collection_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y") and details.status_id=23`;
        if (typeof data.branch_name != "undefined") {
          getattesql += ` and customer.branch_id=${data.branch_name}`;
        }
        if (response.type == 3) {
          getattesql += ` AND (customer.u_id=${data.u_id} or customer.foreign_branchuser=${data.u_id})`;
        }
      } else if (data.s_type == 8) {
        getattesql = `SELECT customer.*,details.*,visa.*,(SELECT COUNT(*) FROM details where details.service_type=8 AND details.deleted=0) as trows,(SELECT name FROM attributes WHERE attributes.attribute_id  =visa.v_code)as code,(SELECT name FROM attributes WHERE attributes.attribute_id  =visa.v_type)as visa_type,(SELECT name FROM attributes WHERE attributes.attribute_id  =details.d_c_id)as visa_country,(SELECT c_prefix FROM customer WHERE customer.c_id=visa.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=visa.c_id) AS customer_name,(SELECT GROUP_CONCAT(attributes.name SEPARATOR ',') as name FROM attributes where FIND_IN_SET (attributes.attribute_id , visa.v_supporting_doc)) as certificatetype,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname FROM details,visa,customer WHERE customer.c_id=visa.c_id AND details.service_id=visa.v_id AND details.service_type=8 AND details.deleted=0 and visa.deleted=0 and customer.deleted=0 AND STR_TO_DATE(details.collection_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(details.collection_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y") and details.status_id=23`;
        if (typeof data.branch_name != "undefined") {
          getattesql += ` and customer.branch_id=${data.branch_name}`;
        }
        if (response.type == 3) {
          getattesql += ` AND (customer.u_id=${data.u_id} or customer.foreign_branchuser=${data.u_id})`;
        }
      } else if (data.s_type == 17) {
        getattesql = `SELECT customer.*,details.*,apostille.*,(SELECT COUNT(*) FROM details where details.service_type=17 AND details.deleted=0) as trows,(SELECT name FROM attributes WHERE attributes.attribute_id  =apostille.a_code)as code,(SELECT name FROM attributes WHERE attributes.attribute_id  =apostille.a_type)as apostille_type,(SELECT name FROM attributes WHERE attributes.attribute_id  =apostille.a_country)as apostille_country,(SELECT c_prefix FROM customer WHERE customer.c_id=apostille.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=apostille.c_id) AS customer_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =details.d_c_id)as certificate,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname FROM details,apostille,customer WHERE customer.c_id=apostille.c_id AND details.service_id=apostille.a_id AND details.service_type=17 AND details.deleted=0 and apostille.deleted=0 and customer.deleted=0 AND STR_TO_DATE(details.collection_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(details.collection_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y") and details.status_id=23`;
        if (typeof data.branch_name != "undefined") {
          getattesql += ` and customer.branch_id=${data.branch_name}`;
        }
        if (response.type == 3) {
          getattesql += ` AND (customer.u_id=${data.u_id} or customer.foreign_branchuser=${data.u_id})`;
        }
      } else {
        getattesql = `SELECT customer.*,details.*,translation.*,(SELECT COUNT(*) FROM details where details.service_type=20 AND details.deleted=0) as trows,(SELECT name FROM attributes WHERE attributes.attribute_id  =translation.a_code)as code,(SELECT name FROM attributes WHERE attributes.attribute_id  =translation.a_type)as translation_type,(SELECT name FROM attributes WHERE attributes.attribute_id  =translation.a_country)as translation_country,(SELECT c_prefix FROM customer WHERE customer.c_id=translation.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=translation.c_id) AS customer_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =details.d_c_id)as certificate,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname FROM details,translation,customer WHERE customer.c_id=translation.c_id AND details.service_id=translation.a_id AND details.service_type=20 AND details.deleted=0 and translation.deleted=0 and customer.deleted=0 AND STR_TO_DATE(details.collection_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(details.collection_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y") and details.status_id=23`;
        if (typeof data.branch_name != "undefined") {
          getattesql += ` and customer.branch_id=${data.branch_name}`;
        }
        if (response.type == 3) {
          getattesql += ` AND (customer.u_id=${data.u_id} or customer.foreign_branchuser=${data.u_id})`;
        }
      }
    }
    tgetattesql = getattesql;
    getattesql += ` order by STR_TO_DATE(details.collection_date,"%d-%m-%Y") DESC limit ${(data.page - 1) * data.perpage
      },${data.perpage}`;

    let response1 = await new Promise((resolve, reject) => {
      con.query(tgetattesql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            con.query(getattesql, function (err, res) {
              if (err) {
                console.log(err);
                resolve({ status: 0, message: "Something went to wrong" });
              } else {
                if (res.length > 0) {
                  resolve({
                    status: 1,
                    data: res,
                    adata: result,
                    t_rows: result.length,
                  });
                }
              }
            });
          } else {
            resolve({
              status: 0,
              data: [],
            });
          }
        }
      });
    });
    return response1;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function generatedispatchreport(data) {
  try {
    let record = [];
    getuserquery = `select * from users where u_id=${data.u_id} and deleted=0`;
    let response = await new Promise((resolve, reject) => {
      con.query(getuserquery, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            if (result[0].user_type == 1) {
              getallchilduser = `select * from users where (p_u_id=${data.u_id} and branch_id=${result[0].user_type}) and deleted=0`;

              con.query(getallchilduser, function (err, res) {
                if (err) {
                  console.log(err);
                  resolve({ status: 0, message: "Something went to wrong" });
                } else {
                  res.forEach(function (r) {
                    record.push(r.u_id);
                  });
                  record.push(data.u_id);
                  resolve({
                    record: record,
                    type: result[0].user_type,
                  });
                }
              });
            } else {
              resolve({
                type: result[0].user_type,
              });
            }
          }
        }
      });
    });
    if (response.type == 1) {
      if (data.s_type == 10) {
        getattesql = `SELECT customer.*,details.*,attestation.*,(SELECT COUNT(*) FROM details where details.service_type=10 AND details.deleted=0) as trows,(SELECT name FROM attributes WHERE attributes.attribute_id  =attestation.a_code)as code,(SELECT name FROM attributes WHERE attributes.attribute_id  =attestation.a_type)as attestation_type,(SELECT name FROM attributes WHERE attributes.attribute_id  =attestation.a_country)as attestation_country,(SELECT c_prefix FROM customer WHERE customer.c_id=attestation.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=attestation.c_id) AS customer_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =details.d_c_id)as certificate,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname  FROM details,attestation,customer WHERE customer.c_id=attestation.c_id AND details.service_id=attestation.a_id AND details.service_type=10 AND
        STR_TO_DATE(details.delivery_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(details.delivery_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y") and (customer.foreign_branch = ${data.branch_id} OR customer.branch_id = ${data.branch_id}) and details.deleted=0 and attestation.deleted=0 and customer.deleted=0 and details.status_id=24`;
      } else if (data.s_type == 8) {
        getattesql = `SELECT customer.*,details.*,visa.*,(SELECT COUNT(*) FROM details where details.service_type=8 AND details.deleted=0) as trows,(SELECT name FROM attributes WHERE attributes.attribute_id  =visa.v_code)as code,(SELECT name FROM attributes WHERE attributes.attribute_id  =visa.v_type)as visa_type,(SELECT name FROM attributes WHERE attributes.attribute_id  =details.d_c_id)as visa_country,(SELECT c_prefix FROM customer WHERE customer.c_id=visa.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=visa.c_id) AS customer_name,(SELECT GROUP_CONCAT(attributes.name SEPARATOR ',') as name FROM attributes where FIND_IN_SET (attributes.attribute_id , visa.v_supporting_doc)) as certificatetype,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname  FROM details,visa,customer WHERE customer.c_id=visa.c_id AND details.service_id=visa.v_id AND details.service_type=8 AND details.deleted=0 and visa.deleted=0 and customer.deleted=0 AND STR_TO_DATE(details.delivery_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(details.delivery_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y") and (customer.foreign_branch = ${data.branch_id}  OR customer.branch_id = ${data.branch_id}) and details.status_id=24`;
      } else if (data.s_type == 17) {
        getattesql = `SELECT customer.*,details.*,apostille.*,(SELECT COUNT(*) FROM details where details.service_type=17 AND details.deleted=0) as trows,(SELECT name FROM attributes WHERE attributes.attribute_id  =apostille.a_code)as code,(SELECT name FROM attributes WHERE attributes.attribute_id  =apostille.a_type)as apostille_type,(SELECT name FROM attributes WHERE attributes.attribute_id  =apostille.a_country)as apostille_country,(SELECT c_prefix FROM customer WHERE customer.c_id=apostille.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=apostille.c_id) AS customer_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =details.d_c_id)as certificate,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname  FROM details,apostille,customer WHERE customer.c_id=apostille.c_id AND details.service_id=apostille.a_id AND details.service_type=17 AND details.deleted=0 and apostille.deleted=0 and customer.deleted=0 AND STR_TO_DATE(details.delivery_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(details.delivery_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y") and (customer.foreign_branch = ${data.branch_id} OR customer.branch_id = ${data.branch_id}) and details.status_id=24`;
      } else {
        getattesql = `SELECT customer.*,details.*,translation.*,(SELECT COUNT(*) FROM details where details.service_type=20 AND details.deleted=0) as trows,(SELECT name FROM attributes WHERE attributes.attribute_id  =translation.a_code)as code,(SELECT name FROM attributes WHERE attributes.attribute_id  =translation.a_type)as translation_type,(SELECT name FROM attributes WHERE attributes.attribute_id  =translation.a_country)as translation_country,(SELECT c_prefix FROM customer WHERE customer.c_id=translation.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=translation.c_id) AS customer_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =details.d_c_id)as certificate,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname  FROM details,translation,customer WHERE customer.c_id=translation.c_id AND details.service_id=translation.a_id AND details.service_type=20 AND details.deleted=0 and translation.deleted=0 and customer.deleted=0 AND STR_TO_DATE(details.delivery_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(details.delivery_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y") and (customer.foreign_branch = ${data.branch_id} OR customer.branch_id = ${data.branch_id}) and details.status_id=24`;
      }
    } else {
      if (data.s_type == 10) {
        getattesql = `SELECT customer.*,details.*,attestation.*,(SELECT COUNT(*) FROM details where details.service_type=10 AND details.deleted=0) as trows,(SELECT name FROM attributes WHERE attributes.attribute_id  =attestation.a_code)as code,(SELECT name FROM attributes WHERE attributes.attribute_id  =attestation.a_type)as attestation_type,(SELECT name FROM attributes WHERE attributes.attribute_id  =attestation.a_country)as attestation_country,(SELECT c_prefix FROM customer WHERE customer.c_id=attestation.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=attestation.c_id) AS customer_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =details.d_c_id)as certificate,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname FROM details,attestation,customer WHERE customer.c_id=attestation.c_id AND details.service_id=attestation.a_id AND details.service_type=10 AND details.deleted=0 and attestation.deleted=0 and customer.deleted=0 and STR_TO_DATE(details.delivery_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(details.delivery_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y") and details.status_id=24`;
        if (typeof data.branch_name != "undefined") {
          getattesql += ` and customer.branch_id=${data.branch_name}`;
        }
        if (response.type == 3) {
          getattesql += ` AND (customer.u_id=${data.u_id} or customer.foreign_branchuser=${data.u_id})`;
        }
      } else if (data.s_type == 8) {
        getattesql = `SELECT customer.*,details.*,visa.*,(SELECT COUNT(*) FROM details where details.service_type=8 AND details.deleted=0) as trows,(SELECT name FROM attributes WHERE attributes.attribute_id  =visa.v_code)as code,(SELECT name FROM attributes WHERE attributes.attribute_id  =visa.v_type)as visa_type,(SELECT name FROM attributes WHERE attributes.attribute_id  =details.d_c_id)as visa_country,(SELECT c_prefix FROM customer WHERE customer.c_id=visa.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=visa.c_id) AS customer_name,(SELECT GROUP_CONCAT(attributes.name SEPARATOR ',') as name FROM attributes where FIND_IN_SET (attributes.attribute_id , visa.v_supporting_doc)) as certificatetype,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname FROM details,visa,customer WHERE customer.c_id=visa.c_id AND details.service_id=visa.v_id AND details.service_type=8 AND details.deleted=0 and visa.deleted=0 and customer.deleted=0 AND STR_TO_DATE(details.delivery_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(details.delivery_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y") and details.status_id=24`;
        if (typeof data.branch_name != "undefined") {
          getattesql += ` and customer.branch_id=${data.branch_name}`;
        }
        if (response.type == 3) {
          getattesql += ` AND (customer.u_id=${data.u_id} or customer.foreign_branchuser=${data.u_id})`;
        }
      } else if (data.s_type == 17) {
        getattesql = `SELECT customer.*,details.*,apostille.*,(SELECT COUNT(*) FROM details where details.service_type=17 AND details.deleted=0) as trows,(SELECT name FROM attributes WHERE attributes.attribute_id  =apostille.a_code)as code,(SELECT name FROM attributes WHERE attributes.attribute_id  =apostille.a_type)as apostille_type,(SELECT name FROM attributes WHERE attributes.attribute_id  =apostille.a_country)as apostille_country,(SELECT c_prefix FROM customer WHERE customer.c_id=apostille.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=apostille.c_id) AS customer_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =details.d_c_id)as certificate,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname FROM details,apostille,customer WHERE customer.c_id=apostille.c_id AND details.service_id=apostille.a_id AND details.service_type=17 AND details.deleted=0 and apostille.deleted=0 and customer.deleted=0 AND STR_TO_DATE(details.delivery_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(details.delivery_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y") and details.status_id=24`;
        if (typeof data.branch_name != "undefined") {
          getattesql += ` and customer.branch_id=${data.branch_name}`;
        }
        if (response.type == 3) {
          getattesql += ` AND (customer.u_id=${data.u_id} or customer.foreign_branchuser=${data.u_id})`;
        }
      } else {
        getattesql = `SELECT customer.*,details.*,translation.*,(SELECT COUNT(*) FROM details where details.service_type=20 AND details.deleted=0) as trows,(SELECT name FROM attributes WHERE attributes.attribute_id  =translation.a_code)as code,(SELECT name FROM attributes WHERE attributes.attribute_id  =translation.a_type)as translation_type,(SELECT name FROM attributes WHERE attributes.attribute_id  =translation.a_country)as translation_country,(SELECT c_prefix FROM customer WHERE customer.c_id=translation.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=translation.c_id) AS customer_name,(SELECT name FROM attributes WHERE attributes.attribute_id  =details.d_c_id)as certificate,(SELECT u_name FROM users WHERE users.u_id=customer.u_id)as sname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.branch_id)as bname,(SELECT b_name FROM branch WHERE branch.branch_id=customer.foreign_branch)as tbname FROM details,translation,customer WHERE customer.c_id=translation.c_id AND details.service_id=translation.a_id AND details.service_type=20 AND details.deleted=0 and translation.deleted=0 and customer.deleted=0 AND STR_TO_DATE(details.delivery_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(details.delivery_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y") and details.status_id=24`;
        if (typeof data.branch_name != "undefined") {
          getattesql += ` and customer.branch_id=${data.branch_name}`;
        }
        if (response.type == 3) {
          getattesql += ` AND (customer.u_id=${data.u_id} or customer.foreign_branchuser=${data.u_id})`;
        }
      }
    }
    tgetattesql = getattesql;
    getattesql += ` order by STR_TO_DATE(details.delivery_date,"%d-%m-%Y") DESC limit ${(data.page - 1) * data.perpage
      },${data.perpage}`;

    let response1 = await new Promise((resolve, reject) => {
      con.query(tgetattesql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            con.query(getattesql, function (err, res) {
              if (err) {
                console.log(err);
                resolve({ status: 0, message: "Something went to wrong" });
              } else {
                if (res.length > 0) {
                  resolve({
                    status: 1,
                    data: res,
                    adata: result,
                    t_rows: result.length,
                  });
                }
              }
            });
          } else {
            resolve({
              status: 0,
              data: [],
            });
          }
        }
      });
    });
    return response1;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

//2803
async function getallprocessoverdue(data) {
  try {
    let cbranchid;
    if (data.branch_id == undefined) {
      cbranchid = 0;
    } else {
      cbranchid = data.branch_id;
    }

    let getbadmin = `SELECT users.* FROM users JOIN branch WHERE branch.branch_id=users.branch_id and users.branch_id=${cbranchid} AND user_type=1 AND users.deleted=0`;

    let bresponse = await new Promise(async (resolve, reject) => {
      con.query(getbadmin, async function (err, results) {
        if (err) {
          console.log(err);
          console.log("Something went wrong");
        } else {
          if (results != undefined) {
            if (results.length > 0) {
              resolve({
                status: 1,
                results: results[0],
              });
            } else {
              console.log("There is no data Found....");
              resolve({
                status: 0,
                results: [],
              });
            }
          } else {
            resolve({
              status: 0,
              results: [],
            });
          }
        }
      });
    });

    let sadmin = `SELECT users.* FROM users where u_id=1 and users.deleted=0`;
    let sresponse = await new Promise(async (resolve, reject) => {
      con.query(sadmin, async function (err, results) {
        if (err) {
          console.log(err);
          console.log("Something went wrong");
        } else {
          if (results != undefined) {
            if (results.length > 0) {
              resolve({
                status: 1,
                results: results[0],
              });
            } else {
              console.log("There is no data Found....");
              resolve({
                status: 0,
                results: [],
              });
            }
          } else {
            resolve({
              status: 0,
              results: [],
            });
          }
        }
      });
    });
    let curr_date = moment().format("YYYY-MM-DD");
    let branchallocation;
    if (data.user_type == 2) {
      branchallocation = await getzonemanagerbranch(data.uid);
    }
    let sqla = "";
    if (data.user_type == 1) {
      sqla += ` and (customer.branch_id=${data.branch_id} or customer.foreign_branch=${data.branch_id})`;
    }
    if (data.user_type == 2) {
      sqla += ` and (customer.branch_id IN (${branchallocation.branchdata}) or customer.foreign_branch IN (${branchallocation.branchdata}) )`;
    }
    if (data.user_type == 3) {
      sqla += ` and customer.u_id=${data.uid}`;
    }
    let sql = `SELECT attestation.process_limit_mail_date,attestation.a_type,attestation.a_id,customer.* FROM attestation,customer,details WHERE attestation.c_id = customer.c_id ${sqla} and details.service_type =10 and (details.status_id = 21 or details.status_id = 273 ) and attestation.deleted=0 and STR_TO_DATE(process_limit_date,'%d-%m-%Y') <= '${curr_date}' and attestation.a_id = details.service_id GROUP BY customer.c_id 
    UNION SELECT apostille.process_limit_mail_date,apostille.a_type,apostille.a_id,customer.* FROM apostille,customer,details WHERE apostille.c_id = customer.c_id ${sqla} and details.service_type =17 and (details.status_id = 21 or details.status_id = 273 ) and apostille.deleted=0 and STR_TO_DATE(process_limit_date,'%d-%m-%Y') <='${curr_date}' and apostille.a_id = details.service_id GROUP BY customer.c_id 
    UNION SELECT translation.process_limit_mail_date,translation.a_type,translation.a_id,customer.* FROM translation,customer,details WHERE translation.c_id = customer.c_id ${sqla} and details.service_type =20 and (details.status_id = 21 or details.status_id = 273 ) and translation.deleted=0 and STR_TO_DATE(process_limit_date,'%d-%m-%Y') <= '${curr_date}' and translation.a_id = details.service_id GROUP BY customer.c_id 
    UNION SELECT visa.process_limit_mail_date,visa.v_type as a_type,visa.v_id as a_id,customer.* FROM visa,customer,details WHERE visa.c_id = customer.c_id ${sqla} and details.service_type =8 and (details.status_id = 21 or details.status_id = 273 ) and visa.deleted=0 and STR_TO_DATE(process_limit_date,'%d-%m-%Y') <= '${curr_date}' and visa.v_id = details.service_id GROUP BY customer.c_id `;
    let response = await new Promise(async (resolve, reject) => {
      con.query(sql, async function (err, results) {
        if (err) {
          console.log(err);
          console.log("Something went wrong");
        } else {
          if (results.length > 0) {
            resolve({
              status: 1,
              results: results,
              bresponse: bresponse.results,
              sresponse: sresponse.results,
            });
          } else {
            console.log("There is no data Found....");
            resolve({
              status: 0,
              results: [],
              bresponse: bresponse.results,
              sresponse: sresponse.results,
            });
          }
        }
      });
    });
    //2803
    if (response.results.length <= 0) {
      return response;
    } else {
      let mres = [];
      let sqll = "";
      response.results.map(async (data, index) => {
        if (data.c_s_type == 10) {
          sqll += `Select attestation.*,details.d_c_id,details.service_type,(SELECT name FROM attributes WHERE attribute_id=details.status_id)as status_name ,(SELECT customer.login_u_id FROM customer WHERE customer.c_id=attestation.c_id and customer.c_id =${data.c_id} )as login_u_id,(SELECT name FROM attributes WHERE attribute_id=details.d_c_id)as certificate_name,(SELECT name FROM attributes WHERE attribute_id=attestation.a_country)as country_name,(SELECT name FROM attributes WHERE attribute_id=attestation.a_type)as type,
        (SELECT u_name FROM users WHERE users.u_id=${data.u_id})as sname,(SELECT b_name FROM branch WHERE branch.branch_id=${data.branch_id})as bname,(SELECT b_name FROM branch WHERE branch.branch_id=${data.foreign_branch})as tbname,(SELECT foreign_branch FROM customer WHERE c_id=${data.c_id})as foreign_branch FROM attestation RIGHT JOIN details ON  attestation.a_id=details.service_id WHERE STR_TO_DATE(process_limit_date,'%d-%m-%Y') <= '${curr_date}' and details.service_type=10 AND attestation.c_id = ${data.c_id} and attestation.deleted = 0;`;
        } else if (data.c_s_type == 8) {
          sqll += `Select visa.*,details.d_c_id,details.service_type,visa.v_name as a_name,visa.v_prefix as a_prefix,(SELECT name FROM attributes WHERE attribute_id=details.status_id)as status_name,(SELECT customer.login_u_id FROM customer WHERE customer.c_id=visa.c_id and customer.c_id =${data.c_id} )as login_u_id,(SELECT name FROM attributes WHERE attribute_id=details.d_c_id)as country_name,(SELECT name FROM attributes WHERE attribute_id=visa.v_type)as type,(SELECT GROUP_CONCAT(attributes.name SEPARATOR ',') as name FROM attributes where FIND_IN_SET (attributes.attribute_id , visa.v_supporting_doc)) as certificate_name,(SELECT u_name FROM users WHERE users.u_id=${data.u_id})as sname,(SELECT b_name FROM branch WHERE branch.branch_id=${data.branch_id})as bname,(SELECT b_name FROM branch WHERE branch.branch_id=${data.foreign_branch})as tbname,(SELECT foreign_branch FROM customer WHERE c_id=${data.c_id})as foreign_branch  FROM visa RIGHT JOIN details ON  visa.v_id=details.service_id   WHERE STR_TO_DATE(process_limit_date,'%d-%m-%Y') <= '${curr_date}' and  details.service_type=8 AND visa.c_id = ${data.c_id} and visa.deleted = 0;`;
        } else if (data.c_s_type == 17) {
          sqll += `Select apostille.*,details.d_c_id,details.service_type,(SELECT name FROM attributes WHERE attribute_id=details.status_id)as status_name,(SELECT name FROM attributes WHERE attribute_id=details.d_c_id)as certificate_name,(SELECT customer.login_u_id FROM customer WHERE customer.c_id=apostille.c_id and customer.c_id =${data.c_id} )as login_u_id,(SELECT name FROM attributes WHERE attribute_id=apostille.a_country)as country_name,(SELECT name FROM attributes WHERE attribute_id=apostille.a_type)as type,(SELECT u_name FROM users WHERE users.u_id=${data.u_id})as sname,(SELECT b_name FROM branch WHERE branch.branch_id=${data.branch_id})as bname,(SELECT b_name FROM branch WHERE branch.branch_id=${data.foreign_branch})as tbname,(SELECT foreign_branch FROM customer WHERE c_id=${data.c_id})as foreign_branch FROM apostille RIGHT JOIN details ON apostille.a_id=details.service_id  WHERE STR_TO_DATE(process_limit_date,'%d-%m-%Y') <='${curr_date}' and details.service_type=17 AND apostille.c_id = ${data.c_id} and apostille.deleted = 0;`;
        } else {
          sqll += `Select translation.*,details.d_c_id,details.service_type,(SELECT name FROM attributes WHERE attribute_id=details.status_id)as status_name,(SELECT name FROM attributes WHERE attribute_id=details.d_c_id)as certificate_name,(SELECT customer.login_u_id FROM customer WHERE customer.c_id=translation.c_id and customer.c_id =${data.c_id} )as login_u_id,(SELECT name FROM attributes WHERE attribute_id=translation.a_country)as country_name,(SELECT name FROM attributes WHERE attribute_id=translation.a_type)as type,(SELECT u_name FROM users WHERE users.u_id=${data.u_id})as sname,(SELECT b_name FROM branch WHERE branch.branch_id=${data.branch_id})as bname,(SELECT b_name FROM branch WHERE branch.branch_id=${data.foreign_branch})as tbname,(SELECT foreign_branch FROM customer WHERE c_id=${data.c_id})as foreign_branch FROM translation RIGHT JOIN details ON translation.a_id=details.service_id  WHERE STR_TO_DATE(process_limit_date,'%d-%m-%Y') <= '${curr_date}' and details.service_type=20 AND translation.c_id = ${data.c_id} and translation.deleted = 0;`;
        }
      });
      let response1 = await new Promise(async (resolve, reject) => {
        con.query(sqll, async function (errr, resultss) {
          if (errr) {
            console.log(errr);
            console.log("Something went wrong");
          } else {
            if (resultss.length > 0) {
              resultss.forEach(function (r) {
                if (r.length > 0) {
                  r.forEach(function (r1) {
                    mres.push(r1);
                  });
                } else {
                  mres.push(r);
                }
              });
              resolve({
                status: 1,
                data: mres,
                total: mres.length,
                bresponse: bresponse.results,
                sresponse: sresponse.results,
              });
            }
          }
        });
      });
      return response1;
    }
  } catch (err) {
    return { status: 0, message: "Invalid Call Try Again1" };
  }
}

async function sendmailofprocesslimittousers() {
  try {
    let curr_date = moment().format("YYYY-MM-DD");
    let sqla = "";
    let sql = `SELECT attestation.process_limit_mail_date,attestation.a_type,attestation.a_id,customer.*,(select u_email from users where users.u_id=customer.u_id) as u_email,(select user_type from users where users.u_id=customer.u_id) as user_type FROM attestation,customer,details WHERE attestation.c_id = customer.c_id and details.service_type =10 and (details.status_id = 21 or details.status_id = 273 ) and attestation.deleted=0  and customer.deleted=0 and customer.is_block = 1 and  customer.is_cancel=0 and STR_TO_DATE(process_limit_date,'%d-%m-%Y') = '${curr_date}' and attestation.a_id = details.service_id GROUP BY customer.c_id UNION SELECT apostille.process_limit_mail_date,apostille.a_type,apostille.a_id,customer.*,(select u_email from users where users.u_id=customer.u_id) as u_email,(select user_type from users where users.u_id=customer.u_id) as user_type FROM apostille,customer,details WHERE apostille.c_id = customer.c_id and details.service_type =17 and (details.status_id = 21 or details.status_id = 273 ) and apostille.deleted=0 and customer.is_block = 1 and  customer.deleted=0 and  customer.is_cancel=0 and STR_TO_DATE(process_limit_date,'%d-%m-%Y') ='${curr_date}' and apostille.a_id = details.service_id GROUP BY customer.c_id UNION SELECT translation.process_limit_mail_date,translation.a_type,translation.a_id,customer.*,(select u_email from users where users.u_id=customer.u_id) as u_email,(select user_type from users where users.u_id=customer.u_id) as user_type FROM translation,customer,details WHERE translation.c_id = customer.c_id and details.service_type =20 and (details.status_id = 21 or details.status_id = 273 ) and translation.deleted=0 and  customer.deleted=0 and customer.is_block = 1 and customer.is_cancel=0 and STR_TO_DATE(process_limit_date,'%d-%m-%Y') = '${curr_date}' and translation.a_id = details.service_id GROUP BY customer.c_id UNION SELECT visa.process_limit_mail_date,visa.v_type as a_type,visa.v_id as a_id,customer.*,(select u_email from users where users.u_id=customer.u_id) as u_email,(select user_type from users where users.u_id=customer.u_id) as user_type FROM visa,customer,details WHERE visa.c_id = customer.c_id and details.service_type =8 and (details.status_id = 21 or details.status_id = 273 ) and visa.deleted=0 and customer.deleted=0 and customer.is_block = 1 and customer.is_cancel=0 and STR_TO_DATE(process_limit_date,'%d-%m-%Y') = '${curr_date}' and visa.v_id = details.service_id GROUP BY customer.c_id`;
    con.query(sql, async function (err, results) {
      if (err) {
        console.log(err);
        console.log("Something went wrong");
      } else {
        if (results.length > 0) {
          let messa1 = [];
          let emaillist = [];
          results.map(async (data, index) => {
            if (data.c_s_type == 10) {
              sqll = `Select attestation.*,details.d_c_id,details.service_type,(SELECT name FROM attributes WHERE attribute_id=details.status_id)as status_name ,(SELECT name FROM attributes WHERE attribute_id=details.d_c_id)as certificate_name,(SELECT name FROM attributes WHERE attribute_id=attestation.a_country)as country_name,(SELECT name FROM attributes WHERE attribute_id=attestation.a_type)as type FROM attestation RIGHT JOIN details ON  attestation.a_id=details.service_id WHERE  details.service_type=10 AND attestation.c_id = ${data.c_id} and attestation.deleted = 0 `;
            } else if (data.c_s_type == 8) {
              sqll = `Select visa.*,details.d_c_id,details.service_type,(SELECT name FROM attributes WHERE attribute_id=details.status_id)as status_name,(SELECT name FROM attributes WHERE attribute_id=details.d_c_id)as country_name,(SELECT name FROM attributes WHERE attribute_id=visa.v_type)as type,(SELECT GROUP_CONCAT(attributes.name SEPARATOR ',') as name FROM attributes where FIND_IN_SET (attributes.attribute_id , visa.v_supporting_doc)) as certificate_name  FROM visa RIGHT JOIN details ON  visa.v_id=details.service_id   WHERE   details.service_type=8 AND visa.c_id = ${data.c_id} and visa.deleted = 0`;
            } else if (data.c_s_type == 17) {
              sqll = `Select apostille.*,details.d_c_id,details.service_type,(SELECT name FROM attributes WHERE attribute_id=details.status_id)as status_name,(SELECT name FROM attributes WHERE attribute_id=details.d_c_id)as certificate_name,(SELECT name FROM attributes WHERE attribute_id=apostille.a_country)as country_name,(SELECT name FROM attributes WHERE attribute_id=apostille.a_type)as type FROM apostille RIGHT JOIN details ON apostille.a_id=details.service_id  WHERE  details.service_type=17 AND apostille.c_id = ${data.c_id} and apostille.deleted = 0`;
            } else {
              sqll = `Select translation.*,details.d_c_id,details.service_type,(SELECT name FROM attributes WHERE attribute_id=details.status_id)as status_name,(SELECT name FROM attributes WHERE attribute_id=details.d_c_id)as certificate_name,(SELECT name FROM attributes WHERE attribute_id=translation.a_country)as country_name,(SELECT name FROM attributes WHERE attribute_id=translation.a_type)as type FROM translation RIGHT JOIN details ON translation.a_id=details.service_id  WHERE  details.service_type=20 AND translation.c_id = ${data.c_id} and translation.deleted = 0`;
            }
            con.query(sqll, async function (errr, resultss) {
              if (errr) {
                console.log(errr);
                console.log("Something went wrong");
              } else {
                if (resultss.length > 0) {
                  const getrow = (index) => {
                    let rows = "";
                    resultss.map((a) => {
                      a.service_type == 8
                        ? (rows =
                          rows +
                          `<tr><td style="border: 1px solid #333;padding:5px;"> ${a.v_name} </td>
          <td style="border: 1px solid #333;padding:5px;">${a.type}</td>
          <td style="border: 1px solid #333;padding:5px;">${a.country_name}</td>
          <td style="border: 1px solid #333;padding:5px;">${a.certificate_name}</td>
          <td style="border: 1px solid #333;padding:5px;">${a.status_name}</td></tr>`)
                        : (rows =
                          rows +
                          `<tr><td style="border: 1px solid #333;padding:5px;">${a.a_name}</td>
          <td style="border: 1px solid #333;padding:5px;">${a.type}</td>
          <td style="border: 1px solid #333;padding:5px;">${a.country_name}</td>
          <td style="border: 1px solid #333;padding:5px;">${a.certificate_name}</td>
          <td style="border: 1px solid #333;padding:5px;">${a.status_name}</td></tr>`);
                    });
                    return rows;
                  };
                  let table1 = `<div>
    <table style="border-collapse: collapse;" >
      <tr style="border: 1px solid #333;padding:5px;">
        <th style="border: 1px solid #333;padding:5px;"> Name </th>
        <th style="border: 1px solid #333;padding:5px;"> Type </th>
        <th style="border: 1px solid #333;padding:5px;"> Country </th>
        <th style="border: 1px solid #333;padding:5px;"> Certificate </th>
        <th style="border: 1px solid #333;padding:5px;"> Status </th>
      </tr>
      ${getrow(index)}
    </table>
    </div>`;
                  let emaillist = [];
                  if (data.user_type == 3) {
                    getuseremail = `select * from users where branch_id=${data.branch_id} and user_type=1 and deleted=0`;
                    let eresponse = await new Promise((resolve, reject) => {
                      con.query(getuseremail, function (err, eresult) {
                        if (err) {
                          console.log(err);
                          resolve({
                            status: 0,
                            message: "Something went to wrong",
                          });
                        } else {
                          resolve({
                            u_email: eresult[0].u_email,
                          });
                          emaillist.push(eresult[0].u_email);
                        }
                      });
                    });
                  }
                  emaillist.push(data.u_email);
                  let message = await sendmessage.getTemplate(44);
                  if (message.status != 0) {
                    message.template = message.template.replace(
                      "{:name:}",
                      data.c_prefix + " " + data.c_name
                    );
                    message.template = message.template.replace(
                      "{:table:}",
                      table1
                    );
                    messa1.push(message);
                    let senderMailSetting = await sendmessage.getEmailSetting(
                      data.created_id
                    );

                    sqlll = `SELECT u_email FROM users WHERE u_id = ${data.created_id} `;
                    let ccmail = await new Promise((resolve, reject) => {
                      con.query(sqlll, async function (err1, result1) {
                        if (err1) {
                          console.log(err1);
                          resolve({
                            status: 0,
                            message: "Something went to wrong",
                          });
                        } else {
                          if (result1.length > 0) {
                            resolve({ status: 1, result: result1[0].u_email });
                          } else {
                            resolve({
                              status: 0,
                              message: "Something went to wrong",
                            });
                          }
                        }
                      });
                    });

                    let mess =
                      (messa1[index].header == 1
                        ? typeof senderMailSetting.email_template_header !=
                          undefined && senderMailSetting.email_template_header !=
                          undefined &&
                          senderMailSetting.email_template_header != null
                          ? senderMailSetting.email_template_header
                          : ""
                        : "") +
                      messa1[index].template +
                      (messa1[index].b_d_id != 0
                        ? messa1[index].b_d_id == 1
                          ? senderMailSetting.gst_bankdetails
                          : messa1[index].b_d_id == 2
                            ? senderMailSetting.ngst_bankdetails
                            : messa1[index].b_d_id == 3
                              ? senderMailSetting.general_bankdetails
                              : ""
                        : "") +
                      // (data.created_id == 1
                      //   ? data.c_tax == 0
                      //     ? senderMailSetting.bank_details
                      //     : senderMailSetting.nongst_bank_details
                      //   : data.c_tax == 0
                      //     ? senderMailSetting.b_bank_details
                      //     : senderMailSetting.b_nongst_bank_deatils) +
                      (messa1[index].footer == 1
                        ? senderMailSetting.email_template_footer
                        : "") +
                      (messa1[index].signature == 1
                        ? senderMailSetting.email_signature
                        : "");
                    CCMailSetting = await sendmessage.getEmailSetting(1);
                    sendmessagenow = sendmessage.customermessagesend(
                      senderMailSetting,
                      emaillist,
                      mess,
                      `${message.subject} || ${data.c_prefix + " " + data.c_name
                      }`,
                      ccmail.result, //CCMailSetting.e_username,  // user mail
                      ccmail.result, // reply mail
                      1
                    );
                  }
                }
              }
            });
          });
        } else {
          console.log("There is no data Found....");
        }
      }
    });
  } catch (err) {
    return { status: 0, message: "Invalid Call Try Again1" };
  }
}

async function setnextprocessfinishdate(data) {
  try {
    if (data.service_type == 8) {
      sql = `update visa set process_limit_date='${data.next_f_date}' where v_id=${data.a_id}`;
    } else if (data.service_type == 10) {
      sql = `update attestation set process_limit_date='${data.next_f_date}' where a_id=${data.a_id}`;
    } else if (data.service_type == 17) {
      sql = `update apostille set process_limit_date='${data.next_f_date}' where a_id=${data.a_id}`;
    } else if (data.service_type == 20) {
      sql = `update translation set process_limit_date='${data.next_f_date}' where a_id=${data.a_id}`;
    }
    let response = await new Promise(async (resolve, reject) => {
      con.query(sql, async function (err, results) {
        if (err) {
          console.log("Something went wrong", err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (results.affectedRows > 0) {
            resolve({
              status: 1,
              msg: "Next Process Due Set Successfully",
            });
          } else {
            console.log("There is no data Found....");
          }
        }
      });
    });
    return response;
  } catch (err) {
    return { status: 0, message: "Invalid Call Try Again1" };
  }
}
async function searchEmbassyFeesReports(data) {
  try {
    sql1 = `SELECT * FROM users WHERE u_id = ${data.u_id}`;
    let response1 = await new Promise((resolve, reject) => {
      con.query(sql1, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            result.forEach(function (result) {
              resolve({
                status: 1,
                user_data: result,
                user_type: result.user_type,
              });
            });
          } else {
            resolve({
              status: 0,
              user_type: "Something went wrong...",
            });
          }
        }
      });
    });
    cust = [];
    applicate_list = [];
    let sql2 = `SELECT *,(SELECT embassy_fees FROM payment WHERE customer.c_id = payment.c_id  ORDER by payment.payment_id DESC LIMIT 1)as embassy_fees FROM customer WHERE customer.deleted = 0 and  STR_TO_DATE(customer.c_date,'%d-%m-%y')>=STR_TO_DATE('${data.s_date}','%d-%m-%y') and STR_TO_DATE(customer.c_date,'%d-%m-%y')<=STR_TO_DATE('${data.e_date}','%d-%m-%y') and customer.c_s_type=${data.service_type} order by customer.c_id`;
    let response2 = await new Promise((resolve, reject) => {
      con.query(sql2, async function (err2, result2) {
        if (err2) {
          console.log(err2);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result2.length > 0) {
            for (let i = 0; i < result2.length; i += 1) {
              cust.push({
                customer: result2[i],
                service_type: result2[i].c_s_type,
                c_id: result2[i].c_id,
                applicates: [],
              });
              applicate_list.push({
                customer: result2[i],
                service_type: result2[i].c_s_type,
                c_id: result2[i].c_id,
                applicates: [],
              });
            }
          } else {
            resolve({
              status: 0,
              applicate_data: [],
              user_data: {},
            });
          }
          Object.keys(cust).map((k) => {
            if (response1.user_type == 0) {
              let doc = "";
              let country = "";
              if (
                typeof data.document != "undefined" &&
                typeof data.document != ""
              ) {
                if (data.service_type == 8) {
                  doc = `AND visa.v_type =${data.document}`;
                } else {
                  doc = `and FIND_IN_SET (attributes.attribute_id , ${data.service_type == 17
                    ? "apostille.a_certificate"
                    : data.service_type == 10
                      ? "attestation.a_certificate"
                      : "translation.a_certificate"
                    }) AND attributes.document_type =${data.document}`;
                }
              }
              if (
                typeof data.country != "undefined" &&
                typeof data.country != ""
              ) {
                if (data.service_type == 8) {
                  country += `and FIND_IN_SET (attributes.attribute_id , visa.v_country)  AND attributes.attribute_id =${data.country}`;
                } else {
                  country += `AND ${data.service_type == 17
                    ? "apostille.a_country"
                    : data.service_type == 10
                      ? "attestation.a_country"
                      : "translation.a_country"
                    }  =${data.country}`;
                }
              }
              if (cust[k].service_type == 10) {
                sql3 = `Select *,(SELECT GROUP_CONCAT(attributes.name SEPARATOR ',') as name FROM attributes where FIND_IN_SET (attributes.attribute_id , attestation.a_certificate) ${doc} ) as type_name,(select name from attributes where attributes.attribute_id = attestation.a_country )as cname FROM attestation,attributes  WHERE attestation.c_id = ${cust[k].c_id} and attestation.deleted = 0  ${doc} ${country} group by attestation.a_id order by attestation.a_id;`;
              } else if (cust[k].service_type == 8) {
                sql3 = `Select *,(SELECT GROUP_CONCAT(attributes.name SEPARATOR ',') as name FROM attributes where FIND_IN_SET (attributes.attribute_id , visa.v_country) ${country} ) as cname,(select name from attributes where attributes.attribute_id = visa.v_type)as type_name FROM visa,attributes  WHERE visa.c_id = ${cust[k].c_id} and visa.deleted = 0 ${country}  ${doc} group by visa.v_id order by visa.v_id;`;
              } else if (cust[k].service_type == 17) {
                sql3 = `Select *,(SELECT GROUP_CONCAT(attributes.name SEPARATOR ',') as name FROM attributes where FIND_IN_SET (attributes.attribute_id , apostille.a_certificate) ${doc} ) as type_name,(select name from attributes where attributes.attribute_id = apostille.a_country )as cname FROM apostille,attributes  WHERE apostille.c_id = ${cust[k].c_id} and apostille.deleted = 0 ${doc} ${country} group by apostille.a_id order by apostille.a_id ; `;
              } else {
                sql3 = `Select *,(SELECT GROUP_CONCAT(attributes.name SEPARATOR ',') as name FROM attributes where FIND_IN_SET (attributes.attribute_id , translation.a_certificate) ${doc} ) as type_name,(select name from attributes where attributes.attribute_id = translation.a_country )as cname FROM translation,attributes  WHERE translation.c_id = ${cust[k].c_id} and translation.deleted = 0 ${doc} ${country} group by translation.a_id order by translation.a_id;`;
              }
            }
            con.query(sql3, async function (errsql1, sql1res) {
              let cust_data = [];

              if (errsql1) {
                console.log(errsql1);
                resolve({ status: 0, message: "Something went to wrong" });
              } else {
                if (sql1res.length > 0) {
                  Object.keys(sql1res).map(async (ak) => {
                    let response3 = await new Promise(
                      async (resolve, reject) => {
                        let embassy = 0;
                        if (
                          data.service_type == 10 ||
                          data.service_type == 17 ||
                          data.service_type == 20
                        ) {
                          let sql4 = "";
                          let certificate =
                            sql1res[ak].a_certificate.split(",");

                          certificate.map(async (certi) => {
                            sql4 += `SELECT amount as embassy_fees FROM embassyfees WHERE service_type = ${data.service_type} AND country =${sql1res[ak].a_country}  AND document = (select document_type from attributes where attribute_id = ${certi}) AND deleted = 0;`;
                          });
                          let response4 = await new Promise(
                            (resolve, reject) => {
                              con.query(sql4, async function (err2, result2) {
                                if (err2) {
                                  console.log(err2);
                                  resolve({
                                    status: 0,
                                    message: "Something went to wrong",
                                  });
                                } else {
                                  let embassyamount = [];
                                  await result2.map(async (res) => {
                                    if (res.length == 0) {
                                      embassy = embassy + parseInt(0);
                                      embassyamount.push(0);
                                    } else if (res[0]) {
                                      embassy =
                                        embassy + parseInt(res[0].embassy_fees);
                                      embassyamount.push(res[0].embassy_fees);
                                    } else {
                                      embassy =
                                        embassy + parseInt(res.embassy_fees);
                                      embassyamount.push(res.embassy_fees);
                                    }
                                  });
                                  sql1res[ak] = {
                                    ...sql1res[ak],
                                    total_embassy: embassy,
                                    embassyamount: embassyamount,
                                  };
                                  resolve({
                                    embassy_fee: embassy,
                                    cust: sql1res[ak],
                                  });
                                }
                              });
                            }
                          );
                          cust_data.push(response4.cust);
                        } else {
                          let country = sql1res[ak].v_country.split(",");
                          let sql4 = "";
                          country.map((coun) => {
                            sql4 += `SELECT amount as embassy_fees FROM embassyfees WHERE service_type = ${data.service_type}  AND country = ${coun} AND document = ${sql1res[ak].v_type}  AND deleted = 0;`;
                          });
                          let responsee = await new Promise(
                            (resolve, reject) => {
                              con.query(sql4, async function (err2, result2) {
                                if (err2) {
                                  console.log(err2);
                                  resolve({
                                    status: 0,
                                    message: "Something went to wrong",
                                  });
                                } else {
                                  let embassyamount = [];
                                  await result2.map(async (res) => {
                                    if (res.length == 0) {
                                      embassy = embassy + parseInt(0);
                                      embassyamount.push(0);
                                    } else if (res[0]) {
                                      embassy =
                                        embassy + parseInt(res[0].embassy_fees);
                                      embassyamount.push(res[0].embassy_fees);
                                    } else {
                                      embassy =
                                        embassy + parseInt(res.embassy_fees);
                                      embassyamount.push(res.embassy_fees);
                                    }
                                  });
                                  sql1res[ak] = {
                                    ...sql1res[ak],
                                    total_embassy: embassy,
                                    embassyamount: embassyamount,
                                  };
                                  resolve({
                                    embassy_fee: embassy,
                                    cust: sql1res[ak],
                                  });
                                }
                              });
                            }
                          );
                          cust_data.push(responsee.cust);
                        }
                        resolve({
                          cust_data: cust_data,
                        });
                      }
                    );
                    applicate_list[k].applicates = response3.cust_data;
                    if (k == cust.length - 1 && ak == sql1res.length - 1) {
                      resolve({
                        status: 1,
                        applicate_data: applicate_list,
                        user_data: response1.user_data,
                      });
                    } else if (k == cust.length && ak == sql1res.length - 1) {
                      // here ,this condition is to get last customer's last certificate
                      resolve({
                        status: 1,
                        applicate_data: applicate_list,
                        user_data: response1.user_data,
                      });
                    }
                  });
                } else {
                  cust.pop(k);
                  if (cust.length == 0) {
                    applicate_list = cust;
                    resolve({
                      status: 1,
                      applicate_data: applicate_list,
                      user_data: response1.user_data,
                    });
                  }
                }
              }
            });
          });
        }
      });
    });
    return response2;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function newCustomerofAnotherBranch(data) {
  try {
    let nsql = "";
    if (data.branch_id == 1) {
      nsql += `and foreign_branch=${data.branch_id} or foreign_branchuser=${data.u_id}`;
    } else {
      nsql += `and foreign_branch=${data.branch_id} and foreign_branchuser=${data.u_id}`;
    }
    let curr_date = moment().format("DD-MM-YYYY");
    sql = `SELECT *,(select b_name from branch where branch.branch_id = customer.branch_id)as branch_name,(select u_name from users where users.u_id= customer.u_id)as user_name from customer where read_status=0 and cust_transffered_date='${curr_date}' 
    ${nsql} and deleted = 0`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              counter: result.length,
              data: result,
            });
          } else {
            resolve({
              status: 0,
              counter: 0,
              data: [],
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function getfaqcatepermission(data) {
  try {
    sql = `SELECT * FROM faq_category_permission WHERE u_id=${data.id}`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              data: result,
            });
          } else {
            resolve({
              status: 0,
              data: [],
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function getAlldraftreceipt(data) {
  try {
    sql1 = `SELECT user_type FROM users WHERE u_id = ${data.uid} and deleted =0`;
    let response1 = await new Promise((resolve, reject) => {
      con.query(sql1, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            result.forEach(function (result) {
              resolve({
                status: 1,
                user_type: result.user_type,
              });
            });
          } else {
            resolve({
              status: 0,
              user_type: "Something went wrong...",
            });
          }
        }
      });
    });
    let branchallocation;
    if (response1.user_type == 2) {
      branchallocation = await getzonemanagerbranch(data.uid);
    }

    sql = `SELECT customer.*,customer.created_id as craetedId,draft_payment.*,(SELECT name FROM attributes WHERE attributes.attribute_id = draft_payment.mode_id)AS mode_name FROM draft_payment join customer on draft_payment.c_id = customer.c_id WHERE draft_payment.deleted=0 and draft_payment.approved_status=0 and draft_payment.read_status=0`;
    if (response1.user_type == 3) {
      sql += ` and draft_payment.u_id=${data.uid}`;
    }
    if (response1.user_type == 1) {
      sql += ` and customer.branch_id= ${data.bid}`;
    }
    if (response1.user_type == 2) {
      sql += ` and customer.branch_id IN (${branchallocation.branchdata})`;
    }
    sql += ` ORDER BY draft_payment.d_p_id DESC`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, async function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            let allData = [];
            for (let i = 0; i < result.length; i++) {
              if (result[i].c_s_type == 10) {
                paymentNewSql = `Select att_table1.name AS status_name FROM details detail_table LEFT JOIN attributes att_table1 ON att_table1.attribute_id = detail_table.status_id LEFT JOIN attestation attestation_table ON attestation_table.a_id=detail_table.service_id and  detail_table.service_type = 10 LEFT JOIN customer customer_table ON attestation_table.c_id =  customer_table.c_id AND customer_table.deleted = 0 AND customer_table.is_block = 1 and customer_table.is_cancel = 0 WHERE detail_table.service_type = 10 and customer_table.c_id =${result[i].c_id} AND customer_table.c_s_type = 10  AND  attestation_table.deleted = 0 AND customer_table.deleted = 0  AND customer_table.is_block = 1 AND customer_table.is_cancel = 0  ORDER BY STR_TO_DATE(detail_table.status_change_date,'%d-%m-%Y %H:%i:%s') DESC LIMIT 1;`;
              } else if (result[i].c_s_type == 17) {
                paymentNewSql = `Select att_table1.name AS status_name FROM details detail_table LEFT JOIN attributes att_table1 ON att_table1.attribute_id = detail_table.status_id LEFT JOIN apostille apostille_table ON apostille_table.a_id=detail_table.service_id  and detail_table.service_type = 17  LEFT JOIN customer customer_table ON apostille_table.c_id =  customer_table.c_id AND customer_table.deleted = 0 AND customer_table.is_block = 1 and customer_table.is_cancel = 0 WHERE detail_table.service_type = 17 and  customer_table.c_id =${result[i].c_id}  AND  customer_table.c_s_type = 17  AND  apostille_table.deleted = 0 AND customer_table.deleted = 0  AND customer_table.is_block = 1 AND customer_table.is_cancel = 0   ORDER BY STR_TO_DATE(detail_table.status_change_date,'%d-%m-%Y %H:%i:%s') DESC LIMIT 1;`;
              } else if (result[i].c_s_type == 20) {
                paymentNewSql = `Select att_table1.name AS status_name FROM details detail_table LEFT JOIN attributes att_table1 ON att_table1.attribute_id = detail_table.status_id LEFT JOIN translation translation_table ON translation_table.a_id=detail_table.service_id and detail_table.service_type = 20  LEFT JOIN customer customer_table ON translation_table.c_id =  customer_table.c_id AND customer_table.deleted = 0 AND customer_table.is_block = 1 and customer_table.is_cancel = 0 WHERE  customer_table.c_id =${result[i].c_id}  AND  customer_table.c_s_type = 20  AND  translation_table.deleted = 0 AND detail_table.service_type = 20 AND customer_table.deleted = 0  AND customer_table.is_block = 1 AND customer_table.is_cancel = 0  ORDER BY STR_TO_DATE(detail_table.status_change_date,'%d-%m-%Y %H:%i:%s') DESC LIMIT 1;`;
              } else {
                paymentNewSql = `Select att_table1.name AS status_name FROM details detail_table LEFT JOIN attributes att_table1 ON att_table1.attribute_id = detail_table.status_id LEFT JOIN visa visa_table ON visa_table.v_id=detail_table.service_id and detail_table.service_type = 8  LEFT JOIN customer customer_table ON visa_table.c_id =  customer_table.c_id AND customer_table.deleted = 0 AND customer_table.is_block = 1 and customer_table.is_cancel = 0 WHERE  customer_table.c_id =${result[i].c_id}  AND customer_table.c_s_type = 8  AND   visa_table.deleted = 0 and  detail_table.service_type = 8 AND customer_table.deleted = 0  AND customer_table.is_block = 1 AND customer_table.is_cancel = 0  ORDER BY STR_TO_DATE(detail_table.status_change_date,'%d-%m-%Y %H:%i:%s') DESC LIMIT 1; `;
              }
              let paymentNewRes = await new Promise((resolve, reject) => {
                con.query(paymentNewSql, function (err1, result1) {
                  if (err1) {
                    console.log(err1);
                    resolve({ status: 0, message: "Something went to wrong" });
                  } else {
                    if (result1.length > 0) {
                      allData.push({
                        ...result[i],
                        status_name: result1[0].status_name,
                      });
                      resolve({
                        status: 1,
                        data: allData,
                      });
                    } else {
                      resolve({
                        status: 0,
                        data: [],
                      });
                    }
                  }
                });
              });
              if (result.length - 1 == i) {
                resolve({
                  status: 1,
                  counter: result.length,
                  data: allData,
                  user_type: response1.user_type,
                });
              }
            }
          } else {
            resolve({
              status: 0,
              data: [],
              counter: 0,
              user_type: response1.user_type,
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function getzonemanagerbranch(uid) {
  let sqlbranchget = `SELECT branch_id FROM manager_allocation WHERE manager_id=${uid} and deleted=0`;
  let branch_id = [];
  let response1 = await new Promise((resolve, reject) => {
    con.query(sqlbranchget, function (err, result) {
      if (err) {
        console.log(err);
        resolve({ status: 0, message: "Something went to wrong" });
      } else {
        if (result.length > 0) {
          result.forEach(function (r) {
            branch_id.push(r.branch_id);
          });
          resolve({
            status: 1,
            branchdata: branch_id,
          });
        } else {
          resolve({
            status: 0,
            message: "Something went to wrong",
          });
        }
      }
    });
  });
  return response1;
}
//grishma
async function getallapplicants(data) {
  try {
    let mydata = [];

    let attestation_data = await getattestations(data);
    let apostille_data = await getapostilles(data);
    let translation_data = await gettranslations(data);
    let visa_data = await getvisas(data);

    if (attestation_data != null) {
      mydata.push(...attestation_data);
    }
    if (apostille_data != null) {
      mydata.push(...apostille_data);
    }
    if (translation_data != null) {
      mydata.push(...translation_data);
    }
    if (visa_data != null) {
      mydata.push(...visa_data);
    }

    let response = await new Promise((resolve, reject) => {
      resolve({
        status: 1,
        data:
          mydata.length > 0 && mydata.sort((a, b) => b.detail_id - a.detail_id),
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function getTotalMonthlyInvoice(data) {
  try {
    sql1 = `SELECT * FROM users WHERE u_id = ${data.u_id}`;

    let response1 = await new Promise((resolve, reject) => {
      con.query(sql1, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            result.forEach(function (result) {
              resolve({
                status: 1,
                user_data: result,
                user_type: result.user_type,
              });
            });
          } else {
            resolve({
              status: 0,
              user_type: "Something went wrong...",
            });
          }
        }
      });
    });
    if (data.user_type == 0) {
      if (data.status == 1) {
        sql = `SELECT COUNT(*) as total_invoice,customer.c_id,DATE_FORMAT(STR_TO_DATE(customer.c_date,'%d-%m-%Y'), '%M-%Y')as c_date  FROM customer WHERE customer.deleted=0 AND customer.is_block = 1 and customer.is_cancel=0`;
        if (typeof data.i_branch_id != "undefined") {
          sql += ` and customer.branch_id=${data.i_branch_id}`;
        }
        if (
          typeof data.allocate_id != "undefined" &&
          data.allocate_id != 0 &&
          data.allocate_id != -1
        ) {
          sql += ` and customer.u_id=${data.allocate_id}`;
        }
        if (data.s_date != undefined && data.e_date != undefined) {
          sql += ` and STR_TO_DATE(customer.c_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}','%d-%m-%Y') and STR_TO_DATE(customer.c_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}','%d-%m-%Y')`;
        }
        if (typeof data.g_val != "undefined") {
          sql += ` and customer.c_tax=${data.g_val}`;
        }
        sql += ` GROUP BY Month(STR_TO_DATE(customer.c_date,'%d-%m-%Y')),Year(STR_TO_DATE(customer.c_date,'%d-%m-%Y')) `;
      } else if (data.status == 2) {
        sql = `SELECT COUNT(*) as total_invoice,customer.c_id,DATE_FORMAT(STR_TO_DATE(customer.c_date,'%d-%m-%Y'), '%M-%Y')as c_date  FROM payment,customer WHERE 
        payment.c_id=customer.c_id AND customer.deleted=0 AND customer.is_block = 1 and customer.is_cancel=0 AND payment.due_amt!=0`;
        if (typeof data.i_branch_id != "undefined") {
          sql += ` and customer.branch_id=${data.i_branch_id}`;
        }
        if (
          typeof data.allocate_id != "undefined" &&
          data.allocate_id != 0 &&
          data.allocate_id != -1
        ) {
          sql += ` and customer.u_id=${data.allocate_id}`;
        }
        if (data.s_date != undefined && data.e_date != undefined) {
          sql += ` and STR_TO_DATE(customer.c_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}','%d-%m-%Y') and STR_TO_DATE(customer.c_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}','%d-%m-%Y')`;
        }
        if (typeof data.g_val != "undefined") {
          sql += ` and customer.c_tax=${data.g_val}`;
        }
        sql += ` AND payment_id IN (SELECT max(payment_id) FROM payment GROUP by c_id) GROUP BY Month(STR_TO_DATE(customer.c_date,'%d-%m-%Y')),Year(STR_TO_DATE(customer.c_date,'%d-%m-%Y'))`;
      } else if (data.status == 3) {
        sql = `SELECT COUNT(*) as total_invoice,customer.c_id,DATE_FORMAT(STR_TO_DATE(customer.c_date,'%d-%m-%Y'), '%M-%Y')as c_date  FROM payment,customer WHERE 
        payment.c_id=customer.c_id AND customer.deleted=0 AND customer.is_block = 1 and customer.is_cancel=0 AND payment.due_amt=0`;
        if (typeof data.i_branch_id != "undefined") {
          sql += ` and customer.branch_id=${data.i_branch_id}`;
        }
        if (
          typeof data.allocate_id != "undefined" &&
          data.allocate_id != 0 &&
          data.allocate_id != -1
        ) {
          sql += ` and customer.u_id=${data.allocate_id}`;
        }
        if (data.s_date != undefined && data.e_date != undefined) {
          sql += ` and STR_TO_DATE(customer.c_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}','%d-%m-%Y') and STR_TO_DATE(customer.c_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}','%d-%m-%Y')`;
        }
        if (typeof data.g_val != "undefined") {
          sql += ` and customer.c_tax=${data.g_val}`;
        }
        sql += ` AND payment_id IN (SELECT max(payment_id) FROM payment GROUP by c_id) GROUP BY Month(STR_TO_DATE(customer.c_date,'%d-%m-%Y')),Year(STR_TO_DATE(customer.c_date,'%d-%m-%Y'))`;
      }
    } else if (data.user_type == 1) {
      let sqla = "";
      if (
        typeof data.allocate_id != "undefined" &&
        data.allocate_id != 0 &&
        data.allocate_id != -1
      ) {
        sqla += ` and customer.u_id=${data.allocate_id}`;
      }
      if (data.s_date != undefined && data.e_date != undefined) {
        sqla += ` and STR_TO_DATE(customer.c_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}','%d-%m-%Y') and STR_TO_DATE(customer.c_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}','%d-%m-%Y')`;
      }
      if (typeof data.g_val != "undefined") {
        sqla += ` and customer.c_tax=${data.g_val}`;
      }
      if (data.status == 1) {
        sql = `SELECT COUNT(*) as total_invoice,customer.c_id,DATE_FORMAT(STR_TO_DATE(customer.c_date,'%d-%m-%Y'), '%M-%Y')as c_date  FROM customer WHERE customer.deleted=0 AND customer.is_block = 1 and customer.is_cancel=0 and customer.branch_id=${data.login_branch_id} ${sqla} GROUP BY Month(STR_TO_DATE(customer.c_date,'%d-%m-%Y')),Year(STR_TO_DATE(customer.c_date,'%d-%m-%Y'))`;
      } else if (data.status == 2) {
        sql = `SELECT COUNT(*) as total_invoice,customer.c_id,DATE_FORMAT(STR_TO_DATE(customer.c_date,'%d-%m-%Y'), '%M-%Y')as c_date  FROM payment,customer WHERE 
        payment.c_id=customer.c_id AND customer.deleted=0 AND customer.is_block = 1 and customer.is_cancel=0 AND payment.due_amt!=0 and customer.branch_id=${data.login_branch_id} ${sqla} AND payment_id IN (SELECT max(payment_id) FROM payment GROUP by c_id) GROUP BY Month(STR_TO_DATE(customer.c_date,'%d-%m-%Y')),Year(STR_TO_DATE(customer.c_date,'%d-%m-%Y'))`;
      } else if (data.status == 3) {
        sql = `SELECT COUNT(*) as total_invoice,customer.c_id,DATE_FORMAT(STR_TO_DATE(customer.c_date,'%d-%m-%Y'), '%M-%Y')as c_date  FROM payment,customer WHERE 
        payment.c_id=customer.c_id AND customer.deleted=0 AND customer.is_block = 1 and customer.is_cancel=0 AND payment.due_amt=0 and customer.branch_id=${data.login_branch_id} ${sqla} AND payment_id IN (SELECT max(payment_id) FROM payment GROUP by c_id) GROUP BY Month(STR_TO_DATE(customer.c_date,'%d-%m-%Y')),Year(STR_TO_DATE(customer.c_date,'%d-%m-%Y'))`;
      }
    } else if (data.user_type == 3) {
      let sqla = "";
      if (data.s_date != undefined && data.e_date != undefined) {
        sqla += ` and STR_TO_DATE(customer.c_date,'%d-%m-%Y')>=STR_TO_DATE('${data.s_date}','%d-%m-%Y') and STR_TO_DATE(customer.c_date,'%d-%m-%Y')<=STR_TO_DATE('${data.e_date}','%d-%m-%Y')`;
      }
      if (typeof data.g_val != "undefined") {
        sqla += ` and customer.c_tax=${data.g_val}`;
      }
      if (data.status == 1) {
        sql = `SELECT COUNT(*) as total_invoice,customer.c_id,DATE_FORMAT(STR_TO_DATE(customer.c_date,'%d-%m-%Y'), '%M-%Y')as c_date  FROM customer WHERE customer.deleted=0 AND customer.is_block = 1 and customer.is_cancel=0 and customer.u_id=${data.u_id} ${sqla} GROUP BY Month(STR_TO_DATE(customer.c_date,'%d-%m-%Y')),Year(STR_TO_DATE(customer.c_date,'%d-%m-%Y'))`;
      } else if (data.status == 2) {
        sql = `SELECT COUNT(*) as total_invoice,customer.c_id,DATE_FORMAT(STR_TO_DATE(customer.c_date,'%d-%m-%Y'), '%M-%Y') as c_date FROM payment,customer WHERE 
        payment.c_id=customer.c_id AND customer.deleted=0 AND customer.is_block = 1 and customer.is_cancel=0 AND payment.due_amt!=0 and customer.u_id=${data.u_id} ${sqla} AND payment_id IN (SELECT max(payment_id) FROM payment GROUP by c_id) GROUP BY Month(STR_TO_DATE(customer.c_date,'%d-%m-%Y')),Year(STR_TO_DATE(customer.c_date,'%d-%m-%Y'))`;
      } else if (data.status == 3) {
        sql = `SELECT COUNT(*) as total_invoice,customer.c_id,DATE_FORMAT(STR_TO_DATE(customer.c_date,'%d-%m-%Y'), '%M-%Y')as c_date  FROM payment,customer WHERE 
        payment.c_id=customer.c_id AND customer.deleted=0 AND customer.is_block = 1 and customer.is_cancel=0 AND payment.due_amt=0 and customer.u_id=${data.u_id} ${sqla} AND payment_id IN (SELECT max(payment_id) FROM payment GROUP by c_id) GROUP BY Month(STR_TO_DATE(customer.c_date,'%d-%m-%Y')),Year(STR_TO_DATE(customer.c_date,'%d-%m-%Y'))`;
      }
    }
    cust = [];
    applicate_list = [];
    if (data.user_type == 0) {
      if (data.status == 1) {
        sql2 = `SELECT *,(SELECT embassy_fees FROM payment WHERE customer.c_id = payment.c_id  ORDER by payment.payment_id DESC LIMIT 1)as embassy_fees,DATE_FORMAT(STR_TO_DATE(customer.c_date,'%d-%m-%Y'), '%M-%Y')as c_date FROM customer WHERE customer.deleted = 0  AND  customer.is_block = 1 and customer.is_cancel=0 and  STR_TO_DATE(customer.c_date,"%d-%m-%y")>=STR_TO_DATE('${data.s_date}',"%d-%m-%y") and STR_TO_DATE(customer.c_date,"%d-%m-%y")<=STR_TO_DATE('${data.e_date}',"%d-%m-%y")`;
        if (typeof data.i_branch_id != "undefined") {
          sql2 += ` and customer.branch_id=${data.i_branch_id}`;
        }
        if (
          typeof data.allocate_id != "undefined" &&
          data.allocate_id != 0 &&
          data.allocate_id != -1
        ) {
          sql2 += ` and customer.u_id=${data.allocate_id}`;
        }
        if (typeof data.g_val != "undefined") {
          sql2 += ` and customer.c_tax=${data.g_val}`;
        }
      } else if (data.status == 2) {
        sql2 = `SELECT *,(SELECT embassy_fees FROM payment WHERE customer.c_id = payment.c_id  ORDER by payment.payment_id DESC LIMIT 1)as embassy_fees,DATE_FORMAT(STR_TO_DATE(customer.c_date,'%d-%m-%Y'), '%M-%Y')as c_date FROM customer,payment WHERE payment.c_id=customer.c_id and customer.deleted = 0  AND customer.is_block = 1  and customer.is_cancel=0 AND payment.due_amt!=0 and  STR_TO_DATE(customer.c_date,"%d-%m-%y")>=STR_TO_DATE('${data.s_date}',"%d-%m-%y") and STR_TO_DATE(customer.c_date,"%d-%m-%y")<=STR_TO_DATE('${data.e_date}',"%d-%m-%y")`;
        if (typeof data.i_branch_id != "undefined") {
          sql2 += ` and customer.branch_id=${data.i_branch_id}`;
        }
        if (
          typeof data.allocate_id != "undefined" &&
          data.allocate_id != 0 &&
          data.allocate_id != -1
        ) {
          sql2 += ` and customer.u_id=${data.allocate_id}`;
        }
        if (typeof data.g_val != "undefined") {
          sql2 += ` and customer.c_tax=${data.g_val}`;
        }
        sql2 += ` AND payment_id IN (SELECT max(payment_id) FROM payment GROUP by c_id)`;
      } else if (data.status == 3) {
        sql2 = `SELECT *,(SELECT embassy_fees FROM payment WHERE customer.c_id = payment.c_id  ORDER by payment.payment_id DESC LIMIT 1)as embassy_fees,DATE_FORMAT(STR_TO_DATE(customer.c_date,'%d-%m-%Y'), '%M-%Y')as c_date FROM customer,payment WHERE payment.c_id=customer.c_id and customer.deleted = 0  AND customer.is_block = 1 and customer.is_cancel=0 AND payment.due_amt=0 and  STR_TO_DATE(customer.c_date,"%d-%m-%y")>=STR_TO_DATE('${data.s_date}',"%d-%m-%y") and STR_TO_DATE(customer.c_date,"%d-%m-%y")<=STR_TO_DATE('${data.e_date}',"%d-%m-%y")`;
        if (typeof data.i_branch_id != "undefined") {
          sql2 += ` and customer.branch_id=${data.i_branch_id}`;
        }
        if (
          typeof data.allocate_id != "undefined" &&
          data.allocate_id != 0 &&
          data.allocate_id != -1
        ) {
          sql2 += ` and customer.u_id=${data.allocate_id}`;
        }
        if (typeof data.g_val != "undefined") {
          sql2 += ` and customer.c_tax=${data.g_val}`;
        }
        sql2 += ` AND payment_id IN (SELECT max(payment_id) FROM payment GROUP by c_id)`;
      }
    } else if (data.user_type == 1) {
      let sqla = "";
      if (
        typeof data.allocate_id != "undefined" &&
        data.allocate_id != 0 &&
        data.allocate_id != -1
      ) {
        sqla += ` and customer.u_id=${data.allocate_id}`;
      }
      if (typeof data.g_val != "undefined") {
        sqla += ` and customer.c_tax=${data.g_val}`;
      }
      if (data.status == 1) {
        sql2 = `SELECT *,(SELECT embassy_fees FROM payment WHERE customer.c_id = payment.c_id  ORDER by payment.payment_id DESC LIMIT 1)as embassy_fees,DATE_FORMAT(STR_TO_DATE(customer.c_date,'%d-%m-%Y'), '%M-%Y')as c_date FROM customer WHERE customer.deleted = 0  AND customer.is_block = 1 and  customer.is_cancel=0 and customer.branch_id=${data.login_branch_id} ${sqla} and  STR_TO_DATE(customer.c_date,"%d-%m-%y")>=STR_TO_DATE('${data.s_date}',"%d-%m-%y") and STR_TO_DATE(customer.c_date,"%d-%m-%y")<=STR_TO_DATE('${data.e_date}',"%d-%m-%y")`;
      } else if (data.status == 2) {
        sql2 = `SELECT *,(SELECT embassy_fees FROM payment WHERE customer.c_id = payment.c_id  ORDER by payment.payment_id DESC LIMIT 1)as embassy_fees,DATE_FORMAT(STR_TO_DATE(customer.c_date,'%d-%m-%Y'), '%M-%Y')as c_date FROM customer,payment WHERE payment.c_id=customer.c_id and customer.deleted = 0  AND customer.is_block = 1 and customer.is_cancel=0 AND payment.due_amt!=0 and customer.branch_id=${data.login_branch_id} ${sqla} and  STR_TO_DATE(customer.c_date,"%d-%m-%y")>=STR_TO_DATE('${data.s_date}',"%d-%m-%y") and STR_TO_DATE(customer.c_date,"%d-%m-%y")<=STR_TO_DATE('${data.e_date}',"%d-%m-%y") AND payment_id IN (SELECT max(payment_id) FROM payment GROUP by c_id)`;
      } else if (data.status == 3) {
        sql2 = `SELECT *,(SELECT embassy_fees FROM payment WHERE customer.c_id = payment.c_id  ORDER by payment.payment_id DESC LIMIT 1)as embassy_fees,DATE_FORMAT(STR_TO_DATE(customer.c_date,'%d-%m-%Y'), '%M-%Y')as c_date FROM customer,payment WHERE payment.c_id=customer.c_id and customer.deleted = 0  AND customer.is_block = 1 and customer.is_cancel=0 AND payment.due_amt=0 and customer.branch_id=${data.login_branch_id} ${sqla} and  STR_TO_DATE(customer.c_date,"%d-%m-%y")>=STR_TO_DATE('${data.s_date}',"%d-%m-%y") and STR_TO_DATE(customer.c_date,"%d-%m-%y")<=STR_TO_DATE('${data.e_date}',"%d-%m-%y") AND payment_id IN (SELECT max(payment_id) FROM payment GROUP by c_id)`;
      }
    } else if (data.user_type == 3) {
      let sqla = "";
      if (typeof data.g_val != "undefined") {
        sqla += ` and customer.c_tax=${data.g_val}`;
      }
      if (data.status == 1) {
        sql2 = `SELECT *,(SELECT embassy_fees FROM payment WHERE customer.c_id = payment.c_id  ORDER by payment.payment_id DESC LIMIT 1)as embassy_fees,DATE_FORMAT(STR_TO_DATE(customer.c_date,'%d-%m-%Y'), '%M-%Y')as c_date FROM customer WHERE customer.deleted = 0  AND customer.is_block = 1 and customer.is_cancel=0 and customer.u_id=${data.u_id} ${sqla} and STR_TO_DATE(customer.c_date,"%d-%m-%y")>=STR_TO_DATE('${data.s_date}',"%d-%m-%y") and STR_TO_DATE(customer.c_date,"%d-%m-%y")<=STR_TO_DATE('${data.e_date}',"%d-%m-%y")`;
      } else if (data.status == 2) {
        sql2 = `SELECT *,(SELECT embassy_fees FROM payment WHERE customer.c_id = payment.c_id  ORDER by payment.payment_id DESC LIMIT 1)as embassy_fees,DATE_FORMAT(STR_TO_DATE(customer.c_date,'%d-%m-%Y'), '%M-%Y')as c_date FROM customer,payment WHERE payment.c_id=customer.c_id and customer.deleted = 0  AND customer.is_block = 1 and customer.is_cancel=0 AND payment.due_amt!=0 and customer.u_id=${data.u_id} ${sqla} and  STR_TO_DATE(customer.c_date,"%d-%m-%y")>=STR_TO_DATE('${data.s_date}',"%d-%m-%y") and STR_TO_DATE(customer.c_date,"%d-%m-%y")<=STR_TO_DATE('${data.e_date}',"%d-%m-%y") AND payment_id IN (SELECT max(payment_id) FROM payment GROUP by c_id)`;
      } else if (data.status == 3) {
        sql2 = `SELECT *,(SELECT embassy_fees FROM payment WHERE customer.c_id = payment.c_id  ORDER by payment.payment_id DESC LIMIT 1)as embassy_fees,DATE_FORMAT(STR_TO_DATE(customer.c_date,'%d-%m-%Y'), '%M-%Y')as c_date FROM customer,payment WHERE payment.c_id=customer.c_id and customer.deleted = 0  AND customer.is_block = 1 and customer.is_cancel=0 AND payment.due_amt=0 and customer.u_id=${data.u_id} ${sqla} and  STR_TO_DATE(customer.c_date,"%d-%m-%y")>=STR_TO_DATE('${data.s_date}',"%d-%m-%y") and STR_TO_DATE(customer.c_date,"%d-%m-%y")<=STR_TO_DATE('${data.e_date}',"%d-%m-%y") AND payment_id IN (SELECT max(payment_id) FROM payment GROUP by c_id)`;
      }
    }
    let response = await new Promise((resolve, reject) => {
      con.query(sql2, async function (err2, result2) {
        if (err2) {
          console.log(err2);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result2.length > 0) {
            for (let i = 0; i < result2.length; i += 1) {
              cust.push({
                customer: result2[i],
                service_type: result2[i].c_s_type,
                c_id: result2[i].c_id,
                applicates: {},
              });
              applicate_list.push({
                customer: result2[i],
                service_type: result2[i].c_s_type,
                c_id: result2[i].c_id,
                applicates: {},
              });
            }
          } else {
            resolve({
              status: 1,
              applicate_data: [],
            });
          }
          Object.keys(cust).map((k) => {
            if (cust[k].service_type == 10) {
              sql3 = `Select * FROM attestation  WHERE c_id = ${cust[k].c_id} and deleted = 0`;
            } else if (cust[k].service_type == 8) {
              sql3 = `Select * FROM visa  WHERE c_id = ${cust[k].c_id} and deleted = 0`;
            } else if (cust[k].service_type == 17) {
              sql3 = `Select * FROM apostille  WHERE c_id = ${cust[k].c_id} and deleted = 0`;
            } else {
              sql3 = `Select * FROM translation  WHERE c_id = ${cust[k].c_id} and deleted = 0`;
            }
            con.query(sql3, async function (errsql1, sql1res) {
              if (errsql1) {
                console.log(errsql1);
                resolve({ status: 0, message: "Something went to wrong" });
              } else {
                if (sql1res.length > 0) {
                  let sql4 = "";
                  let cust_data = [];
                  Object.keys(sql1res).map(async (ak) => {
                    let responsee1 = await new Promise(
                      async (resolve, reject) => {
                        let sum = 0;
                        let actual_amount = 0;
                        let profit = 0;
                        if (
                          cust[k].service_type == 10 ||
                          cust[k].service_type == 17 ||
                          cust[k].service_type == 20
                        ) {
                          let certificate =
                            sql1res[ak].a_certificate.split(",");
                          certificate.map(async (certi) => {
                            sql4 += `SELECT s_amount,actual_price,profit FROM serviceprice WHERE service = ${cust[k].service_type}  AND country = ${sql1res[ak].a_country} AND s_type = ${sql1res[ak].a_type}  AND deleted = 0;`;
                          });
                          var newobj = {};
                          let responsee = await new Promise(
                            (resolve, reject) => {
                              con.query(sql4, async function (err2, result23) {
                                if (err2) {
                                  console.log(errsql1);
                                  resolve({
                                    status: 0,
                                    message: "Something went to wrong",
                                  });
                                } else {
                                  if (result23 == undefined) {
                                    resolve({
                                      sum: 0,
                                      cust: (newobj = {
                                        ...newobj,
                                        [cust[k].customer.c_date]: {
                                          total_amount: 0,
                                          actual_amount: 0,
                                          profit_amount: 0,
                                          c_date: cust[k].customer.c_date,
                                        },
                                      }),
                                    });
                                  } else {
                                    if (result23.length > 0) {
                                      await result23.map(async (res) => {
                                        if (res.length == 0) {
                                          sum = sum + parseInt(0);
                                          actual_amount =
                                            actual_amount + parseInt(0);
                                          profit = profit + parseInt(0);
                                        } else if (res[0]) {
                                          sum = sum + parseInt(res[0].s_amount);
                                          actual_amount =
                                            actual_amount +
                                            parseInt(res[0].actual_price);
                                          profit =
                                            profit + parseInt(res[0].profit);
                                        } else {
                                          sum = sum + parseInt(res.s_amount);
                                          actual_amount =
                                            actual_amount +
                                            parseInt(res.actual_price);
                                          profit =
                                            profit + parseInt(res.profit);
                                        }
                                      });
                                      newobj = {
                                        ...newobj,
                                        [cust[k].customer.c_date]: {
                                          total_amount: sum,
                                          actual_amount: actual_amount,
                                          profit_amount: profit,
                                          c_date: cust[k].customer.c_date,
                                        },
                                      };
                                    } else {
                                      newobj = {
                                        ...newobj,
                                        [cust[k].customer.c_date]: {
                                          total_amount: 0,
                                          actual_amount: 0,
                                          profit_amount: 0,
                                          c_date: cust[k].customer.c_date,
                                        },
                                      };
                                    }
                                  }

                                  resolve({
                                    sum: sum,
                                    cust: newobj,
                                  });
                                }
                              });
                            }
                          );
                          cust_data.push(responsee.cust);
                        } else {
                          let country = sql1res[ak].v_country.split(",");
                          country.map((coun) => {
                            sql4 += `SELECT s_amount,actual_price,profit FROM serviceprice WHERE service = ${cust[k].service_type}  AND country = ${coun} AND s_type = ${sql1res[ak].v_type} AND deleted = 0;`;
                          });
                          let responsee = await new Promise(
                            (resolve, reject) => {
                              con.query(sql4, async function (err2, result2) {
                                if (err2) {
                                  console.log(err2);
                                  resolve({
                                    status: 0,
                                    message: "Something went to wrong",
                                  });
                                } else {
                                  if (result2 == undefined) {
                                    resolve({
                                      sum: 0,
                                      cust: (newobj = {
                                        ...newobj,
                                        [cust[k].customer.c_date]: {
                                          total_amount: 0,
                                          actual_amount: 0,
                                          profit_amount: 0,
                                          c_date: cust[k].customer.c_date,
                                        },
                                      }),
                                    });
                                  } else {
                                    if (result2.length > 0) {
                                      await result2.map(async (res) => {
                                        if (res.length == 0) {
                                          sum = sum + parseInt(0);
                                          actual_amount =
                                            actual_amount + parseInt(0);
                                          profit = profit + parseInt(0);
                                        } else if (res[0]) {
                                          sum = sum + parseInt(res[0].s_amount);
                                          actual_amount =
                                            actual_amount +
                                            parseInt(res[0].actual_price);
                                          profit =
                                            profit + parseInt(res[0].profit);
                                        } else {
                                          sum = sum + parseInt(res.s_amount);
                                          actual_amount =
                                            actual_amount +
                                            parseInt(res.actual_price);
                                          profit =
                                            profit + parseInt(res.profit);
                                        }
                                      });
                                      newobj = {
                                        ...newobj,
                                        [cust[k].customer.c_date]: {
                                          total_amount: sum,
                                          actual_amount: actual_amount,
                                          profit_amount: profit,
                                          c_date: cust[k].customer.c_date,
                                        },
                                      };
                                    } else {
                                      newobj = {
                                        ...newobj,
                                        [cust[k].customer.c_date]: {
                                          total_amount: 0,
                                          actual_amount: 0,
                                          profit_amount: 0,
                                          c_date: cust[k].customer.c_date,
                                        },
                                      };
                                    }
                                  }
                                  resolve({
                                    sum: sum,
                                    cust: newobj,
                                  });
                                }
                              });
                            }
                          );
                          cust_data.push(responsee.cust);
                        }
                        resolve({
                          cust_data: cust_data,
                        });
                      }
                    );
                    applicate_list[k].applicates = responsee1.cust_data;

                    if (k == cust.length - 1) {
                      resolve({
                        status: 1,
                        applicate_data: applicate_list,
                      });
                    }
                  });
                }
              }
            });
          });
        }
      });
    });
    let response2 = await new Promise((resolve, reject) => {
      con.query(sql, function (err, sresult) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (sresult.length > 0) {
            resolve({
              status: 1,
              data: sresult,
              applicate_data: response.applicate_data,
            });
          } else {
            resolve({
              status: 1,
              data: [],
            });
          }
        }
      });
    });
    return response2;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function getallpickupusers(data) {
  try {
    if (data.user_type == 0) {
      sql = `SELECT *,(select b_name from branch where branch_id=users.branch_id ) as baname FROM users WHERE deleted=0 and p_h_permission=1`;
      sql1 = `SELECT *,(select b_name from branch where branch_id=users.branch_id ) as baname FROM users WHERE deleted=0 and p_d_permission=1`;
    } else if (data.user_type == 1 || data.user_type == 3) {
      sql = `SELECT *,(select b_name from branch where branch_id=users.branch_id ) as baname FROM users WHERE deleted=0 and p_h_permission=1 and branch_id=${data.branch_id}`;
      sql1 = `SELECT *,(select b_name from branch where branch_id=users.branch_id ) as baname FROM users WHERE deleted=0 and p_d_permission=1 and branch_id=${data.branch_id}`;
    }

    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              hdata: result,
            });
          } else {
            resolve({
              status: 0,
              hdata: [],
            });
          }
        }
      });
    });

    let response1 = await new Promise((resolve, reject) => {
      con.query(sql1, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              ddata: result,
            });
          } else {
            resolve({
              status: 0,
              ddata: [],
            });
          }
        }
      });
    });

    let finalresponse = await new Promise((resolve, reject) => {
      resolve({
        status: 1,
        hdata: response.hdata,
        ddata: response1.ddata,
      });
    });
    return finalresponse;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function getAllinpickuplist(data) {
  try {
    //2903
    let tDate = moment().add(+1, "d").format("DD-MM-YYYY");
    if (data.id != 1) {
      sql = `SELECT *,(SELECT u_name FROM users WHERE users.u_id=elead.l_allocate_to)as allocatedTo FROM elead WHERE l_status = 249 AND deleted = 0 AND in_out = 1 AND p_h_id = ${data.id} AND  DATE_FORMAT(STR_TO_DATE('${tDate}','%d-%m-%Y'), '%Y-%m-%d') >= DATE_FORMAT(STR_TO_DATE(d_c_date,'%d-%m-%Y'), '%Y-%m-%d') ORDER BY lead_id DESC`;
    } else {
      sql = `SELECT *,(SELECT u_name FROM users WHERE users.u_id=elead.l_allocate_to)as allocatedTo FROM elead WHERE l_status = 249 AND deleted = 0 AND in_out = 1 AND  DATE_FORMAT(STR_TO_DATE('${tDate}','%d-%m-%Y'), '%Y-%m-%d') >= DATE_FORMAT(STR_TO_DATE(d_c_date,'%d-%m-%Y'), '%Y-%m-%d') ORDER BY lead_id DESC`;
    }
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              counter: result.length,
              data: result,
            });
          } else {
            resolve({
              status: 0,
              data: [],
              counter: 0,
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}
//1403
async function insertpickupnote(data, filename) {
  try {
    let response = await new Promise((resolve, reject) => {
      if (data.p_status == 0) {
        //1403
        //2303
        if (data.step == 0) {
          sql = `UPDATE elead SET l_status=538,i_cancel_note='${mysql_real_escape_string(data.i_cancel_note)
            }',l_message='${typeof data.l_message != undefined && data.l_message != undefined && data.l_message != null
              ? `${mysql_real_escape_string(
                data.l_message
              )}, ${mysql_real_escape_string(data.i_cancel_note)}`
              : mysql_real_escape_string(data.i_cancel_note)
            } ',in_out=3 WHERE  lead_id =${data.lead_id}`;
        } else {
          sql = `UPDATE elead SET l_status=538,o_cancel_note='${mysql_real_escape_string(data.i_cancel_note)
            }',l_message='${typeof data.l_message != undefined && data.l_message != undefined && data.l_message != null
              ? `${mysql_real_escape_string(
                data.l_message
              )}, ${mysql_real_escape_string(data.i_cancel_note)}`
              : mysql_real_escape_string(data.i_cancel_note)
            } ',in_out=3 WHERE lead_id =${data.lead_id}`;
        }

        con.query(sql, async function (err, result) {
          if (err) {
            console.log(err);
            resolve({ status: 0, message: "Something went to wrong" });
          } else {
            if (result.affectedRows > 0) {
              senderMailSetting = await sendmessage.getEmailSetting(data.u_id);

              let sqlll = `SELECT u_email FROM users WHERE u_id = ${data.u_id} `;
              let ccmail = await new Promise((resolve, reject) => {
                con.query(sqlll, async function (err1, result1) {
                  if (err1) {
                    console.log(err1);
                    resolve({ status: 0, message: "Something went to wrong" });
                  } else {
                    if (result1.length > 0) {
                      resolve({ status: 1, result: result1[0].u_email });
                    } else {
                      resolve({
                        status: 0,
                        message: "Something went to wrong",
                      });
                    }
                  }
                });
              });
              let userEmailSql = `SELECT u_email,u_name FROM users WHERE u_id = ${data.l_created_by}`;
              let userEmail = await new Promise((resolve, reject) => {
                con.query(
                  userEmailSql,
                  async function (userEmailSql_err, userEmailSql_result) {
                    if (userEmailSql_err) {
                      console.log(userEmailSql_err);
                      resolve({
                        status: 0,
                        message: "Something went to wrong",
                      });
                    } else {
                      if (userEmailSql_result.length > 0) {
                        resolve({
                          status: 1,
                          u_email: userEmailSql_result[0].u_email,
                          u_name: userEmailSql_result[0].u_name,
                        });
                      } else {
                        resolve({
                          status: 0,
                          message: "Something went to wrong",
                        });
                      }
                    }
                  }
                );
              });

              let message = await sendmessage.getTemplate(279);
              if (message.status != 0) {
                message.template = message.template.replace(
                  "{:name:}",
                  userEmail.u_name
                );
                message.template = message.template.replace(
                  "{:awb_number:}",
                  data.awb_no
                );
                message.template = message.template.replace(
                  "{:company_name:}",
                  data.company_name
                );

                message.template = message.template.replace(
                  "{:p_i_date:}",
                  data.p_i_date
                );
                //1003
                message.template = message.template.replace(
                  "{:address:}",
                  data.address
                );
                message.template = message.template.replace(
                  "{:note:}",
                  data.i_cancel_note
                );
                let mess =
                  (message.header == 1
                    ? typeof senderMailSetting.email_template_header !=
                      undefined && senderMailSetting.email_template_header != undefined &&
                      senderMailSetting.email_template_header != null
                      ? senderMailSetting.email_template_header
                      : ""
                    : "") +
                  message.template +
                  (message.b_d_id != 0
                    ? message.b_d_id == 1
                      ? senderMailSetting.gst_bankdetails
                      : message.b_d_id == 2
                        ? senderMailSetting.ngst_bankdetails
                        : message.b_d_id == 3
                          ? senderMailSetting.general_bankdetails
                          : ""
                    : "") +
                  (message.footer == 1
                    ? senderMailSetting.email_template_footer
                    : "") +
                  (message.signature == 1
                    ? senderMailSetting.email_signature
                    : "");

                CCMailSetting = await sendmessage.getEmailSetting(1);
                let pathname = __dirname + "/public/Assets/images/pickupin";
                //1103
                sendmessagenow = sendmessage.pickupmailsend(
                  senderMailSetting,
                  userEmail.u_email,
                  mess,
                  `${message.subject}  || ${data.l_email} `,
                  filename,
                  ccmail.result, //cc mail// CCMailSetting.e_username,
                  ccmail.result, // reply mail
                  1,
                  pathname
                );
              }
              //1403

              resolve({
                status: 1,
                message: "Note Canceled successfully",
              });
            }
          }
          resolve({
            status: 1,
            message: "Note Canceled successfully",
          });
        });
      } else {
        let doc = "";
        if (filename != undefined) {
          doc = `,p_i_attachment='${filename}'`;
        }
        //1403
        sql = `UPDATE elead SET p_i_date='${data.p_i_date
          }',p_i_note='${mysql_real_escape_string(
            typeof data.p_i_note != undefined && data.p_i_note != undefined && data.p_i_note != null ? data.p_i_note : ''
          )}',in_out=2,awb_no='${data.awb_no}',l_message='${typeof data.l_message != undefined && data.l_message != undefined && data.l_message != null
            ? `${mysql_real_escape_string(
              data.l_message
            )}, ${mysql_real_escape_string(typeof data.p_i_note != undefined && data.p_i_note != undefined && data.p_i_note != null ? data.p_i_note : '')}`
            : mysql_real_escape_string(typeof data.p_i_note != undefined && data.p_i_note != undefined && data.p_i_note != null ? data.p_i_note : '')
          } ', courier_id=${data.courier_id} ${doc} WHERE  lead_id =${data.lead_id
          }`;

        con.query(sql, async function (err, result) {
          if (err) {
            console.log(err);
            resolve({ status: 0, message: "Something went to wrong" });
          } else {
            if (result.affectedRows > 0) {
              senderMailSetting = await sendmessage.getEmailSetting(data.u_id);
              sqlll = `SELECT u_email FROM users WHERE u_id = ${data.u_id} `;
              let ccmail = await new Promise((resolve, reject) => {
                con.query(sqlll, async function (err1, result1) {
                  if (err1) {
                    console.log(err1);
                    resolve({ status: 0, message: "Something went to wrong" });
                  } else {
                    if (result1.length > 0) {
                      resolve({ status: 1, result: result1[0].u_email });
                    } else {
                      resolve({
                        status: 0,
                        message: "Something went to wrong",
                      });
                    }
                  }
                });
              });
              //1003
              let etemp = "";
              if (data.courier_id == 521) {
                //DL : Blue Dart Courier
                etemp = 262;
              } else if (data.courier_id == 479) {
                //Smartr Courier
                etemp = 259;
              } else if (data.courier_id == 523) {
                //DL Smartr Courier
                etemp = 263;
              } else if (data.courier_id == 524) {
                etemp = 264;
                //DL : WeFast / Borzo Courier
              } else if (data.courier_id == 189) {
                //Blue Dart Courier
                etemp = 240;
              } else if (data.courier_id == 520) {
                etemp = 261;
                //BLUE DART OFFICE
              } else if (data.courier_id == 525) {
                etemp = 265;
                //DL BLUE DART OFFICE
              } else if (data.courier_id == 481) {
                //WeFast / Borzo Courier
                etemp = 260;
                //1403
              } else if (data.courier_id == 534) {
                //ST : WeFast / Borzo Courier
                etemp = 276;
              } else {
                etemp = 240;
              }
              let message = await sendmessage.getTemplate(etemp);
              if (message.status != 0) {
                message.template = message.template.replace(
                  "{:name:}",
                  data.l_name_prefix + "" + data.l_name
                );
                message.template = message.template.replace(
                  "{:note:}",
                  data.p_i_note
                );
                message.template = message.template.replace(
                  "{:awb_number:}",
                  data.awb_no
                );
                message.template = message.template.replace(
                  "{:company_name:}",
                  data.company_name
                );

                message.template = message.template.replace(
                  "{:p_i_date:}",
                  data.p_i_date
                );
                //1003
                message.template = message.template.replace(
                  "{:address:}",
                  data.address
                );
                let mess =
                  (message.header == 1
                    ? typeof senderMailSetting.email_template_header !=
                      undefined && senderMailSetting.email_template_header != undefined &&
                      senderMailSetting.email_template_header != null
                      ? senderMailSetting.email_template_header
                      : ""
                    : "") +
                  message.template +
                  (message.b_d_id != 0
                    ? message.b_d_id == 1
                      ? senderMailSetting.gst_bankdetails
                      : message.b_d_id == 2
                        ? senderMailSetting.ngst_bankdetails
                        : message.b_d_id == 3
                          ? senderMailSetting.general_bankdetails
                          : ""
                    : "") +
                  (message.footer == 1
                    ? senderMailSetting.email_template_footer
                    : "") +
                  (message.signature == 1
                    ? senderMailSetting.email_signature
                    : "");

                CCMailSetting = await sendmessage.getEmailSetting(1);
                let pathname = __dirname + "/public/Assets/images/pickupin";
                //1103
                sendmessagenow = sendmessage.pickupmailsend(
                  senderMailSetting,
                  data.l_email,
                  mess,
                  `${message.subject}  || ${data.l_name_prefix} ${data.l_name}}`,
                  filename,
                  ccmail.result, //cc mail// CCMailSetting.e_username,
                  ccmail.result, // reply mail
                  1,
                  pathname
                );
              }

              resolve({
                status: 1,
                message: "Note added successfully",
              });
            }
          }
        });

        resolve({
          status: 1,
          message: "Note added successfully",
        });
      }
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function getAlloutpickuplist(data) {
  try {
    //1103
    if (data.id != 1) {
      sql = `SELECT *,(SELECT u_name FROM users WHERE users.u_id=elead.l_allocate_to)as allocatedTo,(SELECT name FROM attributes WHERE attributes.attribute_id =elead.courier_id)as c_c_name FROM elead WHERE l_status = 249 AND deleted = 0 AND in_out = 2 AND p_h_id = ${data.id}  ORDER BY lead_id DESC`;
    } else {
      sql = `SELECT *,(SELECT u_name FROM users WHERE users.u_id=elead.l_allocate_to)as allocatedTo,(SELECT name FROM attributes WHERE attributes.attribute_id =elead.courier_id)as c_c_name FROM elead WHERE l_status = 249 AND deleted = 0 AND in_out = 2 ORDER BY lead_id DESC`;
    }

    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              counter: result.length,
              data: result,
            });
          } else {
            resolve({
              status: 0,
              data: [],
              counter: 0,
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}
//1403
async function pickupdone(data, filename) {
  try {
    //change
    //2303
    if (filename != undefined) {
      if (data.p_i_note != "") {
        sql = `UPDATE elead SET l_status=250,p_i_note='${mysql_real_escape_string(typeof data.p_i_note != undefined && data.p_i_note != undefined && data.p_i_note != null ? data.p_i_note : ''
        )}',p_o_attachment='${mysql_real_escape_string(filename)}',l_message='${typeof data.l_message != undefined && data.l_message != undefined && data.l_message != null
          ? `${mysql_real_escape_string(
            data.l_message
          )} ,${mysql_real_escape_string(typeof data.p_i_note != undefined && data.p_i_note != undefined && data.p_i_note != null ? data.p_i_note : '')}`
          : mysql_real_escape_string(typeof data.p_i_note != undefined && data.p_i_note != undefined && data.p_i_note != null ? data.p_i_note : '')
          } ',p_d_date='${mysql_real_escape_string(
            data.p_d_date
          )}' WHERE  lead_id =${data.lead_id}`;
      } else {
        sql = `UPDATE elead SET l_status=250,p_o_attachment='${mysql_real_escape_string(
          filename
        )}',p_d_date='${mysql_real_escape_string(
          data.p_d_date
        )}' WHERE  lead_id =${data.lead_id}`;
      }
    } else {
      if (data.p_i_note != "") {
        sql = `UPDATE elead SET l_status=250,p_i_note='${mysql_real_escape_string(typeof data.p_i_note != undefined && data.p_i_note != undefined && data.p_i_note != null ? data.p_i_note : ''
        )}',l_message='${typeof data.l_message != undefined && data.l_message != undefined && data.l_message != null
          ? `${mysql_real_escape_string(
            data.l_message
          )} ,${mysql_real_escape_string(typeof data.p_i_note != undefined && data.p_i_note != undefined && data.p_i_note != null ? data.p_i_note : '')}`
          : mysql_real_escape_string(typeof data.p_i_note != undefined && data.p_i_note != undefined && data.p_i_note != null ? data.p_i_note : '')
          } ',p_d_date='${mysql_real_escape_string(
            data.p_d_date
          )}' WHERE lead_id =${data.lead_id}`;
      } else {
        sql = `UPDATE elead SET l_status=250,p_d_date='${mysql_real_escape_string(
          data.p_d_date
        )}' WHERE lead_id =${data.lead_id}`;
      }
    }

    let response = await new Promise((resolve, reject) => {
      con.query(sql, async function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.affectedRows > 0) {
            resolve({
              status: 1,
              message: "Pick up done successfully",
            });
            sqll = `Select *,(select u_name from users where users.u_id = ${data.p_d_id})as handler_name,(select u_email from users where users.u_id = ${data.p_d_id})as u_email from elead where lead_id =${data.lead_id} and deleted = 0`;
            let res = await new Promise(async (resolve, reject) => {
              con.query(sqll, async function (err, result) {
                if (err) {
                  console.log(err);
                  resolve({ status: 0, message: "Something went to wrong" });
                } else {
                  if (result.length > 0) {
                    resolve({
                      status: 1,
                      data: result,
                    });
                  }
                }
              });
            });
            let table = `<div>
                            <table style="border-collapse: collapse;" >
                            <tr style="border: 1px solid #333;padding:5px;">
                              <th style="border: 1px solid #333;padding:5px;">Name</th>
                              <th style="border: 1px solid #333;padding:5px;">Email</th>
                              <th style="border: 1px solid #333;padding:5px;">Mobile No</th>
                              <th style="border: 1px solid #333;padding:5px;">Address</th>
                              <th style="border: 1px solid #333;padding:5px;">Message</th>
                            </tr>
                            ${`<tr><td style="border: 1px solid #333;padding:5px;">${res.data[0].l_name}</td>
                              <td style="border: 1px solid #333;padding:5px;">${res.data[0].l_email}</td>
                              <td style="border: 1px solid #333;padding:5px;">${res.data[0].co_no}</td>
                              <td style="border: 1px solid #333;padding:5px;">${res.data[0].l_address}</td>
                              <td style="border: 1px solid #333;padding:5px;">${res.data[0].l_message}</td>`}
                            </table>
                            </div>`;
            let message = await sendmessage.getTemplate(50);
            if (message.status != 0) {
              message.template = message.template.replace(
                "{:name:}",
                res.data[0].handler_name
              );
              message.template = message.template.replace("{:table:}", table);
              message.template = message.template.replace(
                "{:address:}",
                data.address
              );
              let senderMailSetting = await sendmessage.getEmailSetting(
                data.p_d_id
              );
              sqlll = `SELECT u_email FROM users WHERE u_id = ${data.p_d_id} `;
              let ccmail = await new Promise((resolve, reject) => {
                con.query(sqlll, async function (err1, result1) {
                  if (err1) {
                    console.log(err1);
                    resolve({ status: 0, message: "Something went to wrong" });
                  } else {
                    if (result1.length > 0) {
                      resolve({ status: 1, result: result1[0].u_email });
                    } else {
                      resolve({
                        status: 0,
                        message: "Something went to wrong",
                      });
                    }
                  }
                });
              });
              let mess =
                (message.header == 1
                  ? typeof senderMailSetting.email_template_header !=
                    undefined && senderMailSetting.email_template_header != undefined &&
                    senderMailSetting.email_template_header != null
                    ? senderMailSetting.email_template_header
                    : ""
                  : "") +
                message.template +
                (message.b_d_id != 0
                  ? message.b_d_id == 1
                    ? senderMailSetting.gst_bankdetails
                    : message.b_d_id == 2
                      ? senderMailSetting.ngst_bankdetails
                      : message.b_d_id == 3
                        ? senderMailSetting.general_bankdetails
                        : ""
                  : "") +
                (message.footer == 1
                  ? senderMailSetting.email_template_footer
                  : "") +
                (message.signature == 1
                  ? senderMailSetting.email_signature
                  : "");
              CCMailSetting = await sendmessage.getEmailSetting(1);
              let pathname = __dirname + "/public/Assets/images/pickupin";
              sendmessagenow = sendmessage.pickupmailsend(
                senderMailSetting,
                res.data[0].u_email,
                mess,
                `${message.subject}  || ${data.l_name_prefix} ${data.l_name}}`,
                filename,
                ccmail.result, //CCMailSetting.e_username,  // user mail
                ccmail.result, // reply mail
                1,
                pathname
              );
            }
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

//2803
async function getAllpickupdonelist(data) {
  try {
    //1103
    if (data.id != 1) {
      sql = `SELECT elead.*,lead_customer.login_u_id,(row_number() over ( order by elead.lead_id DESC) ) AS row_no, (SELECT  CASE
      WHEN l_source =282 
         THEN (SELECT m_c_name FROM main_customer WHERE m_c_id=l_created_by) 
         ELSE (SELECT u_name FROM users WHERE users.u_id=elead.l_created_by)
    END  )as createdBy,(SELECT u_name FROM users WHERE users.u_id=elead.l_allocate_to)as allocatedTo,(SELECT b_name FROM branch WHERE branch.branch_id =elead.l_branch_id)as branch,
    (SELECT name FROM attributes WHERE attributes.attribute_id =elead.l_status)as status,
    (SELECT name FROM attributes WHERE attributes.attribute_id =elead.l_source)as source,(SELECT name FROM attributes WHERE attributes.attribute_id =elead.courier_id)as c_c_name FROM elead left join lead_customer on lead_customer.l_id = elead.lead_id AND lead_customer.deleted = 0 WHERE elead.deleted = 0  AND elead.p_d_read_status = 0 AND elead.l_status=250 and elead.convert_status=0 AND elead.p_d_id = ${data.id}  ORDER BY elead.lead_id DESC`;
    } else {
      sql = `SELECT elead.*,lead_customer.login_u_id,(row_number() over ( order by elead.lead_id DESC) ) AS row_no, (SELECT  CASE
        WHEN l_source =282 
           THEN (SELECT m_c_name FROM main_customer WHERE m_c_id=l_created_by) 
           ELSE (SELECT u_name FROM users WHERE users.u_id=elead.l_created_by)
      END  )as createdBy,(SELECT u_name FROM users WHERE users.u_id=elead.l_allocate_to)as allocatedTo,(SELECT b_name FROM branch WHERE branch.branch_id =elead.l_branch_id)as branch,
      (SELECT name FROM attributes WHERE attributes.attribute_id =elead.l_status)as status,
      (SELECT name FROM attributes WHERE attributes.attribute_id =elead.l_source)as source,(SELECT name FROM attributes WHERE attributes.attribute_id =elead.courier_id)as c_c_name FROM elead left join lead_customer on lead_customer.l_id = elead.lead_id AND lead_customer.deleted = 0 WHERE elead.deleted = 0  AND elead.p_d_read_status = 0 AND elead.l_status=250 and elead.convert_status=0  ORDER BY elead.lead_id DESC`;
    }
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              counter: result.length,
              data: result,
            });
          } else {
            resolve({
              status: 0,
              data: [],
              counter: 0,
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}
//2803
async function getAllpickupdoneleadlist(data) {
  try {
    //1403
    if (data.id != 1) {
      //   sql = `SELECT elead.*,lead_customer.login_u_id, (SELECT  CASE
      //   WHEN l_source =282
      //      THEN (SELECT m_c_name FROM main_customer WHERE m_c_id=l_created_by)
      //      ELSE (SELECT u_name FROM users WHERE users.u_id=elead.l_created_by)
      // END  )as createdBy,(SELECT u_name FROM users WHERE users.u_id=elead.l_allocate_to)as allocatedTo,(SELECT b_name FROM branch WHERE branch.branch_id =elead.l_branch_id)as branch,
      // (SELECT name FROM attributes WHERE attributes.attribute_id =elead.l_status)as status,
      // (SELECT name FROM attributes WHERE attributes.attribute_id =elead.l_source)as source, (SELECT name FROM attributes WHERE attributes.attribute_id =elead.courier_id)as c_c_name FROM elead,lead_customer WHERE lead_customer.l_id = elead.lead_id  and elead.l_status=250 AND elead.deleted = 0 and elead.convert_status=0 AND (elead.p_d_id = ${data.id} OR elead.l_created_by = ${data.id})  ORDER BY elead.lead_id DESC`;
      sql = `SELECT elead.*,lead_customer.login_u_id, (SELECT  CASE
      WHEN l_source =282 
         THEN (SELECT m_c_name FROM main_customer WHERE m_c_id=l_created_by) 
         ELSE (SELECT u_name FROM users WHERE users.u_id=elead.l_created_by)
    END  )as createdBy,(SELECT u_name FROM users WHERE users.u_id=elead.l_allocate_to)as allocatedTo,(SELECT b_name FROM branch WHERE branch.branch_id =elead.l_branch_id)as branch,
    (SELECT name FROM attributes WHERE attributes.attribute_id =elead.l_status)as status,
    (SELECT name FROM attributes WHERE attributes.attribute_id =elead.l_source)as source, (SELECT name FROM attributes WHERE attributes.attribute_id =elead.courier_id)as c_c_name FROM elead left join lead_customer on lead_customer.l_id = elead.lead_id AND lead_customer.deleted = 0 WHERE elead.l_status=250 AND elead.deleted = 0 and elead.convert_status=0 AND (elead.p_d_id = ${data.id} OR elead.l_created_by = ${data.id} OR elead.l_allocate_to = ${data.id})  ORDER BY elead.lead_id DESC`;
    } else {
      sql = `SELECT elead.*,lead_customer.login_u_id,(SELECT  CASE
        WHEN l_source =282 
           THEN (SELECT m_c_name FROM main_customer WHERE m_c_id=l_created_by) 
           ELSE (SELECT u_name FROM users WHERE users.u_id=elead.l_created_by)
      END  )as createdBy,(SELECT u_name FROM users WHERE users.u_id=elead.l_allocate_to)as allocatedTo,(SELECT b_name FROM branch WHERE branch.branch_id =elead.l_branch_id)as branch,
      (SELECT name FROM attributes WHERE attributes.attribute_id =elead.l_status)as status,
      (SELECT name FROM attributes WHERE attributes.attribute_id =elead.l_source)as source, (SELECT name FROM attributes WHERE attributes.attribute_id =elead.courier_id)as c_c_name FROM elead left join lead_customer on lead_customer.l_id = elead.lead_id AND lead_customer.deleted = 0 WHERE elead.l_status=250 AND elead.deleted = 0 and elead.convert_status=0 ORDER BY elead.lead_id DESC`;
    }
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              counter: result.length,
              data: result,
            });
          } else {
            resolve({
              status: 0,
              data: [],
              counter: 0,
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function insertquestion(data) {
  try {
    let questionlist = JSON.parse(data.questionlist);

    let response1 = await new Promise((resolve, reject) => {
      let record = [];
      Object.keys(questionlist).map((key) => {
        record.push([
          data.i_branch_id !== "undefined"
            ? data.i_branch_id
            : data.login_branch_id,
          data.allocate_id !== "undefined" ? data.allocate_id : data.created_id,
          mysql_real_escape_string(questionlist[key].question),
          data.type,
          data.created_id,
        ]);
      });
      if (record.length > 0) {
        sqlemail =
          "INSERT INTO question (`branch_id`, `u_id`, `question`, `type`, `created_id`) VALUES ?";
        con.query(sqlemail, [record], (error, eres) => {
          if (error) {
            console.log(error);
            resolve({ status: 0, message: "Something went to wrong" });
          } else {
            if (eres.affectedRows > 0) {
              resolve({
                status: 1,
                message: "User Inserted successfully",
                edata: eres,
              });
            }
          }
        });
      } else {
        resolve({
          status: 0,
          edata: [],
        });
      }
    });
    return response1;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function getallquestion(data) {
  try {
    sql = `SELECT *,(row_number() over ( order by question.q_id DESC) ) AS row_no,(select b_name from branch where branch.branch_id=question.branch_id) as bname,(select u_name from users where users.u_id=question.u_id) as uname FROM question where deleted=0 and created_id=${data.uid} ORDER BY q_id DESC`;
    let response1 = await new Promise((resolve, reject) => {
      con.query(sql, (error, eres) => {
        if (error) {
          console.log(error);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (eres.length > 0) {
            resolve({
              status: 1,
              data: eres,
            });
          } else {
            resolve({
              status: 1,
              data: [],
            });
          }
        }
      });
    });
    return response1;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function deletequestion(data) {
  try {
    sql = `update question set deleted=1 where q_id=${data.qid}`;
    let response1 = await new Promise((resolve, reject) => {
      con.query(sql, (error, eres) => {
        if (error) {
          console.log(error);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (eres.affectedRows > 0) {
            resolve({
              status: 1,
              message: "Question deleted successfully",
            });
          }
        }
      });
    });
    return response1;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function updatequestion(data) {
  try {
    sqlemail = `update question set branch_id=${data.i_branch_id},u_id=${data.allocate_id
      },question='${mysql_real_escape_string(data.question)}',type=${data.type
      } where q_id=${data.q_id}`;
    let response1 = await new Promise((resolve, reject) => {
      con.query(sqlemail, (error, eres) => {
        if (error) {
          console.log(error);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (eres.affectedRows > 0) {
            resolve({
              status: 1,
              message: "User Updated successfully",
              edata: eres,
            });
          }
        }
      });
    });
    return response1;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function getDailyQuestions(data) {
  try {
    sql = `SELECT * FROM question WHERE u_id=${data.u_id} AND type=${data.t_type} `;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              data: result,
            });
          } else {
            resolve({
              status: 1,
              data: [],
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function insertDailyQueAns(data) {
  try {
    let receiver_id = JSON.parse(data.receiver_id);
    let record = [];
    for (i = 0; i < receiver_id.length; i++) {
      record.push([
        data.c_type,
        data.sender_id,
        receiver_id[i],
        `${mysql_real_escape_string(data.message)}`,
        0
      ]);
    }
    chatsql = `INSERT INTO chat (c_type,sender_id,receiver_id,message,sender_type) VALUES ?`;
    let response1 = await new Promise((resolve, reject) => {
      con.query(chatsql, [record], function (err, result) {
        if (err) {
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.affectedRows > 0) {
            resolve({
              status: 1,
              message: "Message Sent Successfully",
            });
          }
        }
      });
    });

    sql = `INSERT INTO answer (u_id,a_text,type) VALUES (${data.sender_id
      },"${mysql_real_escape_string(data.message)}",${data.type})`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.affectedRows > 0) {
            resolve({
              status: 1,
              message: "Answer added Successfully",
            });
          }
        }
      });
    });

    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function getUsersChat(data) {
  try {
    if (data.is_marketing == 1) {
      let getBranchUser = `select u_id from users where branch_id = ${data.branch_id} and user_type = 1`;
      let resp = await new Promise((resolve, reject) => {
        con.query(getBranchUser, function (err, result) {
          if (err) {
            console.log(err);
            resolve({ status: 0, message: "Something went to wrong" });
          } else {
            if (result.length > 0) {
              resolve({
                status: 1,
                branch: result[0].u_id,
              });
            } else {
              resolve({
                status: 1,
                branch: 0,
              });
            }
          }
        });
      });
      sql = `SELECT *,(SELECT COUNT(chat_id) FROM chat WHERE chat.sender_id=users.u_id AND c_read=0 AND c_type=0 AND receiver_id=${data.u_id})as unread_msg,
      (SELECT MAX(chat.created_timestamp) FROM chat WHERE  (chat.receiver_id=users.u_id OR chat.sender_id=users.u_id ) AND c_type=0 AND (receiver_id=${data.u_id} OR sender_id=${data.u_id}))as last_msg_time FROM users WHERE deleted=0 AND (users.u_id = ${data.marketing_parent_id} OR users.u_id = ${resp.branch} OR users.u_id = 1) ORDER BY last_msg_time DESC`;
    } else if (data.u_type == 3) {
      sql = `SELECT *,(SELECT COUNT(chat_id) FROM chat WHERE chat.sender_id=users.u_id AND c_read=0 AND c_type=0 AND receiver_id=${data.u_id})as unread_msg,
     (SELECT MAX(chat.created_timestamp) FROM chat WHERE  (chat.receiver_id=users.u_id OR chat.sender_id=users.u_id ) AND c_type=0 AND (receiver_id=${data.u_id} OR sender_id=${data.u_id}))as last_msg_time FROM users WHERE deleted=0 AND users.u_id !=${data.u_id} AND (users.is_marketing = 0 OR (users.is_marketing = 1 and  users.marketing_parent_id = ${data.u_id}))  ORDER BY last_msg_time DESC`;
    } else if (data.u_type == 1) {
      sql = `SELECT *,(SELECT COUNT(chat_id) FROM chat WHERE chat.sender_id=users.u_id AND c_read=0 AND c_type=0 AND receiver_id=${data.u_id})as unread_msg,
      (SELECT MAX(chat.created_timestamp) FROM chat WHERE  (chat.receiver_id=users.u_id OR chat.sender_id=users.u_id ) AND c_type=0 AND (receiver_id=${data.u_id} OR sender_id=${data.u_id}))as last_msg_time FROM users WHERE deleted=0 AND users.u_id !=${data.u_id} AND (users.is_marketing = 0 OR (users.is_marketing = 1 and  users.branch_id = ${data.branch_id})) ORDER BY last_msg_time DESC`;
    } else {
      sql = `SELECT *,(SELECT COUNT(chat_id) FROM chat WHERE chat.sender_id=users.u_id AND c_read=0 AND c_type=0 AND receiver_id=${data.u_id})as unread_msg,
      (SELECT MAX(chat.created_timestamp) FROM chat WHERE  (chat.receiver_id=users.u_id OR chat.sender_id=users.u_id ) AND c_type=0 AND (receiver_id=${data.u_id} OR sender_id=${data.u_id}))as last_msg_time FROM users WHERE deleted=0 AND users.u_id !=${data.u_id} ORDER BY last_msg_time DESC`;

    }
    let response = await new Promise((resolve, reject) => {
      con.query(sql, (error, result) => {
        if (error) {
          console.log(error);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              data: result,
            });
          } else {
            resolve({
              status: 1,
              data: [],
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function getChatUsersListSocket(data) {
  try {
    if (data.is_marketing == 1) {
      sql = `SELECT *,(SELECT COUNT(chat_id) FROM chat WHERE chat.sender_id=users.u_id AND c_read=0 AND c_type=0 AND receiver_id=${data.u_id})as unread_msg,
      (SELECT MAX(chat.created_timestamp) FROM chat WHERE  (chat.receiver_id=users.u_id OR chat.sender_id=users.u_id ) AND c_type=0 AND (receiver_id=${data.u_id} OR sender_id=${data.u_id}))as last_msg_time FROM users WHERE deleted=0 AND users.u_id = ${data.marketing_parent_id} ORDER BY last_msg_time DESC`;
    } else if (data.user_type == 3) {
      sql = `SELECT *,(SELECT COUNT(chat_id) FROM chat WHERE chat.sender_id=users.u_id AND c_read=0 AND c_type=0 AND receiver_id=${data.u_id})as unread_msg,
      (SELECT MAX(chat.created_timestamp) FROM chat WHERE  (chat.receiver_id=users.u_id OR chat.sender_id=users.u_id ) AND c_type=0 AND (receiver_id=${data.u_id} OR sender_id=${data.u_id}))as last_msg_time FROM users WHERE deleted=0 AND (users.u_id !=${data.u_id} OR  (users.is_marketing=1 AND users.marketing_parent_id = ${data.u_id})) ORDER BY last_msg_time DESC`;
    } else if (data.user_type == 1) {
      sql = `SELECT *,(SELECT COUNT(chat_id) FROM chat WHERE chat.sender_id=users.u_id AND c_read=0 AND c_type=0 AND receiver_id=${data.u_id})as unread_msg,
      (SELECT MAX(chat.created_timestamp) FROM chat WHERE  (chat.receiver_id=users.u_id OR chat.sender_id=users.u_id ) AND c_type=0 AND (receiver_id=${data.u_id} OR sender_id=${data.u_id}))as last_msg_time FROM users WHERE deleted=0 AND (users.u_id !=${data.u_id} OR  users.is_marketing=1 AND users.branch_id = ${data.branch_id}) ORDER BY last_msg_time DESC`;
    } else {
      sql = `SELECT *,(SELECT COUNT(chat_id) FROM chat WHERE chat.sender_id=users.u_id AND c_read=0 AND c_type=0 AND receiver_id=${data.u_id})as unread_msg,
     (SELECT MAX(chat.created_timestamp) FROM chat WHERE  (chat.receiver_id=users.u_id OR chat.sender_id=users.u_id ) AND c_type=0 AND (receiver_id=${data.u_id} OR sender_id=${data.u_id}))as last_msg_time FROM users WHERE deleted=0 AND users.u_id !=${data.u_id} ORDER BY last_msg_time DESC`;
    }
    // if (data.u_type == 1) {
    //   sql = `SELECT *,(SELECT COUNT(chat_id) FROM chat WHERE chat.sender_id=users.u_id AND c_read=0 AND c_type=0 AND receiver_id=${data.u_id})as unread_msg,
    //  (SELECT MAX(chat.created_timestamp) FROM chat WHERE  (chat.receiver_id=users.u_id OR chat.sender_id=users.u_id ) AND c_type=0 AND (receiver_id=${data.u_id} OR sender_id=${data.u_id}))as last_msg_time FROM users WHERE deleted=0 AND branch_id=${data.branch_id} AND user_type=3 UNION SELECT *,(SELECT COUNT(chat_id) FROM chat WHERE chat.sender_id=users.u_id AND c_read=0 AND c_type=0 AND receiver_id=${data.u_id})as unread_msg,
    //  (SELECT MAX(chat.created_timestamp) FROM chat WHERE  (chat.receiver_id=users.u_id OR chat.sender_id=users.u_id ) AND c_type=0 AND (receiver_id=${data.u_id} OR sender_id=${data.u_id}))as last_msg_time FROM users WHERE deleted=0 AND user_type=0 AND u_id=1 UNION SELECT *,(SELECT COUNT(chat_id) FROM chat WHERE chat.sender_id=users.u_id AND c_read=0 AND c_type=0 AND receiver_id=${data.u_id})as unread_msg,
    //  (SELECT MAX(chat.created_timestamp) FROM chat WHERE (chat.receiver_id=users.u_id OR chat.sender_id=users.u_id ) AND c_type=0 AND (receiver_id=${data.u_id} OR sender_id=${data.u_id}))as last_msg_time FROM users WHERE deleted=0  AND u_id in(SELECT manager_id FROM manager_allocation WHERE branch_id=${data.branch_id}) ORDER BY last_msg_time DESC`;
    // }
    // if (data.u_type == 2) {
    //   sql = `SELECT *,(SELECT COUNT(chat_id) FROM chat WHERE chat.sender_id=users.u_id AND c_read=0 AND c_type=0 AND receiver_id=${data.u_id})as unread_msg,
    //  (SELECT MAX(chat.created_timestamp) FROM chat WHERE  (chat.receiver_id=users.u_id OR chat.sender_id=users.u_id ) AND c_type=0 AND (receiver_id=${data.u_id} OR sender_id=${data.u_id}))as last_msg_time FROM users WHERE deleted=0 AND branch_id IN(SELECT branch_id FROM manager_allocation where manager_id=${data.u_id}) UNION SELECT *,(SELECT COUNT(chat_id) FROM chat WHERE chat.sender_id=users.u_id AND c_read=0 AND c_type=0 AND receiver_id=${data.u_id})as unread_msg,
    //  (SELECT MAX(chat.created_timestamp) FROM chat WHERE  (chat.receiver_id=users.u_id OR chat.sender_id=users.u_id ) AND c_type=0 AND (receiver_id=${data.u_id} OR sender_id=${data.u_id}))as last_msg_time FROM users WHERE deleted=0 AND user_type=0 AND u_id=1 ORDER BY last_msg_time DESC`;
    // }
    // if (data.u_type == 3) {
    //   sql = `SELECT *,(SELECT COUNT(chat_id) FROM chat WHERE chat.sender_id=users.u_id AND c_read=0 AND c_type=0 AND receiver_id=${data.u_id})as unread_msg,
    //  (SELECT MAX(chat.created_timestamp) FROM chat WHERE  (chat.receiver_id=users.u_id OR chat.sender_id=users.u_id) AND c_type=0 AND (receiver_id=${data.u_id} OR sender_id=${data.u_id}))as last_msg_time FROM users WHERE deleted=0 AND branch_id=${data.branch_id} AND user_type=3 AND u_id!=${data.u_id} UNION SELECT *,(SELECT COUNT(chat_id) FROM chat WHERE chat.sender_id=users.u_id AND c_read=0 AND c_type=0 AND receiver_id=${data.u_id})as unread_msg,
    //  (SELECT MAX(chat.created_timestamp) FROM chat WHERE  (chat.receiver_id=users.u_id OR chat.sender_id=users.u_id ) AND c_type=0 AND (receiver_id=${data.u_id} OR sender_id=${data.u_id}))as last_msg_time FROM users WHERE deleted=0 AND user_type=0 AND u_id=1 UNION SELECT *,(SELECT COUNT(chat_id) FROM chat WHERE chat.sender_id=users.u_id AND c_read=0 AND c_type=0 AND receiver_id=${data.u_id})as unread_msg,
    //  (SELECT MAX(chat.created_timestamp) FROM chat WHERE  (chat.receiver_id=users.u_id OR chat.sender_id=users.u_id ) AND c_type=0 AND (receiver_id=${data.u_id} OR sender_id=${data.u_id}))as last_msg_time FROM users WHERE deleted=0 AND user_type=1 AND branch_id=${data.branch_id} UNION SELECT *,(SELECT COUNT(chat_id) FROM chat WHERE chat.sender_id=users.u_id AND c_read=0 AND c_type=0 AND receiver_id=${data.u_id})as unread_msg,
    //  (SELECT MAX(chat.created_timestamp) FROM chat WHERE (chat.receiver_id=users.u_id OR chat.sender_id=users.u_id ) AND c_type=0 AND (receiver_id=${data.u_id} OR sender_id=${data.u_id}))as last_msg_time FROM users WHERE deleted=0  AND u_id in(SELECT manager_id FROM manager_allocation WHERE branch_id=${data.branch_id}) ORDER BY last_msg_time DESC `;
    // }
    let response = await new Promise((resolve, reject) => {
      con.query(sql, (error, result) => {
        if (error) {
          console.log(error);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              data: result,
            });
          } else {
            resolve({
              status: 1,
              data: [],
            });
          }
        }
      });
    });

    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function readchat(data) {
  try {
    if (data.c_type == 0) {
      let sqlchatstatus = `UPDATE chat SET c_read=1 WHERE sender_id=${data.s_c_id} AND receiver_id=${data.login_id} AND c_type=${data.c_type} `;
      let response = await new Promise((resolve, reject) => {
        con.query(sqlchatstatus, (error, result) => {
          if (error) {
            console.log(error);
            resolve({ status: 0, message: "Something went to wrong" });
          } else {
            if (result.affectedRows > 0) {
              resolve({ status: 1, message: "Read Chat succesufully..." });
            }
          }
        });
      });
      return response;
    } else {
      let GetChatListSql = `SELECT * FROM chat WHERE receiver_id = ${data.s_c_id} AND chat.c_type = ${data.c_type} AND !find_in_set(${data.login_id},chat.seen_u_id);`;
      let response = await new Promise((resolve, reject) => {
        con.query(GetChatListSql, (error, result) => {
          if (error) {
            console.log(error);
            resolve({ status: 0, message: "Something went to wrong" });
          } else {
            if (result.length > 0) {

              for (let sn = 0; sn < result.length; sn += 1) {
                let seenuserid = result[sn].seen_u_id + "," + `${data.login_id}`;
                let chatupdate = `UPDATE chat SET seen_u_id = "${seenuserid}" WHERE chat_id =${result[sn].chat_id} `;
                con.query(chatupdate, (error, result1) => {
                  if (error) {
                    console.log(error);
                    resolve({ status: 0, message: "Something went to wrong" });
                  } else {
                    // console.log(chatupdate, "chatupdate");
                    if (result1.affectedRows > 0) {

                      // resolve({ status: 1, message: "Read Chat succesufully..." });
                    }
                  }
                });
              }
            }
          }
        });
      });
      console.log(response, "response");
      return response;
    }

  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function getChatByID(data) {
  try {
    sql = `SELECT * FROM chat WHERE ((sender_id=${data.login_id} AND receiver_id=${data.s_c_id}) OR (sender_id=${data.s_c_id} AND receiver_id=${data.login_id})) AND c_type=${data.c_type} ORDER BY chat_id DESC LIMIT 200`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, (error, result) => {
        if (error) {
          console.log(error);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            sqlchatstatus = `UPDATE chat SET c_read=1 WHERE sender_id=${data.s_c_id} AND receiver_id=${data.login_id} AND c_type=${data.c_type} `;
            con.query(sqlchatstatus, (error1, result1) => {
              if (error1) {
                console.log(error1);
                resolve({ status: 0, message: "Something went to wrong" });
              }
            });
            resolve({
              status: 1,
              data: result.sort((a, b) => a.chat_id - b.chat_id),
            });
          } else {
            sqlchatstatus = `UPDATE chat SET c_read=1 WHERE sender_id=${data.s_c_id} AND receiver_id=${data.login_id} AND c_type=${data.c_type} `;
            con.query(sqlchatstatus, (error, result) => {
              if (error) {
                console.log(error);
                resolve({ status: 0, message: "Something went to wrong" });
              }
            });
            resolve({
              status: 1,
              data: [],
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function getChatByIDSocket(data) {
  try {
    let sql = "";
    if (data.c_type == 0) {
      sql = `SELECT chat.*,users.u_name as sender_name FROM chat left join users on users.u_id = chat.sender_id WHERE ((sender_id=${data.login_id} AND receiver_id=${data.s_c_id}) OR (sender_id=${data.s_c_id} AND receiver_id=${data.login_id})) AND c_type=${data.c_type} ORDER BY chat_id DESC LIMIT 200`;
    } else {
      sql = `SELECT chat.*,IF(chat.sender_type = 1,(SELECT m_c_name FROM main_customer where main_customer.m_c_id=chat.sender_id) ,(SELECT u_name FROM users where chat.sender_id=users.u_id)) as sender_name FROM chat left join users on users.u_id = chat.sender_id WHERE receiver_id=${data.s_c_id} AND c_type=${data.c_type}  ORDER BY chat_id DESC LIMIT 200 `;
    }
    let response = await new Promise((resolve, reject) => {
      con.query(sql, (error, result) => {
        if (error) {
          console.log(error);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            // sqlchatstatus = `UPDATE chat SET c_read=1 WHERE sender_id=${data.s_c_id} AND receiver_id=${data.login_id} AND c_type=${data.c_type} `;
            // con.query(sqlchatstatus, (error1, result1) => {
            //   if (error1) {
            //     console.log(error1);
            //     resolve({ status: 0, message: "Something went to wrong" });
            //   }
            // });

            resolve({
              status: 1,
              data: result.sort((a, b) => a.chat_id - b.chat_id),
            });
          } else {
            // sqlchatstatus = `UPDATE chat SET c_read=1 WHERE sender_id=${data.s_c_id} AND receiver_id=${data.login_id} AND c_type=${data.c_type} `;
            // con.query(sqlchatstatus, (error, result) => {
            //   if (error) {
            //     console.log(error);
            //     resolve({ status: 0, message: "Something went to wrong" });
            //   }
            // });

            resolve({
              status: 1,
              data: [],
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function insertUserMessage(data) {
  try {
    sql = `INSERT INTO chat (c_type,sender_id,receiver_id,message,sender_type) VALUES (${data.c_type
      },${data.sender_id},${data.receiver_id},"${mysql_real_escape_string(
        data.message
      )}",${data.chat_user_type})`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.affectedRows > 0) {
            resolve({
              status: 1,
              message: "Message Sent Successfully",
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function insertUserMessageSocket(data) {
  try {
    sql = `INSERT INTO chat (c_type,sender_id,receiver_id,message,seen_u_id,sender_type) VALUES (${data.c_type
      },${data.sender_id},${data.receiver_id},"${mysql_real_escape_string(
        data.message
      )}","${data.c_type == 0 ? 0 : data.sender_id}",${data.chat_user_type})`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.affectedRows > 0) {
            resolve({
              status: 1,
              message: "Message Sent Successfully",
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function searchMainCustomerChat(data) {
  try {
    // sql = `Select *,m_c_name as u_name,m_c_id as u_id from main_customer Where m_c_email = '${data.email}' AND created_id=${data.created_id} and deleted = 0 group by m_c_email`;
    sql = `Select chat_groups.*,chat_group_members.*,main_customer.m_c_email,COUNT(unreadchat.chat_id) as unread_msg,
    chat.created_timestamp AS last_msg_time,
    chat.created_timestamp,
    chat.message AS last_message,
    chat.sender_id AS last_message_sender,
    users.u_name as u_name from chat_groups left join (SELECT MAX(chat.chat_id) as chat_id,chat.receiver_id FROM chat WHERE chat.c_type=1 GROUP BY chat.receiver_id) as chats
    ON chats.receiver_id=chat_groups.group_id LEFT join chat_group_members on chat_group_members.group_id = chat_groups.group_id AND chat_group_members.chat_user_type = 1 left join main_customer on main_customer.m_c_id =chat_group_members.m_u_id AND main_customer.m_c_email like '%${data.email}%' LEFT JOIN chat ON chat.chat_id=chats.chat_id 
    LEFT JOIN chat as unreadchat ON unreadchat.c_type=1 AND unreadchat.receiver_id=chat_groups.group_id AND (NOT FIND_IN_SET(${data.created_id},unreadchat.seen_u_id))
    LEFT JOIN users ON chat.sender_id = users.u_id WHERE main_customer.m_c_email like '%${data.email}%';`;

    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              data: result,
            });
          } else {
            resolve({
              status: 0,
              data: [],
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function getChatCustomerListSocket(data) {
  try {
    // sql = `SELECT *,(SELECT COUNT(chat_id) FROM chat WHERE receiver_id=${data.uid} AND receiver_type=0 AND c_type=1 AND c_read=0 AND chat.sender_id=main_customer.m_c_id)AS unread_msg,(SELECT MAX(chat.created_timestamp) FROM 
    // chat WHERE ((chat.receiver_id=main_customer.m_c_id AND receiver_type=1) OR (chat.sender_id=main_customer.m_c_id AND receiver_type=0)) AND c_type=1  AND ((receiver_id=${data.uid} AND receiver_type=0) OR (sender_id=${data.uid} AND receiver_type=1)))as last_msg_time,m_c_name as u_name,m_c_id as u_id FROM main_customer WHERE deleted=0 AND created_id=${data.uid} AND (m_c_id IN(SELECT sender_id FROM chat WHERE receiver_id=${data.uid} AND receiver_type=0 AND c_type=1) OR m_c_id IN(SELECT receiver_id FROM chat WHERE sender_id=${data.uid} AND receiver_type=1 AND c_type=1)) ORDER BY last_msg_time DESC`;

    sql = `SELECT chat_groups.*,chat_group_members.*,COUNT(unreadchat.chat_id) as unread_msg,
    chat.created_timestamp AS last_msg_time,
    chat.created_timestamp,
    chat.message AS last_message,
    chat.sender_id AS last_message_sender,
    users.u_name as u_name
    FROM chat_group_members,chat_groups
    LEFT JOIN (SELECT MAX(chat.chat_id) as chat_id,chat.receiver_id FROM chat WHERE chat.c_type=1 GROUP BY chat.receiver_id) as chats
    ON chats.receiver_id=chat_groups.group_id
    LEFT JOIN chat ON chat.chat_id=chats.chat_id 
    LEFT JOIN chat as unreadchat ON unreadchat.c_type=1 AND unreadchat.receiver_id=chat_groups.group_id AND  (NOT FIND_IN_SET(${data.uid},unreadchat.seen_u_id))
    LEFT JOIN users ON chat.sender_id = users.u_id
    WHERE chat_group_members.group_id=chat_groups.group_id AND chat_group_members.m_u_id=${data.uid} AND chat_group_members.chat_user_type = ${data.chat_user_type}
    GROUP BY chat_groups.group_id
    ORDER BY chat.chat_id DESC;`;

    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result) {
            resolve({
              status: 1,
              data: result,
            });
          } else {
            resolve({
              status: 1,
              data: [],
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function getCustomerUser(data) {
  try {
    sql = `SELECT *,(SELECT COUNT(chat_id) FROM chat WHERE chat.sender_id=users.u_id AND c_read=0 AND c_type=1 AND receiver_id=${data.receiver_id} AND c_type=1 )as unread_msg FROM users WHERE u_id=${data.sender_id}`;

    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              data: result[0],
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function getCustomerUserSocket(data) {
  try {
    sql = `SELECT *,(SELECT COUNT(chat_id) FROM chat WHERE chat.sender_id=users.u_id AND c_read=0 AND c_type=1 AND receiver_id=${data.receiver_id} )as unread_msg FROM users WHERE u_id=${data.sender_id}`;

    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              data: result[0],
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function gettemplatebody(data) {
  try {
    senderMailSetting = await sendmessage.getEmailSetting(data.uid);
    let message = await sendmessage.getTemplate(data.etid);
    let mess =
      (message.header == 1
        ? typeof senderMailSetting.email_template_header !=
          undefined && senderMailSetting.email_template_header != undefined &&
          senderMailSetting.email_template_header != null
          ? senderMailSetting.email_template_header
          : ""
        : "") +
      message.template +
      (message.b_d_id != 0
        ? message.b_d_id == 1
          ? senderMailSetting.gst_bankdetails
          : message.b_d_id == 2
            ? senderMailSetting.ngst_bankdetails
            : message.b_d_id == 3
              ? senderMailSetting.general_bankdetails
              : ""
        : "") +
      (message.footer == 1 ? senderMailSetting.email_template_footer : "") +
      (message.signature == 1 ? senderMailSetting.email_signature : "");
    let response = await new Promise((resolve, reject) => {
      resolve({ status: 1, data: mess, subject: message.subject });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function getEmailHistory(data) {
  try {
    // TYPE-0 => lead_id
    // TYPE-1 => customer_id
    let emailTemplate = [];
    let emailTemplateList = [];
    if (data.type == 0) {
      sql = `SELECT *,(SELECT u_name FROM users WHERE users.u_id=template_history.created_id)AS createdBy,(SELECT b_name FROM branch WHERE branch.branch_id=template_history.created_branch_id)AS branch_name,(SELECT l_name_prefix FROM elead WHERE elead.lead_id=template_history.lead_id)AS name_prefix,(SELECT l_name FROM elead WHERE elead.lead_id=template_history.lead_id)AS name FROM template_history WHERE lead_id=${data.id}`;
    } else {
      sql = `SELECT *,(SELECT u_name FROM users WHERE users.u_id=template_history.created_id)AS createdBy,(SELECT b_name FROM branch WHERE branch.branch_id=template_history.created_branch_id)AS branch_name,(SELECT m_c_prefix FROM main_customer WHERE main_customer.m_c_id=template_history.cus_id)AS name_prefix,(SELECT m_c_name FROM main_customer WHERE main_customer.m_c_id=template_history.cus_id)AS name FROM template_history WHERE cus_id=${data.id}`;
    }
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            let i = 0;
            for (; i < result.length; i += 1) {
              emailTemplate.push({
                name_prefix: result[i].name_prefix,
                name: result[i].name,
                created_timestamp: result[i].created_timestamp,
                createdBy: result[i].createdBy,
                branch_name: result[i].branch_name,
                template_subject: result[i].template_subject,
                template_body: result[i].template_body,
                t_h_id: result[i].t_h_id,
              });
              emailTemplateList.push({
                name_prefix: result[i].name_prefix,
                name: result[i].name,
                created_timestamp: result[i].created_timestamp,
                createdBy: result[i].createdBy,
                branch_name: result[i].branch_name,
                template_subject: result[i].template_subject,
                template_body: result[i].template_body,
                t_h_id: result[i].t_h_id,
                template_image: [],
              });
            }

            Object.keys(emailTemplate).map((kk) => {
              sql1 = `SELECT * FROM template_attachment  WHERE  template_attachment.t_h_id = ${emailTemplate[kk].t_h_id}`;

              con.query(sql1, function (errsql1, sql1res) {
                if (errsql1) {
                  console.log(errsql1);
                  resolve({ status: 0, message: "Something went to wrong" });
                } else {
                  let templateImageList = [];
                  Object.keys(sql1res).map((ak) => {
                    templateImageList.push(sql1res[ak]);
                  });

                  emailTemplateList[kk].template_image = templateImageList;
                  if (kk == emailTemplate.length - 1) {
                    resolve({
                      status: 1,
                      data: emailTemplateList,
                    });
                  }
                }
              });
            });
          } else {
            resolve({
              status: 1,
              data: [],
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function getdraftreceiptCounter(data) {
  try {
    sql1 = `SELECT user_type FROM users WHERE u_id = ${data.uid} and deleted =0`;

    let response1 = await new Promise((resolve, reject) => {
      con.query(sql1, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            result.forEach(function (result) {
              resolve({
                status: 1,
                user_type: result.user_type,
              });
            });
          } else {
            resolve({
              status: 0,
              user_type: "Something went wrong...",
            });
          }
        }
      });
    });

    sql = `SELECT COUNT(*)AS counter FROM draft_payment join customer on draft_payment.c_id = customer.c_id WHERE draft_payment.deleted=0 and draft_payment.approved_status=0`;
    if (response1.user_type == 3) {
      sql += ` and draft_payment.u_id=${data.uid}`;
    }
    if (response1.user_type == 1) {
      sql += ` and customer.branch_id= ${data.bid}`;
    }
    if (data.pmode == 0) {
      sql += ` and draft_payment.mode_id = 160`;
    }

    if (data.pmode == 1) {
      sql += ` and draft_payment.mode_id != 160`;
    }

    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              data: result[0].counter,
            });
          } else {
            resolve({ status: 1, message: "No Records to Display..." });
          }
        }
      });
    });

    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function gettaskreport(data) {
  try {
    sql = `SELECT *,SUBSTRING(created_timestamp, 1, 10) as created_date,(select u_name from users where users.u_id=answer.u_id) as sname FROM answer WHERE STR_TO_DATE(created_timestamp,"%Y-%m-%d")>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") and STR_TO_DATE(created_timestamp,"%Y-%m-%d")<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y")`;
    if (data.user_type == 0) {
      if (data.u_name == undefined) {
        sql += ` and u_id IN (SELECT u_id FROM users WHERE branch_id=${data.branch_name})`;
      }
    } else if (data.user_type == 1) {
      if (data.u_name == undefined) {
        sql += ` and u_id IN (SELECT u_id FROM users WHERE branch_id=${data.branch_id})`;
      }
    } else if (data.user_type == 3) {
      sql += ` and u_id=${data.u_id}`;
    }
    if (data.u_name !== undefined) {
      sql += ` and u_id=${data.u_name}`;
    }
    sql += ` ORDER by SUBSTRING(created_timestamp, 1, 10) DESC`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              data: result,
            });
          } else {
            resolve({
              status: 0,
              data: [],
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function searchtdsReport(data) {
  try {
    let s_date = `01-04-${data.year.slice(0, 4)}`;
    let e_date = `31-03-${data.year.slice(5, 9)}`;

    sql1 = `select customer.*,payment.*,(row_number() over ( order by payment.payment_id) ) AS row_no,(select sum(tds_amt) from payment where STR_TO_DATE(payment.payment_date,"%d-%m-%Y")>=STR_TO_DATE('${s_date}',"%d-%m-%Y") and STR_TO_DATE(payment.payment_date,"%d-%m-%Y")<=STR_TO_DATE('${e_date}',"%d-%m-%Y") and payment.is_tds = 1 ${data.tds_status !== "2" ? `and tds_status = ${data.tds_status}` : ""
      })as total_tds from payment,customer where STR_TO_DATE(payment.payment_date,"%d-%m-%Y")>=STR_TO_DATE('${s_date}',"%d-%m-%Y") and STR_TO_DATE(payment.payment_date,"%d-%m-%Y")<=STR_TO_DATE('${e_date}',"%d-%m-%Y") and payment.is_tds = 1 and payment.c_id = customer.c_id`;
    if (data.tds_status !== "2") {
      sql1 += ` and payment.tds_status = ${data.tds_status}`;
    }
    let response1 = await new Promise((resolve, reject) => {
      con.query(sql1, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went wrong.." });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              result: result,
              total_tds: result[0].total_tds,
            });
          } else {
            resolve({
              status: 1,
              result: [],
              total_tds: 0,
            });
          }
        }
      });
    });

    sql = `select customer.*,payment.*,(row_number() over ( order by payment.payment_id) ) AS row_no,(select count(*) from payment where STR_TO_DATE(payment.payment_date,"%d-%m-%Y")>=STR_TO_DATE('${s_date}',"%d-%m-%Y") and STR_TO_DATE(payment.payment_date,"%d-%m-%Y")<=STR_TO_DATE('${e_date}',"%d-%m-%Y") and payment.is_tds = 1 ${data.tds_status !== "2" ? `and tds_status = ${data.tds_status}` : ""
      }) as trows,(select sum(tds_amt) from payment where STR_TO_DATE(payment.payment_date,"%d-%m-%Y")>=STR_TO_DATE('${s_date}',"%d-%m-%Y") and STR_TO_DATE(payment.payment_date,"%d-%m-%Y")<=STR_TO_DATE('${e_date}',"%d-%m-%Y") and payment.is_tds = 1 ${data.tds_status !== "2" ? `and tds_status = ${data.tds_status}` : ""
      })as total_tds from payment,customer where STR_TO_DATE(payment.payment_date,"%d-%m-%Y")>=STR_TO_DATE('${s_date}',"%d-%m-%Y") and STR_TO_DATE(payment.payment_date,"%d-%m-%Y")<=STR_TO_DATE('${e_date}',"%d-%m-%Y") and payment.is_tds = 1 and payment.c_id = customer.c_id`;
    if (data.tds_status !== "2") {
      sql += ` and payment.tds_status = ${data.tds_status}`;
    }
    sql += ` limit ${(data.page - 1) * data.perpage},${data.perpage}`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went wrong.." });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              result: result,
              allresult: response1.result,
              t_rows: result[0].trows,
              total_tds: result[0].total_tds,
            });
          } else {
            resolve({
              status: 1,
              result: [],
              total_tds: 0,
            });
          }
        }
      });
    });

    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function updateDraftPayment(data) {
  try {
    sql = `UPDATE draft_payment SET payment_date='${data.payment_date}',mode_id=${data.mode_id},bank_name='${data.bank_name}',receive_amt='${data.receive_amt}',chk_dd_date='${data.chk_dd_date}',chk_dd_no='${data.chk_dd_no}' WHERE d_p_id=${data.d_p_id}`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, (error, result) => {
        if (error) {
          console.log(error);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.affectedRows > 0) {
            resolve({
              status: 1,
              message: "Draft payment updated successfully",
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function deleteDraftPayment(data) {
  try {
    sql = `UPDATE draft_payment SET deleted = 1 WHERE d_p_id=${data.d_p_id}`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, (error, result) => {
        if (error) {
          console.log(error);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.affectedRows > 0) {
            resolve({
              status: 1,
              message: "Draft payment Deleted successfully",
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function updatePaymentMode(data) {
  try {
    sql = `UPDATE payment SET payment_date="${data.payment_date}",mode_id=${data.mode_id},bank_name='${data.bank_name}',chk_dd_date='${data.chk_dd_date}',chk_dd_no='${data.chk_dd_no}',created_id=${data.created_id} WHERE payment_id =${data.payment_id}`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, (error, result) => {
        if (error) {
          console.log(error);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.affectedRows > 0) {
            resolve({
              status: 1,
              message: "Payment updated successfully",
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function getservicevalue(data) {
  try {
    sql = `SELECT * FROM serviceprice WHERE deleted=0 and country=${data.country} and s_type=${data.type} and service=${data.stype}`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              sData: result[0].s_amount,
            });
          } else {
            resolve({
              status: 0,
              sData: 0,
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function insertDirCustomer(data) {
  try {
    let today_date = moment().format("DD-MM-YYYY");
    let status_change_date = moment().format("DD-MM-YYYY HH:mm:ss");
    let pass = Math.floor(Math.random() * 90000) + 10000;
    sqlll = `SELECT u_name FROM users WHERE u_id = ${data.c_u_id} `;
    let ress = await new Promise((resolve, reject) => {
      con.query(sqlll, async function (err1, result1) {
        if (err1) {
          console.log(err1);
          resolve({ status: 0, message: "Customer Not Updated" });
        } else {
          if (result1.length > 0) {
            resolve({ status: 1, result: result1[0].u_name });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    sql12 = `SELECT b_name FROM branch WHERE branch_id = ${data.c_branch_id} `;
    let res = await new Promise((resolve, reject) => {
      con.query(sql12, async function (err1, result1) {
        if (err1) {
          console.log(err1);
          resolve({ status: 0, message: "Customer Not Updated" });
        } else {
          if (result1.length > 0) {
            resolve({ status: 1, result: result1[0].b_name });
          }
        }
      });
    });
    //changes
    let currdate = moment().format("DDMMYYhhmmss");
    let tracking_id = `${res.result.substring(
      0,
      2
    )}${currdate}${ress.result.substring(0, 1)}`;
    sql = `SELECT m_c_id FROM main_customer WHERE m_c_email = '${data.l_email}'`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, async function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0 && data.check == 1) {
            sql1 = `UPDATE main_customer SET m_c_prefix='${data.l_name_prefix
              }',m_c_name='${mysql_real_escape_string(data.l_name)}',m_c_state='${data.m_c_state
              }',m_c_mo_no='${data.co_no}',m_c_email='${mysql_real_escape_string(
                data.l_email
              )}',m_c_address='${mysql_real_escape_string(
                data.l_address
              )}',m_c_gst='${typeof data.m_c_gst == "undefined" ? "" : data.m_c_gst
              }',m_c_state='${data.m_c_state}',created_id= ${data.created_id
              } WHERE m_c_id=${result[0].m_c_id} `;
            con.query(sql1, async function (err1, result1) {
              if (err) {
                console.log(err);
                resolve({ status: 0, message: "Customer Not Updated" });
              } else {
                resolve({ status: 1, m_c_id: result[0].m_c_id });
              }
            });
          } else if (result.length == 0) {
            sql1 = `INSERT INTO main_customer (m_c_prefix,m_c_name,m_c_mo_no,m_c_email,m_c_address,m_c_gst,m_c_state,created_id,password) VALUES ('${data.l_name_prefix
              }','${mysql_real_escape_string(data.l_name)}','${data.co_no
              }','${mysql_real_escape_string(
                data.l_email
              )}','${mysql_real_escape_string(data.l_address)}','${typeof data.m_c_gst == "undefined" ? "" : data.m_c_gst
              }',${data.m_c_state},${data.created_id},'${pass}') `;
            con.query(sql1, async function (err1, result) {
              if (err) {
                console.log(err);
                resolve({ status: 0, message: "Customer Not Updated" });
              } else {
                let senderMailSetting = await sendmessage.getEmailSetting(
                  data.created_id
                );

                sqlll = `SELECT u_email FROM users WHERE u_id = ${data.created_id} `;
                let ccmail = await new Promise((resolve, reject) => {
                  con.query(sqlll, async function (err1, result1) {
                    if (err1) {
                      console.log(err1);
                      resolve({
                        status: 0,
                        message: "Something went to wrong",
                      });
                    } else {
                      if (result1.length > 0) {
                        resolve({ status: 1, result: result1[0].u_email });
                      } else {
                        resolve({
                          status: 0,
                          message: "Something went to wrong",
                        });
                      }
                    }
                  });
                });

                let message = await sendmessage.getTemplate(17);
                if (message.status != 0) {
                  message.template = message.template.replace(
                    "{:name:}",
                    data.l_name_prefix + " " + data.l_name
                  );
                  message.template = message.template.replace(
                    "{:username:}",
                    data.l_email
                  );
                  message.template = message.template.replace(
                    "{:password:}",
                    pass
                  );
                  let mess =
                    (message.header == 1
                      ? typeof senderMailSetting.email_template_header !=
                        undefined && senderMailSetting.email_template_header != undefined &&
                        senderMailSetting.email_template_header != null
                        ? senderMailSetting.email_template_header
                        : ""
                      : "") +
                    message.template +
                    (message.b_d_id != 0
                      ? message.b_d_id == 1
                        ? senderMailSetting.gst_bankdetails
                        : message.b_d_id == 2
                          ? senderMailSetting.ngst_bankdetails
                          : message.b_d_id == 3
                            ? senderMailSetting.general_bankdetails
                            : ""
                      : "") +
                    // (data.inserted_id == 1
                    //   ? data.c_tax == 0
                    //     ? senderMailSetting.bank_details
                    //     : senderMailSetting.nongst_bank_details
                    //   : data.c_tax == 0
                    //     ? senderMailSetting.b_bank_details
                    //     : senderMailSetting.b_nongst_bank_deatils) +
                    (message.footer == 1
                      ? senderMailSetting.email_template_footer
                      : "") +
                    (message.signature == 1
                      ? senderMailSetting.email_signature
                      : "");

                  CCMailSetting = await sendmessage.getEmailSetting(1);

                  sendmessagenow = sendmessage.customermessagesend(
                    senderMailSetting,
                    data.l_email,
                    mess,
                    message.subject,
                    "", //CCMailSetting.e_username,  // user mail
                    ccmail.result, // reply mail
                    1,
                    "info@hyderabadattestation.com"
                  );
                }
                if (err1) {
                  console.log(err1);
                  resolve({ status: 0, message: "Customer Not Inserted" });
                } else {
                  const insertgroup = await insertGroupChat({ c_name: data.l_name, u_name: ress.result, u_id: data.c_u_id, c_id: result.insertId });
                  resolve({ status: 1, m_c_id: result.insertId });
                }
              }
            });
          } else {
            resolve({ status: 1, m_c_id: result[0].m_c_id });
          }
        }
      });
    });
    //2703
    let todayDate = moment().format("DD-MM-YYYY");
    let lastTenDay = moment().add(-10, "d").format("DD-MM-YYYY");
    lastTargetSql = `SELECT target_count,DATE_FORMAT(created_timestamp, "%d-%m-%Y") as month FROM customer WHERE c_email  = '${data.l_email}' and DATE_FORMAT(created_timestamp, "%d-%m-%Y") <= DATE_FORMAT(STR_TO_DATE('${todayDate}', "%d-%m-%Y") ,"%d-%m-%Y") and DATE_FORMAT(created_timestamp, "%d-%m-%Y") >= DATE_FORMAT(STR_TO_DATE('${lastTenDay}', "%d-%m-%Y") ,"%d-%m-%Y") order by c_id desc limit 1`;
    let target_count_res = await new Promise((resolve, reject) => {
      con.query(
        lastTargetSql,
        async function (lastTargetSql_err, lastTargetSql_result) {
          if (lastTargetSql_err) {
            console.log(lastTargetSql_err);
            resolve({ status: 0, message: "Customer Not Updated" });
          } else {
            if (lastTargetSql_result.length > 0) {
              resolve({
                status: 1,
                result: lastTargetSql_result[0].target_count,
              });
            } else {
              resolve({
                status: 0,
                result: 0,
              });
            }
          }
        }
      );
    });

    const target = target_count_res.result + 1;

    sql1 = `INSERT INTO customer (m_c_id,c_date,c_prefix,c_name,c_mo_no,c_email,c_address,c_gst_no,c_state,c_s_type,c_total_customer,c_tax,c_gst,c_remark,created_id,u_id,branch_id,d_address,tracking_id,created_branch_id,arn_no,f_z_type,refrence_by,l_id,city,pincode,target_count,login_u_id,marketing_user) VALUES (${response.m_c_id
      },'${data.c_date}','${data.l_name_prefix}',
            '${mysql_real_escape_string(data.l_name)}','${data.co_no
      }','${mysql_real_escape_string(data.l_email)}','${mysql_real_escape_string(
        data.l_address
      )}','${typeof data.m_c_gst == "undefined" ? "" : data.m_c_gst}',${data.m_c_state
      },${data.l_service},${data.c_total_customer},${data.c_tax},${data.c_gst},'${typeof data.c_remark == "undefined"
        ? ""
        : mysql_real_escape_string(data.c_remark)
      }', ${data.l_created_by},${data.c_u_id},${data.c_branch_id},'${typeof data.d_address == "undefined"
        ? ""
        : mysql_real_escape_string(data.d_address)
      }','${tracking_id}',${data.l_created_branch_id != 0
        ? data.l_created_branch_id
        : data.l_branch_id
      },'${typeof data.arn_no == "undefined" || data.arn_no == "" ? "" : data.arn_no
      }',${typeof data.f_z_type == "undefined" ? 0 : data.f_z_type},${data.l_source == 282 ? data.reference_id : 0
      },${data.lead_id},'${typeof data.city == "undefined" ||
        data.city == "undefined" ||
        data.city == null ||
        data.city == ""
        ? ""
        : data.city
      }','${typeof data.pincode == "undefined" ||
        data.pincode == "undefined" ||
        data.pincode == null ||
        data.pincode == ""
        ? ""
        : data.pincode
      }',${target},${data.login_u_id},${data.l_source == 271 ? data.reference_id : 0
      })`;
    let response1 = await new Promise((resolve, reject) => {
      con.query(sql1, async function (err1, result1) {
        if (err1) {
          console.log(err1);
          resolve({ status: 0, message: "Customer Not Updated" });
        } else {
          if (result1) {
            resolve({
              status: 1,
              c_id: result1.insertId,
            });
          }
        }
      });
    });
    if (data.l_service == 8) {
      let k = 0;
      amount = await getcustomeramount(data);

      for (i = 0; i < data.applicationdata.length; i++) {
        sql2 = `INSERT INTO visa (c_id,v_prefix,v_name,v_code,v_passport,v_type,v_country,v_supporting_doc,created_id,pg_no,tracking_id,process_limit_date,process_limit_mail_date) VALUES (${response1.c_id
          },'${data.applicationdata[i].v_prefix}','${mysql_real_escape_string(
            data.applicationdata[i].v_name
          )}',${data.applicationdata[i].v_code},'${data.applicationdata[i].v_passport
          }',${data.applicationdata[i].v_type},'${data.applicationdata[
            i
          ].v_country
            .sort()
            .toString()}','${data.applicationdata[
              i
            ].a_supporting_doc.toString()}',${data.created_id},${data.applicationdata[i].pg_no
          },'${tracking_id}','${data.applicationdata[i].process_limit_date}','${data.applicationdata[i].process_limit_date
          }')`;

        let response2 = await new Promise((resolve, reject) => {
          con.query(sql2, async function (err2, result2) {
            if (err2) {
              console.log(err2);
              resolve({ status: 0, message: "Something went wrong" });
            } else {
              if (result2) {
                resolve({
                  status: 1,
                  result: result2.insertId,
                });
              }
            }
          });
        });

        for (j = 0; j < data.applicationdata[i].v_country.length; j++) {
          sql3 = `INSERT INTO details (service_type,service_id,amount,d_c_id,tracking_id,updated_date,status_mail_date,status_change_date) VALUES (${data.l_service
            },${response2.result},${amount.result[k]},${data.applicationdata[i].v_country[j]
            },'${mysql_real_escape_string(
              tracking_id
            )}','${today_date}','${today_date}','${status_change_date}')`;

          k = k + 1;
          let response3 = await new Promise((resolve, reject) => {
            con.query(sql3, async function (err3, result3) {
              if (err3) {
                console.log(err3);
                resolve({ status: 0, message: "Something went wrong" });
              } else {
                if (result3) {
                  resolve({
                    status: 1,
                    result: result3,
                  });
                }
              }
            });
          });
        }
      }
    } else {
      amount = await getcustomeramount(data);

      for (i = 0; i < data.applicationdata.length; i++) {
        if (data.l_service == 10) {
          sql2 = `INSERT INTO attestation`;
        } else if (data.l_service == 17) {
          sql2 = `INSERT INTO apostille`;
        } else {
          sql2 = `INSERT INTO translation`;
        }
        sql2 += `(c_id,a_prefix,a_name,a_code,a_country,a_type,a_certificate,a_supporting_doc,a_extra_doc,created_id,pg_no,tracking_id,process_limit_date,process_limit_mail_date,no_of_certificates) VALUES (${response1.c_id
          },'${data.applicationdata[i].a_prefix}','${mysql_real_escape_string(
            data.applicationdata[i].a_name
          )}',${data.applicationdata[i].a_code},${data.applicationdata[i].a_country
          },${data.applicationdata[i].a_type},
        '${data.applicationdata[i].a_certificate.sort().toString()}',
                      '${typeof data.applicationdata[i].a_supporting_doc ==
            "undefined"
            ? ""
            : data.applicationdata[i].a_supporting_doc.toString()
          }',
                      '${typeof data.applicationdata[i].a_extra_doc ==
            "undefined"
            ? ""
            : data.applicationdata[i].a_extra_doc.toString()
          }',${data.created_id},${data.applicationdata[i].pg_no
          },'${mysql_real_escape_string(tracking_id)}','${data.applicationdata[i].process_limit_date
          }','${data.applicationdata[i].process_limit_date}',${data.applicationdata[i].no_of_certificates
          })`;

        let response2 = await new Promise((resolve, reject) => {
          con.query(sql2, async function (err2, result2) {
            if (err2) {
              console.log(err2);
              resolve({ status: 0, message: "Something went wrong" });
            } else {
              if (result2) {
                resolve({
                  status: 1,
                  result: result2.insertId,
                });
              }
            }
          });
        });

        for (j = 0; j < data.applicationdata[i].a_certificate.length; j++) {
          sql3 = `INSERT INTO details (service_type,service_id,amount,d_c_id,tracking_id,updated_date,status_mail_date,status_change_date) VALUES (${data.l_service
            },${response2.result},${amount.result[i]},${data.applicationdata[i].a_certificate[j]
            },'${mysql_real_escape_string(
              tracking_id
            )}','${today_date}','${today_date}','${status_change_date}')`;
          let response3 = await new Promise((resolve, reject) => {
            con.query(sql3, async function (err3, result3) {
              if (err3) {
                console.log(err3);
                resolve({ status: 0, message: "Something went wrong" });
              } else {
                if (result3) {
                  resolve({
                    status: 1,
                    result: result3,
                  });
                }
              }
            });
          });
        }
      }
    }
    let responseinvoice = await new Promise((resolve, reject) => {

      if (data.c_tax == "1") {
        //1003
        // getinvoiceno = `SELECT *,invoice_no FROM payment,customer WHERE payment.c_id=customer.c_id and payment.c_tax = "1" and customer.branch_id=${data.c_branch_id} and payment.deleted=0 ORDER BY customer.c_id DESC limit 1;`;
        let getinvoiceno = `SELECT *,invoice_no FROM payment JOIN customer ON payment.c_id=customer.c_id and payment.c_tax = "1" and customer.branch_id=${data.c_branch_id} and payment.deleted=0 ORDER BY payment.payment_id DESC,customer.c_id DESC limit 1;`;

        // const now = new Date();
        // const cvalue = date.format(now, "YY");
        // const currentYear = new Date().getFullYear().toString().slice(-2);
        // const previousYear = currentYear - 1;
        const cvalue = moment().format("MM");
        const last2 = new Date().getFullYear().toString().substring(2);
        const last2Num = Number(last2);
        var today = new Date();
        if (today.getMonth() + 1 <= 3) {
          fiscalyear = last2Num - 1 + "-" + last2Num;
        } else {
          fiscalyear = last2Num + "-" + (last2Num + 1);
        }
        let invoice_no = 0;
        con.query(getinvoiceno, async function (errino, inoresult) {
          if (errino) {
            console.log(errino);
            resolve({ status: 0, message: "Something went wrong" });
          } else {
            if (inoresult.length > 0 && inoresult[0].invoice_no != 0) {
              //1003
              let ino = inoresult[0].invoice_no;
              let n_ino = ino.split("/");
              if (fiscalyear == n_ino[1]) {
                invoice_no =
                  res.result.substring(0, 2) +
                  "/" +
                  fiscalyear +
                  "/" +
                  "g" +
                  cvalue +
                  "/" +
                  ++n_ino[3];
              } else {
                invoice_no =
                  res.result.substring(0, 2) +
                  "/" +
                  fiscalyear +
                  "/" +
                  "g" +
                  cvalue +
                  "/" +
                  1;
              }
            } else {
              invoice_no =
                res.result.substring(0, 2) +
                "/" +
                fiscalyear +
                "/" +
                "g" +
                cvalue +
                "/" +
                1;
            }
            resolve({ status: 1, ino: invoice_no });
          }
        });
      } else {
        //1003
        // getinvoiceno = `SELECT *,invoice_no FROM payment,customer WHERE payment.c_id=customer.c_id and payment.c_tax = "0" and customer.branch_id=${data.c_branch_id} and payment.deleted=0 ORDER BY customer.c_id DESC limit 1;`;
        let getinvoiceno = `SELECT *,invoice_no FROM payment JOIN customer ON payment.c_id=customer.c_id and payment.c_tax = "0" and customer.branch_id=${data.c_branch_id} and payment.deleted=0 ORDER BY payment.payment_id DESC,customer.c_id DESC limit 1;`;

        // const now = new Date();
        // const cvalue = date.format(now, "YY");
        // const currentYear = new Date().getFullYear().toString().slice(-2);
        // const previousYear = currentYear - 1;
        const cvalue = moment().format("MM");
        const last2 = new Date().getFullYear().toString().substring(2);
        const last2Num = Number(last2);
        var today = new Date();
        if (today.getMonth() + 1 <= 3) {
          fiscalyear = last2Num - 1 + "-" + last2Num;
        } else {
          fiscalyear = last2Num + "-" + (last2Num + 1);
        }
        let invoice_no = 0;
        con.query(getinvoiceno, async function (errino, inoresult) {
          if (errino) {
            console.log(errino);
            resolve({ status: 0, message: "Something went wrong" });
          } else {
            if (inoresult.length > 0 && inoresult[0].invoice_no != 0) {
              //1003
              let ino = inoresult[0].invoice_no;
              let n_ino = ino.split("/");
              if (fiscalyear == n_ino[1]) {
                invoice_no =
                  res.result.substring(0, 2) +
                  "/" +
                  fiscalyear +
                  "/" +
                  cvalue +
                  "/" +
                  ++n_ino[3];
              } else {
                invoice_no =
                  res.result.substring(0, 2) +
                  "/" +
                  fiscalyear +
                  "/" +
                  cvalue +
                  "/" +
                  1;
              }
            } else {
              invoice_no =
                res.result.substring(0, 2) +
                "/" +
                fiscalyear +
                "/" +
                cvalue +
                "/" +
                1;
            }
            resolve({ status: 1, ino: invoice_no });
          }
        });
      }
    });

    lastpayment = `SELECT p_receipt_no FROM payment WHERE (receive_amt!='' AND receive_amt!=0) order by payment_id  DESC limit 1`;
    const rlast2 = new Date().getFullYear().toString().substring(2);
    const rlast2Num = Number(rlast2);
    var rtoday = new Date();
    let financialYear;
    if (rtoday.getMonth() + 1 <= 3) {
      financialYear = rlast2Num - 1 + "-" + rlast2Num;
    } else {
      financialYear = rlast2Num + "-" + (rlast2Num + 1);
    }
    let rec_no = 0;
    let response11 = await new Promise((resolve, reject) => {
      con.query(lastpayment, function (err1, result1) {
        if (err1) {
          console.log(err1);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result1.length > 0 && result1[0].p_receipt_no != 0) {
            let rno = result1[0].p_receipt_no;
            let n_rno = rno.split("_");
            if (financialYear == n_rno[0]) {
              rec_no = financialYear + "_" + ++n_rno[1];
            } else {
              rec_no = financialYear + "_" + 1;
            }
          } else {
            rec_no = financialYear + "_" + 1;
          }
          resolve({
            status: 1,
            result: rec_no,
          });
        }
      });
    });
    // let rec_no = parseInt(response11.result) + 1;
    sql4 = `INSERT INTO payment(payment_date,c_id,total_amount,courier,embassy_fees,dis_amt,net_amt,sgst,cgst,igst,created_id,due_amt,u_id,tracking_id,invoice_no,p_receipt_no,exp_charge,coupon_amt,c_tax,created_branch_id) VALUES ('${data.c_date
      }',${response1.c_id},'${data.total_amount}',
                '${data.courier}','${data.embassy_fees}','${data.dis_amt}','${data.net_amt
      }','${data.sgst}','${data.cgst}','${data.igst}',${data.created_id},'${data.net_amt
      }',${data.c_u_id},'${mysql_real_escape_string(tracking_id)}','${responseinvoice.ino
      }','${rec_no}','${data.exp_charge}','${data.coupon_amt}','${data.c_tax}',${data.created_branch_id
      })`;
    let response4 = await new Promise((resolve, reject) => {
      con.query(sql4, async function (err4, result4) {
        if (err4) {
          console.log(err4);
          resolve({ status: 0, message: "Something went wrong" });
        } else {
          if (result4) {
            sql7 = `UPDATE elead SET convert_status=1,convert_date="${today_date}",dir_cus_status=1,dir_cus_date="${today_date}" WHERE lead_id =${data.lead_id}`;
            con.query(sql7, async function (err7, result7) {
              if (err7) {
                console.log(err7);
                resolve({ status: 0, message: "Something went wrong" });
              } else {
                //2803
                if (result7) {
                  resolve({
                    status: 1,
                    message: "Customer Inserted Successfully....",
                    c_id: response1.c_id,
                    u_id: data.l_created_by,
                    login_u_id: data.login_u_id,
                    l_id: data.lead_id,
                  });
                }
              }
            });
          }
        }
      });
    });
    return response4;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function insertbankdetails(data) {
  try {
    sql = `UPDATE branch SET gst_bankdetails='${mysql_real_escape_string(
      data.gst
    )}',ngst_bankdetails='${mysql_real_escape_string(
      data.ngst
    )}',general_bankdetails='${mysql_real_escape_string(data.general)}'
    WHERE branch_id=${data.branch_id != "undefined" ? data.branch_id : data.cbranch_id
      } `;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.affectedRows > 0) {
            resolve({
              status: 1,
              message: "Bank Details Updated",
            });
          } else {
            resolve({
              status: 0,
              message: "Bank Details Not Inserted",
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function getbankdetails(data) {
  try {
    if (data.utype == 0) {
      sql = `select *,(row_number() over ( order by branch.branch_id desc)) AS row_no from branch WHERE gst_bankdetails IS NOT NULL`;
    } else {
      sql = `select *,(row_number() over ( order by branch.branch_id desc )) AS row_no from branch 
      WHERE branch_id=${data.branchid} and gst_bankdetails IS NOT NULL order by branch.branch_id desc`;
    }
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              data: result,
            });
          } else {
            resolve({
              status: 0,
              data: [],
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function deletebankdetails(data) {
  try {
    sql = `UPDATE branch SET gst_bankdetails=NULL,ngst_bankdetails=NULL,general_bankdetails=NULL
    WHERE branch_id=${data.branchid} `;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.affectedRows > 0) {
            resolve({
              status: 1,
              message: "Bank Details Deleted",
            });
          } else {
            resolve({
              status: 0,
              message: "Bank Details Not Deleted",
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function draftReceiptRead(data) {
  try {
    sql = `UPDATE draft_payment SET read_status = 1 WHERE d_p_id = ${data.d_p_id}`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, async function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.affectedRows > 0) {
            resolve({
              status: 1,
              message: "Notification Read successfully",
            });
          } else {
            resolve({ status: 0, message: "Something went to wrong" });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function branchCustomerRead(data) {
  try {
    sql = `UPDATE customer SET read_status = 1 WHERE c_id = ${data.c_id}`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, async function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.affectedRows > 0) {
            resolve({
              status: 1,
              message: "Notification Read successfully",
            });
          } else {
            resolve({ status: 0, message: "Something went to wrong" });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function newLeadRead(data) {
  try {
    sql = `UPDATE elead SET read_status = 1 WHERE lead_id = ${data.lead_id}`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, async function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.affectedRows > 0) {
            resolve({
              status: 1,
              message: "Notification Read successfully",
            });
          } else {
            resolve({ status: 0, message: "Something went to wrong" });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function getservicevaluetype(data) {
  try {
    // sql = `SELECT *,(SELECT s_amount FROM serviceprice WHERE deleted=0 and country=${data.country} and service=${data.stype} and s_type=attributes.attribute_id ) as s_amount FROM attributes WHERE type=${data.id} and status=0 order by name ASC`;
    // sql = `SELECT * FROM attributes,serviceprice where attributes.attribute_id=serviceprice.s_type and type=${data.stype} and status=0 and country=${data.country} order by name ASC`;
    sql = `SELECT * FROM attributes,serviceprice where attributes.attribute_id=serviceprice.s_type and serviceprice.deleted = 0 and attributes.type=${data.id} and attributes.status=0 and serviceprice.country=${data.country} and serviceprice.service=${data.stype} order by name ASC`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              sData: result,
            });
          } else {
            resolve({
              status: 0,
              sData: 0,
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function newPickDoneRead(data) {
  try {
    sql = `UPDATE elead SET p_d_read_status = 1 WHERE lead_id = ${data.id}`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, async function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.affectedRows > 0) {
            resolve({
              status: 1,
              message: "Notification Read successfully",
            });
          } else {
            resolve({ status: 0, message: "Something went to wrong" });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function getallheadernewtask(data) {
  try {
    sql = `SELECT *,(SELECT u_name FROM users where task.u_id=users.u_id and deleted = 0)as u_name FROM task WHERE allocate_id = ${data.allocate_id} and deleted = 0 and is_read = 0 and t_status = 0 ORDER BY t_id DESC`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              counter: result.length,
              data: result,
            });
          } else {
            resolve({
              status: 0,
              counter: 0,
              data: [],
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function getAllsocketdraftreceipt(data) {
  try {
    sql1 = `SELECT user_type,(select u_id from users where branch_id=${data.bid} and user_type=1 and deleted=0) as buid FROM users WHERE u_id = ${data.uid} and deleted =0`;
    let response1 = await new Promise((resolve, reject) => {
      con.query(sql1, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            result.forEach(function (result) {
              resolve({
                status: 1,
                user_type: result.user_type,
                buid: result.buid,
              });
            });
          } else {
            resolve({
              status: 0,
              user_type: "Something went wrong...",
            });
          }
        }
      });
    });
    sql = `SELECT *,(SELECT name FROM attributes WHERE attributes.attribute_id = draft_payment.mode_id)AS mode_name FROM draft_payment join customer on draft_payment.c_id = customer.c_id WHERE draft_payment.deleted=0 and draft_payment.approved_status=0 and draft_payment.read_status=0`;
    if (data.qcid == 1) {
      sql += ` and customer.branch_id= ${data.bid}`;
    }
    sql += ` ORDER BY draft_payment.d_p_id DESC`;

    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              counter: result.length,
              data: result,
              buid: response1.buid,
              user_type: response1.user_type,
            });
          } else {
            resolve({
              status: 0,
              data: [],
              counter: 0,
              buid: 0,
              user_type: 0,
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function LeadFollowRead(data) {
  try {
    sql = `UPDATE lead_followup SET read_status = 1,l_f_note='${mysql_real_escape_string(
      data.l_f_note
    )}' WHERE l_f_id = ${data.l_f_id}`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, async function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.affectedRows > 0) {
            resolve({
              status: 1,
              message: "Notification Read successfully",
            });
          } else {
            resolve({ status: 0, message: "Something went to wrong" });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function searchServicePrice(data) {
  try {
    sql = `SELECT *,(row_number() over ( order by serviceprice.service_id DESC) ) AS row_no,(SELECT COUNT(*) FROM serviceprice where deleted=0) as trows,(SELECT name FROM attributes WHERE attributes.attribute_id=serviceprice.country)AS country_name,(SELECT name FROM attributes WHERE attributes.attribute_id=serviceprice.s_type)AS service_type FROM serviceprice WHERE deleted=0`;
    if (
      data.service != "undefined" &&
      data.service != "" &&
      data.service != 0
    ) {
      sql += ` and serviceprice.service=${data.service}`;
    }
    if (
      data.country != "undefined" &&
      data.country != "" &&
      data.country != 0
    ) {
      sql += ` and serviceprice.country=${data.country}`;
    }
    if (data.s_type != "undefined" && data.s_type != "" && data.s_type != 0) {
      sql += ` and serviceprice.s_type=${data.s_type}`;
    }
    sql123 = sql;
    sql += ` ORDER BY service_id DESC limit ${(data.page - 1) * data.perpage},${data.perpage
      }`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql123, function (err, result1) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result1.length > 0) {
            con.query(sql, function (err, res) {
              if (err) {
                console.log(err);
                resolve({ status: 0, message: "Something went to wrong" });
              } else {
                if (res.length > 0) {
                  resolve({
                    status: 1,
                    data: res,
                    t_rows: result1.length,
                  });
                }
              }
            });
          } else {
            resolve({
              status: 0,
              data: [],
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function getreferralcustomer(data) {
  try {
    let getreferraldata = `SELECT * FROM elead WHERE reference_id=${data.mcid} AND l_source=282 AND convert_status=0`;
    countquery = getreferraldata;
    getreferraldata += ` limit ${(data.page - 1) * data.perpage},${data.perpage
      }`;
    let response1 = await new Promise((resolve, reject) => {
      con.query(getreferraldata, function (err, lres) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (lres.length > 0) {
            con.query(countquery, function (err, cres) {
              if (err) {
                console.log(err);
                resolve({ status: 0, message: "Something went to wrong" });
              } else {
                if (cres.length > 0) {
                  resolve({
                    status: 1,
                    data: lres,
                    t_rows: cres.length,
                  });
                }
              }
            });
          } else {
            resolve({
              status: 0,
              data: [],
            });
          }
        }
      });
    });
    return response1;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function getMaincustomerByid(data) {
  try {
    let record = [];
    getuserquery = `select * from users where u_id=${data.u_id} and deleted=0 order by u_name ASC`;
    let response1 = await new Promise((resolve, reject) => {
      con.query(getuserquery, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            if (result[0].user_type == 1) {
              // Jil After Form Link get Lead with their Responsible Person
              getallchilduser = `select * from users where ((p_u_id=${data.u_id} OR p_u_id=1 OR p_u_id IN (SELECT users.u_id  from users where users.branch_id= ${result[0].branch_id})) and branch_id=${result[0].branch_id}) and deleted=0 order by u_name ASC`;

              // getallchilduser = `select * from users where ((p_u_id=${data.id} OR p_u_id=1) and branch_id=${result[0].branch_id}) and deleted=0`;
              con.query(getallchilduser, function (err, res) {
                if (err) {
                  console.log(err);
                  resolve({ status: 0, message: "Something went to wrong" });
                } else {
                  res.forEach(function (r) {
                    record.push(r.u_id);
                  });
                  record.push(data.u_id);
                  resolve({
                    record: record,
                    type: result[0].user_type,
                  });
                }
              });
            } else {
              resolve({
                type: result[0].user_type,
              });
            }
          }
        }
      });
    });
    if (response1.type == 1) {
      sql = `SELECT *,(row_number() over ( order by main_customer.m_c_id DESC) ) AS row_no,(SELECT u_name FROM users WHERE users.u_id=main_customer.created_id)AS createdBy FROM main_customer WHERE created_id IN(${record})  AND deleted=0`;
    } else if (response1.type == 3) {
      sql = `SELECT *,(row_number() over ( order by main_customer.m_c_id DESC) ) AS row_no,(SELECT u_name FROM users WHERE users.u_id=main_customer.created_id)AS createdBy FROM main_customer WHERE created_id=${data.u_id} AND deleted=0`;
    } else {
      sql = `SELECT *,(row_number() over ( order by main_customer.m_c_id DESC) ) AS row_no,(SELECT u_name FROM users WHERE users.u_id=main_customer.created_id)AS createdBy FROM main_customer WHERE deleted=0`;
    }
    countquery = sql;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            con.query(countquery, function (err, cres) {
              if (cres.length > 0) {
                resolve({
                  status: 1,
                  result: result,
                  trows: cres.length,
                });
              }
            });
          } else {
            resolve({
              status: 1,
              result: [],
              trows: 0,
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function getcommisiondata(data) {
  try {
    if (data.u_type == 1) {
      custsql = `SELECT m_c_id FROM main_customer WHERE m_c_email='${data.c_email}'`;

      let resp = await new Promise((resolve, reject) => {
        con.query(custsql, function (err, result) {
          if (err) {
            console.log(err);
            resolve({ status: 0, message: "Something went to wrong" });
          } else {
            if (result.length > 0) {
              resolve({
                status: 1,
                data: result[0].m_c_id,
              });
            } else {
              resolve({
                status: 0,
                data: 0,
                message: "Email does not Exist...",
              });
            }
          }
        });
      });
      if (resp.data != 0) {
        let sql = `SELECT *,(SELECT name FROM attributes WHERE attributes.attribute_id = customer_commision_payment.mode_id)AS mode_name,(SELECT invoice_no FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as invoice_no FROM customer_commision_payment,customer WHERE customer_commision_payment.is_given = 0 AND customer_commision_payment.c_id=customer.c_id and customer_commision_payment.deleted=0 AND customer_commision_payment.refrence_c_id = ${resp.data}`;
        if (
          typeof data.s_date != "undefined" &&
          data.s_date != "" &&
          typeof data.e_date != "undefined" &&
          data.e_date != ""
        ) {
          sql += ` AND STR_TO_DATE(customer_commision_payment.commision_date,"%d-%m-%Y")>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(customer_commision_payment.commision_date,"%d-%m-%Y")<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y")`;
        }
        sql += ` ORDER BY customer_commision_payment.c_c_p_id DESC `;
        let c_amount = 0;
        let t_amount = 0;

        let c_id = [];
        let response = await new Promise((resolve, reject) => {
          con.query(sql, function (err, result) {
            if (err) {
              console.log(err);
              resolve({ status: 0, message: "Something went to wrong" });
            } else {
              if (result.length > 0) {
                result.forEach(function (res) {
                  if (!c_id.includes(res.c_id)) {
                    c_id.push(res.c_id);
                  }
                  if (res.is_given == 0) {
                    c_amount = c_amount + res.c_amount;
                  }
                  t_amount = t_amount + res.c_amount;
                });
                resolve({
                  status: 1,
                  data: result,
                  payable_amount: c_amount,
                  total_amount: t_amount,
                  c_id: c_id,
                });
              } else {
                resolve({
                  status: 0,
                  data: [],
                  payable_amount: 0,
                  total_amount: 0,
                  c_id: [],
                });
              }
            }
          });
        });
        return response;
      } else {
        return resp;
      }
    } else {
      let sql = `SELECT user_commision_payment.*,(SELECT name FROM attributes WHERE attributes.attribute_id = user_commision_payment.mode_id)AS mode_name,(SELECT invoice_no FROM payment WHERE user_commision_payment.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as invoice_no,(Select c_name from customer where customer.c_id = user_commision_payment.c_id)as c_name,(Select c_prefix from customer where customer.c_id = user_commision_payment.c_id)as c_prefix FROM user_commision_payment,users WHERE user_commision_payment.u_id=users.u_id and user_commision_payment.is_given = 0 AND user_commision_payment.deleted=0 AND user_commision_payment.u_id = ${data.u_name} ORDER BY user_commision_payment.u_c_p_id DESC `;
      let c_amount = 0;
      let t_amount = 0;

      let u_id = [];
      let response = await new Promise((resolve, reject) => {
        con.query(sql, function (err, result) {
          if (err) {
            console.log(err);
            resolve({ status: 0, message: "Something went to wrong" });
          } else {
            if (result.length > 0) {
              result.forEach(function (res) {
                if (!u_id.includes(res.u_id)) {
                  u_id.push(res.u_id);
                }
                if (res.is_given == 0) {
                  c_amount = c_amount + res.c_amount;
                }
                t_amount = t_amount + res.c_amount;
              });
              resolve({
                status: 1,
                data: result,
                payable_amount: c_amount,
                total_amount: t_amount,
                u_id: u_id,
              });
            } else {
              resolve({
                status: 0,
                data: [],
                payable_amount: 0,
                total_amount: 0,
                u_id: [],
              });
            }
          }
        });
      });
      return response;
    }
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function updatecommsionpayment(data) {
  try {
    if (data.u_type == 1) {
      custsql = `SELECT m_c_id FROM main_customer WHERE m_c_email='${data.refrence_c_id}'`;

      let resp = await new Promise((resolve, reject) => {
        con.query(custsql, function (err, result) {
          if (err) {
            console.log(err);
            resolve({ status: 0, message: "Something went to wrong" });
          } else {
            if (result.length > 0) {
              resolve({
                status: 1,
                data: result[0].m_c_id,
              });
            } else {
              resolve({
                status: 0,
                data: 0,
                message: "Email does not Exist...",
              });
            }
          }
        });
      });
      if (data.type == 1) {
        sql = `UPDATE customer_commision_payment SET payment_date="${data.payment_date
          }",mode_id=${data.mode_id},bank_name='${data.bank_name != undefined
            ? mysql_real_escape_string(data.bank_name)
            : ""
          }',chk_dd_date='${data.chk_dd_date != undefined
            ? mysql_real_escape_string(data.chk_dd_date)
            : ""
          }',chk_dd_no='${data.chk_dd_no != undefined
            ? mysql_real_escape_string(data.chk_dd_no)
            : ""
          }',payment_desc='${data.payment_desc != undefined
            ? mysql_real_escape_string(data.payment_desc)
            : ""
          }',is_given=1 WHERE c_c_p_id =${data.ccpid}`;
        let response = await new Promise((resolve, reject) => {
          con.query(sql, (error, result) => {
            if (error) {
              console.log(error);
              resolve({ status: 0, message: "Something went to wrong" });
            } else {
              if (result.affectedRows > 0) {
                let insert_commission = `INSERT INTO commission_report (commission_p_id,u_type,c_amount,payment_date,mode_id,payment_desc,chk_dd_no,chk_dd_date,bank_name,p_u_id,p_branch_id,u_c_id,commission_by) VALUES ('${data.commissionList}',1,${data.c_amount},"${data.payment_date
                  }",${data.mode_id},'${data.payment_desc != undefined
                    ? mysql_real_escape_string(data.payment_desc)
                    : ""
                  }','${data.chk_dd_no != undefined
                    ? mysql_real_escape_string(data.chk_dd_no)
                    : ""
                  }','${data.chk_dd_date != undefined
                    ? mysql_real_escape_string(data.chk_dd_date)
                    : ""
                  }','${data.bank_name != undefined
                    ? mysql_real_escape_string(data.bank_name)
                    : ""
                  }',${data.p_u_id},${data.p_branch_id},${resp.data},${data.u_id})`;
                con.query(insert_commission, (insert_commission_error, insert_commission_result) => {
                  if (insert_commission_error) {
                    console.log(insert_commission_error);
                    resolve({ status: 0, message: "Something went to wrong" });
                  } else {
                    if (insert_commission_result.affectedRows > 0) {
                      resolve({
                        status: 1,
                        message: "Commision Payment inserted successfully",
                      });
                    } else {
                      resolve({
                        status: 0,
                        message: "Commision Payment Not inserted",
                      });
                    }
                  }
                });
                resolve({
                  status: 1,
                  message: "Commision Payment updated successfully",
                });
              } else {
                resolve({
                  status: 0,
                  message: "Commision Payment Not Updated",
                });
              }
            }
          });
        });
        let updateamt = `UPDATE main_customer SET total_commision= CASE WHEN total_commision>0 THEN (total_commision-${data.c_amount}) ELSE total_commision END WHERE m_c_id=${resp.data}`;
        let response1 = await new Promise((resolve, reject) => {
          con.query(updateamt, function (err, result) {
            if (err) {
              console.log(err);
              resolve({ status: 0, message: "Something went to wrong" });
            } else {
              if (result.affectedRows > 0) {
                resolve({
                  status: 1,
                  message: "Amount Added to wallet",
                });
              } else {
                resolve({
                  status: 0,
                  message: "Amount Added to wallet",
                });
              }
            }
          });
        });
        sqlll = `SELECT * FROM customer WHERE c_id = ${data.cid}`;
        let ress = await new Promise((resolve, reject) => {
          con.query(sqlll, async function (err1, result1) {
            if (err1) {
              console.log(err1);
              resolve({ status: 0, message: "Customer Not Updated" });
            } else {
              if (result1.length > 0) {
                resolve({ status: 1, result: result1[0] });
              }
            }
          });
        });

        sql1 = `SELECT * FROM main_customer WHERE m_c_id=${data.refrence_c_id}`;
        con.query(sql1, async function (err1, result1) {
          if (err1) {
            console.log(err1);
            resolve({ status: 0, message: "Something went to wrong" });
          } else {
            if (result1.length > 0) {
              senderMailSetting = await sendmessage.getEmailSetting(data.u_id);

              sqlll = `SELECT u_email FROM users WHERE u_id = ${data.u_id} `;
              let ccmail = await new Promise((resolve, reject) => {
                con.query(sqlll, async function (err1, result1) {
                  if (err1) {
                    console.log(err1);
                    resolve({ status: 0, message: "Something went to wrong" });
                  } else {
                    if (result1.length > 0) {
                      resolve({ status: 1, result: result1[0].u_email });
                    } else {
                      resolve({
                        status: 0,
                        message: "Something went to wrong",
                      });
                    }
                  }
                });
              });

              let table = `<div>
                            <table style="border-collapse: collapse;" >
                              <tr style="border: 1px solid #333;padding: 3px;">
                                <th style="border: 1px solid #333;padding: 3px;">Customer Name</th>
                                <th style="border: 1px solid #333;padding: 3px;">Mobile No</th>
                              </tr>
                            ${`<tr>
                                <td style="border: 1px solid #333;padding: 3px;">${ress.result.c_name}</td>
                                <td style="border: 1px solid #333;padding: 3px;">${ress.result.c_mo_no}</td>`}
                            </table>
                          </div>`;
              let message = await sendmessage.getTemplate(144);
              if (message.status != 0) {
                message.template = message.template.replace(
                  "{:name:}",
                  result1[0].m_c_prefix + " " + result1[0].m_c_name
                );
                message.template = message.template.replace("{:table:}", table);
                message.template = message.template.replace(
                  "{:camount:}",
                  data.c_amount
                );
                let mess =
                  (message.header == 1
                    ? typeof senderMailSetting.email_template_header !=
                      undefined && senderMailSetting.email_template_header != undefined &&
                      senderMailSetting.email_template_header != null
                      ? senderMailSetting.email_template_header
                      : ""
                    : "") +
                  message.template +
                  (message.b_d_id != 0
                    ? message.b_d_id == 1
                      ? senderMailSetting.gst_bankdetails
                      : message.b_d_id == 2
                        ? senderMailSetting.ngst_bankdetails
                        : message.b_d_id == 3
                          ? senderMailSetting.general_bankdetails
                          : ""
                    : "") +
                  (message.footer == 1
                    ? senderMailSetting.email_template_footer
                    : "") +
                  (message.signature == 1
                    ? senderMailSetting.email_signature
                    : "");

                CCMailSetting = await sendmessage.getEmailSetting(1);
                sendmessagenow = sendmessage.customermessagesend(
                  senderMailSetting,
                  result1[0].m_c_email,
                  mess,
                  message.subject,
                  ccmail.result, //CCMailSetting.e_username,  // user mail
                  ccmail.result, // reply mail
                  1
                );
              }
            }
          }
        });
        return response;
      } else {
        sql = `UPDATE customer_commision_payment SET  
      payment_date=CASE WHEN is_given=0 THEN '${data.payment_date
          }' ELSE payment_date END,
      mode_id=CASE WHEN is_given=0 THEN ${data.mode_id} ELSE mode_id END,
      bank_name=CASE WHEN is_given=0 THEN '${data.bank_name != undefined ? data.bank_name : ""
          }' ELSE bank_name END,
      chk_dd_date=CASE WHEN is_given=0 THEN '${data.chk_dd_date != undefined ? data.chk_dd_date : ""
          }' ELSE chk_dd_date END,
      chk_dd_no=CASE WHEN is_given=0 THEN '${data.chk_dd_no != undefined ? data.chk_dd_no : ""
          }' ELSE chk_dd_no END,
      payment_desc=CASE WHEN is_given=0 THEN '${data.payment_desc != undefined ? data.payment_desc : ""
          }' ELSE payment_desc END,
      is_given=CASE WHEN is_given=0 THEN 1 ELSE is_given END WHERE refrence_c_id =${resp.data
          }`;

        let response = await new Promise((resolve, reject) => {
          con.query(sql, (error, result) => {
            if (error) {
              console.log(error);
              resolve({ status: 0, message: "Something went to wrong" });
            } else {
              if (result.affectedRows > 0) {
                let insert_commission = `INSERT INTO commission_report (commission_p_id,u_type,c_amount,payment_date,mode_id,payment_desc,chk_dd_no,chk_dd_date,bank_name,p_u_id,p_branch_id,u_c_id,commission_by) VALUES ('${data.commissionList}',1,${data.c_amount},"${data.payment_date
                  }",${data.mode_id},'${data.payment_desc != undefined
                    ? mysql_real_escape_string(data.payment_desc)
                    : ""
                  }','${data.chk_dd_no != undefined
                    ? mysql_real_escape_string(data.chk_dd_no)
                    : ""
                  }','${data.chk_dd_date != undefined
                    ? mysql_real_escape_string(data.chk_dd_date)
                    : ""
                  }','${data.bank_name != undefined
                    ? mysql_real_escape_string(data.bank_name)
                    : ""
                  }',${data.p_u_id},${data.p_branch_id},${resp.data},${data.u_id})`;
                con.query(insert_commission, (insert_commission_error, insert_commission_result) => {
                  if (insert_commission_error) {
                    console.log(insert_commission_error);
                    resolve({ status: 0, message: "Something went to wrong" });
                  } else {
                    if (insert_commission_result.affectedRows > 0) {
                      resolve({
                        status: 1,
                        message: "Commision Payment inserted successfully",
                      });
                    } else {
                      resolve({
                        status: 0,
                        message: "Commision Payment Not inserted",
                      });
                    }
                  }
                });
                resolve({
                  status: 1,
                  message: "Commision Payment updated successfully",
                });
              } else {
                resolve({
                  status: 0,
                  message: "Commision Payment Not Updated",
                });
              }
            }
          });
        });
        let updateamt = `UPDATE main_customer SET total_commision= CASE WHEN total_commision>0 THEN (total_commision-${data.c_amount}) ELSE total_commision END WHERE m_c_id=${resp.data}`;
        let response1 = await new Promise((resolve, reject) => {
          con.query(updateamt, function (err, result) {
            if (err) {
              console.log(err);
              resolve({ status: 0, message: "Something went to wrong" });
            } else {
              if (result.affectedRows > 0) {
                resolve({
                  status: 1,
                  message: "Amount Added to wallet",
                });
              } else {
                resolve({
                  status: 0,
                  message: "Amount Added to wallet",
                });
              }
            }
          });
        });
        return response;
      }
    } else {
      if (data.type == 1) {
        sql = `UPDATE user_commision_payment SET payment_date="${data.payment_date
          }",mode_id=${data.mode_id},bank_name='${data.bank_name != undefined
            ? mysql_real_escape_string(data.bank_name)
            : ""
          }',chk_dd_date='${data.chk_dd_date != undefined
            ? mysql_real_escape_string(data.chk_dd_date)
            : ""
          }',chk_dd_no='${data.chk_dd_no != undefined
            ? mysql_real_escape_string(data.chk_dd_no)
            : ""
          }',payment_desc='${data.payment_desc != undefined
            ? mysql_real_escape_string(data.payment_desc)
            : ""
          }',is_given=1 WHERE u_c_p_id =${data.ccpid}`;
        let response = await new Promise((resolve, reject) => {
          con.query(sql, (error, result) => {
            if (error) {
              console.log(error);
              resolve({ status: 0, message: "Something went to wrong" });
            } else {
              if (result.affectedRows > 0) {
                let insert_commission = `INSERT INTO commission_report (commission_p_id,u_type,c_amount,payment_date,mode_id,payment_desc,chk_dd_no,chk_dd_date,bank_name,p_u_id,p_branch_id,u_c_id,commission_by) VALUES ('${data.commissionList}',0,${data.c_amount},"${data.payment_date
                  }",${data.mode_id},'${data.payment_desc != undefined
                    ? mysql_real_escape_string(data.payment_desc)
                    : ""
                  }','${data.chk_dd_no != undefined
                    ? mysql_real_escape_string(data.chk_dd_no)
                    : ""
                  }','${data.chk_dd_date != undefined
                    ? mysql_real_escape_string(data.chk_dd_date)
                    : ""
                  }','${data.bank_name != undefined
                    ? mysql_real_escape_string(data.bank_name)
                    : ""
                  }',${data.p_u_id},${data.p_branch_id},${data.u_name},${data.u_id})`;
                con.query(insert_commission, (insert_commission_error, insert_commission_result) => {
                  if (insert_commission_error) {
                    console.log(insert_commission_error);
                    resolve({ status: 0, message: "Something went to wrong" });
                  } else {
                    if (insert_commission_result.affectedRows > 0) {
                      resolve({
                        status: 1,
                        message: "Commision Payment inserted successfully",
                      });
                    } else {
                      resolve({
                        status: 0,
                        message: "Commision Payment Not inserted",
                      });
                    }
                  }
                });
                resolve({
                  status: 1,
                  message: "Commision Payment updated successfully",
                });
              } else {
                resolve({
                  status: 0,
                  message: "Commision Payment Not Updated",
                });
              }
            }
          });
        });
        let updateamt = `UPDATE users SET u_total_commision= CASE WHEN u_total_commision>0 THEN (u_total_commision-${data.c_amount}) ELSE u_total_commision END WHERE u_id=${data.u_name}`;
        let response1 = await new Promise((resolve, reject) => {
          con.query(updateamt, function (err, result) {
            if (err) {
              console.log(err);
              resolve({ status: 0, message: "Something went to wrong" });
            } else {
              if (result.affectedRows > 0) {
                resolve({
                  status: 1,
                  message: "Amount Added to wallet",
                });
              } else {
                resolve({
                  status: 0,
                  message: "Amount Added to wallet",
                });
              }
            }
          });
        });
        sqlll = `SELECT * FROM users WHERE u_id = ${data.u_name} where deleted = 0`;
        let ress = await new Promise((resolve, reject) => {
          con.query(sqlll, async function (err1, result1) {
            if (err1) {
              console.log(err1);
              resolve({ status: 0, message: "Customer Not Updated" });
            } else {
              if (result1.length > 0) {
                resolve({ status: 1, result: result1[0] });
              }
            }
          });
        });

        sql1 = `SELECT * FROM users WHERE u_id=${data.u_name}`;
        con.query(sql1, async function (err1, result1) {
          if (err1) {
            console.log(err1);
            resolve({ status: 0, message: "Something went to wrong" });
          } else {
            if (result1.length > 0) {
              senderMailSetting = await sendmessage.getEmailSetting(
                data.u_name
              );

              sqlll = `SELECT u_email FROM users WHERE u_id = 1 `;
              let ccmail = await new Promise((resolve, reject) => {
                con.query(sqlll, async function (err1, result1) {
                  if (err1) {
                    console.log(err1);
                    resolve({ status: 0, message: "Something went to wrong" });
                  } else {
                    if (result1.length > 0) {
                      resolve({ status: 1, result: result1[0].u_email });
                    } else {
                      resolve({
                        status: 0,
                        message: "Something went to wrong",
                      });
                    }
                  }
                });
              });

              let message = await sendmessage.getTemplate(304);
              if (message.status != 0) {
                message.template = message.template.replace(
                  "{:name:}",
                  result1[0].u_name
                );

                message.template = message.template.replace(
                  "{:camount:}",
                  data.c_amount
                );
                let mess =
                  (message.header == 1
                    ? typeof senderMailSetting.email_template_header !=
                      undefined && senderMailSetting.email_template_header != undefined &&
                      senderMailSetting.email_template_header != null
                      ? senderMailSetting.email_template_header
                      : ""
                    : "") +
                  message.template +
                  (message.b_d_id != 0
                    ? message.b_d_id == 1
                      ? senderMailSetting.gst_bankdetails
                      : message.b_d_id == 2
                        ? senderMailSetting.ngst_bankdetails
                        : message.b_d_id == 3
                          ? senderMailSetting.general_bankdetails
                          : ""
                    : "") +
                  (message.footer == 1
                    ? senderMailSetting.email_template_footer
                    : "") +
                  (message.signature == 1
                    ? senderMailSetting.email_signature
                    : "");

                CCMailSetting = await sendmessage.getEmailSetting(1);
                sendmessagenow = sendmessage.customermessagesend(
                  senderMailSetting,
                  result1[0].u_email,
                  mess,
                  message.subject,
                  ccmail.result, //CCMailSetting.e_username,  // user mail
                  ccmail.result, // reply mail
                  1
                );
              }
            }
          }
        });
        return response;
      } else {
        sql = `UPDATE user_commision_payment SET  
      payment_date=CASE WHEN is_given=0 THEN '${data.payment_date
          }' ELSE payment_date END,
      mode_id=CASE WHEN is_given=0 THEN ${data.mode_id} ELSE mode_id END,
      bank_name=CASE WHEN is_given=0 THEN '${data.bank_name != undefined ? data.bank_name : ""
          }' ELSE bank_name END,
      chk_dd_date=CASE WHEN is_given=0 THEN '${data.chk_dd_date != undefined ? data.chk_dd_date : ""
          }' ELSE chk_dd_date END,
      chk_dd_no=CASE WHEN is_given=0 THEN '${data.chk_dd_no != undefined ? data.chk_dd_no : ""
          }' ELSE chk_dd_no END,
      payment_desc=CASE WHEN is_given=0 THEN '${data.payment_desc != undefined ? data.payment_desc : ""
          }' ELSE payment_desc END,
      is_given=CASE WHEN is_given=0 THEN 1 ELSE is_given END WHERE u_id =${data.u_name
          }`;

        let response = await new Promise((resolve, reject) => {
          con.query(sql, (error, result) => {
            if (error) {
              console.log(error);
              resolve({ status: 0, message: "Something went to wrong" });
            } else {
              if (result.affectedRows > 0) {
                let insert_commission = `INSERT INTO commission_report (commission_p_id,u_type,c_amount,payment_date,mode_id,payment_desc,chk_dd_no,chk_dd_date,bank_name,p_u_id,p_branch_id,u_c_id,commission_by) VALUES ('${data.commissionList}',0,${data.c_amount},"${data.payment_date
                  }",${data.mode_id},'${data.payment_desc != undefined
                    ? mysql_real_escape_string(data.payment_desc)
                    : ""
                  }','${data.chk_dd_no != undefined
                    ? mysql_real_escape_string(data.chk_dd_no)
                    : ""
                  }','${data.chk_dd_date != undefined
                    ? mysql_real_escape_string(data.chk_dd_date)
                    : ""
                  }','${data.bank_name != undefined
                    ? mysql_real_escape_string(data.bank_name)
                    : ""
                  }',${data.p_u_id},${data.p_branch_id},${data.u_name},${data.u_id})`;
                con.query(insert_commission, (insert_commission_error, insert_commission_result) => {
                  if (insert_commission_error) {
                    console.log(insert_commission_error);
                    resolve({ status: 0, message: "Something went to wrong" });
                  } else {
                    if (insert_commission_result.affectedRows > 0) {
                      resolve({
                        status: 1,
                        message: "Commision Payment inserted successfully",
                      });
                    } else {
                      resolve({
                        status: 0,
                        message: "Commision Payment Not inserted",
                      });
                    }
                  }
                });
                resolve({
                  status: 1,
                  message: "Commision Payment updated successfully",
                });
              } else {
                resolve({
                  status: 0,
                  message: "Commision Payment Not Updated",
                });
              }
            }
          });
        });
        let updateamt = `UPDATE users SET u_total_commision= CASE WHEN u_total_commision>0 THEN (u_total_commision-${data.c_amount}) ELSE u_total_commision END WHERE u_id=${data.u_name}`;
        let response1 = await new Promise((resolve, reject) => {
          con.query(updateamt, function (err, result) {
            if (err) {
              console.log(err);
              resolve({ status: 0, message: "Something went to wrong" });
            } else {
              if (result.affectedRows > 0) {
                resolve({
                  status: 1,
                  message: "Amount Added to wallet",
                });
              } else {
                resolve({
                  status: 0,
                  message: "Amount Added to wallet",
                });
              }
            }
          });
        });
        sql1 = `SELECT * FROM users WHERE u_id=${data.u_name}`;
        con.query(sql1, async function (err1, result1) {
          if (err1) {
            console.log(err1);
            resolve({ status: 0, message: "Something went to wrong" });
          } else {
            if (result1.length > 0) {
              senderMailSetting = await sendmessage.getEmailSetting(
                data.u_name
              );

              sqlll = `SELECT u_email FROM users WHERE u_id = 1 `;
              let ccmail = await new Promise((resolve, reject) => {
                con.query(sqlll, async function (err1, result1) {
                  if (err1) {
                    console.log(err1);
                    resolve({ status: 0, message: "Something went to wrong" });
                  } else {
                    if (result1.length > 0) {
                      resolve({ status: 1, result: result1[0].u_email });
                    } else {
                      resolve({
                        status: 0,
                        message: "Something went to wrong",
                      });
                    }
                  }
                });
              });

              let message = await sendmessage.getTemplate(304);
              if (message.status != 0) {
                message.template = message.template.replace(
                  "{:name:}",
                  result1[0].u_name
                );

                message.template = message.template.replace(
                  "{:camount:}",
                  data.c_amount
                );
                let mess =
                  (message.header == 1
                    ? typeof senderMailSetting.email_template_header !=
                      undefined && senderMailSetting.email_template_header != undefined &&
                      senderMailSetting.email_template_header != null
                      ? senderMailSetting.email_template_header
                      : ""
                    : "") +
                  message.template +
                  (message.b_d_id != 0
                    ? message.b_d_id == 1
                      ? senderMailSetting.gst_bankdetails
                      : message.b_d_id == 2
                        ? senderMailSetting.ngst_bankdetails
                        : message.b_d_id == 3
                          ? senderMailSetting.general_bankdetails
                          : ""
                    : "") +
                  (message.footer == 1
                    ? senderMailSetting.email_template_footer
                    : "") +
                  (message.signature == 1
                    ? senderMailSetting.email_signature
                    : "");

                CCMailSetting = await sendmessage.getEmailSetting(1);
                sendmessagenow = sendmessage.customermessagesend(
                  senderMailSetting,
                  result1[0].u_email,
                  mess,
                  message.subject,
                  ccmail.result, //CCMailSetting.e_username,  // user mail
                  ccmail.result, // reply mail
                  1
                );
              }
            }
          }
        });
        return response;
      }
    }
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function getcommisionreportdata(data) {
  try {
    let sql = "";
    if (data.u_type == 1) {
      let m_c_id = 0;
      if (typeof data.c_email != undefined && data.c_email != undefined && data.c_email != null) {
        let custsql = `SELECT m_c_id FROM main_customer WHERE m_c_email='${data.c_email}'`;
        resp = await new Promise((resolve, reject) => {
          con.query(custsql, function (err, result) {
            if (err) {
              console.log(err);
              resolve({ status: 0, message: "Something went to wrong" });
            } else {
              if (result.length > 0) {
                m_c_id = result[0].m_c_id;
                resolve({
                  status: 1,
                  data: result[0].m_c_id,
                });
              } else {
                resolve({
                  status: 0,
                  data: 0,
                  message: "Email does not Exist...",
                });
              }
            }
          });
        });
      }

      // sql = `SELECT *,(SELECT name FROM attributes WHERE attributes.attribute_id = customer_commision_payment.mode_id)AS mode_name,(SELECT invoice_no FROM payment WHERE customer.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as invoice_no FROM customer_commision_payment,customer WHERE customer_commision_payment.c_id=customer.c_id AND STR_TO_DATE(customer_commision_payment.payment_date,"%d-%m-%Y")>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(customer_commision_payment.payment_date,"%d-%m-%Y")<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y") and customer_commision_payment.deleted=0 and customer_commision_payment.is_given=1 `;
      let sql = "";
      if (data.user_type == 0) {
        sql = `SELECT commission_report.*,main_customer.m_c_name as name,main_customer.m_c_prefix as prefix,attributes.name as mode_name,users.u_name as commission_by FROM commission_report left join main_customer on  main_customer.m_c_id = commission_report.u_c_id left join attributes on attributes.attribute_id = commission_report.mode_id left join users on users.u_id =commission_report.commission_by  where commission_report.u_type = 1 AND STR_TO_DATE(commission_report.payment_date,"%d-%m-%Y")>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(commission_report.payment_date,"%d-%m-%Y")<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y")`;

        if (
          typeof m_c_id != "undefined" &&
          m_c_id != "" &&
          m_c_id != 0
        ) {
          sql += ` AND commission_report.u_c_id=${m_c_id}`;
        }

      } else {
        sql = `SELECT commission_report.*,main_customer.m_c_name as name,main_customer.m_c_prefix as prefix,attributes.name as mode_name,users.u_name as commission_by FROM commission_report left join main_customer on  main_customer.m_c_id = commission_report.u_c_id left join attributes on attributes.attribute_id = commission_report.mode_id left join users on users.u_id =commission_report.commission_by where commission_report.u_type = 1 AND STR_TO_DATE(commission_report.payment_date,"%d-%m-%Y")>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(commission_report.payment_date,"%d-%m-%Y")<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y")`;
        if (
          typeof data.branch_name != "undefined" &&
          data.branch_name != "" &&
          data.branch_name != 0
        ) {
          sql += ` AND commission_report.p_branch_id=${data.branch_name}`;
        }
        if (
          typeof data.p_u_id != "undefined" &&
          data.p_u_id != "" &&
          data.p_u_id != 0
        ) {
          sql += ` AND commission_report.p_u_id=${data.p_u_id}`;
        }
        if (
          typeof m_c_id != "undefined" &&
          m_c_id != "" &&
          m_c_id != 0
        ) {
          sql += ` AND commission_report.u_c_id=${m_c_id}`;
        }
      }
      let c_amount = 0;
      let response = await new Promise((resolve, reject) => {
        con.query(sql, function (err, result) {
          if (err) {
            console.log(err);
            resolve({ status: 0, message: "Something went to wrong" });
          } else {
            if (result.length > 0) {
              result.forEach(function (res) {
                if (res.is_given == 0) {
                  c_amount = c_amount + res.c_amount;
                }
              });
              resolve({
                status: 1,
                data: result,
                total_amount: c_amount,
              });
            } else {
              resolve({
                status: 0,
                data: [],
                total_amount: 0,
              });
            }
          }
        });
      });
      return response;
    } else {
      // sql = `SELECT user_commision_payment.*,(SELECT name FROM attributes WHERE attributes.attribute_id = user_commision_payment.mode_id)AS mode_name,(SELECT invoice_no FROM payment WHERE user_commision_payment.c_id = payment.c_id AND deleted = 0 ORDER BY payment_id DESC LIMIT 1 )as invoice_no,(Select c_name from customer where customer.c_id = user_commision_payment.c_id)as c_name,(Select c_prefix from customer where customer.c_id = user_commision_payment.c_id)as c_prefix FROM user_commision_payment,users WHERE user_commision_payment.u_id=users.u_id AND STR_TO_DATE(payment_date,"%d-%m-%Y")>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(payment_date,"%d-%m-%Y")<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y") and user_commision_payment.deleted=0 and user_commision_payment.is_given=1`;


      if (data.user_type == 0) {
        sql = `SELECT commission_report.*,users.u_name as name,attributes.name as mode_name,u1.u_name as commission_by FROM commission_report left join users on  users.u_id = commission_report.u_c_id left join attributes on attributes.attribute_id = commission_report.mode_id left join users as u1 on u1.u_id =commission_report.commission_by where commission_report.u_type = 0 AND STR_TO_DATE(commission_report.payment_date,"%d-%m-%Y")>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(commission_report.payment_date,"%d-%m-%Y")<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y")`;
        if (
          typeof data.branch_name != "undefined" &&
          data.branch_name != "" &&
          data.branch_name != 0
        ) {
          sql += ` AND commission_report.p_branch_id=${data.branch_name}`;
        }
        if (
          typeof data.u_name != "undefined" &&
          data.u_name != "" &&
          data.u_name != 0
        ) {
          sql += ` AND commission_report.u_c_id=${data.u_name}`;
        }

      } else {
        sql = `SELECT commission_report.*,users.u_name as name,attributes.name as mode_name,u1.u_name as commission_by FROM commission_report left join users on  users.u_id = commission_report.u_c_id left join attributes on attributes.attribute_id = commission_report.mode_id left join users as u1 on u1.u_id =commission_report.commission_by where commission_report.u_type = 0 AND STR_TO_DATE(commission_report.payment_date,"%d-%m-%Y")>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") AND STR_TO_DATE(commission_report.payment_date,"%d-%m-%Y")<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y")`;
        if (
          typeof data.branch_name != "undefined" &&
          data.branch_name != "" &&
          data.branch_name != 0
        ) {
          sql += ` AND commission_report.p_branch_id=${data.branch_name}`;
        }
        if (
          typeof data.u_name != "undefined" &&
          data.u_name != "" &&
          data.u_name != 0
        ) {
          sql += ` AND commission_report.u_c_id=${data.u_name}`;
        }
      }
      let c_amount = 0;
      let response = await new Promise((resolve, reject) => {
        con.query(sql, function (err, result) {
          if (err) {
            console.log(err);
            resolve({ status: 0, message: "Something went to wrong" });
          } else {
            if (result.length > 0) {
              result.forEach(function (res) {
                if (res.is_given == 0) {
                  c_amount = c_amount + res.c_amount;
                }
              });
              resolve({
                status: 1,
                data: result,
                total_amount: c_amount,
              });
            } else {
              resolve({
                status: 0,
                data: [],
                total_amount: 0,
              });
            }
          }
        });
      });
      return response;
    }
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function getcommissionDataById(data) {
  try {
    sql = `Select * from commission_report where c_r_id  =${data.c_r_id}`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, async function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            let CommissionId = result[0].commission_p_id.split(",");
            let record = [];
            let commissiondata = "";
            if (CommissionId != "") {
              for (j = 0; j < CommissionId.length; j++) {
                if (result[0].u_type == 1) {
                  commissiondata += `Select customer_commision_payment.*,customer.c_name,customer.c_prefix,customer.tracking_id from customer_commision_payment left join customer on customer.c_id = customer_commision_payment.c_id where c_c_p_id = ${CommissionId[j]};`;
                } else {
                  commissiondata += `Select user_commision_payment.*,customer.c_name,customer.c_prefix,customer.tracking_id from user_commision_payment left join customer on customer.c_id = user_commision_payment.c_id where u_c_p_id = ${CommissionId[j]}; `;
                }

              }
              con.query(
                commissiondata,
                function (commissiondata_err, commissiondata_result) {
                  if (commissiondata_err) {
                    console.log(commissiondata_err);
                    resolve({ status: 0, message: "Something went to wrong" });
                  } else {
                    if (commissiondata_result.length == 1) {
                      commissiondata_result.forEach(function (res) {
                        record.push(res);
                        resolve({
                          status: 1,
                          data: record,
                        });
                      });
                    }
                    if (commissiondata_result.length > 0) {
                      commissiondata_result.forEach(function (result) {
                        if (result.length > 0) {
                          result.forEach(function (res) {
                            record.push(res);
                            resolve({
                              status: 1,
                              data: record,
                            });
                          });
                        } else {
                          resolve({
                            status: 1,
                            data: record,
                          });
                        }
                      });
                    } else {
                      resolve({
                        status: 0,
                        data: record,
                      });
                    }
                  }
                }
              );
            } else {
              resolve({
                status: 0,
                data: [],
                message: "This cashflow is from Old Cashflow.",
              });
            }
          } else {
            resolve({
              status: 0,
              result: [],
            });
          }
        }
      });
    });
    return response;
  } catch (err) {
    return { status: 0, message: "Invalid Call Try Again" };
  }
}


async function getCommissionDetailsPdf(data) {
  try {
    let response = await new Promise(async (resolve, reject) => {
      let commission_data = await getcommissionDataById({ c_r_id: data.c_r_id });

      pdf
        .create(pdfCommissionDetail({ commission_data: commission_data.data, data: data }), {
          childProcessOptions: {
            env: {
              OPENSSL_CONF: "/dev/null"
            },
            pageFormat: "A4"
          }
        })
        .toFile(
          `${__dirname}/public/Assets/commissionreports_pdf/commission_${data.c_r_id}.pdf`,
          (err) => {
            if (err) {
              return console.log("error", err);
            }
            resolve({
              ino: data.c_r_id,
              message: "done"
            });
          }
        );
    });

    return response;
  } catch (err) {
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function deletecommision(data) {
  try {
    if (data.u_type == 1) {
      let sql = `UPDATE customer_commision_payment SET deleted = 1 WHERE customer_commision_payment.c_c_p_id = ${data.c_c_p_id}`;
      let response = await new Promise((resolve, reject) => {
        con.query(sql, function (err, result) {
          if (err) {
            console.log(err);
            resolve({ status: 0, message: "Something went to wrong" });
          } else {
            if (result.affectedRows > 0) {
              resolve({
                status: 1,
                message: "Commision Deleted Successfully",
              });
            } else {
              resolve({
                status: 0,
                message: "Commision Not Deleted",
              });
            }
          }
        });
      });
      let updateamt = `UPDATE main_customer SET total_commision= CASE WHEN total_commision>0 THEN (total_commision-${data.c_amount}) ELSE total_commision END WHERE m_c_id=${data.refrence_c_id}`;
      let response1 = await new Promise((resolve, reject) => {
        con.query(updateamt, function (err, result) {
          if (err) {
            console.log(err);
            resolve({ status: 0, message: "Something went to wrong" });
          } else {
            if (result.affectedRows > 0) {
              resolve({
                status: 1,
                message: "Amount Added to wallet",
              });
            } else {
              resolve({
                status: 0,
                message: "Amount Added to wallet",
              });
            }
          }
        });
      });
      return response;
    } else {
      let sql = `UPDATE user_commision_payment SET deleted = 1 WHERE user_commision_payment.u_c_p_id = ${data.c_c_p_id}`;
      let response = await new Promise((resolve, reject) => {
        con.query(sql, function (err, result) {
          if (err) {
            console.log(err);
            resolve({ status: 0, message: "Something went to wrong" });
          } else {
            if (result.affectedRows > 0) {
              resolve({
                status: 1,
                message: "Commision Deleted Successfully",
              });
            } else {
              resolve({
                status: 0,
                message: "Commision Not Deleted",
              });
            }
          }
        });
      });
      let updateamt = `UPDATE users SET u_total_commision= CASE WHEN u_total_commision>0 THEN (u_total_commision-${data.c_amount}) ELSE u_total_commision END WHERE u_id=${data.u_name}`;
      let response1 = await new Promise((resolve, reject) => {
        con.query(updateamt, function (err, result) {
          if (err) {
            console.log(err);
            resolve({ status: 0, message: "Something went to wrong" });
          } else {
            if (result.affectedRows > 0) {
              resolve({
                status: 1,
                message: "Amount Added to wallet",
              });
            } else {
              resolve({
                status: 0,
                message: "Amount Added to wallet",
              });
            }
          }
        });
      });
      return response;
    }
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function checkcommissiondataById(data) {
  try {
    sql = `SELECT * FROM customer_commision_payment WHERE c_id = ${data.id} and deleted=0`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, async function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              check_status: 1,
            });
          } else {
            resolve({
              status: 1,
              check_status: 0,
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function searchEmbassyFees(data) {
  try {
    sql = `SELECT *,(row_number() over ( order by embassyfees.e_id DESC) ) AS row_no,(SELECT COUNT(*) FROM embassyfees WHERE deleted=0)as trows,(SELECT name FROM attributes WHERE attributes.attribute_id = embassyfees.document)as document_name,(SELECT name FROM attributes WHERE attributes.attribute_id = embassyfees.country)as country_name FROM embassyfees WHERE deleted=0`;
    if (
      data.service != "undefined" &&
      data.service != "" &&
      data.service != 0
    ) {
      sql += ` and embassyfees.service_type=${data.service}`;
    }
    if (
      data.country != "undefined" &&
      data.country != "" &&
      data.country != 0
    ) {
      sql += ` and embassyfees.country=${data.country}`;
    }
    if (
      data.document != "undefined" &&
      data.document != "" &&
      data.document != 0
    ) {
      sql += ` and embassyfees.document=${data.document}`;
    }
    sql123 = sql;
    sql += ` ORDER BY e_id DESC limit ${(data.page - 1) * data.perpage},${data.perpage
      }`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql123, function (err, result1) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result1.length > 0) {
            con.query(sql, function (err, res) {
              if (err) {
                console.log(err);
                resolve({ status: 0, message: "Something went to wrong" });
              } else {
                if (res.length > 0) {
                  resolve({
                    status: 1,
                    data: res,
                    t_rows: result1.length,
                  });
                }
              }
            });
          } else {
            resolve({
              status: 0,
              data: [],
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function searchFeedback(data) {
  try {
    sql = `SELECT *,(SELECT COUNT(*) FROM feedback  WHERE deleted =0)as trows FROM feedback WHERE m_c_id =${data.m_c_id} and deleted =0`;
    if (typeof data.f_date != "undefined" && data.f_date != "") {
      sql += ` and STR_TO_DATE(feedback.date,"%y-%m-%d")=STR_TO_DATE('${data.f_date}',"%y-%m-%d")`;
    }
    if (data.feedback != "undefined" && data.feedback != "") {
      sql += ` and feedback.feedback='${data.feedback}'`;
    }
    sql123 = sql;
    sql += ` ORDER BY f_id DESC limit ${(data.page - 1) * data.perpage},${data.perpage
      }`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql123, function (err, result1) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result1.length > 0) {
            con.query(sql, function (err, res) {
              if (err) {
                console.log(err);
                resolve({ status: 0, message: "Something went to wrong" });
              } else {
                if (res.length > 0) {
                  resolve({
                    status: 1,
                    data: res,
                    t_rows: result1.length,
                  });
                }
              }
            });
          } else {
            resolve({
              status: 0,
              data: [],
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}
//0703
async function updatPaymentWithApproval(data) {
  try {
    let paymentrecord = `SELECT * FROM payment WHERE c_id = ${data.c_id} and deleted = 0 ORDER BY payment_id DESC limit 1;`;
    let payment = await new Promise((resolve, reject) => {
      con.query(paymentrecord, async function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Customer Not Updated" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              result: result[0].payment_id,
              due_amt: result[0].due_amt,
            });
          } else {
            resolve({
              status: 0,
              result: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    let tdate = moment().format("DD-MM-YYYY");
    sql = `UPDATE draft_payment SET payment_date='${data.payment_date
      }',mode_id=${data.mode_id},bank_name='${mysql_real_escape_string(
        data.bank_name
      )}',receive_amt='${data.receive_amt}',chk_dd_date='${data.chk_dd_date
      }',chk_dd_no='${data.chk_dd_no}' WHERE d_p_id=${data.d_p_id}`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, async function (error, result) {
        if (error) {
          console.log(error);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.affectedRows > 0) {
            sql2 = `SELECT c_email,c_s_type,c_tax,c_name,c_prefix,created_id FROM customer WHERE c_id = ${data.c_id} AND deleted = 0;`;
            let response2 = await new Promise((resolve, reject) => {
              con.query(sql2, async function (err, results) {
                if (err) {
                  console.log(err);
                  resolve({ status: 0, message: "Something went to wrong" });
                } else {
                  if (results.length > 0) {
                    resolve({
                      status: 1,
                      result: results[0].c_email,
                      type: results[0].c_s_type,
                      c_tax: results[0].c_tax,
                      c_name: results[0].c_name,
                      c_prefix: results[0].c_prefix,
                      created_id: results[0].created_id,
                    });
                  }
                }
              });
            });

            sql123 = `SELECT *,(SELECT c_s_type FROM customer WHERE customer.c_id = payment.c_id)as c_s_type,(SELECT c_state FROM customer WHERE customer.c_id = payment.c_id)as c_state ,(SELECT c_name FROM customer WHERE customer.c_id = payment.c_id)as c_name,(SELECT c_prefix FROM customer WHERE customer.c_id = payment.c_id)as c_prefix,(SELECT branch_id FROM customer WHERE customer.c_id = payment.c_id)as branch_id,(SELECT is_draft_taken FROM draft_payment WHERE draft_payment.deleted=0 and c_id=${data.c_id} ORDER by d_p_id DESC LIMIT 1)as is_drafttds_taken FROM payment WHERE c_id = ${data.c_id} AND deleted=0  ORDER BY payment_id DESC LIMIT 1;`;
            let response123 = await new Promise((resolve, reject) => {
              con.query(sql123, function (err, result) {
                if (err) {
                  console.log(err);
                  resolve({ status: 0, message: "Something went to wrong" });
                } else {
                  if (result.length > 0) {
                    result.forEach(function (result) {
                      resolve({
                        status: 1,
                        c_s_type: result.c_s_type,
                        payment: result,
                      });
                    });
                  } else {
                    resolve({
                      status: 0,
                      message: "Something went to wrong",
                    });
                  }
                }
              });
            });

            //2102
            sql = `SELECT paid_amt,payment.* FROM payment WHERE c_id = ${data.c_id} AND deleted=0 order BY payment_id desc;`;

            let response = await new Promise((resolve, reject) => {
              con.query(sql, async function (err, results) {
                if (err) {
                  console.log(err);
                  resolve({ status: 0, message: "Something went to wrong" });
                } else {
                  if (results.length > 0) {
                    results.forEach(function (result) {
                      resolve({
                        status: 1,
                        result: result,
                        paid_amt: result.paid_amt,
                        payment_id: result.payment_id,
                      });
                    });
                  }
                }
              });
            });
            if (response.paid_amt == 0) {
              sql1 = `UPDATE payment SET payment_date='${data.payment_date
                }',mode_id=${data.mode_id},paid_amt= '${data.receive_amt
                }',due_amt='${parseInt(response123.payment.due_amt) -
                parseInt(data.receive_amt)
                }',receive_amt='${data.receive_amt}',u_id =${data.u_id
                },bank_name='${data.bank_name != null
                  ? mysql_real_escape_string(data.bank_name)
                  : ""
                }',chk_dd_date='${data.chk_dd_date}',chk_dd_no='${data.chk_dd_no != "null" ? data.chk_dd_no : ""
                }',created_id = ${data.created_id} WHERE payment_id=${response.payment_id
                }  AND deleted = 0`;
            } else {
              lastpayment = `SELECT p_receipt_no FROM payment WHERE (receive_amt!='' AND receive_amt!=0) order by payment_id  DESC limit 1`;
              const rlast2 = new Date().getFullYear().toString().substring(2);
              const rlast2Num = Number(rlast2);
              var rtoday = new Date();
              let financialYear;
              if (rtoday.getMonth() + 1 <= 3) {
                financialYear = rlast2Num - 1 + "-" + rlast2Num;
              } else {
                financialYear = rlast2Num + "-" + (rlast2Num + 1);
              }
              let rec_no = 0;
              let response11 = await new Promise((resolve, reject) => {
                con.query(lastpayment, function (err1, result1) {
                  if (err1) {
                    console.log(err1);
                    resolve({
                      status: 0,
                      message: "Something went to wrong",
                    });
                  } else {
                    if (result1.length > 0 && result1[0].p_receipt_no != 0) {
                      let rno = result1[0].p_receipt_no;
                      let n_rno = rno.split("_");
                      if (financialYear == n_rno[0]) {
                        rec_no = financialYear + "_" + ++n_rno[1];
                      } else {
                        rec_no = financialYear + "_" + 1;
                      }
                    } else {
                      rec_no = financialYear + "_" + 1;
                    }
                    resolve({
                      status: 1,
                      result: rec_no,
                    });
                  }
                });
              });
              // let rec_no = parseInt(response11.result) + 1;

              paymentrecord = `SELECT * FROM payment WHERE c_id = ${data.c_id} and deleted = 0 ORDER BY payment_id DESC limit 1;`;
              let payment = await new Promise((resolve, reject) => {
                con.query(paymentrecord, async function (err, result) {
                  if (err) {
                    console.log(err);
                    resolve({ status: 0, message: "Customer Not Updated" });
                  } else {
                    if (result.length > 0) {
                      resolve({
                        status: 1,
                        result: result[0],
                        result1: result[0].payment_id,
                      });
                    } else {
                      resolve({
                        status: 0,
                        message: "Something went to wrong",
                      });
                    }
                  }
                });
              });

              sql1 = `INSERT INTO payment(payment_date,c_id,total_amount,extra_amt,courier,service_tax,mode_id,payment_desc,chk_dd_no,chk_dd_date,embassy_fees,dis_amt,net_amt,paid_amt,due_amt,sgst,cgst,igst,created_id,receive_amt,u_id,is_tds,tds_amt,invoice_no,tracking_id,bank_name,coupon_amt,exp_charge,c_tax,p_receipt_no,created_branch_id,is_draft_taken,payment_refund) VALUES ('${data.payment_date
                }',${data.c_id},'${payment.result.total_amount}','${payment.result.extra_amt
                }',
                '${payment.result.courier}','${payment.result.service_tax}',${data.mode_id
                },'${payment.result.payment_desc != null
                  ? payment.result.payment_desc
                  : ""
                }','${data.chk_dd_no != null ? data.chk_dd_no : ""}','${data.chk_dd_date
                }','${payment.result.embassy_fees}','${payment.result.dis_amt
                }','${payment.result.net_amt}','${parseInt(payment.result.paid_amt) + parseInt(data.receive_amt)
                }','${parseInt(payment.result.due_amt) - parseInt(data.receive_amt)
                }','${payment.result.sgst}','${payment.result.cgst}','${payment.result.igst
                }',${data.created_id},'${data.receive_amt}',${data.u_id},${payment.result.is_tds
                },'${payment.result.tds_amt}','${payment.result.invoice_no
                }','${mysql_real_escape_string(payment.result.tracking_id)}','${data.bank_name != null
                  ? mysql_real_escape_string(data.bank_name)
                  : ""
                }','${payment.result.coupon_amt}','${payment.result.exp_charge
                }','${response2.c_tax}','${rec_no}',${data.created_branch_id},${payment.result.is_draft_taken
                },'${payment.result.payment_refund}')`;
            }

            let date_ob = moment(data.payment_date, "DD-MM-YYYY").format(
              "YYYY-MM-DD"
            );
            let date = new Date(date_ob);

            date.setDate(date.getDate() + 3);
            let td = date.getDate();
            let response1 = await new Promise((resolve, reject) => {
              con.query(sql1, async function (err, result) {
                if (err) {
                  console.log(err);
                  resolve({ status: 0, message: "Something went wrong" });
                } else {
                  if (result.affectedRows > 0) {
                    //2303
                    //1003
                    // if (response.paid_amt == 0) {
                    //   let updatecust = `Update customer SET under_process_date = '${tdate}' where c_id = ${data.c_id} and deleted= 0`;
                    //   let resp = await new Promise((resolve, reject) => {
                    //     con.query(
                    //       updatecust,
                    //       async function (custerr1, custresult1) {
                    //         if (custerr1) {
                    //           resolve({
                    //             status: 0,
                    //             message: "something went wrong",
                    //           });
                    //         }
                    //         if (custresult1.affectedRows > 0) {
                    //           resolve({
                    //             status: 1,
                    //             message: "Process Date Changed",
                    //           });
                    //         } else {
                    //           resolve({ status: 0, message: "No data found" });
                    //         }
                    //       }
                    //     );
                    //   });
                    // }

                    sql7 = `UPDATE draft_payment SET approved_status=1 WHERE  d_p_id=${data.d_p_id}`;
                    con.query(sql7, async function (err7, result7) {
                      if (err7) {
                        console.log(err7);
                        resolve({
                          status: 0,
                          message: "Something went wrong",
                        });
                      } else {
                        if (result7) {
                          resolve({
                            status: 1,
                            payment_id: result.insertId,
                            message: "Payment Approved successfully",
                          });
                        }
                      }
                    });

                    const isFullPaid = await getpayment({ id: data.c_id });
                    let custSql = `SELECT created_id,marketing_user,created_branch_id FROM customer WHERE c_id = ${data.c_id} AND customer.target_count = 1 AND deleted = 0;`;
                    let cust_created_id = await new Promise(
                      (resolve, reject) => {
                        con.query(custSql, async function (err, results) {
                          if (err) {
                            console.log(err);
                            resolve({
                              status: 0,
                              message: "Something went to wrong",
                            });
                          } else {
                            if (results.length > 0) {
                              resolve({
                                status: 1,
                                created_id: results[0].created_id,
                                marketing_user: results[0].marketing_user,
                                branch_id: results[0].created_branch_id,
                              });
                            } else {
                              resolve({
                                status: 1,
                                created_id: 0,
                                marketing_user: 0,
                                branch_id: 0
                              });
                            }
                          }
                        });
                      }
                    );
                    console.log(cust_created_id, "dhruvi2");
                    if (cust_created_id.created_id != 0) {
                      const uCommission = await getUserCommision(
                        cust_created_id.created_id
                      );
                      let u_Commission;
                      if (
                        cust_created_id.marketing_user != 0 &&
                        cust_created_id.marketing_user != null
                      ) {
                        u_Commission = await getUserCommision(
                          cust_created_id.marketing_user
                        );
                      }
                      const commision_date = moment().format("DD-MM-YYYY");
                      if (isFullPaid.payment.due_amt == 0) {
                        // let getuserquery = `Select is_marketing,marketing_parent_id,u_commission from users where u_id = ${cust_created_id.created_id} and deleted = 0 `;
                        // let marketing_check = await new Promise(
                        //   (resolve, reject) => {
                        //     con.query(getuserquery, async function (err, res) {
                        //       if (err) {
                        //         console.log(err);
                        //         resolve({
                        //           status: 0,
                        //           message: "Something went to wrong",
                        //         });
                        //       } else {
                        //         if (res.length > 0) {
                        //           resolve({
                        //             status: 1,
                        //             is_marketing: res[0].is_marketing,
                        //             marketing_parent_id:
                        //               res[0].marketing_parent_id,
                        //             u_commission: res[0].u_commission,
                        //           });
                        //         }
                        //       }
                        //     });
                        //   }
                        // );
                        let sq1 = "";
                        sq1 = `INSERT INTO user_commision_payment(u_id,created_id,commision_date,c_amount,c_id,p_u_id,p_branch_id) VALUES(${cust_created_id.created_id
                          },${data.u_id},'${mysql_real_escape_string(
                            commision_date
                          )}',${uCommission.u_commission},${data.c_id},${cust_created_id.created_id},${cust_created_id.branch_id});`;
                        if (
                          cust_created_id.marketing_user != 0 &&
                          cust_created_id.marketing_user != null
                        ) {
                          sq1 += `INSERT INTO user_commision_payment(u_id,created_id,commision_date,c_amount,c_id,p_u_id,p_branch_id) VALUES(${cust_created_id.marketing_user
                            },${data.u_id},'${mysql_real_escape_string(
                              commision_date
                            )}',${u_Commission.u_commission},${data.c_id},${cust_created_id.created_id},${cust_created_id.branch_id});`;
                        }
                        let newRes = await new Promise((resolve, reject) => {
                          con.query(sq1, function (er, res) {
                            if (er) {
                              console.log(er);
                              resolve({
                                status: 0,
                                message: "Something went to wrong",
                              });
                            } else {
                              if (res.affectedRows > 0) {
                                resolve({
                                  status: 1,
                                  message:
                                    "User commission inserted successfully...",
                                });
                              } else {
                                resolve({
                                  status: 0,
                                  message: "Something went to wrong",
                                });
                              }
                            }
                          });
                        });

                        updateamt = `UPDATE users SET u_total_commision=u_total_commision+${uCommission.u_commission}  WHERE u_id=${cust_created_id.created_id};`;
                        if (
                          cust_created_id.marketing_user != 0 &&
                          cust_created_id.marketing_user != null
                        ) {
                          updateamt += `UPDATE users SET u_total_commision=u_total_commision+${u_Commission.u_commission}  WHERE u_id=${cust_created_id.marketing_user};`;
                        }
                        let res12 = await new Promise((resolve, reject) => {
                          con.query(updateamt, function (er, res) {
                            if (er) {
                              console.log(er);
                              resolve({
                                status: 0,
                                message: "Something went to wrong",
                              });
                            } else {
                              if (res.affectedRows > 0) {
                                resolve({
                                  status: 1,
                                  message:
                                    "Users commission updated successfully...",
                                });
                              } else {
                                resolve({
                                  status: 0,
                                  message: "Something went to wrong",
                                });
                              }
                            }
                          });
                        });
                      }
                    }
                    // var task = cron.schedule(
                    //   `00 00 ${td} * *}`,
                    //   async () => {
                    //     let date1 = moment(date).format("DD-MM-YYYY");
                    //     let curr_date = moment().format("DD-MM-YYYY");
                    //     if (date1 == curr_date) {
                    //       let senderMailSetting =
                    //         await sendmessage.getEmailSetting(data.created_id);

                    //       sqlll = `SELECT u_email FROM users WHERE u_id = ${data.created_id} `;
                    //       let ccmail = await new Promise((resolve, reject) => {
                    //         con.query(sqlll, async function (err1, result1) {
                    //           if (err1) {
                    //             console.log(err1);
                    //             resolve({
                    //               status: 0,
                    //               message: "Something went to wrong",
                    //             });
                    //           } else {
                    //             if (result1.length > 0) {
                    //               resolve({
                    //                 status: 1,
                    //                 result: result1[0].u_email,
                    //               });
                    //             } else {
                    //               resolve({
                    //                 status: 0,
                    //                 message: "Something went to wrong",
                    //               });
                    //             }
                    //           }
                    //         });
                    //       });

                    //       let message = await sendmessage.getTemplate(3);
                    //       if (message.status != 0) {
                    //         message.template = message.template.replace(
                    //           "{:name:}",
                    //           response2.c_prefix + " " + response2.c_name
                    //         );
                    //         let mess =
                    //           (message.header == 1
                    //             ? senderMailSetting.email_template_header
                    //             : "") +
                    //           message.template +
                    //           (message.b_d_id != 0
                    //             ? message.b_d_id == 1
                    //               ? senderMailSetting.gst_bankdetails
                    //               : message.b_d_id == 2
                    //               ? senderMailSetting.ngst_bankdetails
                    //               : message.b_d_id == 3
                    //               ? senderMailSetting.general_bankdetails
                    //               : ""
                    //             : "") +
                    //           // (data.created_id == 1
                    //           //   ? response2.c_tax == 0
                    //           //     ? senderMailSetting.bank_details
                    //           //     : senderMailSetting.nongst_bank_details
                    //           //   : response2.c_tax == 0
                    //           //     ? senderMailSetting.b_bank_details
                    //           //     : senderMailSetting.b_nongst_bank_deatils) +
                    //           (message.footer == 1
                    //             ? senderMailSetting.email_template_footer
                    //             : "") +
                    //           (message.signature == 1
                    //             ? senderMailSetting.email_signature
                    //             : "");

                    //         CCMailSetting = await sendmessage.getEmailSetting(
                    //           1
                    //         );

                    //         sendmessagenow = sendmessage.customermessagesend(
                    //           senderMailSetting,
                    //           response2.result,
                    //           mess,
                    //           message.subject,
                    //           ccmail.result, //CCMailSetting.e_username,  // user mail
                    //           ccmail.result, // reply mail
                    //           1
                    //         );
                    //       }
                    //       if (
                    //         message.status != 0 &&
                    //         sendmessagenow.status == 1
                    //       ) {
                    //         resolve({
                    //           status: 1,
                    //           message: "Payment Updated successfully",
                    //         });
                    //       } else {
                    //         resolve({
                    //           status: 1,
                    //           message:
                    //             "Payment Update Without Sending Mail successfully",
                    //         });
                    //       }
                    //     } else {
                    //       task.stop();
                    //     }
                    //   },
                    //   {
                    //     scheduled: true,
                    //   }
                    // );

                    // task.start();
                  } else {
                    resolve({
                      status: 0,
                      message: "Something went to wrong",
                    });
                  }
                }
              });
            });
            if (response.paid_amt == 0) {
              if (response2.type == 8) {
                sql2 = `SELECT visa.v_id,details.detail_id FROM visa,details WHERE visa.v_id=details.service_id AND service_type=8 AND visa.deleted=0 AND details.deleted=0 AND visa.c_id=${data.c_id}`;
              } else if (response2.type == 10) {
                sql2 = `SELECT attestation.a_id,details.detail_id FROM attestation,details WHERE attestation.a_id=details.service_id AND service_type=10 AND attestation.deleted=0 AND details.deleted=0 AND attestation.c_id=${data.c_id}`;
              } else if (response2.type == 17) {
                sql2 = `SELECT apostille.a_id,details.detail_id FROM apostille,details WHERE apostille.a_id=details.service_id AND service_type=17 AND apostille.deleted=0 AND details.deleted=0 AND apostille.c_id=${data.c_id}`;
              } else {
                sql2 = `SELECT translation.a_id,details.detail_id FROM translation,details WHERE translation.a_id=details.service_id AND service_type=20 AND translation.deleted=0 AND details.deleted=0 AND translation.c_id=${data.c_id}`;
              }
              let response3 = await new Promise((resolve, reject) => {
                con.query(sql2, async function (err2, result2) {
                  if (err2) {
                    console.log(err2);
                    resolve({
                      status: 0,
                      message: "Something went to wrong",
                    });
                  } else {
                    if (result2.length > 0) {
                      let record = [];
                      result2.forEach((k) => {
                        record.push(k.detail_id);
                      });
                      resolve({
                        result: record,
                      });
                    }
                  }
                });
              });
            }

            resolve({
              status: 1,
              message: "Payment Approved Successfully",
            });

            sqlll = `SELECT *,payment.payment_id as id,payment.p_receipt_no as rec_no,(SELECT name FROM attributes WHERE attributes.attribute_id = payment.mode_id)AS mode_name FROM payment join customer on payment.c_id = customer.c_id WHERE payment.deleted=0 and payment.receive_amt!=0 and  payment.payment_id  = ${response.paid_amt == 0
              ? response.payment_id
              : response1.payment_id
              } `;
            let ress = await new Promise((resolve, reject) => {
              con.query(sqlll, async function (err1, result1) {
                if (err1) {
                  console.log(err1);
                  resolve({ status: 0, message: "Something went to wrong" });
                } else {
                  if (result1.length > 0) {
                    resolve({
                      status: 1,
                      result: result1[0],
                    });
                  } else {
                    resolve({
                      status: 0,
                      message: "Something went to wrong",
                    });
                  }
                }
              });
            });

            let resultpdf = await createmailpdf(ress.result);

            // // on approval mail send to customer with payment receipt
            let result = await getPaymentData(ress.result);
            let imageAsBase64;
            if (
              fs.existsSync(
                `./public/Assets/images/${
                // result.user.u_id == 1 ||
                // (result.user.p_u_id == 1 && result.user.user_type == 3)
                //   ? "adminlogo"
                // :
                "branchlogo"
                }/${result.settingdata.logo}`
              )
            ) {
              imageAsBase64 = fs.readFileSync(
                `./public/Assets/images/${
                // result.user.u_id == 1 ||
                // (result.user.p_u_id == 1 && result.user.user_type == 3)
                //   ? "adminlogo"
                //   :
                "branchlogo"
                }/${result.settingdata.logo}`,
                { encoding: "base64" }
              );
            }
            let signatureAsBase64;
            if (
              fs.existsSync(
                `./public/Assets/images/invoicesignature/${result.data.invoice_signature}`
              )
            ) {
              signatureAsBase64 = fs.readFileSync(
                `./public/Assets/images/invoicesignature/${result.data.invoice_signature}`,
                { encoding: "base64" }
              );
            }
            pdf
              .create(
                paymentReceipt(result, imageAsBase64, signatureAsBase64),
                {
                  childProcessOptions: {
                    env: {
                      OPENSSL_CONF: "/dev/null",
                    },
                  },
                }
              )
              .toFile(
                `${__dirname}/public/Assets/payment_receipt/payment_receipt_${result.data.p_receipt_no}.pdf`,
                (err) => {
                  if (err) {
                    return console.log("error");
                  }
                  resolve({
                    ino: result.data.p_receipt_no,
                  });
                }
              );
            let senderMailSetting = await sendmessage.getEmailSetting(
              ress.result.u_id
            );

            sqlll = `SELECT u_email FROM users WHERE u_id = ${ress.result.u_id} `;
            let ccmail = await new Promise((resolve, reject) => {
              con.query(sqlll, async function (err1, result1) {
                if (err1) {
                  console.log(err1);
                  resolve({ status: 0, message: "Something went to wrong" });
                } else {
                  if (result1.length > 0) {
                    resolve({ status: 1, result: result1[0].u_email });
                  } else {
                    resolve({
                      status: 0,
                      message: "Something went to wrong",
                    });
                  }
                }
              });
            });

            let message = await sendmessage.getTemplate(6);
            if (message.status != 0) {
              message.template = message.template.replace(
                "{:name:}",
                result.data.c_prefix + " " + result.data.c_name
              );
              let mess =
                (message.header == 1
                  ? typeof senderMailSetting.email_template_header !=
                    undefined && senderMailSetting.email_template_header != undefined &&
                    senderMailSetting.email_template_header != null
                    ? senderMailSetting.email_template_header
                    : ""
                  : "") +
                message.template +
                (message.b_d_id != 0
                  ? message.b_d_id == 1
                    ? senderMailSetting.gst_bankdetails
                    : message.b_d_id == 2
                      ? senderMailSetting.ngst_bankdetails
                      : message.b_d_id == 3
                        ? senderMailSetting.general_bankdetails
                        : ""
                  : "") +
                // (result.userdata.u_id == 1
                //   ? result.data.c_tax == 0
                //     ? result.settingdata.bank_details
                //     : result.settingdata.nongst_bank_details
                //   : result.data.c_tax == 0
                //     ? result.settingdata.b_bank_details
                //     : result.settingdata.b_nongst_bank_deatils) +
                (message.footer == 1
                  ? senderMailSetting.email_template_footer
                  : "") +
                (message.signature == 1
                  ? senderMailSetting.email_signature
                  : "");
              CCMailSetting = await sendmessage.getEmailSetting(1);
              let att = [];
              att.push({ url: `payment_receipt_${ress.result.rec_no}.pdf` });
              let pathname = __dirname + "/public/Assets/payment_receipt";
              sendmessagenow = await sendmessage.paymentrefundsend(
                //08-07
                senderMailSetting,
                result.data.c_email,
                mess,
                message.subject,
                att, //08-07
                // CCMailSetting.cc_email, //cc mail// CCMailSetting.e_username,
                ccmail.result, // reply mail
                1,
                pathname
              );
              sendmessagenow = await sendmessage.paymentrefundsend(
                //08-07
                senderMailSetting,
                CCMailSetting.cc_email,
                mess,
                message.subject,
                att, //08-07
                // CCMailSetting.cc_email, //cc mail// CCMailSetting.e_username,
                ccmail.result, // reply mail
                1,
                pathname
              );
            }
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

//0703
async function createmailpdf(data) {
  try {
    let response11 = await new Promise(async (resolve, reject) => {
      let result = await getPaymentData(data);
      let imageAsBase64;
      if (
        fs.existsSync(
          `./public/Assets/images/${
          // result.user.u_id == 1 ||
          // (result.user.p_u_id == 1 && result.user.user_type == 3)
          //   ? "adminlogo"
          //   :
          "branchlogo"
          }/${result.settingdata.logo}`
        )
      ) {
        imageAsBase64 = fs.readFileSync(
          `./public/Assets/images/${
          // result.user.u_id == 1 ||
          // (result.user.p_u_id == 1 && result.user.user_type == 3)
          //   ? "adminlogo"
          //   :
          "branchlogo"
          }/${result.settingdata.logo}`,
          { encoding: "base64" }
        );
      }
      let signatureAsBase64;
      if (
        fs.existsSync(
          `./public/Assets/images/invoicesignature/${result.data.invoice_signature}`
        )
      ) {
        signatureAsBase64 = fs.readFileSync(
          `./public/Assets/images/invoicesignature/${result.data.invoice_signature}`,
          { encoding: "base64" }
        );
      }
      pdf
        .create(paymentReceipt(result, imageAsBase64, signatureAsBase64), {
          childProcessOptions: {
            env: {
              OPENSSL_CONF: "/dev/null",
            },
          },
        })
        .toFile(
          `${__dirname}/public/Assets/payment_receipt/payment_receipt_${result.data.p_receipt_no}.pdf`,
          (err) => {
            if (err) {
              return console.log("error");
            }
            resolve({
              ino: result.data.p_receipt_no,
            });
          }
        );
    });
    return response11;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}
//0304
async function getAttestationListBycid(data) {
  try {
    let attestationPaginate = `SELECT COUNT(details.detail_id) as trows FROM details,attestation,customer WHERE customer.c_id=attestation.c_id and details.service_id=attestation.a_id  AND details.service_type=10 AND details.deleted = 0 AND attestation.deleted = 0 AND customer.is_cancel = 0 AND  customer.deleted = 0 AND attestation.c_id = ${data.c_id}`;

    let sql = `SELECT *,(SELECT SUM(receive_amt) FROM draft_payment  WHERE draft_payment.c_id = customer.c_id and draft_payment.deleted=0 and draft_payment.receive_amt!=0  and draft_payment.approved_status =0 and draft_payment.deleted = 0 ) as total_draft,details.under_process_date AS process_date,(SELECT name FROM attributes WHERE attributes.attribute_id  =attestation.a_type)as attestation_type,(SELECT c_date FROM customer WHERE customer.c_id =attestation.c_id)as r_date,(SELECT name FROM attributes WHERE attributes.attribute_id =attestation.a_country)as attestation_country,(SELECT name FROM attributes WHERE attributes.attribute_id =details.d_c_id)as attestation_certificate,(SELECT c_prefix FROM customer WHERE customer.c_id=attestation.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=attestation.c_id) AS customer_name,(SELECT c_s_type FROM customer WHERE customer.c_id=attestation.c_id) AS c_s_type,(SELECT c_id FROM customer WHERE customer.c_id=attestation.c_id) as my_C_id,(SELECT branch_id FROM customer WHERE customer.c_id=attestation.c_id) AS branch_id,(SELECT u_id FROM customer WHERE customer.c_id=attestation.c_id) AS cuid,(SELECT user_type FROM users where users.u_id  = (SELECT u_id FROM customer WHERE customer.c_id=attestation.c_id)) as cutype,(SELECT payment.due_amt FROM payment where payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=attestation.c_id) ORDER BY payment.payment_id DESC LIMIT 1) as my_Due_Amt,
    (SELECT payment.paid_amt FROM payment where payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=attestation.c_id) ORDER BY payment.payment_id DESC LIMIT 1) as my_paid_amt,
    (SELECT payment.net_amt FROM payment where payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=attestation.c_id) ORDER BY payment.payment_id DESC LIMIT 1) as my_net_amt,
    (SELECT payment.tds_amt FROM payment where payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=attestation.c_id) ORDER BY payment.payment_id DESC LIMIT 1) as my_tds_amt,
    (SELECT draft_payment.d_p_id FROM draft_payment where draft_payment.deleted=0 and draft_payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=attestation.c_id) and draft_payment.approved_status=0 and draft_payment.due_amt=0 ORDER BY draft_payment.d_p_id DESC LIMIT 1) as Draf_payment FROM details,attestation,customer WHERE customer.c_id=attestation.c_id and details.service_id=attestation.a_id  AND details.service_type=10 AND details.deleted = 0 AND attestation.deleted = 0 AND customer.is_cancel = 0 AND  customer.deleted = 0 AND attestation.c_id = ${data.c_id}`;
    sql += ` ORDER BY detail_id  DESC limit ${(data.page - 1) * data.perPage},${data.perPage
      }`;
    let resp = await new Promise((resolve, reject) => {
      con.query(attestationPaginate, function (err1, lres1) {
        if (err1) {
          console.log(err1);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (lres1.length > 0) {
            resolve({
              status: 1,
              t_rows: lres1[0].trows,
            });
          } else {
            resolve({
              status: 0,
              data: [],
            });
          }
        }
      });
    });
    let response1 = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              data: result,
              trows: resp.t_rows,
            });
          } else {
            resolve({
              status: 0,
              data: [],
            });
          }
        }
      });
    });
    return response1;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function searchcashinhand(data) {
  try {
    let record = [];
    let cash = [];
    let cashList = [];
    sqlll = `SELECT * FROM users WHERE (user_type = 1 or user_type = 3)  and branch_id = ${data.branch_id} `;
    let ress = await new Promise((resolve, reject) => {
      con.query(sqlll, async function (err1, result1) {
        if (err1) {
          console.log(err1);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result1.length > 0) {
            for (let i = 0; i < result1.length; i += 1) {
              cash.push({
                u_id: result1[i].u_id,
                u_name: result1[i].u_name,
                b_id: data.branch_id,
                c_hand: 0,
              });
              cashList.push({
                u_id: result1[i].u_id,
                u_name: result1[i].u_name,
                b_id: data.branch_id,
                c_hand: 0,
              });
            }
            Object.keys(cash).map(async (kk) => {
              let response = await getcashpaymentamount(cash[kk]);

              cashList[kk].c_hand = response.result;

              if (kk == cash.length - 1) {
                resolve({
                  status: 1,
                  data: cashList,
                });
              }
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });

    return ress;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function searchEmbassyFeesReportsbyall(data) {
  try {
    let arr = [];
    let s_arr = [8, 10, 17, 20];
    let ress = await new Promise(async (resolve, reject) => {
      for (let i = 0; i < s_arr.length; i++) {
        let newobj = { ...data, service_type: s_arr[i] };
        let response = await searchEmbassyFeesReports(newobj);
        arr = arr.concat(response.applicate_data);
        if (i == s_arr.length - 1) {
          resolve({
            status: 1,
            applicate_data: arr,
            user_data: {},
          });
        }
      }
    });

    return ress;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function getLeadFollowup(data) {
  try {
    sql = `SELECT * FROM lead_followup WHERE (lead_id=${data.l_id} or c_id=${data.c_id}) order by l_f_id`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              data: result,
            });
          } else {
            resolve({
              status: 0,
              data: [],
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function getuserlist(data) {
  try {
    sql = `SELECT * FROM users WHERE u_id=${data.uid} and deleted=0`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            if (result[0].user_type == 0) {
              sql1 = `SELECT * FROM users WHERE user_type!=0 AND user_type!=2 AND branch_id=${data.bid} AND deleted=0`;
            } else if (result[0].user_type == 1) {
              sql1 = `SELECT * FROM users,roles WHERE users.r_id=roles.r_id AND (users.p_u_id=${data.uid} OR users.branch_id=${data.bid}) AND user_type!=0 and users.deleted=0`;
            } else {
              sql1 = `SELECT * FROM users WHERE user_type!=0 AND user_type!=2 AND branch_id=${data.bid} AND deleted=0`;
            }
          }
          con.query(sql1, function (err, res) {
            if (err) {
              console.log(err);
              resolve({ status: 0, message: "Something went to wrong" });
            } else {
              if (typeof res != "undefined" && res.length > 0) {
                resolve({
                  status: 1,
                  uData: res,
                });
              } else {
                resolve({
                  status: 0,
                  uData: [],
                });
              }
            }
          });
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function chatnotification(data) {
  try {
    let sql = "";

    //OR For USers chat notification
    //c_type 1 join group_member with receiver_id

    sql = `SELECT *,IF(chat.sender_type = 1,(SELECT m_c_name FROM main_customer where main_customer.m_c_id=chat.sender_id  ),(SELECT u_name FROM users where chat.sender_id=users.u_id)) as u_name,(SELECT g_name FROM chat_groups where chat_groups.group_id=chat.receiver_id and c_type = 1)as g_name FROM chat left join chat_group_members on chat_group_members.group_id = chat.receiver_id AND chat.c_type= 1 and chat_group_members.chat_user_type = 0 and (NOT find_in_set(${data.u_id},chat.seen_u_id)) and chat_group_members.m_u_id = ${data.u_id} and (NOT chat.sender_id =${data.u_id}) WHERE (chat.c_type= 1 and chat_group_members.chat_user_type = 0 and  (NOT find_in_set(${data.u_id},chat.seen_u_id)) and chat_group_members.m_u_id = ${data.u_id} and  (NOT chat.sender_id =${data.u_id})) OR (chat.receiver_id = ${data.u_id} and chat.c_read=0 and chat.sender_type = 0 and chat.c_type = 0)`;


    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              counter: result.length,
              data: result,
            });
          } else {
            resolve({
              status: 0,
              counter: 0,
              data: [],
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function usercheck(data) {
  try {
    sql = `SELECT * FROM users WHERE check_in_status = 1 and u_id=${data.id}`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
            });
          } else {
            resolve({
              status: 0,
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function getTodayCFollowup(data) {
  try {
    let tDate = moment().format("DD-MM-YYYY");
    let record = [];
    getuserquery = `select * from users where u_id=${data.id} and deleted=0`;
    let response = await new Promise((resolve, reject) => {
      con.query(getuserquery, async function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            if (result[0].user_type == 1) {
              getallchilduser = `select * from users where ((p_u_id=${data.id} OR p_u_id=1) and branch_id=${result[0].branch_id}) and deleted=0`;
              con.query(getallchilduser, function (err, res) {
                if (err) {
                  console.log(err);
                  resolve({ status: 0, message: "Something went to wrong" });
                } else {
                  res.forEach(function (r) {
                    record.push(r.u_id);
                  });
                  record.push(data.id);
                  resolve({
                    record: record,
                    type: result[0].user_type,
                    branch_id: result[0].branch_id,
                  });
                }
              });
            } else if (result[0].user_type == 2) {
              let branchallocation = await getzonemanagerbranch(data.id);
              // Jil After Form Link get Lead with their Responsible Person
              getallchilduser = `select * from users where ((p_u_id=${data.id} OR p_u_id=1 OR p_u_id IN (SELECT users.u_id  from users where users.branch_id IN (${branchallocation.branchdata}))) and branch_id IN (${branchallocation.branchdata})) and deleted=0`;
              // getallchilduser = `select * from users where ((p_u_id=${data.id} OR p_u_id=1) and branch_id=${result[0].branch_id}) and deleted=0`;
              con.query(getallchilduser, function (err, res) {
                if (err) {
                  console.log(err);
                  resolve({ status: 0, message: "Something went to wrong" });
                } else {
                  res.forEach(function (r) {
                    record.push(r.u_id);
                  });
                  resolve({
                    record: record,
                    type: result[0].user_type,
                    branch_id: result[0].branch_id,
                  });
                }
              });
            } else {
              resolve({
                type: result[0].user_type,
                branch_id: result[0].branch_id,
              });
            }
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });

    // getleadquery = `SELECT *,(SELECT b_name FROM branch WHERE branch.branch_id = customer.branch_id)as a_branch_name,(SELECT u_name FROM users WHERE users.u_id = customer.u_id)as a_user_name,(SELECT u_name FROM users WHERE users.u_id = customer.created_id)as createdBy FROM customer_comment,customer WHERE customer.c_id=customer_comment.c_id and n_f_date='${tDate}' and customer_comment.read_status=0`;
    getleadquery = `SELECT *,(SELECT b_name FROM branch WHERE branch.branch_id = customer.branch_id)as a_branch_name,(SELECT u_name FROM users WHERE users.u_id = customer.u_id)as a_user_name,(SELECT u_name FROM users WHERE users.u_id = customer.created_id)as createdBy FROM lead_followup,customer WHERE customer.c_id=lead_followup.c_id and (STR_TO_DATE("${moment()
      .add(+4, "minute")
      .format(
        "DD-MM-YYYY HH:mm:ss"
      )}", "%d-%m-%Y %H:%i:%s") >= STR_TO_DATE(lead_followup.n_f_date, "%d-%m-%Y %H:%i:%s")) and lead_followup.read_status=0`;

    if (response.type == 3) {
      getleadquery += ` and lead_followup.u_id='${data.id}'`;
    }
    if (response.type == 1) {
      getleadquery += ` and lead_followup.u_id IN(${record})`;
    }
    let response1 = await new Promise((resolve, reject) => {
      con.query(getleadquery, function (err, lres) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (lres.length > 0) {
            con.query(getleadquery, function (err, cres) {
              if (err) {
                console.log(err);
                resolve({ status: 0, message: "Something went to wrong" });
              } else {
                if (cres.length > 0) {
                  resolve({
                    status: 1,
                    counter: lres.length,
                    data: lres,
                  });
                } else {
                  resolve({
                    status: 0,
                    counter: 0,
                    data: [],
                  });
                }
              }
            });
          } else {
            resolve({
              status: 0,
              counter: 0,
              data: [],
            });
          }
        }
      });
    });
    return response1;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function CustomerFollowRead(data) {
  try {
    sql = `UPDATE customer_comment SET read_status = 1 WHERE c_c_id = ${data.c_c_id}`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, async function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.affectedRows > 0) {
            resolve({
              status: 1,
              message: "Notification Read successfully",
            });
          } else {
            resolve({ status: 0, message: "Something went to wrong" });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function getCustomerFollowupCounter(data) {
  try {
    sql = `SELECT COUNT(*) as tsource,(SELECT name FROM attributes WHERE attributes.attribute_id=lead_followup.source_id)as source_name FROM lead_followup where (lead_id=${data.l_id} or c_id=${data.c_id}) `;
    sql += " GROUP by source_id";
    let response = await new Promise(async (resolve, reject) => {
      con.query(sql, function (err, res) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (res.length > 0) {
            resolve({
              status: 1,
              data: res,
            });
          } else {
            resolve({
              status: 0,
              data: [],
            });
          }
        }
      });
    });
    return response;
  } catch (err) {
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function searchAttribute(data) {
  try {
    let sql = "";
    sql = `SELECT *,(row_number() over ( order by attributes.attribute_id DESC) ) AS row_no FROM attributes where`;
    if (
      typeof data.type != "undefined" &&
      data.type != "" &&
      data.type != 0 &&
      (data.name == undefined || data.name == "")
    ) {
      sql += `  attributes.type="${data.type}"`;
    }
    if (
      data.type == undefined &&
      typeof data.name != undefined &&
      data.name != ""
    ) {
      sql += ` attributes.name like '%${data.name}%'`;
    }
    if (
      typeof data.type != "undefined" &&
      data.type != "" &&
      data.type != 0 &&
      typeof data.name != "undefined" &&
      data.name != ""
    ) {
      sql += ` attributes.type="${data.type}" and attributes.name like '%${data.name}%'`;
    }
    countquery = sql;
    sql += ` ORDER BY attribute_id DESC limit ${(data.page - 1) * data.perpage
      },${data.perpage}`;

    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            con.query(countquery, function (err, cres) {
              if (err) {
                console.log(err);
                resolve({ status: 0, message: "Something went to wrong" });
              } else {
                if (cres.length > 0) {
                  resolve({
                    status: 1,
                    aData: result,
                    trows: cres.length,
                  });
                }
              }
            });
            // resolve({
            //   status: 1,
            //   aData: result,
            // });
          } else {
            resolve({
              status: 1,
              aData: [],
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}
//0304
async function getApostilleListBycid(data) {
  try {
    let apostillePaginate = `SELECT COUNT(details.detail_id) as trows
FROM details,apostille,customer WHERE customer.c_id=apostille.c_id and details.service_id=apostille.a_id  AND details.service_type=17 AND details.deleted = 0  AND apostille.deleted = 0 AND customer.deleted = 0  AND  customer.is_cancel = 0 AND apostille.c_id = ${data.c_id}`;

    let sql = `SELECT *,(SELECT SUM(receive_amt) FROM draft_payment  WHERE draft_payment.c_id = customer.c_id and draft_payment.deleted=0 and draft_payment.receive_amt!=0  and draft_payment.approved_status =0 and draft_payment.deleted = 0 ) as total_draft,details.under_process_date AS process_date,(SELECT name FROM attributes WHERE attributes.attribute_id  = apostille.a_type)as apostille_type,(SELECT c_date FROM customer WHERE customer.c_id =apostille.c_id)as r_date,(SELECT name FROM attributes WHERE attributes.attribute_id =apostille.a_country)as apostille_country,(SELECT name FROM attributes WHERE attributes.attribute_id =details.d_c_id)as apostille_certificate,(SELECT c_prefix FROM customer WHERE customer.c_id=apostille.c_id) AS customer_prefix,(SELECT c_name FROM customer WHERE customer.c_id=apostille.c_id) AS customer_name,(SELECT c_s_type FROM customer WHERE customer.c_id=apostille.c_id) AS c_s_type,
    (SELECT c_id FROM customer WHERE customer.c_id=apostille.c_id) as my_C_id,
    (SELECT branch_id FROM customer WHERE customer.c_id=apostille.c_id) AS branch_id,(SELECT u_id FROM customer WHERE customer.c_id=apostille.c_id) AS cuid,(SELECT user_type FROM users where users.u_id  = (SELECT u_id FROM customer WHERE customer.c_id=apostille.c_id)) as cutype,
    (SELECT payment.due_amt FROM payment where payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=apostille.c_id) ORDER BY payment.payment_id DESC LIMIT 1) as my_Due_Amt,
    (SELECT payment.paid_amt FROM payment where payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=apostille.c_id) ORDER BY payment.payment_id DESC LIMIT 1) as my_paid_amt,
    (SELECT payment.net_amt FROM payment where payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=apostille.c_id) ORDER BY payment.payment_id DESC LIMIT 1) as my_net_amt,
    (SELECT payment.tds_amt FROM payment where payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=apostille.c_id) ORDER BY payment.payment_id DESC LIMIT 1) as my_tds_amt,
    (SELECT draft_payment.d_p_id FROM draft_payment where draft_payment.deleted=0 and draft_payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=apostille.c_id) and draft_payment.approved_status=0 and draft_payment.due_amt=0 ORDER BY draft_payment.d_p_id DESC LIMIT 1) as Draf_payment
    FROM details,apostille,customer WHERE customer.c_id=apostille.c_id and details.service_id=apostille.a_id  AND details.service_type=17 AND details.deleted = 0  AND apostille.deleted = 0 AND customer.deleted = 0  AND  customer.is_cancel = 0 AND apostille.c_id = ${data.c_id}`;
    sql += ` ORDER BY detail_id  DESC limit ${(data.page - 1) * data.perPage},${data.perPage
      }`;
    let resp = await new Promise((resolve, reject) => {
      con.query(apostillePaginate, function (err1, lres1) {
        if (err1) {
          console.log(err1);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (lres1.length > 0) {
            resolve({
              status: 1,
              t_rows: lres1[0].trows,
            });
          } else {
            resolve({
              status: 0,
              data: [],
            });
          }
        }
      });
    });
    let response1 = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              data: result,
              trows: resp.t_rows,
            });
          } else {
            resolve({
              status: 0,
              data: [],
            });
          }
        }
      });
    });
    return response1;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}
//0304
async function getTranslationListBycid(data) {
  try {
    let translationPaginate = `SELECT  COUNT(details.detail_id) as trows FROM details,translation,customer  WHERE customer.c_id=translation.c_id and details.service_id=translation.a_id  AND details.service_type=20  AND details.deleted = 0  AND translation.deleted = 0  AND customer.deleted = 0 AND translation.c_id = ${data.c_id}`;

    let sql = `SELECT *,(SELECT SUM(receive_amt) FROM draft_payment  WHERE draft_payment.c_id = customer.c_id and draft_payment.deleted=0 and draft_payment.receive_amt!=0  and draft_payment.approved_status =0 and draft_payment.deleted = 0 ) as total_draft,(SELECT name FROM attributes WHERE attributes.attribute_id  =translation.a_type)as translation_type,(SELECT c_date FROM customer WHERE customer.c_id =translation.c_id)as r_date,(SELECT name FROM attributes WHERE attributes.attribute_id =translation.a_country)as translation_country,(SELECT name FROM attributes WHERE attributes.attribute_id =details.d_c_id)as translation_certificate,(SELECT c_prefix FROM customer WHERE customer.c_id=translation.c_id) AS customer_prefix,(SELECT u_id FROM customer WHERE customer.c_id=translation.c_id) AS cuid,(SELECT c_name FROM customer WHERE customer.c_id=translation.c_id) AS customer_name,(SELECT c_s_type FROM customer WHERE customer.c_id=translation.c_id) AS c_s_type,
    (SELECT c_id FROM customer WHERE customer.c_id=translation.c_id) as my_C_id,
    (SELECT u_id FROM customer WHERE customer.c_id=translation.c_id) AS cuid,(SELECT user_type FROM users where users.u_id  = (SELECT u_id FROM customer WHERE customer.c_id=translation.c_id)) as cutype,
    (SELECT payment.due_amt FROM payment where payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=translation.c_id) ORDER BY payment.payment_id DESC LIMIT 1) as my_Due_Amt,
    (SELECT payment.paid_amt FROM payment where payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=translation.c_id) ORDER BY payment.payment_id DESC LIMIT 1) as my_paid_amt,
    (SELECT payment.net_amt FROM payment where payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=translation.c_id) ORDER BY payment.payment_id DESC LIMIT 1) as my_net_amt,
    (SELECT payment.tds_amt FROM payment where payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=translation.c_id) ORDER BY payment.payment_id DESC LIMIT 1) as my_tds_amt,
    (SELECT draft_payment.d_p_id FROM draft_payment where draft_payment.deleted=0 and draft_payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=translation.c_id) and draft_payment.approved_status=0 and draft_payment.due_amt=0 ORDER BY draft_payment.d_p_id DESC LIMIT 1) as Draf_payment  FROM details,translation,customer  WHERE customer.c_id=translation.c_id and details.service_id=translation.a_id  AND details.service_type=20  AND details.deleted = 0  AND translation.deleted = 0  AND customer.deleted = 0 AND translation.c_id = ${data.c_id}`;
    sql += ` ORDER BY detail_id  DESC limit ${(data.page - 1) * data.perPage},${data.perPage
      }`;
    let resp = await new Promise((resolve, reject) => {
      con.query(translationPaginate, function (err1, lres1) {
        if (err1) {
          console.log(err1);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (lres1.length > 0) {
            resolve({
              status: 1,
              t_rows: lres1[0].trows,
            });
          } else {
            resolve({
              status: 0,
              data: [],
            });
          }
        }
      });
    });
    let response1 = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              data: result,
              trows: resp.t_rows,
            });
          } else {
            resolve({
              status: 0,
              data: [],
            });
          }
        }
      });
    });
    return response1;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}
//0304
async function getVisaListBycid(data) {
  try {
    let visaPaginate = `SELECT COUNT(details.detail_id) as trows FROM details,visa,customer WHERE customer.c_id=visa.c_id AND details.service_id=visa.v_id AND details.service_type=8 AND details.deleted = 0  AND visa.deleted = 0  AND customer.deleted = 0 AND visa.c_id = ${data.c_id}`;

    sql = `SELECT *,(SELECT SUM(receive_amt) FROM draft_payment  WHERE draft_payment.c_id = customer.c_id and draft_payment.deleted=0 and draft_payment.receive_amt!=0  and draft_payment.approved_status =0 and draft_payment.deleted = 0 ) as total_draft,(SELECT name FROM attributes WHERE attributes.attribute_id  =visa.v_type)as visa_type,(SELECT name FROM attributes WHERE attributes.attribute_id  =details.d_c_id)as visa_country,(SELECT c_prefix FROM customer WHERE customer.c_id=visa.c_id) AS customer_prefix,(SELECT u_id FROM customer WHERE customer.c_id=visa.c_id) AS cuid,(SELECT c_name FROM customer WHERE customer.c_id=visa.c_id) AS customer_name,(SELECT c_id FROM customer WHERE customer.c_id=visa.c_id) as my_C_id,
    (SELECT branch_id FROM customer WHERE customer.c_id=visa.c_id) AS branch_id,(SELECT u_id FROM customer WHERE customer.c_id=visa.c_id) AS cuid,(SELECT user_type FROM users where users.u_id  = (SELECT u_id FROM customer WHERE customer.c_id=visa.c_id)) as cutype,
    (SELECT payment.due_amt FROM payment where payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=visa.c_id) ORDER BY payment.payment_id DESC LIMIT 1) as my_Due_Amt,
    (SELECT payment.paid_amt FROM payment where payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=visa.c_id) ORDER BY payment.payment_id DESC LIMIT 1) as my_paid_amt,
    (SELECT payment.net_amt FROM payment where payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=visa.c_id) ORDER BY payment.payment_id DESC LIMIT 1) as my_net_amt,
    (SELECT payment.tds_amt FROM payment where payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=visa.c_id) ORDER BY payment.payment_id DESC LIMIT 1) as my_tds_amt,
    (SELECT draft_payment.d_p_id FROM draft_payment where draft_payment.deleted=0 and draft_payment.c_id = (SELECT c_id FROM customer WHERE customer.c_id=visa.c_id) and draft_payment.approved_status=0 and draft_payment.due_amt=0 ORDER BY draft_payment.d_p_id DESC LIMIT 1) as Draf_payment FROM details,visa,customer WHERE customer.c_id=visa.c_id AND details.service_id=visa.v_id AND details.service_type=8 AND details.deleted = 0  AND visa.deleted = 0  AND customer.deleted = 0 AND visa.c_id = ${data.c_id}`;
    sql += ` ORDER BY detail_id  DESC limit ${(data.page - 1) * data.perPage},${data.perPage
      }`;
    let resp = await new Promise((resolve, reject) => {
      con.query(visaPaginate, function (err1, lres1) {
        if (err1) {
          console.log(err1);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (lres1.length > 0) {
            resolve({
              status: 1,
              t_rows: lres1[0].trows,
            });
          } else {
            resolve({
              status: 0,
              data: [],
            });
          }
        }
      });
    });
    let response1 = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              data: result,
              trows: resp.t_rows,
            });
          } else {
            resolve({
              status: 0,
              data: [],
            });
          }
        }
      });
    });
    return response1;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function updateUnderProcessDate(data) {
  try {
    let record = [];
    if (data.c_s_type == 8) {
      sqlll = `SELECT v_id as a_id FROM visa where c_id=${data.c_id}`;
    } else if (data.c_s_type == 10) {
      sqlll = `SELECT * FROM attestation where c_id=${data.c_id}`;
    } else if (data.c_s_type == 17) {
      sqlll = `SELECT * FROM apostille where c_id=${data.c_id}`;
    } else if (data.c_s_type == 20) {
      sqlll = `SELECT * FROM translation where c_id=${data.c_id}`;
    }

    let ress = await new Promise((resolve, reject) => {
      con.query(sqlll, async function (err1, result1) {
        if (err1) {
          console.log(err1);
          resolve({ status: 0, message: "Customer Not Updated" });
        } else {
          if (result1.length > 0) {
            result1.forEach(function (r) {
              record.push(r.a_id);
            });
            resolve({
              status: 1,
              result: record,
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });

    sql = `UPDATE details SET under_process_date='${data.under_process_date}' WHERE service_id in(${ress.result}) and service_type='${data.c_s_type}'`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.affectedRows > 0) {
            sql5 = `Update customer SET under_process_date='${data.under_process_date}' WHERE c_id = ${data.c_id} and deleted =0`;
            con.query(sql5, async function (err1, resul) {
              if (err1) {
                console.log(err1);
                resolve({
                  status: 0,
                  message: "Something went to wrong",
                });
              } else {
                if (resul.affectedRows > 0) {
                  resolve({
                    status: 1,
                    message: "Customer updated successfully....",
                  });
                }
              }
            });
            resolve({
              status: 1,
              message: "Start Process Date updated successfully",
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

//2003
async function sendMailofApplicationStatus() {
  try {
    let curr_date = moment().format("DD-MM-YYYY");
    let oneday = moment().add(-1, "d").format("DD-MM-YYYY");
    let twoday = moment().add(-2, "d").format("DD-MM-YYYY");
    let threeday = moment().add(-3, "d").format("DD-MM-YYYY");
    let response = await new Promise(async (resolve, reject) => {
      sql = `SELECT customer.*,visa.v_id,details.detail_id,details.status_id,details.delivery_date,details.status_mail_date FROM customer,visa,details WHERE customer.c_id=visa.c_id AND details.status_id != 20 AND details.status_id != 16 AND details.status_id != 22 AND visa.v_id=details.service_id AND details.service_type=8 AND details.deleted=0 AND visa.deleted=0 AND  customer.is_cancel = 0 AND customer.is_block = 1 AND customer.deleted=0 GROUP BY customer.c_id 
        UNION  SELECT customer.*,attestation.a_id,details.detail_id,details.status_id,details.delivery_date,details.status_mail_date FROM customer,attestation,details WHERE customer.c_id=attestation.c_id AND attestation.a_id=details.service_id AND details.service_type=10  AND details.status_id != 20 AND details.status_id != 16 AND details.status_id != 22 AND  customer.is_cancel = 0 AND customer.is_block = 1 AND details.deleted=0 AND attestation.deleted=0 AND customer.deleted=0 GROUP BY customer.c_id 
        UNION SELECT customer.*,apostille.a_id,details.detail_id,details.status_id,details.delivery_date,details.status_mail_date FROM customer,apostille,details WHERE customer.c_id=apostille.c_id AND apostille.a_id=details.service_id AND details.service_type=17 AND details.deleted=0 AND details.status_id != 20 AND details.status_id != 16 AND details.status_id != 22 AND  apostille.deleted=0 AND customer.is_cancel = 0 AND customer.is_block = 1 AND customer.deleted=0 GROUP BY customer.c_id 
        UNION SELECT customer.*,translation.a_id,details.detail_id,details.status_id,details.delivery_date,details.status_mail_date FROM customer,translation,details WHERE customer.c_id=translation.c_id AND translation.a_id=details.service_id AND details.service_type=20 AND details.status_id != 20 AND details.status_id != 16 AND details.status_id != 22 AND details.deleted=0 AND translation.deleted=0  AND  customer.is_cancel = 0 AND customer.is_block = 1 AND customer.deleted=0 GROUP BY customer.c_id`;
      con.query(sql, async function (err, results) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (results.length > 0) {
            results.forEach(function (result) {
              resolve({
                status: 1,
                result: results,
              });
            });
          }
        }
      });
    });
    let record = [];
    response.result.map(async (k) => {
      record.push(k);
    });
    record.map(async (data, index) => {
      sqlllll = `select due_amt from payment where deleted=0 and invoice_status = 0 and c_id=${data.c_id} order by payment_id DESC limit 1`;
      let responsee = await new Promise((resolve, reject) => {
        con.query(sqlllll, async function (errr, resulttt) {
          if (errr) {
            console.log(errr);
            resolve({ status: 0, message: "Something went to wrong" });
          } else {
            if (resulttt.length > 0) {
              resolve({ status: 1, result: resulttt[0].due_amt });
            }
          }
        });
      });

      sql123 = `select awb_no,courier_id,(select name from attributes where attributes.attribute_id= details.courier_id)as courier_name  from details where deleted=0 and  detail_id = ${data.detail_id}`;
      let res123 = await new Promise((resolve, reject) => {
        con.query(sql123, async function (errr, resulttt) {
          if (errr) {
            console.log(errr);
            resolve({ status: 0, message: "Something went to wrong" });
          } else {
            if (resulttt.length > 0) {
              resolve({
                status: 1,
                awb_no: resulttt[0].awb_no,
                courier_name: resulttt[0].courier_name,
              });
            }
          }
        });
      });

      let etemp = 0;

      if (data.status_id == 14 && data.status_mail_date == threeday) {
        etemp = parseInt(19);
      }
      if (data.status_id == 15 && data.status_mail_date == threeday) {
        etemp = parseInt(20);
      }
      // if (data.status_id == 16 && data.status_mail_date == twoday) {
      //   etemp = parseInt(21);
      // }
      if (data.status_id == 17 && data.status_mail_date == threeday) {
        etemp = parseInt(22);
      }
      if (data.status_id == 19 && data.status_mail_date == threeday) {
        etemp = parseInt(24);
      }
      // if (data.status_id == 20 && data.status_mail_date == oneday) {
      //   etemp = parseInt(25);
      // }

      // if (data.status_id == 22) {
      //   if (data.status_mail_date == oneday) {
      //     if (responsee.result != "0") {
      //       etemp = parseInt(27);
      //     } else {
      //       if (data.c_tax == 0) {
      //         if (
      //           data.d_address != "" ||
      //           data.d_address != null ||
      //           data.d_address != undefined
      //         ) {
      //           etemp = parseInt(28);
      //         } else {
      //           etemp = parseInt(223);
      //           // etemp = parseInt(161);
      //         }
      //       } else {
      //         if (
      //           data.d_address != "" ||
      //           data.d_address != null ||
      //           data.d_address != undefined
      //         ) {
      //           etemp = parseInt(230);
      //           // etemp = parseInt(163);
      //         } else {
      //           etemp = parseInt(231);
      //           // etemp = parseInt(164);
      //         }
      //       }
      //     }
      //   }
      // }

      let senderMailSetting = await sendmessage.getEmailSetting(
        data.created_id
      );

      sqlll = `SELECT u_email FROM users WHERE u_id = ${data.created_id} `;
      let ccmail = await new Promise((resolve, reject) => {
        con.query(sqlll, async function (err1, result1) {
          if (err1) {
            console.log(err1);
            resolve({ status: 0, message: "Something went to wrong" });
          } else {
            if (result1.length > 0) {
              resolve({ status: 1, result: result1[0].u_email });
            } else {
              resolve({
                status: 0,
                message: "Something went to wrong",
              });
            }
          }
        });
      });

      if (data.c_s_type == 10) {
        sqll = `Select attestation.*,details.d_c_id,details.service_type,(SELECT name FROM attributes WHERE attribute_id=details.status_id)as status_name ,(SELECT name FROM attributes WHERE attribute_id=details.d_c_id)as certificate_name,(SELECT name FROM attributes WHERE attribute_id=attestation.a_country)as country_name,(SELECT name FROM attributes WHERE attribute_id=attestation.a_type)as type FROM attestation RIGHT JOIN details ON  attestation.a_id=details.service_id WHERE  details.service_type=10 AND attestation.c_id = ${data.c_id} and attestation.deleted = 0 `;
      } else if (data.c_s_type == 8) {
        sqll = `Select visa.*,details.d_c_id,details.service_type,(SELECT name FROM attributes WHERE attribute_id=details.status_id)as status_name,(SELECT name FROM attributes WHERE attribute_id=details.d_c_id)as country_name,(SELECT name FROM attributes WHERE attribute_id=visa.v_type)as type,(SELECT GROUP_CONCAT(attributes.name SEPARATOR ',') as name FROM attributes where FIND_IN_SET (attributes.attribute_id , visa.v_supporting_doc)) as certificate_name  FROM visa RIGHT JOIN details ON  visa.v_id=details.service_id   WHERE   details.service_type=8 AND visa.c_id = ${data.c_id} and visa.deleted = 0`;
      } else if (data.c_s_type == 17) {
        sqll = `Select apostille.*,details.d_c_id,details.service_type,(SELECT name FROM attributes WHERE attribute_id=details.status_id)as status_name,(SELECT name FROM attributes WHERE attribute_id=details.d_c_id)as certificate_name,(SELECT name FROM attributes WHERE attribute_id=apostille.a_country)as country_name,(SELECT name FROM attributes WHERE attribute_id=apostille.a_type)as type  FROM apostille RIGHT JOIN details ON apostille.a_id=details.service_id  WHERE  details.service_type=17 AND apostille.c_id = ${data.c_id} and apostille.deleted = 0`;
      } else {
        sqll = `Select translation.*,details.d_c_id,details.service_type,(SELECT name FROM attributes WHERE attribute_id=details.status_id)as status_name,(SELECT name FROM attributes WHERE attribute_id=details.d_c_id)as certificate_name,(SELECT name FROM attributes WHERE attribute_id=translation.a_country)as country_name,(SELECT name FROM attributes WHERE attribute_id=translation.a_type)as type  FROM translation RIGHT JOIN details ON translation.a_id=details.service_id  WHERE  details.service_type=20 AND translation.c_id = ${data.c_id} and translation.deleted = 0`;
      }
      con.query(sqll, async function (errr, resultss) {
        if (errr) {
          console.log("Something went wrong");
        }
        if (resultss.length > 0) {
          const getrow = () => {
            let rows = "";
            resultss.map((a) => {
              a.service_type == 8
                ? (rows =
                  rows +
                  `<tr><td style="border: 1px solid #333;padding:5px;">${a.v_name}</td>
  <td style="border: 1px solid #333;padding:5px;">${a.type}</td>
  <td style="border: 1px solid #333;padding:5px;">${a.country_name}</td>
  <td style="border: 1px solid #333;padding:5px;">${a.certificate_name}</td>
  <td style="border: 1px solid #333;padding:5px;">${a.status_name}</td></tr>`)
                : (rows =
                  rows +
                  `<tr><td style="border: 1px solid #333;padding:5px;">${a.a_name}</td>
  <td style="border: 1px solid #333;padding:5px;">${a.type}</td>
  <td style="border: 1px solid #333;padding:5px;">${a.country_name}</td>
  <td style="border: 1px solid #333;padding:5px;">${a.certificate_name}</td>
  <td style="border: 1px solid #333;padding:5px;">${a.status_name}</td></tr>`);
            });
            return rows;
          };
          let table1 = `<div>
<table style="border-collapse: collapse;" >
<tr>
<th style="border: 1px solid #333;padding:5px;">
Name
</th>
<th style="border: 1px solid #333;padding:5px;">Type</th>
<th style="border: 1px solid #333;padding:5px;">Country</th>
<th style="border: 1px solid #333;padding:5px;">Certificate</th>
<th style="border: 1px solid #333;padding:5px;">Status</th>
</tr>
${getrow()}
</table>
</div>`;

          let message = await sendmessage.getTemplate(etemp);
          if (message.status != 0) {
            message.template = message.template.replace(
              "{:name:}",
              data.c_prefix + " " + data.c_name
            );
            message.template = message.template.replace("{:table:}", table1);
            message.template = message.template.replace(
              "{:d_address:}",
              data.d_address
            );
            message.template = message.template.replace(
              "{:due_amt:}",
              responsee.result
            );
            message.template = message.template.replace(
              "{:awb_no:}",
              res123.awb_no
            );
            message.template = message.template.replace(
              "{:courier:}",
              res123.courier_name
            );
            let mess =
              (message.header == 1
                ? typeof senderMailSetting.email_template_header !=
                  undefined && senderMailSetting.email_template_header != undefined &&
                  senderMailSetting.email_template_header != null
                  ? senderMailSetting.email_template_header
                  : ""
                : "") +
              message.template +
              (message.b_d_id != 0
                ? message.b_d_id == 1
                  ? senderMailSetting.gst_bankdetails
                  : message.b_d_id == 2
                    ? senderMailSetting.ngst_bankdetails
                    : message.b_d_id == 3
                      ? senderMailSetting.general_bankdetails
                      : ""
                : "") +
              // (data.created_id == 1
              //   ? data.c_tax == 0
              //     ? senderMailSetting.bank_details
              //     : senderMailSetting.nongst_bank_details
              //   : data.c_tax == 0
              //     ? senderMailSetting.b_bank_details
              //     : senderMailSetting.b_nongst_bank_deatils) +
              (message.footer == 1
                ? senderMailSetting.email_template_footer
                : "") +
              (message.signature == 1 ? senderMailSetting.email_signature : "");
            CCMailSetting = await sendmessage.getEmailSetting(1);
            sendmessagenow = sendmessage.customermessagesend(
              senderMailSetting,
              data.c_email,
              mess,
              `${message.subject} || ${data.c_prefix + " " + data.c_name}`,
              ccmail.result, //CCMailSetting.e_username,  // user mail
              ccmail.result, // reply mail
              1
            );
          }
        }
      });
      let sql2 = `UPDATE details SET status_mail_date='${curr_date}' WHERE detail_id = ${data.detail_id} `;
      con.query(sql2, async function (errr, resulttt) {
        if (errr) {
          console.log(errr);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (resulttt.length > 0) {
            resolve({ status: 1, message: "Updated Successfully..." });
          }
        }
      });
    });
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}
//2003
async function sendMailofHoldApplicationStatus() {
  try {
    let curr_date = moment().format("DD-MM-YYYY");
    let oneday = moment().add(-1, "d").format("DD-MM-YYYY");
    let twoday = moment().add(-2, "d").format("DD-MM-YYYY");
    let threeday = moment().add(-3, "d").format("DD-MM-YYYY");
    let response = await new Promise(async (resolve, reject) => {
      sql = `SELECT customer.*,visa.v_id,details.detail_id,details.status_id,details.delivery_date,details.status_mail_date FROM customer,visa,details WHERE customer.c_id=visa.c_id AND visa.v_id=details.service_id AND details.service_type=8 AND (details.status_id = 20 OR details.status_id = 16)  AND details.deleted=0 AND visa.deleted=0 AND  customer.is_cancel = 0 AND customer.is_block = 1 AND customer.deleted=0 GROUP BY customer.c_id 
        UNION  SELECT customer.*,attestation.a_id,details.detail_id,details.status_id,details.delivery_date,details.status_mail_date FROM customer,attestation,details WHERE customer.c_id=attestation.c_id AND attestation.a_id=details.service_id AND details.service_type=10  AND (details.status_id = 20 OR details.status_id = 16)  AND  customer.is_cancel = 0 AND customer.is_block = 1 AND details.deleted=0 AND attestation.deleted=0 AND customer.deleted=0 GROUP BY customer.c_id 
        UNION SELECT customer.*,apostille.a_id,details.detail_id,details.status_id,details.delivery_date,details.status_mail_date FROM customer,apostille,details WHERE customer.c_id=apostille.c_id AND apostille.a_id=details.service_id AND details.service_type=17 AND  details.deleted=0 AND (details.status_id = 20 OR details.status_id = 16)  AND apostille.deleted=0 AND customer.is_cancel = 0 AND customer.is_block = 1 AND customer.deleted=0 GROUP BY customer.c_id 
        UNION SELECT customer.*,translation.a_id,details.detail_id,details.status_id,details.delivery_date,details.status_mail_date FROM customer,translation,details WHERE customer.c_id=translation.c_id AND translation.a_id=details.service_id AND details.service_type=20 AND (details.status_id = 20 OR details.status_id = 16)  AND  details.deleted=0 AND translation.deleted=0  AND  customer.is_cancel = 0 AND customer.is_block = 1 AND customer.deleted=0 GROUP BY customer.c_id`;
      con.query(sql, async function (err, results) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (results.length > 0) {
            results.forEach(function (result) {
              resolve({
                status: 1,
                result: results,
              });
            });
          }
        }
      });
    });
    let record = [];
    response.result.map(async (k) => {
      record.push(k);
    });
    record.map(async (data, index) => {
      draftpaymentSql = `SELECT receive_amt FROM draft_payment join customer on draft_payment.c_id = customer.c_id WHERE draft_payment.deleted=0 and draft_payment.receive_amt!=0 and customer.c_id = ${data.c_id} and draft_payment.approved_status =0 and draft_payment.deleted = 0`;
      let draftRes = await new Promise((resolve, reject) => {
        con.query(draftpaymentSql, async function (err, result) {
          if (err) {
            console.log(err);
          } else {
            if (result.length > 0) {
              let totalDraft = 0;
              for (let i = 0; i < result.length; i++) {
                totalDraft =
                  parseInt(totalDraft) + parseInt(result[i].receive_amt);
              }
              resolve({ status: 1, result: totalDraft });
            } else {
              resolve({ status: 1, result: 0 });
            }
          }
        });
      });

      sqlllll = `select due_amt,paid_amt from payment where deleted=0 and invoice_status = 0 and c_id=${data.c_id} order by payment_id DESC limit 1`;
      let responsee = await new Promise((resolve, reject) => {
        con.query(sqlllll, async function (errr, resulttt) {
          if (errr) {
            console.log(errr);
            resolve({ status: 0, message: "Something went to wrong" });
          } else {
            if (resulttt.length > 0) {
              resolve({
                status: 1,
                result: resulttt[0].due_amt,
                paid_amt: resulttt[0].paid_amt,
              });
            }
          }
        });
      });

      sql123 = `select awb_no,courier_id,(select name from attributes where attributes.attribute_id= details.courier_id)as courier_name  from details where deleted=0 and  detail_id = ${data.detail_id}`;
      let res123 = await new Promise((resolve, reject) => {
        con.query(sql123, async function (errr, resulttt) {
          if (errr) {
            console.log(errr);
            resolve({ status: 0, message: "Something went to wrong" });
          } else {
            if (resulttt.length > 0) {
              resolve({
                status: 1,
                awb_no: resulttt[0].awb_no,
                courier_name: resulttt[0].courier_name,
              });
            }
          }
        });
      });
      if (draftRes.result == 0 && responsee.paid_amt == 0) {
        let etemp = 0;

        if (data.status_id == 16 && data.status_mail_date == twoday) {
          etemp = parseInt(21);
        }

        if (data.status_id == 20 && data.status_mail_date == oneday) {
          if (data.c_tax == 0) {
            etemp = parseInt(25);
          } else {
            etemp = parseInt(281);
          }
        }
        let senderMailSetting = await sendmessage.getEmailSetting(
          data.created_id
        );

        sqlll = `SELECT u_email FROM users WHERE u_id = ${data.created_id} `;
        let ccmail = await new Promise((resolve, reject) => {
          con.query(sqlll, async function (err1, result1) {
            if (err1) {
              console.log(err1);
              resolve({ status: 0, message: "Something went to wrong" });
            } else {
              if (result1.length > 0) {
                resolve({ status: 1, result: result1[0].u_email });
              } else {
                resolve({
                  status: 0,
                  message: "Something went to wrong",
                });
              }
            }
          });
        });

        if (data.c_s_type == 10) {
          sqll = `Select attestation.*,details.d_c_id,details.service_type,(SELECT name FROM attributes WHERE attribute_id=details.status_id)as status_name ,(SELECT name FROM attributes WHERE attribute_id=details.d_c_id)as certificate_name,(SELECT name FROM attributes WHERE attribute_id=attestation.a_country)as country_name,(SELECT name FROM attributes WHERE attribute_id=attestation.a_type)as type FROM attestation RIGHT JOIN details ON  attestation.a_id=details.service_id WHERE  details.service_type=10 AND attestation.c_id = ${data.c_id} and attestation.deleted = 0 `;
        } else if (data.c_s_type == 8) {
          sqll = `Select visa.*,details.d_c_id,details.service_type,(SELECT name FROM attributes WHERE attribute_id=details.status_id)as status_name,(SELECT name FROM attributes WHERE attribute_id=details.d_c_id)as country_name,(SELECT name FROM attributes WHERE attribute_id=visa.v_type)as type,(SELECT GROUP_CONCAT(attributes.name SEPARATOR ',') as name FROM attributes where FIND_IN_SET (attributes.attribute_id , visa.v_supporting_doc)) as certificate_name  FROM visa RIGHT JOIN details ON  visa.v_id=details.service_id   WHERE   details.service_type=8 AND visa.c_id = ${data.c_id} and visa.deleted = 0`;
        } else if (data.c_s_type == 17) {
          sqll = `Select apostille.*,details.d_c_id,details.service_type,(SELECT name FROM attributes WHERE attribute_id=details.status_id)as status_name,(SELECT name FROM attributes WHERE attribute_id=details.d_c_id)as certificate_name,(SELECT name FROM attributes WHERE attribute_id=apostille.a_country)as country_name,(SELECT name FROM attributes WHERE attribute_id=apostille.a_type)as type  FROM apostille RIGHT JOIN details ON apostille.a_id=details.service_id  WHERE  details.service_type=17 AND apostille.c_id = ${data.c_id} and apostille.deleted = 0`;
        } else {
          sqll = `Select translation.*,details.d_c_id,details.service_type,(SELECT name FROM attributes WHERE attribute_id=details.status_id)as status_name,(SELECT name FROM attributes WHERE attribute_id=details.d_c_id)as certificate_name,(SELECT name FROM attributes WHERE attribute_id=translation.a_country)as country_name,(SELECT name FROM attributes WHERE attribute_id=translation.a_type)as type  FROM translation RIGHT JOIN details ON translation.a_id=details.service_id  WHERE  details.service_type=20 AND translation.c_id = ${data.c_id} and translation.deleted = 0`;
        }
        con.query(sqll, async function (errr, resultss) {
          if (errr) {
            console.log("Something went wrong");
          }
          if (resultss.length > 0) {
            const getrow = () => {
              let rows = "";
              resultss.map((a) => {
                a.service_type == 8
                  ? (rows =
                    rows +
                    `<tr><td style="border: 1px solid #333;padding:5px;">${a.v_name}</td>
  <td style="border: 1px solid #333;padding:5px;">${a.type}</td>
  <td style="border: 1px solid #333;padding:5px;">${a.country_name}</td>
  <td style="border: 1px solid #333;padding:5px;">${a.certificate_name}</td>
  <td style="border: 1px solid #333;padding:5px;">${a.status_name}</td></tr>`)
                  : (rows =
                    rows +
                    `<tr><td style="border: 1px solid #333;padding:5px;">${a.a_name}</td>
  <td style="border: 1px solid #333;padding:5px;">${a.type}</td>
  <td style="border: 1px solid #333;padding:5px;">${a.country_name}</td>
  <td style="border: 1px solid #333;padding:5px;">${a.certificate_name}</td>
  <td style="border: 1px solid #333;padding:5px;">${a.status_name}</td></tr>`);
              });
              return rows;
            };
            let table1 = `<div>
<table style="border-collapse: collapse;" >
<tr>
<th style="border: 1px solid #333;padding:5px;">
Name
</th>
<th style="border: 1px solid #333;padding:5px;">Type</th>
<th style="border: 1px solid #333;padding:5px;">Country</th>
<th style="border: 1px solid #333;padding:5px;">Certificate</th>
<th style="border: 1px solid #333;padding:5px;">Status</th>
</tr>
${getrow()}
</table>
</div>`;

            let message = await sendmessage.getTemplate(etemp);
            if (message.status != 0) {
              message.template = message.template.replace(
                "{:name:}",
                data.c_prefix + " " + data.c_name
              );
              message.template = message.template.replace("{:table:}", table1);
              message.template = message.template.replace(
                "{:d_address:}",
                data.d_address
              );
              message.template = message.template.replace(
                "{:due_amt:}",
                responsee.result
              );
              message.template = message.template.replace(
                "{:awb_no:}",
                res123.awb_no
              );
              message.template = message.template.replace(
                "{:courier:}",
                res123.courier_name
              );
              let mess =
                (message.header == 1
                  ? typeof senderMailSetting.email_template_header !=
                    undefined && senderMailSetting.email_template_header != undefined &&
                    senderMailSetting.email_template_header != null
                    ? senderMailSetting.email_template_header
                    : ""
                  : "") +
                message.template +
                (message.b_d_id != 0
                  ? message.b_d_id == 1
                    ? senderMailSetting.gst_bankdetails
                    : message.b_d_id == 2
                      ? senderMailSetting.ngst_bankdetails
                      : message.b_d_id == 3
                        ? senderMailSetting.general_bankdetails
                        : ""
                  : "") +
                // (data.created_id == 1
                //   ? data.c_tax == 0
                //     ? senderMailSetting.bank_details
                //     : senderMailSetting.nongst_bank_details
                //   : data.c_tax == 0
                //     ? senderMailSetting.b_bank_details
                //     : senderMailSetting.b_nongst_bank_deatils) +
                (message.footer == 1
                  ? senderMailSetting.email_template_footer
                  : "") +
                (message.signature == 1
                  ? senderMailSetting.email_signature
                  : "");
              CCMailSetting = await sendmessage.getEmailSetting(1);
              sendmessagenow = sendmessage.customermessagesend(
                senderMailSetting,
                data.c_email,
                mess,
                `${message.subject} || ${data.c_prefix + " " + data.c_name}`,
                etemp != 281 && etemp != 25 && ccmail.result, //CCMailSetting.e_username,  // user mail
                ccmail.result, // reply mail
                1,
                "info@hyderabadattestation.com"
              );
            }
          }
        });
        let sql2 = `UPDATE details SET status_mail_date='${curr_date}' WHERE detail_id = ${data.detail_id} `;
        con.query(sql2, async function (errr, resulttt) {
          if (errr) {
            console.log(errr);
            resolve({ status: 0, message: "Something went to wrong" });
          } else {
            if (resulttt.length > 0) {
              resolve({ status: 1, message: "Updated Successfully..." });
            }
          }
        });
      }
    });
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function sendcronleadstatusmail() {
  try {
    let date_ob = moment().format("YYYY-MM-DD");
    let date = new Date(date_ob);
    date.setDate(date.getDate() - 2);
    let date1 = moment(date).format("DD-MM-YYYY");

    sql = `SELECT * FROM elead WHERE deleted = 0 and convert_status=0`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              result: result,
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    let record = [];
    response.result.map(async (k) => {
      record.push(k);
    });
    await setcronleadmailtemp(record);
    return record;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function setcronleadmailtemp(data1) {
  let curr_date = moment().format("DD-MM-YYYY");
  let oneday = moment().add(-1, "d").format("DD-MM-YYYY");
  let twoday = moment().add(-2, "d").format("DD-MM-YYYY");
  let threeday = moment().add(-3, "d").format("DD-MM-YYYY");
  let response = await new Promise(async (resolve, reject) => {
    let messa1 = [];
    data1.map(async (data, index) => {
      let etemp = 0;

      sqlllll = `select * from lead_cron_status where lead_id=${data.lead_id} and l_status=${data.l_status}`;
      let responsee = await new Promise((resolve, reject) => {
        con.query(sqlllll, async function (errr, resulttt) {
          if (errr) {
            console.log(errr);
            resolve({ status: 0, message: "Something went to wrong" });
          } else {
            if (resulttt.length > 0) {
              resolve({ status: 1, result: resulttt[0].counter });
            } else {
              resolve({ status: 1, result: 0 });
            }
          }
        });
      });
      let leadCustSql = `select login_u_id from lead_customer where l_id = ${data.lead_id} AND deleted = 0 `;
      let leadRes = await new Promise((resolve, reject) => {
        con.query(leadCustSql, function (lead_err, lead_result) {
          if (lead_err) {
            console.log(lead_err);
            resolve({ status: 0, message: "Something went to wrong" });
          } else {
            if (lead_result.length > 0) {
              resolve({
                status: 1,
                login_u_id: lead_result[0].login_u_id,
              });
            } else {
              resolve({
                status: 0,
                login_u_id: 0,
                message: "Something went to wrong",
              });
            }
          }
        });
      });
      if (
        data.l_status == 1 &&
        data.updated_date == twoday &&
        responsee.result < 2
      ) {
        etemp = parseInt(9);
      }
      if (
        data.l_status == 2 &&
        data.updated_date == twoday &&
        responsee.result < 2
      ) {
        etemp = parseInt(10);
      }
      if (
        data.l_status == 3 &&
        data.updated_date == twoday &&
        responsee.result < 2
      ) {
        etemp = parseInt(11);
      }
      if (
        data.l_status == 4 &&
        data.updated_date == threeday &&
        responsee.result < 2
      ) {
        etemp = parseInt(12);
      } else if (
        data.l_status == 5 &&
        data.updated_date == twoday &&
        responsee.result < 2
      ) {
        etemp = parseInt(13);
      } else if (
        data.l_status == 6 &&
        data.updated_date == oneday &&
        responsee.result < 1
      ) {
        etemp = parseInt(14);
      } else if (
        data.l_status == 615 &&
        data.performa_date == twoday &&
        responsee.result < 3 &&
        data.proforma_status == 1 &&
        data.convert_status == 0
      ) {
        etemp = parseInt(300);
      }
      let message = await sendmessage.getTemplate(etemp);
      let senderMailSetting = await sendmessage.getEmailSetting(
        leadRes.login_u_id != undefined &&
          leadRes.login_u_id != null &&
          leadRes.login_u_id != 0
          ? leadRes.login_u_id
          : data.l_created_by
      );

      sqlll = `SELECT u_email FROM users WHERE u_id = ${leadRes.login_u_id != undefined &&
        leadRes.login_u_id != null &&
        leadRes.login_u_id != 0
        ? leadRes.login_u_id
        : data.l_created_by
        } `;
      let ccmail = await new Promise((resolve, reject) => {
        con.query(sqlll, async function (err1, result1) {
          if (err1) {
            console.log(err1);
            resolve({ status: 0, message: "Something went to wrong" });
          } else {
            if (result1.length > 0) {
              resolve({ status: 1, result: result1[0].u_email });
            } else {
              resolve({
                status: 0,
                message: "Something went to wrong",
              });
            }
          }
        });
      });
      if (message.status != 0) {
        message.template = message.template.replace(
          "{:name:}",
          data.l_name_prefix + " " + data.l_name
        );
        message.template = message.template.replace(
          "{:Proforma Date:}",
          data.performa_date
        );
        let mess =
          (message.header == 1
            ? typeof senderMailSetting.email_template_header !=
              undefined && senderMailSetting.email_template_header != undefined &&
              senderMailSetting.email_template_header != null
              ? senderMailSetting.email_template_header
              : ""
            : "") +
          message.template +
          (message.b_d_id != 0
            ? message.b_d_id == 1
              ? senderMailSetting.gst_bankdetails
              : message.b_d_id == 2
                ? senderMailSetting.ngst_bankdetails
                : message.b_d_id == 3
                  ? senderMailSetting.general_bankdetails
                  : ""
            : "") +
          (message.footer == 1 ? senderMailSetting.email_template_footer : "") +
          (message.signature == 1 ? senderMailSetting.email_signature : "");

        let CCMailSetting = await sendmessage.getEmailSetting(1);
        if (data.l_status == 1) {
          sendmessagenow = sendmessage.onlycustomermessagesend(
            senderMailSetting,
            data.l_email,
            mess,
            `${message.subject} || ${data.l_name_prefix + " " + data.l_name}`,
            // ccmail.result, //CCMailSetting.e_username,  // user mail
            ccmail.result, // reply mail
            1
          );
        } else if (data.l_status == 615) {
          let invoice_data = await getproformainvoicedata({
            id: data.lead_id,
            uid:
              leadRes.login_u_id != undefined &&
                leadRes.login_u_id != null &&
                leadRes.login_u_id != 0
                ? leadRes.login_u_id
                : data.l_created_by,
          });
          let n_ino = invoice_data.paymentres.invoice_no.split("/");
          let imageAsBase64;
          if (
            fs.existsSync(
              `./public/Assets/images/${
              // invoice_data.customerdata.u_id == 1 ? "adminlogo" :
              "branchlogo"
              }/${invoice_data.settingdata.logo}`
            )
          ) {
            imageAsBase64 = fs.readFileSync(
              `./public/Assets/images/${
              // invoice_data.customerdata.u_id == 1 ? "adminlogo" :
              "branchlogo"
              }/${invoice_data.settingdata.logo}`,
              { encoding: "base64" }
            );
          }
          let signatureAsBase64;
          if (
            fs.existsSync(
              `./public/Assets/images/invoicesignature/${invoice_data.customerdata.invoice_signature}`
            )
          ) {
            signatureAsBase64 = fs.readFileSync(
              `./public/Assets/images/invoicesignature/${invoice_data.customerdata.invoice_signature}`,
              { encoding: "base64" }
            );
          }

          const branch_data = await fetchbranchdatabyid({
            bid: invoice_data.customerdata.branch_id,
          });
          pdf
            .create(
              pdfTemplate6(
                invoice_data,
                invoice_data.userdata,
                branch_data.data.state_id,
                branch_data.generalsetting,
                {},
                imageAsBase64,
                signatureAsBase64
              ),
              {
                childProcessOptions: {
                  env: {
                    OPENSSL_CONF: "/dev/null",
                  },
                },
              }
            )
            .toFile(
              `${__dirname}/public/Assets/proforma_invoice_pdf/invoice_${n_ino[4]}.pdf`,
              (err) => {
                if (err) {
                  return console.log("error");
                }
                resolve({
                  ino: n_ino[4],
                });
              }
            );

          let att = [];
          att.push({ url: `invoice_${n_ino[4]}.pdf` });

          let pathname = __dirname + "/public/Assets/proforma_invoice_pdf";
          sendmessagenow = sendmessage.messagesend(
            senderMailSetting,
            data.l_email,
            mess,
            `${message.subject} || ${data.l_name_prefix + " " + data.l_name}`,
            att,
            // ccmail.result, //CCMailSetting.e_username,  // user mail
            ccmail.result, // reply mail
            1,
            pathname
          );
        } else {
          sendmessagenow = sendmessage.customermessagesend(
            senderMailSetting,
            data.l_email,
            mess,
            message.subject,
            ccmail.result, //CCMailSetting.e_username,  // user mail
            ccmail.result, // reply mail
            1
          );
        }
      }
      if (data.l_status == 615) {
        let sql2 = `UPDATE elead SET performa_date = '${curr_date}' WHERE elead.lead_id = ${data.lead_id}`;
        con.query(sql2, async function (errr, resulttt) {
          if (errr) {
            console.log(errr);
            resolve({ status: 0, message: "Something went to wrong" });
          } else {
            if (resulttt.length > 0) {
              resolve({ status: 1, message: "Updated Successfully..." });
            }
          }
        });
      } else {
        let sql2 = `UPDATE elead SET updated_date = '${curr_date}' WHERE elead.lead_id = ${data.lead_id}`;
        con.query(sql2, async function (errr, resulttt) {
          if (errr) {
            console.log(errr);
            resolve({ status: 0, message: "Something went to wrong" });
          } else {
            if (resulttt.length > 0) {
              resolve({ status: 1, message: "Updated Successfully..." });
            }
          }
        });
      }

      if (responsee.result > 0) {
        let sql123 = `update lead_cron_status set counter=counter+1 where lead_id=${data.lead_id} and l_status=${data.l_status}`;
        con.query(sql123, async function (errr, resulttt) {
          if (errr) {
            console.log(errr);
            resolve({ status: 0, message: "Something went to wrong" });
          } else {
            if (resulttt.length > 0) {
              resolve({ status: 1, message: "Updated Successfully..." });
            }
          }
        });
      } else {
        let sql123 = `insert into lead_cron_status(l_status,lead_id,counter) values (${data.l_status},${data.lead_id},1)`;
        con.query(sql123, async function (errr, resulttt) {
          if (errr) {
            console.log(errr);
            resolve({ status: 0, message: "Something went to wrong" });
          } else {
            if (resulttt.affectedRows > 0) {
              resolve({ status: 1, message: "Inserted Successfully..." });
            }
          }
        });
      }

      // resolve({
      //   status: 1,
      //   message: "Lead status updated mail is Scheduled...",
      // });
    });
  });
  return response;
}

async function updatePaymentwithAdditionalCharges(data) {
  try {
    paymentrecord = `SELECT * FROM payment WHERE c_id = ${data.c_id} and deleted = 0 ORDER BY payment_id DESC limit 1;`;
    let payment = await new Promise((resolve, reject) => {
      con.query(paymentrecord, async function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Customer Not Updated" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              result: result[0],
              result1: result[0].payment_id,
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    sql12 = `SELECT b_name FROM branch WHERE branch_id = ${data.branch_id} `;
    let res = await new Promise((resolve, reject) => {
      con.query(sql12, async function (err1, result1) {
        if (err1) {
          console.log(err1);
          resolve({ status: 0, message: "Customer Not Updated" });
        } else {
          if (result1.length > 0) {
            resolve({ status: 1, result: result1[0].b_name });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    let response4 = new Promise((resolve, reject) => {
      let c_gst = 0;
      let s_gst = 0;
      let i_gst = 0;
      let netamt = 0;

      let s1 =
        parseInt(payment.result.total_amount) +
        parseInt(data.courier) +
        parseInt(data.exp_charge) -
        parseInt(data.dis_amt) -
        parseInt(data.coupon_amt);

      if (data.c_tax == 1) {
        if (data.c_gst == 1) {
          if (data.branch_state_id == data.c_state) {
            c_gst = (s1 * parseInt(data.s_c_gst)) / 100;
            s_gst = (s1 * parseInt(data.s_s_gst)) / 100;
            netamt = s1 + c_gst + s_gst + parseInt(data.embassy_fees);
          } else {
            i_gst = (s1 * parseInt(data.s_i_gst)) / 100;
            netamt = s1 + i_gst + parseInt(data.embassy_fees);
          }
        } else {
          netamt = s1 + parseInt(data.embassy_fees);
        }
      } else {
        netamt = s1 + parseInt(data.embassy_fees);
      }

      sql5 = `INSERT INTO payment(payment_date,c_id,total_amount,courier,embassy_fees,dis_amt,net_amt,sgst,cgst,igst,created_id,paid_amt,due_amt,u_id,is_tds,tds_amt,tracking_id,exp_charge,coupon_amt,c_tax,created_branch_id,p_receipt_no,invoice_no,service_tax,mode_id,payment_desc,chk_dd_no,chk_dd_date,bank_name,is_draft_taken,payment_refund) VALUES ('${payment.result.payment_date
        }',${payment.result.c_id},'${payment.result.total_amount}',
                '${data.courier}','${data.embassy_fees}','${data.dis_amt
        }','${netamt}','${s_gst}','${c_gst}','${i_gst}',${payment.result.created_id
        },'${payment.result.paid_amt}','${netamt - payment.result.paid_amt - parseInt(payment.result.tds_amt)
        }',${payment.result.u_id},${payment.result.is_tds} , '${payment.result.tds_amt
        }','${mysql_real_escape_string(payment.result.tracking_id)}','${data.exp_charge
        }','${data.coupon_amt}','${payment.result.c_tax}',${payment.result.created_branch_id
        },'${payment.result.p_receipt_no}','${payment.result.invoice_no}','${payment.result.service_tax
        }',${payment.result.mode_id},'${payment.result.payment_desc != "null" ? payment.result.payment_desc : ""
        }','${payment.result.chk_dd_no != "null" ? payment.result.chk_dd_no : ""
        }','${payment.result.chk_dd_date != "null" ? payment.result.chk_dd_date : ""
        }','${payment.result.bank_name != "null" ? payment.result.bank_name : ""
        }',${payment.result.is_draft_taken},'${payment.result.payment_refund}')`;
      con.query(sql5, async function (err5, result5) {
        if (err5) {
          console.log(err5);
          resolve({ status: 0, message: "Something went wrong" });
        } else {
          if (result5.affectedRows > 0) {
            resolve({
              status: 1,
              message: "Addtional Charges Updated Successfully....",
            });
          } else {
            resolve({
              status: 0,
              result: 0,
              message: "Something went wrong..",
            });
          }
        }
      });
    });
    return response4;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

//0704
async function updatePaymentwithTDSAmount(data) {
  try {
    paymentrecord = `SELECT * FROM payment WHERE c_id = ${data.c_id} and deleted = 0 ORDER BY payment_id DESC limit 1;`;
    let payment = await new Promise((resolve, reject) => {
      con.query(paymentrecord, async function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Customer Not Updated" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              result: result[0],
              result1: result[0].payment_id,
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    let response4 = new Promise((resolve, reject) => {
      sql5 = `INSERT INTO payment(payment_date,c_id,total_amount,courier,embassy_fees,dis_amt,net_amt,sgst,cgst,igst,created_id,paid_amt,due_amt,u_id,is_tds,tds_amt,tracking_id,exp_charge,coupon_amt,c_tax,created_branch_id,p_receipt_no,invoice_no,service_tax,mode_id,payment_desc,chk_dd_no,chk_dd_date,bank_name,is_draft_taken,payment_refund) VALUES ('${payment.result.payment_date
        }',${data.c_id},'${payment.result.total_amount}',
                '${payment.result.courier}','${payment.result.embassy_fees}','${payment.result.dis_amt
        }','${payment.result.net_amt}','${payment.result.sgst}','${payment.result.cgst
        }','${payment.result.igst}',${payment.result.created_id},'${payment.result.paid_amt
        }','${payment.result.due_amt - data.tds_amt}',${payment.result.u_id},${data.is_tds
        } , '${data.tds_amt}','${mysql_real_escape_string(
          payment.result.tracking_id
        )}','${payment.result.exp_charge}','${payment.result.coupon_amt}','${payment.result.c_tax
        }',${payment.result.created_branch_id},'${payment.result.p_receipt_no
        }','${payment.result.invoice_no}','${payment.result.service_tax}',${payment.result.mode_id
        },'${payment.result.payment_desc != "null" ? payment.result.payment_desc : ""
        }','${payment.result.chk_dd_no != "null" ? payment.result.chk_dd_no : ""
        }','${payment.result.chk_dd_date != "null" ? payment.result.chk_dd_date : ""
        }','${payment.result.bank_name != "null" ? payment.result.bank_name : ""
        }',${data.is_tds == 1 ? 1 : 0},'${payment.result.payment_refund}')`;
      con.query(sql5, async function (err5, result5) {
        if (err5) {
          console.log(err5);
          resolve({ status: 0, message: "Something went wrong" });
        } else {
          if (result5.affectedRows > 0) {
            resolve({
              status: 1,
              message: "TDS Added Successfully....",
            });
          } else {
            resolve({
              status: 0,
              result: 0,
              message: "Something went wrong..",
            });
          }
        }
      });
    });
    return response4;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function sendpolicymail(data) {
  try {
    let response = await new Promise(async (resolve, reject) => {
      let senderMailSetting = await sendmessage.getEmailSetting(
        data.created_id
      );

      sqlll = `SELECT u_email FROM users WHERE u_id = ${data.created_id} `;
      let ccmail = await new Promise((resolve, reject) => {
        con.query(sqlll, async function (err1, result1) {
          if (err1) {
            console.log(err1);
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          } else {
            if (result1.length > 0) {
              resolve({ status: 1, result: result1[0].u_email });
            } else {
              resolve({
                status: 0,
                message: "Something went to wrong",
              });
            }
          }
        });
      });

      let message = await sendmessage.getTemplate(
        data.c_tax == "1" ? 234 : 235
      );
      if (message.status != 0) {
        message.template = message.template.replace(
          "{:name:}",
          data.c_prefix + " " + data.c_name
        );
        let mess =
          (message.header == 1
            ? typeof senderMailSetting.email_template_header !=
              undefined && senderMailSetting.email_template_header != undefined &&
              senderMailSetting.email_template_header != null
              ? senderMailSetting.email_template_header
              : ""
            : "") +
          message.template +
          (message.b_d_id != 0
            ? message.b_d_id == 1
              ? senderMailSetting.gst_bankdetails
              : message.b_d_id == 2
                ? senderMailSetting.ngst_bankdetails
                : message.b_d_id == 3
                  ? senderMailSetting.general_bankdetails
                  : ""
            : "") +
          // (data.inserted_id == 1
          //   ? data.c_tax == 0
          //     ? senderMailSetting.bank_details
          //     : senderMailSetting.nongst_bank_details
          //   : data.c_tax == 0
          //     ? senderMailSetting.b_bank_details
          //     : senderMailSetting.b_nongst_bank_deatils) +
          (message.footer == 1 ? senderMailSetting.email_template_footer : "") +
          (message.signature == 1 ? senderMailSetting.email_signature : "");

        CCMailSetting = await sendmessage.getEmailSetting(1);
        //0304
        let sendmessagenow = sendmessage.custommailsend(
          senderMailSetting,
          data.c_email,
          mess,
          message.subject,
          message.attachment,
          ccmail.result, //CCMailSetting.e_username,  // user mail
          ccmail.result, // reply mail
          1
        );
      }
      resolve({
        status: 1,
        message: "Send Mail successfully",
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

//0303
async function setAttestationDetailStatusCron() {
  try {
    // sql = `Select attestation.*,details.d_c_id,details.service_type,(SELECT name FROM attributes WHERE attribute_id=details.status_id)as status_name ,(SELECT name FROM attributes WHERE attribute_id=details.d_c_id)as certificate_name,(SELECT name FROM attributes WHERE attribute_id=attestation.a_country)as country_name,(SELECT name FROM attributes WHERE attribute_id=attestation.a_type)as type FROM attestation RIGHT JOIN details ON  attestation.a_id=details.service_id WHERE STR_TO_DATE(details.status_change_date,'%d-%m-%Y %H:%i:%s') > CURRENT_TIMESTAMP - INTERVAL 30 MINUTE AND  details.service_type=10 and attestation.deleted = 0 Group BY details.service_id ORDER BY details.status_change_date DESC`;

    sql = `Select detail_table.*,att_table5.name AS courier_name,att_table1.name AS status_name,att_table2.name AS certificate_name,att_table3.name AS country_name,att_table4.name AS type,payment.due_amt,customer_table.c_email,customer_table.c_id,customer_table.c_name,customer_table.c_prefix,customer_table.created_id,customer_table.d_address,customer_table.c_tax,user_table.u_email as ccemail FROM details detail_table LEFT JOIN attributes att_table1 ON att_table1.attribute_id = detail_table.status_id LEFT JOIN attributes att_table2 ON att_table2.attribute_id = detail_table.d_c_id LEFT JOIN attestation attestation_table ON attestation_table.a_id=detail_table.service_id LEFT JOIN attributes att_table3 ON att_table3.attribute_id = attestation_table.a_country  LEFT JOIN attributes att_table5 ON att_table5.attribute_id = detail_table.courier_id LEFT JOIN attributes att_table4 ON att_table4.attribute_id = attestation_table.a_type LEFT JOIN payment ON payment.c_id = attestation_table.c_id AND payment.due_amt = (
      SELECT payment.due_amt
      FROM payment
      WHERE payment.c_id = attestation_table.c_id AND payment.invoice_status =0 AND payment.deleted = 0
      ORDER BY payment.payment_id DESC
      LIMIT 1) LEFT JOIN customer customer_table ON attestation_table.c_id =  customer_table.c_id AND customer_table.deleted = 0 AND customer_table.is_block = 1 and customer_table.is_cancel = 0 LEFT JOIN users user_table ON customer_table.created_id = user_table.u_id WHERE DATE_FORMAT(STR_TO_DATE(detail_table.status_change_date,'%d-%m-%Y %H:%i:%s'),'%Y-%m-%d %H:%i:%s') > CURRENT_TIMESTAMP - INTERVAL 5 MINUTE AND  detail_table.service_type=10 and attestation_table.deleted = 0 AND customer_table.deleted = 0  AND customer_table.is_block = 1 AND customer_table.is_cancel = 0  Group BY customer_table.c_id ORDER BY STR_TO_DATE(detail_table.status_change_date,'%d-%m-%Y %H:%i:%s') DESC;`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, async function (err, result) {
        if (err) {
          resolve({ status: 0, message: "Customer Not Updated" });
        } else {
          console.log(result, "@");
          if (result.length > 0) {
            for (let i = 0; i < result.length; i++) {
              let senderMailSetting = await sendmessage.getEmailSetting(
                result[i].created_id
              );
              let etemp = 0;
              if (result[i].status_id == 13) {
                etemp = parseInt(18);
              } else if (result[i].status_id == 14) {
                etemp = parseInt(19);
              } else if (result[i].status_id == 15) {
                etemp = parseInt(20);
              } else if (result[i].status_id == 16) {
                etemp = parseInt(21);
              } else if (result[i].status_id == 17) {
                etemp = parseInt(22);
              } else if (result[i].status_id == 18) {
                etemp = parseInt(23);
              } else if (result[i].status_id == 19) {
                etemp = parseInt(24);
              } else if (result[i].status_id == 20) {
                if (result[i].c_tax == 0) {
                  etemp = parseInt(25);
                } else {
                  etemp = parseInt(281);
                }
              } else if (result[i].status_id == 21) {
                etemp = parseInt(26);
              } else if (result[i].status_id == 22) {
                // if (result[i].due_amt != "0") {
                //   etemp = parseInt(27);
                // } else {
                //   etemp = parseInt(28);
                // }

                //1610
                if (result[i].due_amt == "0") {
                  if (
                    result[i].d_address != "" &&
                    result[i].d_address != null &&
                    result[i].d_address != undefined
                  ) {
                    etemp = parseInt(230);
                  } else {
                    etemp = parseInt(231);
                  }
                } else {
                  if (result[i].c_tax == 0) {
                    if (
                      result[i].d_address != "" &&
                      result[i].d_address != null &&
                      result[i].d_address != undefined
                    ) {
                      etemp = parseInt(223);
                    } else {
                      etemp = parseInt(277);
                      // etemp = parseInt(161);
                    }
                  } else {
                    if (
                      result[i].d_address[0] != "" &&
                      result[i].d_address[0] != null &&
                      result[i].d_address[0] != undefined
                    ) {
                      etemp = parseInt(27);
                      // etemp = parseInt(163);
                    } else {
                      etemp = parseInt(28);
                      // etemp = parseInt(164);
                    }
                  }
                }
              } else if (result[i].status_id == 23) {
                etemp = parseInt(29);
              } else if (result[i].status_id == 24) {
                etemp = parseInt(30);
              } else if (result[i].status_id == 25) {
                etemp = parseInt(31);
              } else if (result[i].status_id == 26) {
                etemp = parseInt(32);
              } else if (result[i].status_id == 273) {
                etemp = parseInt(236);
              }
              applicateSql = `Select attestation.*,details.d_c_id,details.service_type,details.collector,(SELECT name FROM attributes WHERE attribute_id=details.status_id)as status_name ,(SELECT name FROM attributes WHERE attribute_id=details.d_c_id)as certificate_name,(SELECT name FROM attributes WHERE attribute_id=attestation.a_country)as country_name,(SELECT name FROM attributes WHERE attribute_id=attestation.a_type)as type FROM attestation RIGHT JOIN details ON  attestation.a_id=details.service_id WHERE  details.service_type=10 AND attestation.c_id = ${result[i].c_id} and attestation.deleted = 0 `;
              con.query(
                applicateSql,
                async function (applicateSql_err, applicateSql_result) {
                  if (applicateSql_err) {
                    console.log("Something went wrong");
                  }
                  if (applicateSql_result.length > 0) {
                    const getrow = () => {
                      let rows = "";
                      applicateSql_result.map((a) => {
                        rows =
                          rows +
                          `<tr><td style="border: 1px solid #333;padding:5px;">${a.a_name
                          }</td>
                          <td style="border: 1px solid #333;padding:5px;">${a.type
                          }</td>
                          <td style="border: 1px solid #333;padding:5px;">${a.country_name
                          }</td>
                          <td style="border: 1px solid #333;padding:5px;">${a.certificate_name
                          }</td>
                          <td style="border: 1px solid #333;padding:5px;">${a.status_name
                          }</td>
                          ${result[i].status_id == 23
                            ? `<td style="border: 1px solid #333;padding:5px;">${a.collector}</td>`
                            : ""
                          }</tr>`;
                      });
                      return rows;
                    };
                    let table1 = `<div>
                  <table style="border-collapse: collapse;" >
                    <tr>
                      <th style="border: 1px solid #333;padding:5px;">
                        Name
                      </th>
                      <th style="border: 1px solid #333;padding:5px;">Type</th>
                      <th style="border: 1px solid #333;padding:5px;">Country</th>
                      <th style="border: 1px solid #333;padding:5px;">Certificate</th>
                      <th style="border: 1px solid #333;padding:5px;">Status</th>
                      ${result[i].status_id == 23
                        ? '<th style="border: 1px solid #333;padding:5px;">Collected By</th>'
                        : ""
                      }
                    </tr>
                    ${getrow()}
                  </table>
                  </div>`;
                    let message = await sendmessage.getTemplate(etemp);
                    if (message.status != 0) {
                      message.template = message.template.replace(
                        "{:name:}",
                        result[i].c_prefix + " " + result[i].c_name
                      );
                      message.template = message.template.replace(
                        "{:table:}",
                        table1
                      );
                      message.template = message.template.replace(
                        "{:d_address:}",
                        result[i].d_address
                      );
                      message.template = message.template.replace(
                        "{:due_amt:}",
                        result[i].due_amt
                      );
                      message.template = message.template.replace(
                        "{:awb_no:}",
                        result[i].awb_no
                      );
                      message.template = message.template.replace(
                        "{:courier:}",
                        result[i].courier_name
                      );
                      message.template = message.template.replace(
                        "{:reason:}",
                        result[i].reason
                      );
                      if (result[i].status_id == 24) {
                        let website = await getwebsitename(
                          result[i].courier_id
                        );
                        message.template = message.template.replace(
                          "{:website:}",
                          website.result
                        );
                      }
                      let mess =
                        (message.header == 1
                          ? typeof senderMailSetting.email_template_header !=
                            undefined && senderMailSetting.email_template_header !=
                            undefined &&
                            senderMailSetting.email_template_header != null
                            ? senderMailSetting.email_template_header
                            : ""
                          : "") +
                        message.template +
                        (message.b_d_id != 0
                          ? message.b_d_id == 1
                            ? senderMailSetting.gst_bankdetails
                            : message.b_d_id == 2
                              ? senderMailSetting.ngst_bankdetails
                              : message.b_d_id == 3
                                ? senderMailSetting.general_bankdetails
                                : ""
                          : "") +
                        (message.footer == 1
                          ? senderMailSetting.email_template_footer
                          : "") +
                        (message.signature == 1
                          ? senderMailSetting.email_signature
                          : "");
                      CCMailSetting = await sendmessage.getEmailSetting(1);
                      // console.log("fgfhg", data.status_id);
                      sendmessagenow = sendmessage.customermessagesend(
                        senderMailSetting,
                        result[i].c_email,
                        mess,
                        `${message.subject} || ${result[i].c_prefix + " " + result[i].c_name
                        }`,
                        result[i].status_id != 16 &&
                          result[i].status_id != 21 &&
                          result[i].status_id != 24
                          ? etemp != 281 && etemp != 25 && etemp != 30 && etemp != 27 && etemp != 28 && etemp != 223 && etemp != 230 && etemp != 231 && etemp != 277 && etemp != 29 && result[i].ccemail
                          : "", //CCMailSetting.e_username,  // user mail
                        result[i].ccemail, // reply mail
                        1,
                        "info@hyderabadattestation.com"
                      );
                      if (result[i].status_id == 24) {
                        sendmessagenow = sendmessage.customermessagesend(
                          senderMailSetting,
                          CCMailSetting.cc_email,
                          mess,
                          `${message.subject} || ${result[i].c_prefix + " " + result[i].c_name
                          }`,
                          "", //CCMailSetting.e_username,  // user mail
                          result[i].ccemail, // reply mail
                          1
                        );
                      }
                    }
                  }
                }
              );
            }
          }
          resolve({ status: 1, message: "Message send Successfully..." });
        }
      });
    });
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function setApostilleDetailStatusCron() {
  try {
    // sql = `Select apostille.*,details.d_c_id,details.service_type,(SELECT name FROM attributes WHERE attribute_id=details.status_id)as status_name ,(SELECT name FROM attributes WHERE attribute_id=details.d_c_id)as certificate_name,(SELECT name FROM attributes WHERE attribute_id=apostille.a_country)as country_name,(SELECT name FROM attributes WHERE attribute_id=apostille.a_type)as type FROM apostille RIGHT JOIN details ON  apostille.a_id=details.service_id WHERE STR_TO_DATE(details.status_change_date,'%d-%m-%Y %H:%i:%s') > CURRENT_TIMESTAMP - INTERVAL 30 MINUTE AND  details.service_type=17 and apostille.deleted = 0 Group BY details.service_id ORDER BY details.status_change_date DESC`;

    sql = `Select detail_table.*,att_table5.name AS courier_name,att_table1.name AS status_name,att_table2.name AS certificate_name,att_table3.name AS country_name,att_table4.name AS type,payment.due_amt,customer_table.c_email,customer_table.c_id,customer_table.c_name,customer_table.c_prefix,customer_table.created_id,customer_table.d_address,customer_table.c_tax,user_table.u_email as ccemail FROM details detail_table LEFT JOIN attributes att_table1 ON att_table1.attribute_id = detail_table.status_id LEFT JOIN attributes att_table2 ON att_table2.attribute_id = detail_table.d_c_id LEFT JOIN apostille apostille_table ON apostille_table.a_id=detail_table.service_id LEFT JOIN attributes att_table3 ON att_table3.attribute_id = apostille_table.a_country LEFT JOIN attributes att_table4 ON att_table4.attribute_id = apostille_table.a_type LEFT JOIN payment ON payment.c_id = apostille_table.c_id AND payment.due_amt = (
      SELECT payment.due_amt
      FROM payment
      WHERE payment.c_id = apostille_table.c_id AND payment.invoice_status =0 AND payment.deleted = 0
      ORDER BY payment.payment_id DESC
      LIMIT 1) LEFT JOIN customer customer_table ON apostille_table.c_id =  customer_table.c_id AND customer_table.deleted = 0 AND customer_table.is_block = 1 and customer_table.is_cancel = 0 LEFT JOIN attributes att_table5 ON att_table5.attribute_id = detail_table.courier_id LEFT JOIN users user_table ON customer_table.created_id = user_table.u_id WHERE DATE_FORMAT(STR_TO_DATE(detail_table.status_change_date,'%d-%m-%Y %H:%i:%s'),'%Y-%m-%d %H:%i:%s') > CURRENT_TIMESTAMP - INTERVAL 5 MINUTE AND  detail_table.service_type=17 and apostille_table.deleted = 0 AND customer_table.deleted = 0  AND customer_table.is_block = 1 AND customer_table.is_cancel = 0  Group BY customer_table.c_id ORDER BY STR_TO_DATE(detail_table.status_change_date,'%d-%m-%Y %H:%i:%s') DESC;`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, async function (err, result) {
        // console.log(sql, err, result);
        if (err) {
          resolve({ status: 0, message: "Customer Not Updated" });
        } else {
          if (result.length > 0) {
            for (let i = 0; i < result.length; i++) {
              let senderMailSetting = await sendmessage.getEmailSetting(
                result[i].created_id
              );
              let etemp = 0;
              if (result[i].status_id == 13) {
                etemp = parseInt(18);
              } else if (result[i].status_id == 14) {
                etemp = parseInt(19);
              } else if (result[i].status_id == 15) {
                etemp = parseInt(20);
              } else if (result[i].status_id == 16) {
                etemp = parseInt(21);
              } else if (result[i].status_id == 17) {
                etemp = parseInt(22);
              } else if (result[i].status_id == 18) {
                etemp = parseInt(23);
              } else if (result[i].status_id == 19) {
                etemp = parseInt(24);
              } else if (result[i].status_id == 20) {
                if (result[i].c_tax == 0) {
                  etemp = parseInt(25);
                } else {
                  etemp = parseInt(281);
                }
              } else if (result[i].status_id == 21) {
                etemp = parseInt(26);
              } else if (result[i].status_id == 22) {
                // if (result[i].due_amt != "0") {
                //   etemp = parseInt(27);
                // } else {
                //   etemp = parseInt(28);
                // }
                //1610
                if (result[i].due_amt == "0") {
                  if (
                    result[i].d_address != "" &&
                    result[i].d_address != null &&
                    result[i].d_address != undefined
                  ) {
                    etemp = parseInt(230);
                  } else {
                    etemp = parseInt(231);
                  }
                } else {
                  if (result[i].c_tax == 0) {
                    if (
                      result[i].d_address != "" &&
                      result[i].d_address != null &&
                      result[i].d_address != undefined
                    ) {
                      etemp = parseInt(223);
                    } else {
                      etemp = parseInt(277);
                      // etemp = parseInt(161);
                    }
                  } else {
                    if (
                      result[i].d_address[0] != "" &&
                      result[i].d_address[0] != null &&
                      result[i].d_address[0] != undefined
                    ) {
                      etemp = parseInt(27);
                      // etemp = parseInt(163);
                    } else {
                      etemp = parseInt(28);
                      // etemp = parseInt(164);
                    }
                  }
                }
              } else if (result[i].status_id == 23) {
                etemp = parseInt(29);
              } else if (result[i].status_id == 24) {
                etemp = parseInt(30);
              } else if (result[i].status_id == 25) {
                etemp = parseInt(31);
              } else if (result[i].status_id == 26) {
                etemp = parseInt(32);
              } else if (result[i].status_id == 273) {
                etemp = parseInt(236);
              }
              applicateSql = `Select apostille.*,details.d_c_id,details.service_type,details.collector,(SELECT name FROM attributes WHERE attribute_id=details.status_id)as status_name ,(SELECT name FROM attributes WHERE attribute_id=details.d_c_id)as certificate_name,(SELECT name FROM attributes WHERE attribute_id=apostille.a_country)as country_name,(SELECT name FROM attributes WHERE attribute_id=apostille.a_type)as type FROM apostille RIGHT JOIN details ON  apostille.a_id=details.service_id WHERE  details.service_type=17 AND apostille.c_id = ${result[i].c_id} and apostille.deleted = 0 `;
              con.query(
                applicateSql,
                async function (applicateSql_err, applicateSql_result) {
                  if (applicateSql_err) {
                    console.log("Something went wrong");
                  }
                  if (applicateSql_result.length > 0) {
                    const getrow = () => {
                      let rows = "";
                      applicateSql_result.map((a) => {
                        rows =
                          rows +
                          `<tr><td style="border: 1px solid #333;padding:5px;">${a.a_name
                          }</td>
                          <td style="border: 1px solid #333;padding:5px;">${a.type
                          }</td>
                          <td style="border: 1px solid #333;padding:5px;">${a.country_name
                          }</td>
                          <td style="border: 1px solid #333;padding:5px;">${a.certificate_name
                          }</td>
                          <td style="border: 1px solid #333;padding:5px;">${a.status_name
                          }</td>
                          ${result[i].status_id == 23
                            ? `<td style="border: 1px solid #333;padding:5px;">${a.collector}</td>`
                            : ""
                          }</tr>`;
                      });
                      return rows;
                    };
                    let table1 = `<div>
                  <table style="border-collapse: collapse;" >
                    <tr>
                      <th style="border: 1px solid #333;padding:5px;">
                        Name
                      </th>
                      <th style="border: 1px solid #333;padding:5px;">Type</th>
                      <th style="border: 1px solid #333;padding:5px;">Country</th>
                      <th style="border: 1px solid #333;padding:5px;">Certificate</th>
                      <th style="border: 1px solid #333;padding:5px;">Status</th>
                      ${result[i].status_id == 23
                        ? '<th style="border: 1px solid #333;padding:5px;">Collected By</th>'
                        : ""
                      }
                    </tr>
                    ${getrow()}
                  </table>
                  </div>`;
                    let message = await sendmessage.getTemplate(etemp);
                    if (message.status != 0) {
                      message.template = message.template.replace(
                        "{:name:}",
                        result[i].c_prefix + " " + result[i].c_name
                      );
                      message.template = message.template.replace(
                        "{:table:}",
                        table1
                      );
                      message.template = message.template.replace(
                        "{:d_address:}",
                        result[i].d_address
                      );
                      message.template = message.template.replace(
                        "{:due_amt:}",
                        result[i].due_amt
                      );
                      message.template = message.template.replace(
                        "{:awb_no:}",
                        result[i].awb_no
                      );
                      message.template = message.template.replace(
                        "{:courier:}",
                        result[i].courier_name
                      );
                      message.template = message.template.replace(
                        "{:reason:}",
                        result[i].reason
                      );
                      if (result[i].status_id == 24) {
                        let website = await getwebsitename(
                          result[i].courier_id
                        );
                        message.template = message.template.replace(
                          "{:website:}",
                          website.result
                        );
                      }
                      let mess =
                        (message.header == 1
                          ? typeof senderMailSetting.email_template_header !=
                            undefined && senderMailSetting.email_template_header !=
                            undefined &&
                            senderMailSetting.email_template_header != null
                            ? senderMailSetting.email_template_header
                            : ""
                          : "") +
                        message.template +
                        (message.b_d_id != 0
                          ? message.b_d_id == 1
                            ? senderMailSetting.gst_bankdetails
                            : message.b_d_id == 2
                              ? senderMailSetting.ngst_bankdetails
                              : message.b_d_id == 3
                                ? senderMailSetting.general_bankdetails
                                : ""
                          : "") +
                        (message.footer == 1
                          ? senderMailSetting.email_template_footer
                          : "") +
                        (message.signature == 1
                          ? senderMailSetting.email_signature
                          : "");
                      CCMailSetting = await sendmessage.getEmailSetting(1);
                      // console.log("fgfhg", data.status_id);
                      sendmessagenow = sendmessage.customermessagesend(
                        senderMailSetting,
                        result[i].c_email,
                        mess,
                        `${message.subject} || ${result[i].c_prefix + " " + result[i].c_name
                        }`,
                        result[i].status_id != 16 &&
                          result[i].status_id != 21 &&
                          result[i].status_id != 24
                          ? etemp != 281 && etemp != 25 && etemp != 30 && etemp != 27 && etemp != 28 && etemp != 223 && etemp != 230 && etemp != 231 && etemp != 277 && etemp != 29 && result[i].ccemail
                          : "", //CCMailSetting.e_username,  // user mail
                        result[i].ccemail, // reply mail
                        1,
                        "info@hyderabadattestation.com"
                      );
                      if (result[i].status_id == 24) {
                        sendmessagenow = sendmessage.customermessagesend(
                          senderMailSetting,
                          CCMailSetting.cc_email,
                          mess,
                          `${message.subject} || ${result[i].c_prefix + " " + result[i].c_name
                          }`, //CCMailSetting.e_username,  // user mail
                          result[i].ccemail, // reply mail
                          1
                        );
                      }
                    }
                  }
                }
              );
            }
          }
          resolve({ status: 1, message: "Message send Successfully..." });
        }
      });
    });
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function setTranslationDetailStatusCron() {
  try {
    // sql = `Select translation.*,details.d_c_id,details.service_type,(SELECT name FROM attributes WHERE attribute_id=details.status_id)as status_name ,(SELECT name FROM attributes WHERE attribute_id=details.d_c_id)as certificate_name,(SELECT name FROM attributes WHERE attribute_id=translation.a_country)as country_name,(SELECT name FROM attributes WHERE attribute_id=translation.a_type)as type FROM translation RIGHT JOIN details ON  translation.a_id=details.service_id WHERE STR_TO_DATE(details.status_change_date,'%d-%m-%Y %H:%i:%s') > CURRENT_TIMESTAMP - INTERVAL 30 MINUTE AND  details.service_type=20 and translation.deleted = 0 Group BY details.service_id ORDER BY details.status_change_date DESC`;

    sql = `Select detail_table.*,att_table5.name AS courier_name,att_table1.name AS status_name,att_table2.name AS certificate_name,att_table3.name AS country_name,att_table4.name AS type,payment.due_amt,customer_table.c_email,customer_table.c_id,customer_table.c_name,customer_table.c_prefix,customer_table.created_id,customer_table.d_address,customer_table.c_tax,user_table.u_email as ccemail FROM details detail_table LEFT JOIN attributes att_table1 ON att_table1.attribute_id = detail_table.status_id LEFT JOIN attributes att_table2 ON att_table2.attribute_id = detail_table.d_c_id LEFT JOIN translation translation_table ON translation_table.a_id=detail_table.service_id LEFT JOIN attributes att_table5 ON att_table5.attribute_id = detail_table.courier_id LEFT JOIN attributes att_table3 ON att_table3.attribute_id = translation_table.a_country LEFT JOIN attributes att_table4 ON att_table4.attribute_id = translation_table.a_type LEFT JOIN payment ON payment.c_id = translation_table.c_id AND payment.due_amt = (
      SELECT payment.due_amt
      FROM payment
      WHERE payment.c_id = translation_table.c_id AND payment.invoice_status =0 AND payment.deleted = 0
      ORDER BY payment.payment_id DESC
      LIMIT 1) LEFT JOIN customer customer_table ON translation_table.c_id =  customer_table.c_id AND customer_table.deleted = 0 AND customer_table.is_block = 1 and customer_table.is_cancel = 0 LEFT JOIN users user_table ON customer_table.created_id = user_table.u_id WHERE DATE_FORMAT(STR_TO_DATE(detail_table.status_change_date,'%d-%m-%Y %H:%i:%s'),'%Y-%m-%d %H:%i:%s') > CURRENT_TIMESTAMP - INTERVAL 5 MINUTE AND  detail_table.service_type=20 and translation_table.deleted = 0 AND customer_table.deleted = 0  AND customer_table.is_block = 1 AND customer_table.is_cancel = 0  Group BY customer_table.c_id ORDER BY STR_TO_DATE(detail_table.status_change_date,'%d-%m-%Y %H:%i:%s') DESC;`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, async function (err, result) {
        // console.log(sql, err, result);
        if (err) {
          resolve({ status: 0, message: "Customer Not Updated" });
        } else {
          if (result.length > 0) {
            for (let i = 0; i < result.length; i++) {
              let senderMailSetting = await sendmessage.getEmailSetting(
                result[i].created_id
              );
              let etemp = 0;
              if (result[i].status_id == 13) {
                etemp = parseInt(18);
              } else if (result[i].status_id == 14) {
                etemp = parseInt(19);
              } else if (result[i].status_id == 15) {
                etemp = parseInt(20);
              } else if (result[i].status_id == 16) {
                etemp = parseInt(21);
              } else if (result[i].status_id == 17) {
                etemp = parseInt(22);
              } else if (result[i].status_id == 18) {
                etemp = parseInt(23);
              } else if (result[i].status_id == 19) {
                etemp = parseInt(24);
              } else if (result[i].status_id == 20) {
                if (result[i].c_tax == 0) {
                  etemp = parseInt(25);
                } else {
                  etemp = parseInt(281);
                }
              } else if (result[i].status_id == 21) {
                etemp = parseInt(26);
              } else if (result[i].status_id == 22) {
                // if (result[i].due_amt != "0") {
                //   etemp = parseInt(27);
                // } else {
                //   etemp = parseInt(28);
                // }
                //1610
                if (result[i].due_amt == "0") {
                  if (
                    result[i].d_address != "" &&
                    result[i].d_address != null &&
                    result[i].d_address != undefined
                  ) {
                    etemp = parseInt(230);
                  } else {
                    etemp = parseInt(231);
                  }
                } else {
                  if (result[i].c_tax == 0) {
                    if (
                      result[i].d_address != "" &&
                      result[i].d_address != null &&
                      result[i].d_address != undefined
                    ) {
                      etemp = parseInt(223);
                    } else {
                      etemp = parseInt(277);
                      // etemp = parseInt(161);
                    }
                  } else {
                    if (
                      result[i].d_address[0] != "" &&
                      result[i].d_address[0] != null &&
                      result[i].d_address[0] != undefined
                    ) {
                      etemp = parseInt(27);
                      // etemp = parseInt(163);
                    } else {
                      etemp = parseInt(28);
                      // etemp = parseInt(164);
                    }
                  }
                }
              } else if (result[i].status_id == 23) {
                etemp = parseInt(29);
              } else if (result[i].status_id == 24) {
                etemp = parseInt(30);
              } else if (result[i].status_id == 25) {
                etemp = parseInt(31);
              } else if (result[i].status_id == 26) {
                etemp = parseInt(32);
              } else if (result[i].status_id == 273) {
                etemp = parseInt(236);
              }
              applicateSql = `Select translation.*,details.d_c_id,details.service_type,details.collector,(SELECT name FROM attributes WHERE attribute_id=details.status_id)as status_name ,(SELECT name FROM attributes WHERE attribute_id=details.d_c_id)as certificate_name,(SELECT name FROM attributes WHERE attribute_id=translation.a_country)as country_name,(SELECT name FROM attributes WHERE attribute_id=translation.a_type)as type FROM translation RIGHT JOIN details ON  translation.a_id=details.service_id WHERE  details.service_type=20 AND translation.c_id = ${result[i].c_id} and translation.deleted = 0 `;
              con.query(
                applicateSql,
                async function (applicateSql_err, applicateSql_result) {
                  if (applicateSql_err) {
                    console.log("Something went wrong");
                  }
                  if (applicateSql_result.length > 0) {
                    const getrow = () => {
                      let rows = "";
                      applicateSql_result.map((a) => {
                        rows =
                          rows +
                          `<tr><td style="border: 1px solid #333;padding:5px;">${a.a_name
                          }</td>
                          <td style="border: 1px solid #333;padding:5px;">${a.type
                          }</td>
                          <td style="border: 1px solid #333;padding:5px;">${a.country_name
                          }</td>
                          <td style="border: 1px solid #333;padding:5px;">${a.certificate_name
                          }</td>
                          <td style="border: 1px solid #333;padding:5px;">${a.status_name
                          }</td>
                          ${result[i].status_id == 23
                            ? `<td style="border: 1px solid #333;padding:5px;">${a.collector}</td>`
                            : ""
                          }</tr>`;
                      });
                      return rows;
                    };
                    let table1 = `<div>
                  <table style="border-collapse: collapse;" >
                    <tr>
                      <th style="border: 1px solid #333;padding:5px;">
                        Name
                      </th>
                      <th style="border: 1px solid #333;padding:5px;">Type</th>
                      <th style="border: 1px solid #333;padding:5px;">Country</th>
                      <th style="border: 1px solid #333;padding:5px;">Certificate</th>
                      <th style="border: 1px solid #333;padding:5px;">Status</th>
                      ${result[i].status_id == 23
                        ? '<th style="border: 1px solid #333;padding:5px;">Collected By</th>'
                        : ""
                      }
                    </tr>
                    ${getrow()}
                  </table>
                  </div>`;
                    let message = await sendmessage.getTemplate(etemp);
                    if (message.status != 0) {
                      message.template = message.template.replace(
                        "{:name:}",
                        result[i].c_prefix + " " + result[i].c_name
                      );
                      message.template = message.template.replace(
                        "{:table:}",
                        table1
                      );
                      message.template = message.template.replace(
                        "{:d_address:}",
                        result[i].d_address
                      );
                      message.template = message.template.replace(
                        "{:due_amt:}",
                        result[i].due_amt
                      );
                      message.template = message.template.replace(
                        "{:awb_no:}",
                        result[i].awb_no
                      );
                      message.template = message.template.replace(
                        "{:courier:}",
                        result[i].courier_name
                      );
                      message.template = message.template.replace(
                        "{:reason:}",
                        result[i].reason
                      );
                      if (result[i].status_id == 24) {
                        let website = await getwebsitename(
                          result[i].courier_id
                        );
                        message.template = message.template.replace(
                          "{:website:}",
                          website.result
                        );
                      }
                      let mess =
                        (message.header == 1
                          ? typeof senderMailSetting.email_template_header !=
                            undefined && senderMailSetting.email_template_header !=
                            undefined &&
                            senderMailSetting.email_template_header != null
                            ? senderMailSetting.email_template_header
                            : ""
                          : "") +
                        message.template +
                        (message.b_d_id != 0
                          ? message.b_d_id == 1
                            ? senderMailSetting.gst_bankdetails
                            : message.b_d_id == 2
                              ? senderMailSetting.ngst_bankdetails
                              : message.b_d_id == 3
                                ? senderMailSetting.general_bankdetails
                                : ""
                          : "") +
                        (message.footer == 1
                          ? senderMailSetting.email_template_footer
                          : "") +
                        (message.signature == 1
                          ? senderMailSetting.email_signature
                          : "");
                      CCMailSetting = await sendmessage.getEmailSetting(1);
                      // console.log("fgfhg", data.status_id);
                      sendmessagenow = sendmessage.customermessagesend(
                        senderMailSetting,
                        result[i].c_email,
                        mess,
                        `${message.subject} || ${result[i].c_prefix + " " + result[i].c_name
                        }`,
                        result[i].status_id != 16 &&
                          result[i].status_id != 21 &&
                          result[i].status_id != 24
                          ? etemp != 281 && etemp != 25 && etemp != 30 && etemp != 27 && etemp != 28 && etemp != 223 && etemp != 230 && etemp != 231 && etemp != 277 && etemp != 29 && result[i].ccemail
                          : "", //CCMailSetting.e_username,  // user mail
                        result[i].ccemail, // reply mail
                        1,
                        "info@hyderabadattestation.com"
                      );
                      if (result[i].status_id == 24) {
                        sendmessagenow = sendmessage.customermessagesend(
                          senderMailSetting,
                          CCMailSetting.cc_email,
                          mess,
                          `${message.subject} || ${result[i].c_prefix + " " + result[i].c_name
                          }`,
                          "", //CCMailSetting.e_username,  // user mail
                          result[i].ccemail, // reply mail
                          1
                        );
                      }
                    }
                  }
                }
              );
            }
          }
          resolve({ status: 1, message: "Message send Successfully..." });
        }
      });
    });
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function setVisaDetailStatusCron() {
  try {
    sql = `Select detail_table.*,att_table5.name AS courier_name,att_table1.name AS status_name,GROUP_CONCAT(att_table2.name SEPARATOR ',') AS certificate_name,att_table3.name AS country_name,att_table4.name AS type,payment.due_amt,customer_table.c_email,customer_table.c_id,customer_table.c_name,customer_table.c_prefix,customer_table.created_id,customer_table.d_address,customer_table.c_tax,user_table.u_email as ccemail FROM details detail_table LEFT JOIN attributes att_table1 ON att_table1.attribute_id = detail_table.status_id  LEFT JOIN visa visa_table ON visa_table.v_id=detail_table.service_id LEFT JOIN attributes att_table2 ON FIND_IN_SET (att_table2.attribute_id , visa_table.v_supporting_doc) LEFT JOIN attributes att_table3 ON  att_table3.attribute_id=detail_table.d_c_id LEFT JOIN attributes att_table4 ON att_table4.attribute_id = visa_table.v_type LEFT JOIN attributes att_table5 ON att_table5.attribute_id = detail_table.courier_id LEFT JOIN  payment ON  payment.c_id = visa_table.c_id AND payment.due_amt = (
      SELECT payment.due_amt
      FROM payment
      WHERE payment.c_id = visa_table.c_id AND payment.invoice_status = 0 AND payment.deleted = 0
      ORDER BY payment.payment_id DESC
      LIMIT 1) LEFT JOIN customer customer_table ON visa_table.c_id = customer_table.c_id AND customer_table.deleted = 0 AND customer_table.is_block = 1 and customer_table.is_cancel = 0 LEFT JOIN users user_table ON customer_table.created_id = user_table.u_id WHERE DATE_FORMAT(STR_TO_DATE(detail_table.status_change_date,'%d-%m-%Y %H:%i:%s'),'%Y-%m-%d %H:%i:%s') > CURRENT_TIMESTAMP - INTERVAL 5 MINUTE AND  detail_table.service_type=8 and visa_table.deleted = 0 AND customer_table.deleted = 0  AND customer_table.is_block = 1 AND customer_table.is_cancel = 0  Group BY customer_table.c_id ORDER BY STR_TO_DATE(detail_table.status_change_date,'%d-%m-%Y %H:%i:%s') DESC;`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, async function (err, result) {
        // console.log(sql, err, result);
        if (err) {
          resolve({ status: 0, message: "Customer Not Updated" });
        } else {
          if (result.length > 0) {
            for (let i = 0; i < result.length; i++) {
              let senderMailSetting = await sendmessage.getEmailSetting(
                result[i].created_id
              );
              let etemp = 0;
              if (result[i].status_id == 13) {
                etemp = parseInt(18);
              } else if (result[i].status_id == 14) {
                etemp = parseInt(19);
              } else if (result[i].status_id == 15) {
                etemp = parseInt(20);
              } else if (result[i].status_id == 16) {
                etemp = parseInt(21);
              } else if (result[i].status_id == 17) {
                etemp = parseInt(22);
              } else if (result[i].status_id == 18) {
                etemp = parseInt(23);
              } else if (result[i].status_id == 19) {
                etemp = parseInt(24);
              } else if (result[i].status_id == 20) {
                if (result[i].c_tax == 0) {
                  etemp = parseInt(25);
                } else {
                  etemp = parseInt(281);
                }
              } else if (result[i].status_id == 21) {
                etemp = parseInt(26);
              } else if (result[i].status_id == 22) {
                // if (result[i].due_amt != "0") {
                //   etemp = parseInt(27);
                // } else {
                //   etemp = parseInt(28);
                // }
                //1610
                if (result[i].due_amt == "0") {
                  if (
                    result[i].d_address != "" &&
                    result[i].d_address != null &&
                    result[i].d_address != undefined
                  ) {
                    etemp = parseInt(230);
                  } else {
                    etemp = parseInt(231);
                  }
                } else {
                  if (result[i].c_tax == 0) {
                    if (
                      result[i].d_address != "" &&
                      result[i].d_address != null &&
                      result[i].d_address != undefined
                    ) {
                      etemp = parseInt(223);
                    } else {
                      etemp = parseInt(277);
                      // etemp = parseInt(161);
                    }
                  } else {
                    if (
                      result[i].d_address[0] != "" &&
                      result[i].d_address[0] != null &&
                      result[i].d_address[0] != undefined
                    ) {
                      etemp = parseInt(27);
                      // etemp = parseInt(163);
                    } else {
                      etemp = parseInt(28);
                      // etemp = parseInt(164);
                    }
                  }
                }
              } else if (result[i].status_id == 23) {
                etemp = parseInt(29);
              } else if (result[i].status_id == 24) {
                etemp = parseInt(30);
              } else if (result[i].status_id == 25) {
                etemp = parseInt(31);
              } else if (result[i].status_id == 26) {
                etemp = parseInt(32);
              } else if (result[i].status_id == 273) {
                etemp = parseInt(236);
              }
              applicateSql = `Select visa.*,details.d_c_id,details.service_type,details.collector,(SELECT name FROM attributes WHERE attribute_id=details.status_id)as status_name,(SELECT name FROM attributes WHERE attribute_id=details.d_c_id)as country_name,(SELECT name FROM attributes WHERE attribute_id=visa.v_type)as type,(SELECT GROUP_CONCAT(attributes.name SEPARATOR ',') as name FROM attributes where FIND_IN_SET (attributes.attribute_id , visa.v_supporting_doc)) as certificate_name  FROM visa RIGHT JOIN details ON  visa.v_id=details.service_id   WHERE   details.service_type=8 AND visa.c_id = ${result[i].c_id} and visa.deleted = 0`;
              con.query(
                applicateSql,
                async function (applicateSql_err, applicateSql_result) {
                  if (applicateSql_err) {
                    console.log("Something went wrong");
                  }
                  if (applicateSql_result.length > 0) {
                    const getrow = () => {
                      let rows = "";
                      applicateSql_result.map((a) => {
                        rows =
                          rows +
                          `<tr><td style="border: 1px solid #333;padding:5px;">${a.v_name
                          }</td>
                                  <td style="border: 1px solid #333;padding:5px;">${a.type
                          }</td>
                                  <td style="border: 1px solid #333;padding:5px;">${a.country_name
                          }</td>
                                  <td style="border: 1px solid #333;padding:5px;">${a.certificate_name
                          }</td>
                                  <td style="border: 1px solid #333;padding:5px;">${a.status_name
                          }</td>
                                  ${result[i].status_id == 23
                            ? `<td style="border: 1px solid #333;padding:5px;">${a.collector}</td>`
                            : ""
                          }</tr>`;
                      });
                      return rows;
                    };
                    let table1 = `<div>
                  <table style="border-collapse: collapse;" >
                    <tr>
                      <th style="border: 1px solid #333;padding:5px;">
                        Name
                      </th>
                      <th style="border: 1px solid #333;padding:5px;">Type</th>
                      <th style="border: 1px solid #333;padding:5px;">Country</th>
                      <th style="border: 1px solid #333;padding:5px;">Certificate</th>
                      <th style="border: 1px solid #333;padding:5px;">Status</th>
                      ${result[i].status_id == 23
                        ? '<th style="border: 1px solid #333;padding:5px;">Collected By</th>'
                        : ""
                      }
                    </tr>
                    ${getrow()}
                  </table>
                  </div>`;
                    let message = await sendmessage.getTemplate(etemp);
                    if (message.status != 0) {
                      message.template = message.template.replace(
                        "{:name:}",
                        result[i].c_prefix + " " + result[i].c_name
                      );
                      message.template = message.template.replace(
                        "{:table:}",
                        table1
                      );
                      message.template = message.template.replace(
                        "{:d_address:}",
                        result[i].d_address
                      );
                      message.template = message.template.replace(
                        "{:due_amt:}",
                        result[i].due_amt
                      );
                      message.template = message.template.replace(
                        "{:awb_no:}",
                        result[i].awb_no
                      );
                      message.template = message.template.replace(
                        "{:courier:}",
                        result[i].courier_name
                      );
                      message.template = message.template.replace(
                        "{:reason:}",
                        result[i].reason
                      );
                      if (result[i].status_id == 24) {
                        let website = await getwebsitename(
                          result[i].courier_id
                        );
                        message.template = message.template.replace(
                          "{:website:}",
                          website.result
                        );
                      }
                      let mess =
                        (message.header == 1
                          ? typeof senderMailSetting.email_template_header !=
                            undefined && senderMailSetting.email_template_header !=
                            undefined &&
                            senderMailSetting.email_template_header != null
                            ? senderMailSetting.email_template_header
                            : ""
                          : "") +
                        message.template +
                        (message.b_d_id != 0
                          ? message.b_d_id == 1
                            ? senderMailSetting.gst_bankdetails
                            : message.b_d_id == 2
                              ? senderMailSetting.ngst_bankdetails
                              : message.b_d_id == 3
                                ? senderMailSetting.general_bankdetails
                                : ""
                          : "") +
                        (message.footer == 1
                          ? senderMailSetting.email_template_footer
                          : "") +
                        (message.signature == 1
                          ? senderMailSetting.email_signature
                          : "");
                      CCMailSetting = await sendmessage.getEmailSetting(1);
                      // console.log("fgfhg", data.status_id);
                      sendmessagenow = sendmessage.customermessagesend(
                        senderMailSetting,
                        result[i].c_email,
                        mess,
                        `${message.subject} || ${result[i].c_prefix + " " + result[i].c_name
                        }`,
                        result[i].status_id != 16 &&
                          result[i].status_id != 21 &&
                          result[i].status_id != 24
                          ? etemp != 281 && etemp != 25 && etemp != 30 && etemp != 27 && etemp != 28 && etemp != 223 && etemp != 230 && etemp != 231 && etemp != 277 && etemp != 29 && result[i].ccemail
                          : "", //CCMailSetting.e_username,  // user mail
                        result[i].ccemail, // reply mail
                        1,
                        "info@hyderabadattestation.com"
                      );
                      if (result[i].status_id == 24) {
                        sendmessagenow = sendmessage.customermessagesend(
                          senderMailSetting,
                          CCMailSetting.cc_email,
                          mess,
                          `${message.subject} || ${result[i].c_prefix + " " + result[i].c_name
                          }`,
                          result[i].ccemail, //CCMailSetting.e_username,  // user mail
                          result[i].ccemail, // reply mail
                          1
                        );
                      }
                    }
                  }
                }
              );
            }
          }
          resolve({ status: 1, message: "Message send Successfully..." });
        }
      });
    });
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

//1403
async function sendEnquiryCronMail() {
  try {
    let insdate = moment().add(-1, "d").format("YYYY-MM-DD");
    let date = moment().add(-8, "d").format("YYYY-MM-DD");

    sql = `Select * from elead where l_status = 1 and (DATE_FORMAT(created_timestamp, '%Y-%m-%d') = '${insdate}' or DATE_FORMAT(created_timestamp, '%Y-%m-%d') = '${date}') `;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              result: result,
            });
          } else {
            resolve({
              status: 0,
              result: [],
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    let record = [];
    response.result.map(async (k) => {
      record.push(k);
    });
    await setcronenquirymailtemp(record);
    return record;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}
async function setcronenquirymailtemp(data1) {
  try {
    let response = await new Promise(async (resolve, reject) => {
      let messa1 = [];
      data1.map(async (data, index) => {
        let message = await sendmessage.getTemplate(9);
        let senderMailSetting = await sendmessage.getEmailSetting(
          data.l_created_by
        );

        sqlll = `SELECT u_email FROM users WHERE u_id = ${data.l_created_by} `;
        let ccmail = await new Promise((resolve, reject) => {
          con.query(sqlll, async function (err1, result1) {
            if (err1) {
              console.log(err1);
              resolve({ status: 0, message: "Something went to wrong" });
            } else {
              if (result1.length > 0) {
                resolve({ status: 1, result: result1[0].u_email });
              } else {
                resolve({
                  status: 0,
                  message: "Something went to wrong",
                });
              }
            }
          });
        });
        if (message.status != 0) {
          message.template = message.template.replace(
            "{:name:}",
            data.l_name_prefix + " " + data.l_name
          );
          let mess =
            (message.header == 1
              ? typeof senderMailSetting.email_template_header !=
                undefined && senderMailSetting.email_template_header != undefined &&
                senderMailSetting.email_template_header != null
                ? senderMailSetting.email_template_header
                : ""
              : "") +
            message.template +
            (message.b_d_id != 0
              ? message.b_d_id == 1
                ? senderMailSetting.gst_bankdetails
                : message.b_d_id == 2
                  ? senderMailSetting.ngst_bankdetails
                  : message.b_d_id == 3
                    ? senderMailSetting.general_bankdetails
                    : ""
              : "") +
            (message.footer == 1
              ? senderMailSetting.email_template_footer
              : "") +
            (message.signature == 1 ? senderMailSetting.email_signature : "");
          CCMailSetting = await sendmessage.getEmailSetting(1);
          sendmessagenow = sendmessage.onlycustomermessagesend(
            senderMailSetting,
            data.l_email,
            mess,
            `${message.subject} || ${data.l_name_prefix + " " + data.l_name}`,
            // ccmail.result, //CCMailSetting.e_username,  // user mail
            ccmail.result, // reply mail
            1
          );
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}
//1503
async function sendReadyforDispatchCronMail() {
  try {
    let sdate = moment().add(-10, "d").format("DD-MM-YYYY");
    let edate = moment().add(-1, "d").format("DD-MM-YYYY");
    let response = await new Promise(async (resolve, reject) => {
      sql = `SELECT customer.*,visa.v_id,details.detail_id,details.r_f_date,details.status_id,details.delivery_date,details.status_mail_date FROM customer,visa,details WHERE details.status_id = 22 and STR_TO_DATE(details.r_f_date,"%d-%m-%Y")>=STR_TO_DATE('${sdate}',"%d-%m-%Y") and STR_TO_DATE(details.r_f_date,"%d-%m-%Y")<=STR_TO_DATE('${edate}',"%d-%m-%Y") and customer.c_id=visa.c_id AND visa.v_id=details.service_id AND details.service_type=8 AND details.deleted=0 AND visa.deleted=0 AND  customer.is_cancel = 0 AND customer.is_block = 1 AND customer.deleted=0 GROUP BY customer.c_id
        UNION  SELECT customer.*,attestation.a_id,details.detail_id,details.r_f_date,details.status_id,details.delivery_date,details.status_mail_date FROM customer,attestation,details WHERE details.status_id = 22 and STR_TO_DATE(details.r_f_date,"%d-%m-%Y")>=STR_TO_DATE('${sdate}',"%d-%m-%Y") and STR_TO_DATE(details.r_f_date,"%d-%m-%Y")<=STR_TO_DATE('${edate}',"%d-%m-%Y") and customer.c_id=attestation.c_id AND attestation.a_id=details.service_id AND details.service_type=10 AND  customer.is_cancel = 0 AND customer.is_block = 1 AND details.deleted=0 AND attestation.deleted=0 AND customer.deleted=0 GROUP BY customer.c_id 
        UNION SELECT customer.*,apostille.a_id,details.detail_id,details.r_f_date,details.status_id,details.delivery_date,details.status_mail_date FROM customer,apostille,details WHERE details.status_id = 22 and STR_TO_DATE(details.r_f_date,"%d-%m-%Y")>=STR_TO_DATE('${sdate}',"%d-%m-%Y") and STR_TO_DATE(details.r_f_date,"%d-%m-%Y")<=STR_TO_DATE('${edate}',"%d-%m-%Y") and customer.c_id=apostille.c_id AND apostille.a_id=details.service_id AND details.service_type=17 AND details.deleted=0 AND apostille.deleted=0 AND customer.is_cancel = 0 AND customer.is_block = 1 AND customer.deleted=0 GROUP BY customer.c_id 
        UNION SELECT customer.*,translation.a_id,details.detail_id,details.r_f_date,details.status_id,details.delivery_date,details.status_mail_date FROM customer,translation,details WHERE details.status_id = 22 and STR_TO_DATE(details.r_f_date,"%d-%m-%Y")>=STR_TO_DATE('${sdate}',"%d-%m-%Y") and STR_TO_DATE(details.r_f_date,"%d-%m-%Y")<=STR_TO_DATE('${edate}',"%d-%m-%Y") and customer.c_id=translation.c_id AND translation.a_id=details.service_id AND details.service_type=20 AND details.deleted=0 AND translation.deleted=0  AND  customer.is_cancel = 0 AND customer.is_block = 1 AND customer.deleted=0 GROUP BY customer.c_id `;
      con.query(sql, async function (err, results) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (results.length > 0) {
            results.forEach(function (result) {
              resolve({
                status: 1,
                result: results,
              });
            });
          }
        }
      });
    });

    let record = [];
    response.result.map(async (k) => {
      record.push(k);
    });
    record.map(async (data, index) => {
      sqlllll = `select due_amt from payment where deleted=0 and invoice_status = 0 and c_id=${data.c_id} order by payment_id DESC limit 1`;
      let responsee = await new Promise((resolve, reject) => {
        con.query(sqlllll, async function (errr, resulttt) {
          if (errr) {
            console.log(errr);
            resolve({ status: 0, message: "Something went to wrong" });
          } else {
            if (resulttt.length > 0) {
              resolve({ status: 1, result: resulttt[0].due_amt });
            }
          }
        });
      });

      sql123 = `select awb_no,courier_id,(select name from attributes where attributes.attribute_id= details.courier_id)as courier_name  from details where deleted=0 and  detail_id = ${data.detail_id}`;
      let res123 = await new Promise((resolve, reject) => {
        con.query(sql123, async function (errr, resulttt) {
          if (errr) {
            console.log(errr);
            resolve({ status: 0, message: "Something went to wrong" });
          } else {
            if (resulttt.length > 0) {
              resolve({
                status: 1,
                awb_no: resulttt[0].awb_no,
                courier_name: resulttt[0].courier_name,
              });
            }
          }
        });
      });
      let etemp = 0;
      if (data.status_id == 22) {
        if (responsee.result == "0") {
          if (
            data.d_address != "" &&
            data.d_address != null &&
            data.d_address != undefined
          ) {
            etemp = parseInt(230);
          } else {
            etemp = parseInt(231);
          }
        } else {
          if (data.c_tax == 0) {
            if (
              data.d_address != "" &&
              data.d_address != null &&
              data.d_address != undefined
            ) {
              etemp = parseInt(223);
            } else {
              etemp = parseInt(277);
              // etemp = parseInt(161);
            }
          } else {
            if (
              data.d_address != "" &&
              data.d_address != null &&
              data.d_address != undefined
            ) {
              etemp = parseInt(27);
              // etemp = parseInt(163);
            } else {
              etemp = parseInt(28);
              // etemp = parseInt(164);
            }
          }
        }
      }
      let senderMailSetting = await sendmessage.getEmailSetting(
        data.created_id
      );

      sqlll = `SELECT u_email FROM users WHERE u_id = ${data.created_id} `;
      let ccmail = await new Promise((resolve, reject) => {
        con.query(sqlll, async function (err1, result1) {
          if (err1) {
            console.log(err1);
            resolve({ status: 0, message: "Something went to wrong" });
          } else {
            if (result1.length > 0) {
              resolve({ status: 1, result: result1[0].u_email });
            } else {
              resolve({
                status: 0,
                message: "Something went to wrong",
              });
            }
          }
        });
      });

      if (data.c_s_type == 10) {
        sqll = `Select attestation.*,details.d_c_id,details.service_type,(SELECT name FROM attributes WHERE attribute_id=details.status_id)as status_name ,(SELECT name FROM attributes WHERE attribute_id=details.d_c_id)as certificate_name,(SELECT name FROM attributes WHERE attribute_id=attestation.a_country)as country_name,(SELECT name FROM attributes WHERE attribute_id=attestation.a_type)as type FROM attestation RIGHT JOIN details ON  attestation.a_id=details.service_id WHERE  details.service_type=10 AND attestation.c_id = ${data.c_id} and attestation.deleted = 0 `;
      } else if (data.c_s_type == 8) {
        sqll = `Select visa.*,details.d_c_id,details.service_type,(SELECT name FROM attributes WHERE attribute_id=details.status_id)as status_name,(SELECT name FROM attributes WHERE attribute_id=details.d_c_id)as country_name,(SELECT name FROM attributes WHERE attribute_id=visa.v_type)as type,(SELECT GROUP_CONCAT(attributes.name SEPARATOR ',') as name FROM attributes where FIND_IN_SET (attributes.attribute_id , visa.v_supporting_doc)) as certificate_name  FROM visa RIGHT JOIN details ON  visa.v_id=details.service_id   WHERE   details.service_type=8 AND visa.c_id = ${data.c_id} and visa.deleted = 0`;
      } else if (data.c_s_type == 17) {
        sqll = `Select apostille.*,details.d_c_id,details.service_type,(SELECT name FROM attributes WHERE attribute_id=details.status_id)as status_name,(SELECT name FROM attributes WHERE attribute_id=details.d_c_id)as certificate_name,(SELECT name FROM attributes WHERE attribute_id=apostille.a_country)as country_name,(SELECT name FROM attributes WHERE attribute_id=apostille.a_type)as type  FROM apostille RIGHT JOIN details ON apostille.a_id=details.service_id  WHERE  details.service_type=17 AND apostille.c_id = ${data.c_id} and apostille.deleted = 0`;
      } else {
        sqll = `Select translation.*,details.d_c_id,details.service_type,(SELECT name FROM attributes WHERE attribute_id=details.status_id)as status_name,(SELECT name FROM attributes WHERE attribute_id=details.d_c_id)as certificate_name,(SELECT name FROM attributes WHERE attribute_id=translation.a_country)as country_name,(SELECT name FROM attributes WHERE attribute_id=translation.a_type)as type  FROM translation RIGHT JOIN details ON translation.a_id=details.service_id  WHERE  details.service_type=20 AND translation.c_id = ${data.c_id} and translation.deleted = 0`;
      }
      con.query(sqll, async function (errr, resultss) {
        if (errr) {
          console.log("Something went wrong");
        }
        if (resultss.length > 0) {
          const getrow = () => {
            let rows = "";
            resultss.map((a) => {
              a.service_type == 8
                ? (rows =
                  rows +
                  `<tr><td style="border: 1px solid #333;padding:5px;">${a.v_name}</td>
    <td style="border: 1px solid #333;padding:5px;">${a.type}</td>
    <td style="border: 1px solid #333;padding:5px;">${a.country_name}</td>
    <td style="border: 1px solid #333;padding:5px;">${a.certificate_name}</td>
    <td style="border: 1px solid #333;padding:5px;">${a.status_name}</td></tr>`)
                : (rows =
                  rows +
                  `<tr><td style="border: 1px solid #333;padding:5px;">${a.a_name}</td>
    <td style="border: 1px solid #333;padding:5px;">${a.type}</td>
    <td style="border: 1px solid #333;padding:5px;">${a.country_name}</td>
    <td style="border: 1px solid #333;padding:5px;">${a.certificate_name}</td>
    <td style="border: 1px solid #333;padding:5px;">${a.status_name}</td></tr>`);
            });
            return rows;
          };
          let table1 = `<div>
  <table style="border-collapse: collapse;" >
  <tr>
  <th style="border: 1px solid #333;padding:5px;">
  Name
  </th>
  <th style="border: 1px solid #333;padding:5px;">Type</th>
  <th style="border: 1px solid #333;padding:5px;">Country</th>
  <th style="border: 1px solid #333;padding:5px;">Certificate</th>
  <th style="border: 1px solid #333;padding:5px;">Status</th>
  </tr>
  ${getrow()}
  </table>
  </div>`;

          let message = await sendmessage.getTemplate(etemp);
          if (message.status != 0) {
            message.template = message.template.replace(
              "{:name:}",
              data.c_prefix + " " + data.c_name
            );
            message.template = message.template.replace("{:table:}", table1);
            message.template = message.template.replace(
              "{:d_address:}",
              data.d_address
            );
            message.template = message.template.replace(
              "{:due_amt:}",
              responsee.result
            );
            message.template = message.template.replace(
              "{:awb_no:}",
              res123.awb_no
            );
            message.template = message.template.replace(
              "{:courier:}",
              res123.courier_name
            );
            let mess =
              (message.header == 1
                ? typeof senderMailSetting.email_template_header !=
                  undefined && senderMailSetting.email_template_header != undefined &&
                  senderMailSetting.email_template_header != null
                  ? senderMailSetting.email_template_header
                  : ""
                : "") +
              message.template +
              (message.b_d_id != 0
                ? message.b_d_id == 1
                  ? senderMailSetting.gst_bankdetails
                  : message.b_d_id == 2
                    ? senderMailSetting.ngst_bankdetails
                    : message.b_d_id == 3
                      ? senderMailSetting.general_bankdetails
                      : ""
                : "") +
              // (data.created_id == 1
              //   ? data.c_tax == 0
              //     ? senderMailSetting.bank_details
              //     : senderMailSetting.nongst_bank_details
              //   : data.c_tax == 0
              //     ? senderMailSetting.b_bank_details
              //     : senderMailSetting.b_nongst_bank_deatils) +
              (message.footer == 1
                ? senderMailSetting.email_template_footer
                : "") +
              (message.signature == 1 ? senderMailSetting.email_signature : "");
            CCMailSetting = await sendmessage.getEmailSetting(1);
            sendmessagenow = sendmessage.customermessagesend(
              senderMailSetting,
              data.c_email,
              mess,
              `${message.subject} || ${data.c_prefix + " " + data.c_name}`,
              "", //CCMailSetting.e_username,  // user mail
              ccmail.result, // reply mail
              1,
              "info@hyderabadattestation.com"
            );
          }
        }
      });
    });
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function sendReadyforDispatchUserCronMail() {
  try {
    //11 days before check
    let n_date = moment().add(-11, "d").format("DD-MM-YYYY");
    let response = await new Promise(async (resolve, reject) => {
      checksql = `SELECT customer.*,visa.v_id,details.detail_id,details.r_f_date,details.status_id,details.delivery_date,details.status_mail_date FROM customer,visa,details WHERE details.status_id = 22 and STR_TO_DATE(details.r_f_date,"%d-%m-%Y") = STR_TO_DATE('${n_date}',"%d-%m-%Y") and customer.c_id=visa.c_id AND visa.v_id=details.service_id AND details.service_type=8 AND details.deleted=0 AND visa.deleted=0 AND  customer.is_cancel = 0 AND customer.is_block = 1 AND customer.deleted=0 GROUP BY customer.c_id
        UNION  SELECT customer.*,attestation.a_id,details.detail_id,details.r_f_date,details.status_id,details.delivery_date,details.status_mail_date FROM customer,attestation,details WHERE details.status_id = 22 and STR_TO_DATE(details.r_f_date,"%d-%m-%Y") = STR_TO_DATE('${n_date}',"%d-%m-%Y") and customer.c_id=attestation.c_id AND attestation.a_id=details.service_id AND details.service_type=10 AND  customer.is_cancel = 0 AND customer.is_block = 1 AND details.deleted=0 AND attestation.deleted=0 AND customer.deleted=0 GROUP BY customer.c_id 
        UNION SELECT customer.*,apostille.a_id,details.detail_id,details.r_f_date,details.status_id,details.delivery_date,details.status_mail_date FROM customer,apostille,details WHERE details.status_id = 22 and STR_TO_DATE(details.r_f_date,"%d-%m-%Y") = STR_TO_DATE('${n_date}',"%d-%m-%Y")  and customer.c_id=apostille.c_id AND apostille.a_id=details.service_id AND details.service_type=17 AND details.deleted=0 AND apostille.deleted=0 AND customer.is_cancel = 0 AND customer.is_block = 1 AND customer.deleted=0 GROUP BY customer.c_id 
        UNION SELECT customer.*,translation.a_id,details.detail_id,details.r_f_date,details.status_id,details.delivery_date,details.status_mail_date FROM customer,translation,details WHERE details.status_id = 22 and STR_TO_DATE(details.r_f_date,"%d-%m-%Y")= STR_TO_DATE('${n_date}',"%d-%m-%Y") and customer.c_id=translation.c_id AND translation.a_id=details.service_id AND details.service_type=20 AND details.deleted=0 AND translation.deleted=0  AND  customer.is_cancel = 0 AND customer.is_block = 1 AND customer.deleted=0 GROUP BY customer.c_id `;
      con.query(checksql, async function (err, results) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (results.length > 0) {
            results.forEach(function (result) {
              resolve({
                status: 1,
                result: results,
              });
            });
          }
        }
      });
    });
    let record = [];
    response.result.map(async (k) => {
      record.push(k);
    });
    record.map(async (data, index) => {
      sqlllll = `select due_amt from payment where deleted=0 and invoice_status = 0 and c_id=${data.c_id} order by payment_id DESC limit 1`;
      let responsee = await new Promise((resolve, reject) => {
        con.query(sqlllll, async function (errr, resulttt) {
          if (errr) {
            console.log(errr);
            resolve({ status: 0, message: "Something went to wrong" });
          } else {
            if (resulttt.length > 0) {
              resolve({ status: 1, result: resulttt[0].due_amt });
            }
          }
        });
      });

      sql123 = `select awb_no,courier_id,(select name from attributes where attributes.attribute_id= details.courier_id)as courier_name  from details where deleted=0 and  detail_id = ${data.detail_id}`;
      let res123 = await new Promise((resolve, reject) => {
        con.query(sql123, async function (errr, resulttt) {
          if (errr) {
            console.log(errr);
            resolve({ status: 0, message: "Something went to wrong" });
          } else {
            if (resulttt.length > 0) {
              resolve({
                status: 1,
                awb_no: resulttt[0].awb_no,
                courier_name: resulttt[0].courier_name,
              });
            }
          }
        });
      });

      branchUser = `select u_email from users where u_id = ${data.branch_id}`;
      let branchUserResp = await new Promise((resolve, reject) => {
        con.query(
          branchUser,
          async function (branchUser_errr, branchUser_resulttt) {
            if (branchUser_errr) {
              console.log(branchUser_errr);
              resolve({ status: 0, message: "Something went to wrong" });
            } else {
              if (branchUser_resulttt.length > 0) {
                resolve({
                  status: 1,
                  branch_email: branchUser_resulttt[0].u_email,
                });
              }
            }
          }
        );
      });
      user = `select u_email from users where u_id = ${data.u_id}`;
      let userResp = await new Promise((resolve, reject) => {
        con.query(user, async function (user_errr, user_resulttt) {
          if (user_errr) {
            console.log(user_errr);
            resolve({ status: 0, message: "Something went to wrong" });
          } else {
            if (user_resulttt.length > 0) {
              resolve({
                status: 1,
                user_email: user_resulttt[0].u_email,
              });
            }
          }
        });
      });

      let senderMailSetting = await sendmessage.getEmailSetting(
        data.created_id
      );

      sqlll = `SELECT u_email FROM users WHERE u_id = ${data.created_id} `;
      let ccmail = await new Promise((resolve, reject) => {
        con.query(sqlll, async function (err1, result1) {
          if (err1) {
            console.log(err1);
            resolve({ status: 0, message: "Something went to wrong" });
          } else {
            if (result1.length > 0) {
              resolve({ status: 1, result: result1[0].u_email });
            } else {
              resolve({
                status: 0,
                message: "Something went to wrong",
              });
            }
          }
        });
      });

      if (data.c_s_type == 10) {
        sqll = `Select attestation.*,details.d_c_id,details.service_type,(SELECT name FROM attributes WHERE attribute_id=details.status_id)as status_name ,(SELECT name FROM attributes WHERE attribute_id=details.d_c_id)as certificate_name,(SELECT name FROM attributes WHERE attribute_id=attestation.a_country)as country_name,(SELECT name FROM attributes WHERE attribute_id=attestation.a_type)as type FROM attestation RIGHT JOIN details ON  attestation.a_id=details.service_id WHERE  details.service_type=10 AND attestation.c_id = ${data.c_id} and attestation.deleted = 0 `;
      } else if (data.c_s_type == 8) {
        sqll = `Select visa.*,details.d_c_id,details.service_type,(SELECT name FROM attributes WHERE attribute_id=details.status_id)as status_name,(SELECT name FROM attributes WHERE attribute_id=details.d_c_id)as country_name,(SELECT name FROM attributes WHERE attribute_id=visa.v_type)as type,(SELECT GROUP_CONCAT(attributes.name SEPARATOR ',') as name FROM attributes where FIND_IN_SET (attributes.attribute_id , visa.v_supporting_doc)) as certificate_name  FROM visa RIGHT JOIN details ON  visa.v_id=details.service_id   WHERE   details.service_type=8 AND visa.c_id = ${data.c_id} and visa.deleted = 0`;
      } else if (data.c_s_type == 17) {
        sqll = `Select apostille.*,details.d_c_id,details.service_type,(SELECT name FROM attributes WHERE attribute_id=details.status_id)as status_name,(SELECT name FROM attributes WHERE attribute_id=details.d_c_id)as certificate_name,(SELECT name FROM attributes WHERE attribute_id=apostille.a_country)as country_name,(SELECT name FROM attributes WHERE attribute_id=apostille.a_type)as type  FROM apostille RIGHT JOIN details ON apostille.a_id=details.service_id  WHERE  details.service_type=17 AND apostille.c_id = ${data.c_id} and apostille.deleted = 0`;
      } else {
        sqll = `Select translation.*,details.d_c_id,details.service_type,(SELECT name FROM attributes WHERE attribute_id=details.status_id)as status_name,(SELECT name FROM attributes WHERE attribute_id=details.d_c_id)as certificate_name,(SELECT name FROM attributes WHERE attribute_id=translation.a_country)as country_name,(SELECT name FROM attributes WHERE attribute_id=translation.a_type)as type  FROM translation RIGHT JOIN details ON translation.a_id=details.service_id  WHERE  details.service_type=20 AND translation.c_id = ${data.c_id} and translation.deleted = 0`;
      }
      con.query(sqll, async function (errr, resultss) {
        if (errr) {
          console.log("Something went wrong");
        }
        if (resultss.length > 0) {
          const getrow = () => {
            let rows = "";
            resultss.map((a) => {
              a.service_type == 8
                ? (rows =
                  rows +
                  `<tr><td style="border: 1px solid #333;padding:5px;">${a.v_name}</td>
    <td style="border: 1px solid #333;padding:5px;">${a.type}</td>
    <td style="border: 1px solid #333;padding:5px;">${a.country_name}</td>
    <td style="border: 1px solid #333;padding:5px;">${a.certificate_name}</td>
    <td style="border: 1px solid #333;padding:5px;">${a.status_name}</td></tr>`)
                : (rows =
                  rows +
                  `<tr><td style="border: 1px solid #333;padding:5px;">${a.a_name}</td>
    <td style="border: 1px solid #333;padding:5px;">${a.type}</td>
    <td style="border: 1px solid #333;padding:5px;">${a.country_name}</td>
    <td style="border: 1px solid #333;padding:5px;">${a.certificate_name}</td>
    <td style="border: 1px solid #333;padding:5px;">${a.status_name}</td></tr>`);
            });
            return rows;
          };
          let table1 = `<div>
  <table style="border-collapse: collapse;" >
  <tr>
  <th style="border: 1px solid #333;padding:5px;">
  Name
  </th>
  <th style="border: 1px solid #333;padding:5px;">Type</th>
  <th style="border: 1px solid #333;padding:5px;">Country</th>
  <th style="border: 1px solid #333;padding:5px;">Certificate</th>
  <th style="border: 1px solid #333;padding:5px;">Status</th>
  </tr>
  ${getrow()}
  </table>
  </div>`;

          let message = await sendmessage.getTemplate(278);
          if (message.status != 0) {
            message.template = message.template.replace(
              "{:name:}",
              data.c_prefix + " " + data.c_name
            );
            message.template = message.template.replace("{:table:}", table1);
            message.template = message.template.replace(
              "{:d_address:}",
              data.d_address
            );
            message.template = message.template.replace(
              "{:due_amt:}",
              responsee.result
            );
            message.template = message.template.replace(
              "{:awb_no:}",
              res123.awb_no
            );
            message.template = message.template.replace(
              "{:courier:}",
              res123.courier_name
            );
            let mess =
              (message.header == 1
                ? typeof senderMailSetting.email_template_header !=
                  undefined && senderMailSetting.email_template_header != undefined &&
                  senderMailSetting.email_template_header != null
                  ? senderMailSetting.email_template_header
                  : ""
                : "") +
              message.template +
              (message.b_d_id != 0
                ? message.b_d_id == 1
                  ? senderMailSetting.gst_bankdetails
                  : message.b_d_id == 2
                    ? senderMailSetting.ngst_bankdetails
                    : message.b_d_id == 3
                      ? senderMailSetting.general_bankdetails
                      : ""
                : "") +
              // (data.created_id == 1
              //   ? data.c_tax == 0
              //     ? senderMailSetting.bank_details
              //     : senderMailSetting.nongst_bank_details
              //   : data.c_tax == 0
              //     ? senderMailSetting.b_bank_details
              //     : senderMailSetting.b_nongst_bank_deatils) +
              (message.footer == 1
                ? senderMailSetting.email_template_footer
                : "") +
              (message.signature == 1 ? senderMailSetting.email_signature : "");
            CCMailSetting = await sendmessage.getEmailSetting(1);
            sendmessagenow = sendmessage.customermessagesend(
              senderMailSetting,
              branchUserResp.branch_email,
              mess,
              `${message.subject} || ${data.c_prefix + " " + data.c_name}`,
              ccmail.result, //CCMailSetting.e_username,  // user mail
              ccmail.result, // reply mail
              1
            );
            sendmessagenow = sendmessage.customermessagesend(
              senderMailSetting,
              userResp.user_email,
              mess,
              `${message.subject} || ${data.c_prefix + " " + data.c_name}`,
              ccmail.result, //CCMailSetting.e_username,  // user mail
              ccmail.result, // reply mail
              1
            );
          }
        }
      });
    });
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}
async function getwebsitename(data) {
  try {
    sqlll = `SELECT website FROM attributes WHERE attribute_id = ${data} `;
    let response = await new Promise((resolve, reject) => {
      con.query(sqlll, async function (err1, result1) {
        if (err1) {
          console.log(err1);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result1.length > 0) {
            resolve({ status: 1, result: result1[0].website });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

//2903
async function sendCodeMail(data) {
  try {
    let all_cust = [
      ...new Map(data.map((item) => [item["c_id"], item])).values(),
    ];
    for (let i = 0; i < all_cust.length; i++) {
      let sqlData = "";
      cust = [];
      applicate_list = [];

      let response1 = await new Promise((resolve, reject) => {
        if (all_cust[i].c_s_type == 10) {
          sqlData = `select attestation.*,(SELECT GROUP_CONCAT(attributes.name SEPARATOR ',') as name FROM attributes where FIND_IN_SET (attributes.attribute_id , attestation.a_certificate)) as attestation_certificate,a2.name as attestation_country,a3.name as attestation_type from customer left join attestation on attestation.c_id = customer.c_id  left join attributes a2 on a2.attribute_id =attestation.a_country  left join attributes a3 on a3.attribute_id =attestation.a_type  where customer.c_id = ${all_cust[i].c_id} and customer.deleted = 0  and customer.is_cancel = 0 and customer.is_block = 1 and customer.c_s_type = 10 and attestation.deleted = 0 `;
        } else if (all_cust[i].c_s_type == 17) {
          sqlData = `select apostille.*,(SELECT GROUP_CONCAT(attributes.name SEPARATOR ',') as name FROM attributes where FIND_IN_SET (attributes.attribute_id , apostille.a_certificate)) as apostille_certificate,a2.name as apostille_country,a3.name as apostille_type from customer left join apostille on apostille.c_id = customer.c_id  left join attributes a2 on a2.attribute_id =apostille.a_country  left join attributes a3 on a3.attribute_id =apostille.a_type  where customer.c_id = ${all_cust[i].c_id} and customer.deleted = 0  and customer.is_cancel = 0 and customer.is_block = 1 and customer.c_s_type = 17 and apostille.deleted = 0  `;
        } else if (all_cust[i].c_s_type == 20) {
          sqlData = `select translation.*,(SELECT GROUP_CONCAT(attributes.name SEPARATOR ',') as name FROM attributes where FIND_IN_SET (attributes.attribute_id , translation.a_certificate)) as translation_certificate,a2.name as translation_country,a3.name as translation_type from customer left join translation on translation.c_id = customer.c_id  left join attributes a2 on a2.attribute_id =translation.a_country  left join attributes a3 on a3.attribute_id =translation.a_type  where customer.c_id = ${all_cust[i].c_id} and customer.deleted = 0  and customer.is_cancel = 0 and customer.is_block = 1 and customer.c_s_type = 20 and translation.deleted = 0 `;
        } else {
          sqlData = `select visa.*,(SELECT GROUP_CONCAT(attributes.name SEPARATOR ',') as name FROM attributes where FIND_IN_SET (attributes.attribute_id , visa.v_country)) as visa_country,(SELECT GROUP_CONCAT(attributes.name SEPARATOR ',') as name FROM attributes where FIND_IN_SET (attributes.attribute_id , visa.v_supporting_doc)) as supporting_doc,a3.name as visa_type from customer left join visa on visa.c_id = customer.c_id left join attributes a3 on a3.attribute_id =visa.v_type where customer.c_id = ${all_cust[i].c_id} and customer.deleted = 0  and customer.is_cancel = 0 and customer.is_block = 1 and customer.c_s_type = 8 and visa.deleted = 0 `;
        }

        con.query(sqlData, async function (err1, result1) {
          if (err1) {
            console.log(err1);
            resolve({ status: 0, message: "Something went to wrong" });
          } else {
            if (result1.length > 0) {
              all_cust[i] = { ...all_cust[i], applicant_data: result1 };
              resolve({
                status: 1,
                result: all_cust,
              });
            } else {
              resolve({
                status: 0,
                result: [],
              });
            }
          }
        });
      });
    }
    let code_data = [];
    for (let i = 0; i < all_cust.length; i++) {
      code_data.push(
        ...new Map(
          all_cust[i].applicant_data.map((item) => [
            item[all_cust[i].service_type == 8 ? "v_code" : "a_code"],
            { ...all_cust[i], comman_data: item },
          ])
        ).values()
      );
    }
    let sqlll = "";
    let sql = "";

    for (let i = 0; i < code_data.length; i++) {
      let senderMailSetting = await sendmessage.getEmailSetting(
        code_data[i].u_id
      );

      sql = `Select name,code_email from attributes where attribute_id = ${code_data[i].service_type == 8
        ? code_data[i].comman_data.v_code
        : code_data[i].comman_data.a_code
        }`;

      let res = await new Promise((resolve, reject) => {
        con.query(sql, async function (err1, result1) {
          if (err1) {
            console.log(err1);
            resolve({ status: 0, message: "Something went to wrong" });
          } else {
            if (result1.length > 0) {
              const getrow = () => {
                let rows = "";
                for (let j = 0; j < code_data[i].applicant_data.length; j++) {
                  if (
                    (code_data[i].service_type == 8
                      ? code_data[i].comman_data.v_code
                      : code_data[i].comman_data.a_code) ==
                    (code_data[i].service_type == 8
                      ? code_data[i].applicant_data[j].v_code
                      : code_data[i].applicant_data[j].a_code)
                  ) {
                    code_data[i].service_type == 8 &&
                      (rows =
                        rows +
                        `<tr><td style="border: 1px solid #333;padding:5px;">${code_data[i].under_process_date
                          ? code_data[i].under_process_date
                          : code_data[i].process_date
                        }</td>
                    <td style="border: 1px solid #333;padding:5px;">${code_data[i].applicant_data[j].v_prefix
                        } ${code_data[i].applicant_data[j].v_name}</td>
                    <td style="border: 1px solid #333;padding:5px;">${code_data[i].applicant_data[j].supporting_doc
                        }</td>
                    <td style="border: 1px solid #333;padding:5px;">${code_data[i].applicant_data[j].visa_country
                        }</td>
                    <td style="border: 1px solid #333;padding:5px;">${code_data[i].applicant_data[j].visa_type
                        }</td></tr>`);
                    code_data[i].service_type == 10 &&
                      (rows =
                        rows +
                        `<tr><td style="border: 1px solid #333;padding:5px;">${code_data[i].under_process_date
                          ? code_data[i].under_process_date
                          : code_data[i].process_date
                        }</td>
                    <td style="border: 1px solid #333;padding:5px;">${code_data[i].applicant_data[j].a_prefix
                        } ${code_data[i].applicant_data[j].a_name}</td>
                    <td style="border: 1px solid #333;padding:5px;">${code_data[i].applicant_data[j].attestation_certificate
                        }</td>
                    <td style="border: 1px solid #333;padding:5px;">${code_data[i].applicant_data[j].attestation_country
                        }</td>
                    <td style="border: 1px solid #333;padding:5px;">${code_data[i].applicant_data[j].attestation_type
                        }</td></tr>`);
                    code_data[i].service_type == 17 &&
                      (rows =
                        rows +
                        `<tr><td style="border: 1px solid #333;padding:5px;">${code_data[i].under_process_date
                          ? code_data[i].under_process_date
                          : code_data[i].process_date
                        }</td>
                    <td style="border: 1px solid #333;padding:5px;">${code_data[i].applicant_data[j].a_prefix
                        } ${code_data[i].applicant_data[j].a_name}</td>
                    <td style="border: 1px solid #333;padding:5px;">${code_data[i].applicant_data[j].apostille_certificate
                        }</td>
                    <td style="border: 1px solid #333;padding:5px;">${code_data[i].applicant_data[j].apostille_country
                        }</td>
                    <td style="border: 1px solid #333;padding:5px;">${code_data[i].applicant_data[j].apostille_type
                        }</td></tr>`);
                    code_data[i].service_type == 20 &&
                      (rows =
                        rows +
                        `<tr><td style="border: 1px solid #333;padding:5px;">${code_data[i].under_process_date
                          ? code_data[i].under_process_date
                          : code_data[i].process_date
                        }</td>
                    <td style="border: 1px solid #333;padding:5px;">${code_data[i].applicant_data[j].a_prefix
                        } ${code_data[i].applicant_data[j].a_name}</td>
                    <td style="border: 1px solid #333;padding:5px;">${code_data[i].translation_certificate
                        }</td>
                    <td style="border: 1px solid #333;padding:5px;">${code_data[i].applicant_data[j].translation_country
                        }</td>
                    <td style="border: 1px solid #333;padding:5px;">${code_data[i].applicant_data[j].translation_type
                        }</td></tr>`);
                  } else {
                    console.log("elseeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee");
                  }
                }
                return rows;
              };
              let table1 = `<div>
                      <table style="border-collapse: collapse;" >
                      <tr>
                      <th style="border: 1px solid #333;padding:5px;">
                      Process start date
                      </th>
                      <th style="border: 1px solid #333;padding:5px;">Applicant name</th>
                      <th style="border: 1px solid #333;padding:5px;">Certificate name</th>
                      <th style="border: 1px solid #333;padding:5px;">County name</th>
                      <th style="border: 1px solid #333;padding:5px;">Process type</th>
                      </tr>
                      ${getrow()}
                      </table>
                      </div>`;

              let message = await sendmessage.getTemplate(287);
              if (message.status != 0) {
                message.template = message.template.replace(
                  "{:code:}",
                  result1[0].name
                );

                message.template = message.template.replace(
                  "{:table:}",
                  table1
                );
                let mess =
                  (message.header == 1
                    ? typeof senderMailSetting.email_template_header !=
                      undefined && senderMailSetting.email_template_header != undefined &&
                      senderMailSetting.email_template_header != null
                      ? senderMailSetting.email_template_header
                      : ""
                    : "") +
                  message.template +
                  (message.b_d_id != 0
                    ? message.b_d_id == 1
                      ? senderMailSetting.gst_bankdetails
                      : message.b_d_id == 2
                        ? senderMailSetting.ngst_bankdetails
                        : message.b_d_id == 3
                          ? senderMailSetting.general_bankdetails
                          : ""
                    : "") +
                  // (data.created_id == 1
                  //   ? data.c_tax == 0
                  //     ? senderMailSetting.bank_details
                  //     : senderMailSetting.nongst_bank_details
                  //   : data.c_tax == 0
                  //     ? senderMailSetting.b_bank_details
                  //     : senderMailSetting.b_nongst_bank_deatils) +
                  (message.footer == 1
                    ? senderMailSetting.email_template_footer
                    : "") +
                  (message.signature == 1
                    ? senderMailSetting.email_signature
                    : "");
                CCMailSetting = await sendmessage.getEmailSetting(1);
                sendmessagenow = sendmessage.codeMailSend(
                  senderMailSetting,
                  result1[0].code_email,
                  mess,
                  `${message.subject}  || ${code_data[i].c_prefix} ${code_data[i].customer_name}`,
                  senderMailSetting.e_username,
                  1
                );
                resolve({
                  status: 1,
                  message: "Mail sent Suceesfully",
                });
              }
            }
          }
        });
      });
      if (code_data.length - 1 == i) {
        return res;
      }
    }
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}
async function getDetailId(data) {
  try {
    let custData = data.customerArray;
    let sql = "";
    if (data.c_s_type == 10) {
      sql = `SELECT GROUP_CONCAT(details.detail_id SEPARATOR ',') as detail_id FROM attestation inner join details on details.service_id = attestation.a_id and details.service_type = 10 WHERE attestation.c_id IN(${custData}) and attestation.deleted = 0 AND details.deleted = 0 `;
    } else if (data.c_s_type == 17) {
      sql = `SELECT GROUP_CONCAT(details.detail_id SEPARATOR ',') as detail_id FROM apostille inner join details on details.service_id = apostille.a_id and details.service_type = 17 WHERE apostille.c_id IN(${custData}) and apostille.deleted = 0 AND details.deleted = 0 `;
    } else if (data.c_s_type == 20) {
      sql = `SELECT GROUP_CONCAT(details.detail_id SEPARATOR ',') as detail_id FROM translation inner join details on details.service_id = translation.a_id and details.service_type = 20 WHERE translation.c_id IN(${custData}) and translation.deleted = 0 AND details.deleted = 0 `;
    } else {
      sql = `SELECT GROUP_CONCAT(details.detail_id SEPARATOR ',') as detail_id FROM visa inner join details on details.service_id = visa.v_id and details.service_type = 8 WHERE visa.c_id IN(${custData}) and visa.deleted = 0 AND details.deleted = 0 `;
    }
    let response = await new Promise((resolve, reject) => {
      con.query(sql, async function (err1, result1) {
        if (err1) {
          console.log(err1);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result1.length > 0) {
            resolve({
              status: 1,
              data: result1[0].detail_id,
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}
async function getallDispatchingApplication(data) {
  try {
    let cbranchid;
    if (data.branch_id == undefined) {
      cbranchid = 0;
    } else {
      cbranchid = data.branch_id;
    }
    let getbadmin = `SELECT users.* FROM users JOIN branch WHERE branch.branch_id=users.branch_id and users.branch_id=${cbranchid} AND user_type=1 AND users.deleted=0`;

    let bresponse = await new Promise(async (resolve, reject) => {
      con.query(getbadmin, async function (err, results) {
        if (err) {
          console.log(err);
          console.log("Something went wrong");
        } else {
          if (results != undefined) {
            if (results.length > 0) {
              resolve({
                status: 1,
                results: results[0],
              });
            } else {
              console.log("There is no data Found....111");
              resolve({
                status: 0,
                results: [],
              });
            }
          } else {
            resolve({
              status: 0,
              results: [],
            });
          }
        }
      });
    });

    let sadmin = `SELECT users.* FROM users where u_id=1 and users.deleted=0`;
    let sresponse = await new Promise(async (resolve, reject) => {
      con.query(sadmin, async function (err, results) {
        if (err) {
          console.log(err);
          console.log("Something went wrong");
        } else {
          if (results != undefined) {
            if (results.length > 0) {
              resolve({
                status: 1,
                results: results[0],
              });
            } else {
              console.log("There is no data Found....222");
              resolve({
                status: 0,
                results: [],
              });
            }
          } else {
            resolve({
              status: 0,
              results: [],
            });
          }
        }
      });
    });
    let record = [];
    getuserquery = `select * from users where u_id=${data.u_id} and deleted=0`;
    let response = await new Promise((resolve, reject) => {
      con.query(getuserquery, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            if (result[0].user_type == 1) {
              getallchilduser = `select * from users where (p_u_id=${data.u_id} and branch_id=${result[0].branch_id}) and deleted=0`;
              con.query(getallchilduser, function (err, res) {
                if (err) {
                  console.log(err);
                  resolve({ status: 0, message: "Something went to wrong" });
                } else {
                  res.forEach(function (r) {
                    record.push(r.u_id);
                  });
                  resolve({
                    record: record,
                    user_type: result[0].user_type,
                    s_u_permission: result[0].s_u_permission,
                  });
                }
              });
            } else {
              resolve({
                user_type: result[0].user_type,
                s_u_permission: result[0].s_u_permission,
              });
            }
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    let sql = "";
    if (response.user_type == 0) {
      sql = `Select branch.b_name as branch_name,customer.c_id,customer.c_s_type,customer.c_name,customer.created_id,customer.created_branch_id,customer.c_prefix,customer.tracking_id,attributes.name as courier_company_name,details.dispatching_date from customer left join attestation on attestation.c_id = customer.c_id  left join details on details.service_id = attestation.a_id left join attributes on attributes.attribute_id = details.courier_id left join branch on branch.branch_id = customer.branch_id where customer.deleted = 0 and customer.is_cancel = 0 and customer.is_block = 1 and details.status_id = 26 and details.service_type = 10 and details.deleted = 0 and attestation.deleted  = 0 GROUP BY customer.c_id 
      UNION Select branch.b_name as branch_name,customer.c_id,customer.c_s_type,customer.c_name,customer.created_id,customer.created_branch_id,customer.c_prefix,customer.tracking_id,attributes.name as courier_company_name,details.dispatching_date from customer left join apostille on apostille.c_id = customer.c_id left join details on details.service_id = apostille.a_id left join attributes on attributes.attribute_id = details.courier_id left join branch on branch.branch_id = customer.branch_id where customer.deleted = 0 and customer.is_cancel = 0 and customer.is_block = 1 and details.status_id = 26 and details.service_type = 17 and details.deleted = 0 and apostille.deleted  = 0 GROUP BY customer.c_id 
      UNION Select branch.b_name as branch_name,customer.c_id,customer.c_s_type,customer.c_name,customer.created_branch_id,customer.created_id,customer.c_prefix,customer.tracking_id,attributes.name as courier_company_name,details.dispatching_date from customer left join translation on translation.c_id = customer.c_id left join details on details.service_id = translation.a_id left join attributes on attributes.attribute_id = details.courier_id left join branch on branch.branch_id = customer.branch_id where customer.deleted = 0 and customer.is_cancel = 0 and customer.is_block = 1 and details.status_id = 26 and details.service_type = 20 and details.deleted = 0 and translation.deleted = 0 GROUP BY customer.c_id
      UNION Select branch.b_name as branch_name,customer.c_id,customer.c_s_type,customer.c_name,customer.created_branch_id,customer.created_id,customer.c_prefix,customer.tracking_id,attributes.name as courier_company_name,details.dispatching_date from customer left join visa on visa.c_id = customer.c_id left join details on details.service_id = visa.v_id left join attributes on attributes.attribute_id = details.courier_id left join branch on branch.branch_id = customer.branch_id where customer.deleted = 0 and customer.is_cancel = 0 and customer.is_block = 1 and details.status_id = 26 and details.service_type = 8 and details.deleted = 0 and visa.deleted  = 0 GROUP BY customer.c_id`;
    } else if (
      response.user_type == 1 ||
      (response.user_type == 3 && response.s_u_permission == 1)
    ) {
      sql = `Select customer.c_id,customer.c_s_type,customer.c_name,customer.created_id,customer.created_branch_id,customer.c_prefix,customer.tracking_id,attributes.name as courier_company_name,details.dispatching_date from customer left join attestation on attestation.c_id = customer.c_id left join details on details.service_id = attestation.a_id left join attributes on attributes.attribute_id = details.courier_id  where customer.deleted = 0 and customer.is_cancel = 0 and customer.is_block = 1 and details.status_id = 26 and details.service_type = 10 and details.deleted = 0  and attestation.deleted  = 0 AND (customer.created_branch_id=${data.branch_id} OR customer.branch_id=${data.branch_id}) GROUP BY customer.c_id 
      UNION   Select customer.c_id,customer.c_s_type,customer.c_name,customer.created_id,customer.created_branch_id,customer.c_prefix,customer.tracking_id,attributes.name as courier_company_name,details.dispatching_date from customer left join apostille on apostille.c_id = customer.c_id left join details on details.service_id = apostille.a_id left join attributes on attributes.attribute_id = details.courier_id where customer.deleted = 0 and customer.is_cancel = 0 and customer.is_block = 1 and details.status_id = 26 and details.service_type = 17 and details.deleted = 0 and apostille.deleted  = 0 AND (customer.created_branch_id=${data.branch_id} OR customer.branch_id=${data.branch_id}) GROUP BY customer.c_id 
      UNION Select customer.c_id,customer.c_s_type,customer.c_name,customer.created_id,customer.created_branch_id,customer.c_prefix,customer.tracking_id,attributes.name as courier_company_name,details.dispatching_date from customer left join translation on translation.c_id = customer.c_id left join details on details.service_id = translation.a_id left join attributes on attributes.attribute_id = details.courier_id where customer.deleted = 0 and customer.is_cancel = 0 and customer.is_block = 1 and details.status_id = 26 and details.service_type = 20 and details.deleted = 0 and translation.deleted = 0 AND (customer.created_branch_id=${data.branch_id} OR customer.branch_id=${data.branch_id}) GROUP BY customer.c_id
      UNION Select customer.c_id,customer.c_s_type,customer.c_name,customer.created_id,customer.created_branch_id,customer.c_prefix,customer.tracking_id,attributes.name as courier_company_name,details.dispatching_date from customer left join visa on visa.c_id = customer.c_id left join details on details.service_id = visa.v_id left join attributes on attributes.attribute_id = details.courier_id where customer.deleted = 0 and customer.is_cancel = 0 and customer.is_block = 1 and details.status_id = 26 and details.service_type = 8 and details.deleted = 0 and visa.deleted  = 0 AND (customer.created_branch_id=${data.branch_id} OR customer.branch_id=${data.branch_id}) GROUP BY customer.c_id`;
    } else if (response.user_type == 3) {
      sql = `Select customer.c_id,customer.c_s_type,customer.c_name,customer.created_id,customer.created_branch_id,customer.c_prefix,customer.tracking_id,attributes.name as courier_company_name,details.dispatching_date from customer left join attestation on attestation.c_id = customer.c_id left join details on details.service_id = attestation.a_id left join attributes on attributes.attribute_id = details.courier_id where customer.deleted = 0 and customer.is_cancel = 0 and customer.is_block = 1 and details.status_id = 26 and details.service_type = 10 and details.deleted = 0  and attestation.deleted  = 0 AND (customer.created_id=${data.u_id} OR customer.u_id=${data.u_id} OR customer.login_u_id=${data.u_id}) GROUP BY customer.c_id 
        UNION Select customer.c_id,customer.c_s_type,customer.c_name,customer.created_id,customer.created_branch_id,customer.c_prefix,customer.tracking_id,attributes.name as courier_company_name,details.dispatching_date from customer left join apostille on apostille.c_id = customer.c_id left join details on details.service_id = apostille.a_id left join attributes on attributes.attribute_id = details.courier_id where customer.deleted = 0 and customer.is_cancel = 0 and customer.is_block = 1 and details.status_id = 26 and details.service_type = 17 and details.deleted = 0 and apostille.deleted  = 0 AND (customer.created_id=${data.u_id} OR customer.u_id=${data.u_id} OR customer.login_u_id=${data.u_id}) GROUP BY customer.c_id 
        UNION Select customer.c_id,customer.c_s_type,customer.c_name,customer.created_id,customer.created_branch_id,customer.c_prefix,customer.tracking_id,attributes.name as courier_company_name,details.dispatching_date from customer left join translation on translation.c_id = customer.c_id left join details on details.service_id = translation.a_id left join attributes on attributes.attribute_id = details.courier_id  where customer.deleted = 0 and customer.is_cancel = 0 and customer.is_block = 1 and details.status_id = 26 and details.service_type = 20 and details.deleted = 0 and translation.deleted  = 0 AND (customer.created_id=${data.u_id} OR customer.u_id=${data.u_id} OR customer.login_u_id=${data.u_id}) GROUP BY customer.c_id
        UNION Select customer.c_id,customer.c_s_type,customer.c_name,customer.created_id,customer.created_branch_id,customer.c_prefix,customer.tracking_id,attributes.name as courier_company_name,details.dispatching_date from customer left join visa on visa.c_id = customer.c_id left join details on details.service_id = visa.v_id left join attributes on attributes.attribute_id = details.courier_id  where customer.deleted = 0 and customer.is_cancel = 0 and customer.is_block = 1 and details.status_id = 26 and details.service_type = 8 and details.deleted = 0 and visa.deleted  = 0 AND (customer.created_id=${data.u_id} OR customer.u_id=${data.u_id} OR customer.login_u_id=${data.u_id}) GROUP BY customer.c_id`;
    }
    let response1 = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              counter: result.length,
              data: result,
              bresponse: bresponse.results,
              sresponse: sresponse.results,
            });
          } else {
            resolve({
              status: 0,
              counter: 0,
              data: [],
              bresponse: bresponse.results,
              sresponse: sresponse.results,
            });
          }
        }
      });
    });
    return response1;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function searchPickupDoneCourierReport(data) {
  try {
    if (data.u_id != 1) {
      sql = `SELECT elead.*,lead_customer.login_u_id, (SELECT  CASE
      WHEN l_source =282 
         THEN (SELECT m_c_name FROM main_customer WHERE m_c_id=l_created_by) 
         ELSE (SELECT u_name FROM users WHERE users.u_id=elead.l_created_by)
    END  )as createdBy,(SELECT u_name FROM users WHERE users.u_id=elead.l_allocate_to)as allocatedTo,(SELECT b_name FROM branch WHERE branch.branch_id =elead.l_branch_id)as branch,
    (SELECT name FROM attributes WHERE attributes.attribute_id =elead.l_status)as status,
    (SELECT name FROM attributes WHERE attributes.attribute_id =elead.l_source)as source, (SELECT name FROM attributes WHERE attributes.attribute_id =elead.courier_id)as c_c_name FROM elead left join lead_customer on lead_customer.l_id = elead.lead_id AND lead_customer.deleted = 0 WHERE elead.l_status=250 AND elead.deleted = 0 and elead.convert_status=0 AND (elead.p_d_id = ${data.u_id} OR elead.l_created_by = ${data.u_id}) `;
    } else {
      sql = `SELECT elead.*,lead_customer.login_u_id,(SELECT  CASE
        WHEN l_source =282 
           THEN (SELECT m_c_name FROM main_customer WHERE m_c_id=l_created_by) 
           ELSE (SELECT u_name FROM users WHERE users.u_id=elead.l_created_by)
      END  )as createdBy,(SELECT u_name FROM users WHERE users.u_id=elead.l_allocate_to)as allocatedTo,(SELECT b_name FROM branch WHERE branch.branch_id =elead.l_branch_id)as branch,
      (SELECT name FROM attributes WHERE attributes.attribute_id =elead.l_status)as status,
      (SELECT name FROM attributes WHERE attributes.attribute_id =elead.l_source)as source, (SELECT name FROM attributes WHERE attributes.attribute_id =elead.courier_id)as c_c_name FROM elead left join lead_customer on lead_customer.l_id = elead.lead_id AND lead_customer.deleted = 0 WHERE elead.l_status=250 AND elead.deleted = 0 and elead.convert_status=0 `;
    }
    if (typeof data.s_date != "undefined" && data.s_date != "") {
      sql += ` and STR_TO_DATE(elead.p_d_date,"%d-%m-%Y")>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y")`;
    }
    if (typeof data.e_date != "undefined" && data.e_date != "") {
      sql += ` and STR_TO_DATE(elead.p_d_date,"%d-%m-%Y")<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y")`;
    }
    if (
      typeof data.branch_name != "undefined" &&
      data.branch_name != "" &&
      data.branch_name != 0
    ) {
      sql += ` and elead.l_branch_id=${data.branch_name}`;
    }
    if (
      typeof data.u_name != "undefined" &&
      data.u_name != "" &&
      data.u_name != 0
    ) {
      sql += ` and (elead.l_created_by=${data.u_name} OR elead.l_allocate_to=${data.u_name} )`;
    }
    if (
      typeof data.courier_id != "undefined" &&
      data.courier_id != "" &&
      data.courier_id != 0
    ) {
      sql += ` and elead.courier_id=${data.courier_id}`;
    }

    sql += ` ORDER BY elead.lead_id DESC`;

    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              counter: result.length,
              data: result,
            });
          } else {
            resolve({
              status: 0,
              data: [],
              counter: 0,
            });
          }
        }
      });
    });
    return response;
    if (typeof data.s_date != "undefined" && data.s_date != "") {
      sql += ` and STR_TO_DATE(l_date,"%d-%m-%Y")>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y")`;
    }
    if (typeof data.e_date != "undefined" && data.e_date != "") {
      sql += ` and STR_TO_DATE(l_date,"%d-%m-%Y")<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y")`;
    }
    if (
      typeof data.branch_name != "undefined" &&
      data.branch_name != "" &&
      data.branch_name != 0
    ) {
      sql += ` and l_branch_id=${data.branch_name}`;
    }
    if (
      typeof data.u_name != "undefined" &&
      data.u_name != "" &&
      data.u_name != 0
    ) {
      sql += ` and (l_created_by=${data.u_name} OR l_allocate_to=${data.u_name} )`;
    }
    if (
      typeof data.convert_status != "undefined" &&
      data.convert_status != ""
    ) {
      sql += ` and convert_status=${data.convert_status}`;
    }
    sql2 = sql;
    sql += ` limit ${(data.page - 1) * data.perpage},${data.perpage}`;
    let response1 = await new Promise(async (resolve, reject) => {
      con.query(sql2, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            con.query(sql, function (err, res) {
              if (res.length > 0) {
                resolve({
                  status: 1,
                  data: res,
                  adata: result,
                  t_rows: result.length,
                });
              }
            });
          } else {
            resolve({
              status: 1,
              data: [],
              adata: [],
              t_rows: 0,
            });
          }
        }
      });
    });
    return response1;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function deletePaymentwithTDSAmount(data) {
  try {
    paymentrecord = `SELECT * FROM payment WHERE c_id = ${data.c_id} and deleted = 0 ORDER BY payment_id DESC limit 1;`;
    let payment = await new Promise((resolve, reject) => {
      con.query(paymentrecord, async function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Customer Not Updated" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              result: result[0],
              result1: result[0].payment_id,
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    let response4 = new Promise((resolve, reject) => {
      sql5 = `INSERT INTO payment(payment_date,c_id,total_amount,courier,embassy_fees,dis_amt,net_amt,sgst,cgst,igst,created_id,paid_amt,due_amt,u_id,is_tds,tds_amt,tracking_id,exp_charge,coupon_amt,c_tax,created_branch_id,p_receipt_no,invoice_no,service_tax,mode_id,payment_desc,chk_dd_no,chk_dd_date,bank_name,is_draft_taken,payment_refund) VALUES ('${payment.result.payment_date
        }',${data.c_id},'${payment.result.total_amount}',
                '${payment.result.courier}','${payment.result.embassy_fees}','${payment.result.dis_amt
        }','${payment.result.net_amt}','${payment.result.sgst}','${payment.result.cgst
        }','${payment.result.igst}',${payment.result.created_id},'${payment.result.paid_amt
        }','${parseInt(payment.result.due_amt) + parseInt(data.tds_amt)}',${payment.result.u_id
        },0,'0','${mysql_real_escape_string(payment.result.tracking_id)}','${payment.result.exp_charge
        }','${payment.result.coupon_amt}','${payment.result.c_tax}',${payment.result.created_branch_id
        },'${payment.result.p_receipt_no}','${payment.result.invoice_no}','${payment.result.service_tax
        }',${payment.result.mode_id},'${payment.result.payment_desc != "null" ? payment.result.payment_desc : ""
        }','${payment.result.chk_dd_no != "null" ? payment.result.chk_dd_no : ""
        }','${payment.result.chk_dd_date != "null" ? payment.result.chk_dd_date : ""
        }','${payment.result.bank_name != "null" ? payment.result.bank_name : ""
        }',0,'${payment.result.payment_refund}')`;
      con.query(sql5, async function (err5, result5) {
        if (err5) {
          console.log(err5);
          resolve({ status: 0, message: "Something went wrong" });
        } else {
          if (result5.affectedRows > 0) {
            resolve({
              status: 1,
              message: "TDS Deleted Successfully....",
            });
          } else {
            resolve({
              status: 0,
              result: 0,
              message: "Something went wrong..",
            });
          }
        }
      });
    });
    return response4;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function NextFollowupAutomation() {
  try {
    getuserquery = `Select u_id from users where deleted = 0 `;
    let response1 = await new Promise((resolve, reject) => {
      con.query(getuserquery, async function (err, res) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (res.length > 0) {
            for (let i = 0; i < res.length; i++) {
              const data = await getTodayLFollowup({ id: res[i].u_id });
              let respdata = {
                channel: "GET_LEADFOLLOOWUP_DATA",
                data: {
                  counter: data.counter,
                  data: data.data,
                },
              };
              let sendNoti = await sendWsMessage(res[i].u_id, respdata);
              if (res.length - 1 == i) {
                resolve({
                  status: 1,
                  message: "Notification sent Successfully...",
                });
              }
            }
          } else {
            resolve({
              status: 0,
              message: "Notification  not sent...",
            });
          }
        }
      });
    });
    return response1;
  } catch (error) {
    console.log(error);
  }
}

async function NextCustFollowupAutomation() {
  try {
    getuserquery = `Select u_id from users where deleted = 0 `;
    let response1 = await new Promise((resolve, reject) => {
      con.query(getuserquery, async function (err, res) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (res.length > 0) {
            for (let i = 0; i < res.length; i++) {
              const data = await getTodayCFollowup({ id: res[i].u_id });
              let respdata = {
                channel: "GET_CUSTOMERFOLLOOWUP_DATA",
                data: {
                  counter: data.counter,
                  data: data.data,
                },
              };
              let sendNoti = await sendWsMessage(res[i].u_id, respdata);
              if (res.length - 1 == i) {
                resolve({
                  status: 1,
                  message: "Notification sent Successfully...",
                });
              }
            }
          } else {
            resolve({
              status: 0,
              message: "Notification  not sent...",
            });
          }
        }
      });
    });
    return response1;
  } catch (error) {
    console.log(error);
  }
}

async function getUserCommision(u_id) {
  try {
    getuserquery = `Select u_commission from users where u_id = ${u_id} and deleted = 0 `;
    let response1 = await new Promise((resolve, reject) => {
      con.query(getuserquery, async function (err, res) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (res.length > 0) {
            resolve({
              status: 1,
              u_commission: res[0].u_commission,
            });
          } else {
            resolve({
              status: 0,
              commission: 0,
            });
          }
        }
      });
    });
    return response1;
  } catch (error) {
    console.log(error);
  }
}

async function multiInvoiceSingleCustomer(data) {
  try {
    let mainCustlist = [];
    let custData = [];

    let sqll = `SELECT main_customer.m_c_id,main_customer.m_c_email,main_customer.m_c_name,main_customer.m_c_prefix FROM main_customer,customer where main_customer.m_c_id = customer.m_c_id and  main_customer.deleted = 0  and customer.deleted = 0 and customer.is_cancel = 0 and customer.is_block = 1 `;
    if (typeof data.s_date != "undefined" && data.s_date != "") {
      sqll += ` and STR_TO_DATE(DATE_FORMAT(customer.created_timestamp, "%d-%m-%Y"), "%d-%m-%Y")>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y")`;
    }
    if (typeof data.e_date != "undefined" && data.e_date != "") {
      sqll += ` and STR_TO_DATE(DATE_FORMAT(customer.created_timestamp, "%d-%m-%Y"), "%d-%m-%Y")<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y")`;
    }
    if (
      typeof data.branch_name != "undefined" &&
      data.branch_name != "" &&
      data.branch_name != 0
    ) {
      sqll += ` and customer.created_branch_id=${data.branch_name}`;
    }
    if (
      typeof data.u_name != "undefined" &&
      data.u_name != "" &&
      data.u_name != 0
    ) {
      sqll += ` and customer.created_id=${data.u_name}`;
    }
    sqll += ` GROUP by main_customer.m_c_id`;
    let response = await new Promise(async (resolve, reject) => {
      con.query(sqll, function (err, res) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (res.length > 0) {
            for (let i = 0; i < res.length; i += 1) {
              mainCustlist.push({
                m_c_id: res[i].m_c_id,
                m_c_email: res[i].m_c_email,
                m_c_name: res[i].m_c_name,
                m_c_prefix: res[i].m_c_prefix,
                customerData: [],
              });
              custData.push({
                m_c_id: res[i].m_c_id,
                m_c_email: res[i].m_c_email,
                m_c_name: res[i].m_c_name,
                m_c_prefix: res[i].m_c_prefix,
                customerData: [],
              });
            }
            // let pastTenDay = moment(data.s_date, "DD-MM-YYYY")
            //   .add(-10, "d")
            //   .format("DD-MM-YYYY");
            // let futureTenDay = moment(data.e_date, "DD-MM-YYYY")
            //   .add(+10, "d")
            //   .format("DD-MM-YYYY");
            Object.keys(mainCustlist).map((k) => {
              sql = `Select customer.*,payment.due_amt,GROUP_CONCAT(attestation.a_name SEPARATOR ',')  AS a_name,GROUP_CONCAT(attestation.a_prefix SEPARATOR ',')  AS a_prefix from customer left join payment on payment.c_id = customer.c_id AND payment.payment_id IN (
                SELECT MAX(payment_id)
                FROM payment
                GROUP BY c_id
            ) left join attestation on attestation.c_id = customer.c_id where customer.m_c_id = ${mainCustlist[k].m_c_id} and STR_TO_DATE(DATE_FORMAT(customer.created_timestamp, "%d-%m-%Y"), "%d-%m-%Y")>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") and STR_TO_DATE(DATE_FORMAT(customer.created_timestamp, "%d-%m-%Y"), "%d-%m-%Y")<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y") and customer.deleted = 0 and customer.is_cancel = 0 and customer.is_block = 1 and customer.c_s_type =10 GROUP by customer.c_id UNION Select customer.*,payment.due_amt,GROUP_CONCAT(apostille.a_name SEPARATOR ',')  AS a_name,GROUP_CONCAT(apostille.a_prefix SEPARATOR ',')  AS a_prefix from customer left join payment on payment.c_id = customer.c_id AND payment.payment_id IN (
              SELECT MAX(payment_id)
              FROM payment
              GROUP BY c_id
          ) left join apostille on apostille.c_id = customer.c_id where customer.m_c_id = ${mainCustlist[k].m_c_id} and STR_TO_DATE(DATE_FORMAT(customer.created_timestamp, "%d-%m-%Y"), "%d-%m-%Y")>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") and STR_TO_DATE(DATE_FORMAT(customer.created_timestamp, "%d-%m-%Y"), "%d-%m-%Y")<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y") and customer.deleted = 0 and customer.is_cancel = 0 and customer.is_block = 1 and customer.c_s_type=17 GROUP by customer.c_id UNION Select customer.*,payment.due_amt,GROUP_CONCAT(translation.a_name SEPARATOR ',')  AS a_name,GROUP_CONCAT(translation.a_prefix SEPARATOR ',')  AS a_prefix from customer left join payment on payment.c_id = customer.c_id AND payment.payment_id IN (
            SELECT MAX(payment_id)
            FROM payment
            GROUP BY c_id
        ) left join translation on translation.c_id = customer.c_id where customer.m_c_id = ${mainCustlist[k].m_c_id} and STR_TO_DATE(DATE_FORMAT(customer.created_timestamp, "%d-%m-%Y"), "%d-%m-%Y")>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") and STR_TO_DATE(DATE_FORMAT(customer.created_timestamp, "%d-%m-%Y"), "%d-%m-%Y")<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y") and customer.deleted = 0 and customer.is_cancel = 0 and customer.is_block = 1 and customer.c_s_type =20 GROUP by customer.c_id UNION Select customer.*,payment.due_amt,GROUP_CONCAT(visa.v_name SEPARATOR ',')  AS a_name,GROUP_CONCAT(visa.v_prefix SEPARATOR ',')  AS a_prefix  from customer left join payment on payment.c_id = customer.c_id AND payment.payment_id IN (
          SELECT MAX(payment_id)
          FROM payment
          GROUP BY c_id
      ) left join visa on visa.c_id = customer.c_id where customer.m_c_id = ${mainCustlist[k].m_c_id} and STR_TO_DATE(DATE_FORMAT(customer.created_timestamp, "%d-%m-%Y"), "%d-%m-%Y")>=STR_TO_DATE('${data.s_date}',"%d-%m-%Y") and STR_TO_DATE(DATE_FORMAT(customer.created_timestamp, "%d-%m-%Y"), "%d-%m-%Y")<=STR_TO_DATE('${data.e_date}',"%d-%m-%Y") and customer.deleted = 0 and customer.is_cancel = 0 and customer.is_block = 1 and customer.c_s_type =8 GROUP by customer.c_id`;
              con.query(sql, function (errsql1, sql1res) {
                if (errsql1) {
                  console.log(errsql1);
                  resolve({ status: 0, message: "Something went to wrong" });
                } else {
                  if (sql1res.length > 0) {
                    let cust_data = [];
                    Object.keys(sql1res).map((ak) => {
                      cust_data.push(sql1res[ak]);
                    });
                    custData[k].customerData = cust_data;
                    if (k == mainCustlist.length - 1) {
                      resolve({
                        status: 1,
                        data: custData,
                      });
                    }
                  } else {
                    resolve({
                      status: 0,
                      message: "Something went to wrong",
                    });
                  }
                }
              });
            });
          } else {
            resolve({
              status: 1,
              data: [],
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
  }
}

async function insertGroupChat(data) {
  try {
    let sql = ` insert into chat_groups (g_name,group_created_by) VALUES ('${data.c_name}-${data.u_name}',1)`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, async function (err, res) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (res.affectedRows > 0) {
            let insertmember = "";
            if (data.u_id != 1) {
              insertmember = `Insert into chat_group_members (group_id,m_u_id,chat_user_type) VALUES (${res.insertId},${data.u_id},0);`;
            }
            insertmember += `Insert into chat_group_members (group_id,m_u_id,chat_user_type) VALUES (${res.insertId},1,0);`;
            insertmember += `Insert into chat_group_members (group_id,m_u_id,chat_user_type) VALUES (${res.insertId},${data.c_id},1);`;
            con.query(insertmember, async function (err, res) {
              if (err) {
                console.log(err);
                resolve({ status: 0, message: "Something went to wrong" });
              } else {
                if (res.affectedRows > 0) {
                  resolve({
                    status: 1,
                    message: "Group Created Successfully..."
                  });
                } else {
                  resolve({
                    status: 0,
                    message: "Group not Created.."
                  });
                }
              }
            });

            resolve({
              status: 1,
              message: "Group Created Successfully..."
            });
          } else {
            resolve({
              status: 0,
              message: "Group not Created.."
            });
          }
        }
      });
    });
    return response;

  } catch (error) {
    console.log(error);
  }
}

async function InsertLeaveService(data) {
  try {
    let sql = `Insert into leave_data (u_id,branch_id,start_date,end_date,l_reason) VALUES (${data.u_id},${data.branch_id},'${data.start_date}','${data.end_date}','${mysql_real_escape_string(data.l_reason)}')`;
    let response = await new Promise((resolve, reject) => {
      con.query(sql, async function (err, res) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (res.affectedRows > 0) {
            resolve({ status: 1, message: "Leave Inserted Successfully..." });
          } else {
            resolve({
              status: 0,
              message: "Leave not Inserted.."
            });
          }
        }
      });
    });
    return response;

  } catch (error) {
    console.log(error);
  }
}

async function getLeaveData(data) {
  try {
    let sql = `SELECT leave_data.*, 
    CONCAT(u_staff.u_name) as staffname
    FROM leave_data 
    INNER JOIN users as u_staff ON u_staff.u_id = leave_data.u_id
    WHERE SUBSTRING(STR_TO_DATE(leave_data.created_at, "%Y-%m-%d %H:%i:%s"), 1, 7) = DATE_FORMAT(STR_TO_DATE("${data.month}", "%Y-%m"), "%Y-%m") `;

    let paginateSql = `SELECT COUNT(leave_data.l_id)as trows
    FROM leave_data 
    INNER JOIN users as u_staff ON u_staff.u_id = leave_data.u_id
    WHERE SUBSTRING(STR_TO_DATE(leave_data.created_at, "%Y-%m-%d %H:%i:%s"), 1, 7) = DATE_FORMAT(STR_TO_DATE("${data.month}", "%Y-%m"), "%Y-%m") `;

    if (data.user_type == 0) {
      if (typeof data.branch_name != "undefined" &&
        data.branch_name != "" &&
        data.branch_name != 0) {
        sql += ` AND leave_data.branch_id =${data.branch_name}`;
        paginateSql += ` AND leave_data.branch_id =${data.branch_name}`;
      }
      if (typeof data.u_name != "undefined" &&
        data.u_name != "" &&
        data.u_name != 0) {
        sql += ` AND leave_data.u_id =${data.u_name}`;
        paginateSql += ` AND leave_data.u_id = ${data.u_name}`;
      }
    } else {
      if (typeof data.branch_id != "undefined" &&
        data.branch_id != "" &&
        data.branch_id != 0) {
        sql += ` AND leave_data.branch_id =${data.branch_id}`;
        paginateSql += ` AND leave_data.branch_id =${data.branch_id}`;
      }
      if (typeof data.u_id != "undefined" &&
        data.u_id != "" &&
        data.u_id != 0) {
        sql += ` AND leave_data.u_id =${data.u_id}`;
        paginateSql += ` AND leave_data.u_id = ${data.u_id}`;
      }
    }


    sql += ` Order by leave_data.l_id DESC `;
    sql += ` limit ${(parseInt(data.page) - 1) * data.perPage},${data.perPage}`;
    let resp = await new Promise((resolve, reject) => {
      con.query(paginateSql, function (err1, lres1) {
        if (err1) {
          console.log(err1);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (lres1.length > 0) {
            resolve({
              status: 1,
              t_rows: lres1[0].trows,
            });
          } else {
            resolve({
              status: 0,
              data: [],
            });
          }
        }
      });
    });
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            resolve({
              status: 1,
              data: result,
              t_rows: resp.t_rows,
            });
          } else {
            resolve({
              status: 0,
              message: "No Data Found",
              t_rows: 0,
            });
          }
        }
      });
    });
    return response;

  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function UpdateLeaveService(data) {
  try {
    let sql = ` Update leave_data set start_date = '${data.start_date}',
    end_date= '${data.end_date}',
    l_reason='${mysql_real_escape_string(data.l_reason)}' where l_id=${data.l_id}`;

    let response = await new Promise((resolve, reject) => {
      con.query(sql, async function (err, res) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (res.affectedRows > 0) {
            resolve({ status: 1, message: "Leave Updated Successfully..." });
          } else {
            resolve({
              status: 0,
              message: "Leave not Updated.."
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
  }
}

async function UpdateLeaveStatusService(data) {
  try {
    let sql = ` Update leave_data set status = ${data.status} where l_id=${data.l_id}`;

    let response = await new Promise((resolve, reject) => {
      con.query(sql, async function (err, res) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (res.affectedRows > 0) {
            resolve({ status: 1, message: "Leave Status Updated Successfully..." });
          } else {
            resolve({
              status: 0,
              message: "Leave Status not Updated.."
            });
          }
        }
      });
    });
    return response;

  } catch (error) {
    console.log(error);
  }
}

async function getCustomerByLeadId(data) {
  try {
    let getCustomer = `Select c_id from lead_customer where l_id = ${data.id} AND deleted = 0`;
    let response = await new Promise((resolve, reject) => {
      con.query(getCustomer, function (err1, result1) {
        if (err1) {
          console.log(err1);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result1.length > 0) {
            resolve({
              status: 1,
              result: result1[0].c_id,
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}

async function getLeadCustomerById(data) {
  try {
    sql = `SELECT lead_customer.*,lead_payment.c_tax as ctax,lead_payment.* FROM lead_customer,lead_payment WHERE lead_payment.c_id =lead_customer.c_id and lead_customer.l_id=${data.id} AND lead_customer.deleted = 0 and lead_payment.deleted = 0 ORDER BY lead_payment.payment_id DESC LIMIT 1`;

    let response = await new Promise((resolve, reject) => {
      con.query(sql, async function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result.length > 0) {
            if (result[0].c_s_type == 10) {
              sql1 = ` SELECT * FROM lead_attestation  WHERE deleted = 0 AND c_id = ${result[0].c_id}  `;
            } else if (result[0].c_s_type == 17) {
              sql1 = ` SELECT * FROM lead_apostille  WHERE deleted = 0 AND c_id = ${result[0].c_id}`;
            } else if (result[0].c_s_type == 20) {
              sql1 = ` SELECT * FROM lead_translation  WHERE deleted = 0 AND c_id = ${result[0].c_id}`;
            } else {
              sql1 = ` SELECT * FROM lead_visa  WHERE deleted = 0 AND c_id = ${result[0].c_id}`;
            }
            let applicantData = [];
            let response1 = await new Promise((resolve, reject) => {
              con.query(sql1, function (err, result) {
                if (err) {
                  console.log(err);
                  resolve({ status: 0, message: "Something went to wrong" });
                } else {
                  if (result.length > 0) {
                    result.forEach((res) => {
                      applicantData.push(res);
                    });
                    resolve({
                      status: 1,
                      result: applicantData,
                    });
                  } else {
                    resolve({
                      status: 0,
                      message: "Something went to wrong",
                    });
                  }
                }
              });
            });
            result.forEach(function (res) {
              resolve({
                status: 1,
                result: { ...res, applicantData },
              });
            });

          } else {
            resolve({ status: 1, message: "No Records to Display..." });
          }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}


async function updateProformaCustomer(data1) {
  try {

    let paymentrecord = "";
    if (data1.c_s_type == 10) {
      paymentrecord = `SELECT lead_attestation.*,lead_payment.* FROM lead_attestation INNER JOIN lead_payment ON lead_attestation.c_id = lead_payment.c_id INNER JOIN lead_customer ON lead_attestation.c_id = lead_customer.c_id WHERE lead_attestation.c_id = ${data1.c_id} and lead_payment.c_id = ${data1.c_id} ORDER BY payment_id DESC LIMIT 1 `;
    } else if (data1.c_s_type == 17) {
      paymentrecord = `SELECT lead_apostille.*,lead_payment.* FROM lead_apostille INNER JOIN lead_payment ON lead_apostille.c_id = lead_payment.c_id INNER JOIN lead_customer ON lead_apostille.c_id = lead_customer.c_id WHERE lead_apostille.c_id = ${data1.c_id} and lead_payment.c_id = ${data1.c_id} ORDER BY payment_id DESC LIMIT 1 `;
    } else if (data1.c_s_type == 20) {
      paymentrecord = `SELECT lead_translation.*,lead_payment.* FROM lead_translation INNER JOIN lead_payment ON lead_translation.c_id = lead_payment.c_id INNER JOIN lead_customer ON lead_translation.c_id = lead_customer.c_id WHERE lead_translation.c_id = ${data1.c_id} and lead_payment.c_id = ${data1.c_id} ORDER BY payment_id DESC LIMIT 1 `;
    } else {
      paymentrecord = `SELECT lead_visa.*,lead_payment.* FROM lead_visa INNER JOIN lead_payment ON lead_visa.c_id = lead_payment.c_id INNER JOIN lead_customer ON lead_visa.c_id = lead_customer.c_id WHERE lead_visa.c_id = ${data1.c_id} and lead_payment.c_id = ${data1.c_id} ORDER BY payment_id DESC LIMIT 1 `;
    }

    let payment = await new Promise((resolve, reject) => {
      con.query(paymentrecord, async function (err, result) {
        if (err) {
          console.log(err);
          resolve({ status: 0, message: "Customer Not Updated" });
        } else {
          console.log(err, result, "}}}}}}}");
          if (result.length > 0) {
            resolve({
              status: 1,
              result: result[0],
              result1: result[0].payment_id,
              result2: result[0].invoice_no,
            });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });
    let sum = 0;
    let sum1 = [];
    let embassy = parseInt(payment.result.embassy_fees);

    let sql12 = `SELECT b_name FROM branch WHERE branch_id = ${data1.c_branch_id} `;
    let res = await new Promise((resolve, reject) => {
      con.query(sql12, async function (err1, result1) {
        if (err1) {
          console.log(err1);
          resolve({ status: 0, message: "Customer Not Updated" });
        } else {
          if (result1.length > 0) {
            resolve({ status: 1, result: result1[0].b_name });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });

    let sql123 = `SELECT c_tax FROM lead_customer WHERE c_id = ${data1.c_id} `;
    let res123 = await new Promise((resolve, reject) => {
      con.query(sql123, async function (err1, result1) {
        if (err1) {
          console.log(err1);
          resolve({ status: 0, message: "Customer Not Found" });
        } else {
          if (result1.length > 0) {
            resolve({ status: 1, result: result1[0].c_tax });
          } else {
            resolve({
              status: 0,
              message: "Something went to wrong",
            });
          }
        }
      });
    });

    let responseinvoice = await new Promise((resolve, reject) => {
      if (data1.c_tax == "1" && data1.c_tax != res123.result) {
        console.log("$$$$$$$$$$$$$$");
        // let getinvoiceno = `SELECT *,invoice_no FROM lead_payment,lead_customer WHERE lead_payment.c_id=lead_customer.c_id and lead_payment.c_tax = "1" and lead_customer.branch_id=${data1.c_branch_id} and lead_payment.deleted=0 ORDER BY lead_customer.c_id DESC limit 1;`;
        let getinvoiceno = `SELECT *,invoice_no FROM lead_payment JOIN lead_customer ON lead_payment.c_id=lead_customer.c_id and lead_payment.c_tax = "1" and lead_customer.branch_id=${data1.c_branch_id} and lead_payment.deleted=0 ORDER BY lead_payment.payment_id DESC,lead_customer.c_id DESC limit 1;`;

        const cvalue = moment().format("MM");
        const last2 = new Date().getFullYear().toString().substring(2);
        const last2Num = Number(last2);
        var today = new Date();
        if (today.getMonth() + 1 <= 3) {
          fiscalyear = last2Num - 1 + "-" + last2Num;
        } else {
          fiscalyear = last2Num + "-" + (last2Num + 1);
        }

        let invoice_no = 0;
        con.query(getinvoiceno, async function (errino, inoresult) {
          console.log(errino, inoresult, "}}}}}SRFSESDG}}}}");
          if (errino) {
            console.log(errino);
            resolve({ status: 0, message: "Something went wrong" });
          } else {
            if (inoresult.length > 0 && inoresult[0].invoice_no != 0) {
              let sql = `UPDATE lead_payment SET invoice_status = 1 WHERE payment_id=${payment.result1
                } AND deleted = 0  `;
              con.query(sql, async function (err, result) {
                if (err) {
                  console.log(err);
                  resolve({ status: 0, message: "Something went to wrong" });
                } else {
                  console.log(result.affectedRows, '|||||||||||||||');
                  if (result.affectedRows > 0) {
                    resolve({
                      status: 1,
                      message: "Payment Updated successfully",
                    });
                  } else {
                    resolve({
                      status: 0,
                      message: "Something went to wrong",
                    });
                  }
                }
              });
              //1003
              let ino = inoresult[0].invoice_no;
              let n_ino = ino.split("/");
              if (fiscalyear == n_ino[2]) {
                invoice_no =
                  "PI/" +
                  res.result.substring(0, 2) +
                  "/" +
                  fiscalyear +
                  "/" +
                  "g" +
                  cvalue +
                  "/" +
                  ++n_ino[4];
                console.log(invoice_no, "1111111111111");
              } else {
                invoice_no =
                  "PI/" +
                  res.result.substring(0, 2) +
                  "/" +
                  fiscalyear +
                  "/" +
                  "g" +
                  cvalue +
                  "/" +
                  1;
                console.log(invoice_no, "1sdssfasdfafs111111");

              }
            } else {
              let sql = `UPDATE lead_payment SET invoice_status = 1 WHERE payment_id=${payment.result1
                } AND deleted = 0  `;
              con.query(sql, async function (err, result) {
                if (err) {
                  console.log(err);
                  resolve({ status: 0, message: "Something went to wrong" });
                } else {
                  console.log(result.affectedRows, "SADSafseofrrf");
                  if (result.affectedRows > 0) {
                    resolve({
                      status: 1,
                      message: "Payment Updated successfully",
                    });
                  }
                }
              });
              invoice_no =
                "PI/" +
                res.result.substring(0, 2) +
                "/" +
                fiscalyear +
                "/" +
                "g" +
                cvalue +
                "/" +
                1;
              console.log(invoice_no, "++++++++++");
            }
            resolve({ status: 1, ino: invoice_no });
          }
        });
        //1003
      } else if (data1.c_tax == "0" && data1.c_tax != res123.result) {
        console.log("****************");
        // let getinvoiceno = `SELECT *,invoice_no FROM lead_payment,lead_customer WHERE lead_payment.c_id=lead_customer.c_id and lead_payment.c_tax = "0" and lead_customer.branch_id=${data1.c_branch_id} and lead_payment.deleted=0 AND lead_customer.deleted= 0 ORDER BY lead_customer.c_id DESC limit 1;`;
        let getinvoiceno = `SELECT *,invoice_no FROM lead_payment JOIN lead_customer ON lead_payment.c_id=lead_customer.c_id and lead_payment.c_tax = "0" and lead_customer.branch_id=${data1.c_branch_id} and lead_payment.deleted=0 ORDER BY lead_payment.payment_id DESC,lead_customer.c_id DESC limit 1;`;

        // const now = new Date();
        // const cvalue = date.format(now, "YY");
        // const currentYear = new Date().getFullYear().toString().slice(-2);
        // const previousYear = currentYear - 1;
        const cvalue = moment().format("MM");
        const last2 = new Date().getFullYear().toString().substring(2);
        const last2Num = Number(last2);
        var today = new Date();
        if (today.getMonth() + 1 <= 3) {
          fiscalyear = last2Num - 1 + "-" + last2Num;
        } else {
          fiscalyear = last2Num + "-" + (last2Num + 1);
        }
        let invoice_no = 0;
        con.query(getinvoiceno, async function (errino, inoresult) {
          console.log(errino, inoresult, "RTGRETGRYRTUYH");
          if (errino) {
            console.log(errino);
            resolve({ status: 0, message: "Something went wrong" });
          } else {
            if (inoresult.length > 0 && inoresult[0].invoice_no != 0) {
              let sql = `UPDATE lead_payment SET invoice_status = 1 WHERE payment_id=${payment.result1
                } AND deleted = 0  `;
              console.log("sqlqwe", sql);
              con.query(sql, async function (err, result) {
                if (err) {
                  console.log(err);
                  resolve({ status: 0, message: "Something went to wrong" });
                } else {
                  console.log(result.affectedRows, "*&&&&&&&&&&&&&&");
                  if (result.affectedRows > 0) {

                    resolve({
                      status: 1,
                      message: "Payment Updated successfully",
                    });
                  } else {
                    resolve({
                      status: 0,
                      message: "Something went to wrong",
                    });
                  }
                }
              });
              //1003
              let ino = inoresult[0].invoice_no;
              let n_ino = ino.split("/");
              if (fiscalyear == n_ino[2]) {
                invoice_no =
                  "PI/" +
                  res.result.substring(0, 2) +
                  "/" +
                  fiscalyear +
                  "/" +
                  cvalue +
                  "/" +
                  ++n_ino[4];
                console.log(invoice_no, "(((((((((((");
              } else {
                invoice_no =
                  "PI/" +
                  res.result.substring(0, 2) +
                  "/" +
                  fiscalyear +
                  "/" +
                  cvalue +
                  "/" +
                  1;
                console.log(invoice_no, "((sxsfcsfsfd(((((");

              }
            } else {
              let sql = `UPDATE lead_payment SET invoice_status = 1 WHERE payment_id=${payment.result1
                } AND deleted = 0  `;
              console.log("sqlx", sql);
              con.query(sql, async function (err, result) {
                if (err) {
                  console.log(err);
                  resolve({ status: 0, message: "Something went to wrong" });
                } else {
                  console.log(result.affectedRows, "______)");
                  if (result.affectedRows > 0) {
                    resolve({
                      status: 1,
                      message: "Payment Updated successfully",
                    });
                  } else {
                    resolve({
                      status: 0,
                      message: "Something went to wrong",
                    });
                  }
                }
              });
              invoice_no =
                res.result.substring(0, 2) +
                "/" +
                fiscalyear +
                "/" +
                cvalue +
                "/" +
                1;
              console.log(invoice_no, "&&&&&&&&&&&");
            }
            resolve({ status: 1, ino: invoice_no });
          }
        });
      } else {
        resolve({ status: 1, ino: payment.result.invoice_no });
      }
    });

    let response = await new Promise(async (resolve, reject) => {
      let sql1 = `UPDATE lead_customer SET c_prefix='${data1.l_name_prefix
        }',c_name='${mysql_real_escape_string(data1.l_name)}',c_state=${data1.m_c_state
        },c_mo_no='${data1.co_no}',c_email='${mysql_real_escape_string(
          data1.l_email
        )}',c_address='${mysql_real_escape_string(data1.l_address)}',c_gst_no='${data1.m_c_gst
        }',c_remark='${mysql_real_escape_string(data1.c_remark)}',c_date='${data1.c_date
        }',c_tax='${data1.c_tax}',d_address="${mysql_real_escape_string(
          data1.d_address
        )}",arn_no="${data1.arn_no}",f_z_type=${data1.f_z_type},c_gst=${data1.c_gst
        },c_total_customer=${data1.c_total_customer},city='${typeof data1.city == "undefined" ||
          data1.city == "undefined" ||
          data1.city == null ||
          data1.city == ""
          ? ""
          : data1.city
        }',pincode='${typeof data1.pincode == "undefined" ||
          data1.pincode == "undefined" ||
          data1.pincode == null ||
          data1.pincode == ""
          ? ""
          : data1.pincode
        }' WHERE c_id=${data1.c_id} `;
      let response = await new Promise((resolve, reject) => {
        con.query(sql1, function (err, result) {
          if (err) {
            console.log(err);
          } else {
            if (result.affectedRows > 0) {
              resolve({
                status: 1,
                result: result,
                message: "Lead Customer Updated Successfully...",
              });
            } else {
              resolve({ status: 0, message: "Something went to wrong" });
            }
          }
        });
      });

      data1.applicationdata.map(async (data, index) => {
        if (data1.old_total_customer > index) {
          console.log(data1.old_total_customer, "::::::::", index);
          if (data1.c_s_type == 10 || data1.c_s_type == 17 || data1.c_s_type == 20) {
            let sql = "";
            if (data1.c_s_type == 10) {
              sql = `UPDATE lead_attestation `;
            } else if (data1.c_s_type == 17) {
              sql = `UPDATE lead_apostille `;
            } else {
              sql = `UPDATE lead_translation `;
            }
            sql += ` SET a_prefix='${data.a_prefix
              }',a_name='${mysql_real_escape_string(data.a_name)}',a_code=${data.a_code
              },a_certificate='${data.a_certificate}',a_type=${data.a_type
              },a_country='${data.a_country}',a_supporting_doc='${data.a_supporting_doc
              }',a_extra_doc = '${data.a_extra_doc}',process_limit_date='${data.process_limit_date
              }',process_limit_mail_date='${data.process_limit_date
              }',no_of_certificates=${data.no_of_certificates} WHERE a_id=${data.a_id
              }`;
            con.query(sql, async function (err, result) {
              if (err) {
                console.log(err);
                resolve({ status: 0, message: "Something went to wrong" });
              } else {
                if (result.affectedRows > 0) {
                  if (data.no_of_certificates > 0) {
                    for (
                      let index = 0;
                      index < data.a_certificate.length;
                      index++
                    ) {
                      console.log(
                        index,
                        data.a_certificate[index],
                        "!ft45645234rgdfrgdfgsd35"
                      );
                      let sql1 = "";
                      if (data1.c_s_type == 10) {
                        sql1 = `SELECT detail_id FROM lead_details WHERE d_c_id=${data.a_certificate[index]} AND service_id=${data.a_id} AND service_type = 10`;
                      } else if (data1.c_s_type == 17) {
                        sql1 = `SELECT detail_id FROM lead_details WHERE d_c_id=${data.a_certificate[index]} AND service_id=${data.a_id} AND service_type = 17`;
                      } else {
                        sql1 = `SELECT detail_id FROM lead_details WHERE d_c_id=${data.a_certificate[index]} AND service_id=${data.a_id} AND service_type = 20`;
                      }
                      console.log(sql1, "***********");
                      con.query(sql1, async function (err111, result111) {
                        console.log(
                          result111,
                          "result111result111result111result111"
                        );
                        if (err111) {
                          console.log(err111);
                          resolve({
                            status: 0,
                            message: "Something went to wrong",
                          });
                        } else {
                          let sql2 = "";
                          if (data1.c_s_type == 10) {
                            sql2 = `SELECT s_amount FROM serviceprice WHERE service = 10  AND country = ${data.a_country} AND s_type = ${data.a_type} and deleted = 0;`;
                          } else if (data1.c_s_type == 17) {
                            sql2 = `SELECT s_amount FROM serviceprice WHERE service = 17  AND country = ${data.a_country} AND s_type = ${data.a_type} and deleted = 0;`;
                          } else {
                            sql2 = `SELECT s_amount FROM serviceprice WHERE service = 20  AND country = ${data.a_country} AND s_type = ${data.a_type} and deleted = 0;`;
                          }


                          let response2 = await new Promise((resolve, reject) => {
                            con.query(sql2, async function (err2, result2) {
                              console.log(err2, result2, "((((((((((");
                              if (err2) {
                                console.log(err2);
                                resolve({
                                  status: 0,
                                  message: "Something went wrong",
                                });
                              } else {
                                if (result2.length > 0) {
                                  result2.forEach(async function (result) {
                                    resolve({
                                      result: result.s_amount,
                                    });
                                  });
                                } else {
                                  resolve({
                                    result: parseInt(0),
                                  });
                                }
                              }
                            });
                          });
                          let sqll = `SELECT document_type FROM attributes Where attribute_id=${data.a_certificate[index]}`;
                          let resp = await new Promise((resolve, reject) => {
                            con.query(sqll, async function (err1, result1) {
                              console.log(err1, result1, "fsdfsddfg(((");

                              if (err1) {
                                console.log(err1);
                                resolve({
                                  status: 0,
                                  message: "Something went wrong",
                                });
                              } else {
                                if (result1.length > 0) {
                                  resolve({
                                    status: 1,
                                    result: result1[0].document_type,
                                  });
                                } else {
                                  resolve({ status: 0, result: [] });
                                }
                              }
                            });
                          });
                          let sql3 = "";
                          if (data1.c_s_type == 10) {
                            sql3 = `SELECT amount as embassy_fees FROM embassyfees WHERE service_type = 10  AND country = ${data.a_country} AND document = ${resp.result} AND deleted = 0;`;
                          } else if (data1.c_s_type == 17) {
                            sql3 = `SELECT amount as embassy_fees FROM embassyfees WHERE service_type = 17  AND country = ${data.a_country} AND document = ${resp.result} AND deleted = 0;`;
                          } else {
                            sql3 = `SELECT amount as embassy_fees FROM embassyfees WHERE service_type = 20  AND country = ${data.a_country} AND document = ${resp.result} AND deleted = 0;`;
                          }

                          let response3 = await new Promise((resolve, reject) => {
                            con.query(sql3, async function (err2, result2) {
                              if (err2) {
                                console.log(err2);
                                resolve({
                                  status: 0,
                                  message: "Something went wrong",
                                });
                              } else {
                                if (result2 == undefined) {
                                  resolve({
                                    embassy_fees: parseInt(0),
                                  });
                                } else {
                                  if (result2.length > 0) {
                                    result2.forEach(async function (result) {
                                      resolve({
                                        embassy_fees: result.embassy_fees,
                                      });
                                    });
                                  } else {
                                    resolve({
                                      embassy_fees: parseInt(0),
                                    });
                                  }
                                }
                              }
                            });
                          });
                          if (result111.length > 0 || result111.length == 0) {
                            if (
                              result111.length > 0 &&
                              index < result111.length
                            ) {
                              sum = sum + parseInt(response2.result);
                              // embassy = embassy + parseInt(response2.embassy_fees);
                              sum1.push(parseInt(response2.result));

                              result111.forEach(async function (result1) {
                                let sql3 = "";
                                if (data1.c_s_type == 10) {
                                  sql3 = `UPDATE lead_details SET amount = ${response2.result} WHERE deleted = 0 AND detail_id = ${result1.detail_id} AND service_type = 10`;
                                } else if (data1.c_s_type == 17) {
                                  sql3 = `UPDATE lead_details SET amount = ${response2.result} WHERE deleted = 0 AND detail_id = ${result1.detail_id} AND service_type = 17`;
                                } else {
                                  sql3 = `UPDATE lead_details SET amount = ${response2.result} WHERE deleted = 0 AND detail_id = ${result1.detail_id} AND service_type = 20`;
                                }



                                con.query(sql3, async function (err3, result3) {
                                  if (err3) {
                                    console.log(err3);
                                    resolve({
                                      status: 0,
                                      message: "Something went Wrong",
                                    });
                                  } else {
                                    if (result3.affectedRows > 0) {
                                      resolve({
                                        status: 1,
                                      });
                                    } else {
                                      resolve({
                                        status: 0,
                                        message: "Something went to wrong",
                                      });
                                    }
                                  }
                                });
                              });
                            } else {
                              sum = sum + parseInt(response2.result);
                              embassy =
                                parseInt(embassy) +
                                parseInt(response3.embassy_fees);
                              console.log(embassy, "|||||||||||||||");
                              sum1.push(parseInt(response2.result));
                              // result1.forEach(async function (result1) {
                              sqlll = `INSERT INTO lead_details (service_type,service_id,d_c_id,amount,tracking_id) VALUES ('${data1.c_s_type}',${data.a_id} ,${data.a_certificate[index]},${response2.result},'${data.tracking_id}')`;

                              con.query(sqlll, async function (err3, result3) {
                                if (err3) {
                                  console.log(err3);
                                  resolve({
                                    status: 0,
                                    message: "Something went Wrong",
                                  });
                                } else {
                                  if (result3 == undefined) {
                                    resolve({
                                      status: 0,
                                      result: [],
                                    });
                                  } else {
                                    if (result3.affectedRows > 0) {
                                      resolve({
                                        status: 1,
                                        result: result3,
                                      });
                                    }
                                  }
                                }
                                // });
                              });
                            }
                          } else {
                            resolve({
                              status: 0,
                              message: "Something went Wrong...",
                            });
                          }
                        }
                      });
                      // });
                    }
                  } else {
                    for (
                      let index = 0;
                      index < data.a_certificate.length;
                      index++
                    ) {
                      // data.a_certificate.map(async (k) => {
                      // console.log(k, "kkkkkkkkkkkkkkkkk");
                      console.log(
                        index,
                        data.a_certificate[index],
                        "!@ssfsdfsd35"
                      );
                      let sql1 = "";
                      if (data1.c_s_type == 10) {
                        sql1 = `SELECT detail_id FROM lead_details WHERE d_c_id=${data.a_certificate[index]} AND service_id=${data.a_id} AND service_type = 10`;
                      } else if (data1.c_s_type == 17) {
                        sql1 = `SELECT detail_id FROM lead_details WHERE d_c_id=${data.a_certificate[index]} AND service_id=${data.a_id} AND service_type = 17`;
                      } else {
                        sql1 = `SELECT detail_id FROM lead_details WHERE d_c_id=${data.a_certificate[index]} AND service_id=${data.a_id} AND service_type = 20`;
                      }

                      console.log(sql1, "***********");
                      con.query(sql1, async function (err111, result111) {
                        console.log(
                          result111,
                          "result111result111result111result111"
                        );
                        if (err111) {
                          console.log(err111);
                          resolve({
                            status: 0,
                            message: "Something went to wrong",
                          });
                        } else {
                          let sql2 = "";
                          if (data1.c_s_type == 10) {
                            sql2 = `SELECT s_amount FROM serviceprice WHERE service = 10  AND country = ${data.a_country} AND s_type = ${data.a_type} and deleted = 0;`;
                          } else if (data1.c_s_type == 17) {
                            sql2 = `SELECT s_amount FROM serviceprice WHERE service = 17  AND country = ${data.a_country} AND s_type = ${data.a_type} and deleted = 0;`;
                          } else {
                            sql2 = `SELECT s_amount FROM serviceprice WHERE service = 20  AND country = ${data.a_country} AND s_type = ${data.a_type} and deleted = 0;`;
                          }

                          let response2 = await new Promise((resolve, reject) => {
                            con.query(sql2, async function (err2, result2) {
                              console.log(err2, result2, "((((((((((");
                              if (err2) {
                                console.log(err2);
                                resolve({
                                  status: 0,
                                  message: "Something went wrong",
                                });
                              } else {
                                if (result2.length > 0) {
                                  result2.forEach(async function (result) {
                                    resolve({
                                      result: result.s_amount,
                                    });
                                  });
                                } else {
                                  resolve({
                                    result: parseInt(0),
                                  });
                                }
                              }
                            });
                          });
                          let sqll = `SELECT document_type FROM attributes Where attribute_id=${data.a_certificate[index]}`;
                          let resp = await new Promise((resolve, reject) => {
                            con.query(sqll, async function (err1, result1) {
                              console.log(err1, result1, "fsdfsddfg(((");

                              if (err1) {
                                console.log(err1);
                                resolve({
                                  status: 0,
                                  message: "Something went wrong",
                                });
                              } else {
                                if (result1.length > 0) {
                                  resolve({
                                    status: 1,
                                    result: result1[0].document_type,
                                  });
                                } else {
                                  resolve({ status: 0, result: [] });
                                }
                              }
                            });
                          });
                          let sql3 = "";
                          if (data1.c_s_type == 10) {
                            sql3 = `SELECT amount as embassy_fees FROM embassyfees WHERE service_type = 10  AND country = ${data.a_country} AND document = ${resp.result} AND deleted = 0;`;
                          } else if (data1.c_s_type == 17) {
                            sql3 = `SELECT amount as embassy_fees FROM embassyfees WHERE service_type = 17  AND country = ${data.a_country} AND document = ${resp.result} AND deleted = 0;`;
                          } else {
                            sql3 = `SELECT amount as embassy_fees FROM embassyfees WHERE service_type = 20  AND country = ${data.a_country} AND document = ${resp.result} AND deleted = 0;`;
                          }

                          let response3 = await new Promise((resolve, reject) => {
                            con.query(sql3, async function (err2, result2) {
                              if (err2) {
                                console.log(err2);
                                resolve({
                                  status: 0,
                                  message: "Something went wrong",
                                });
                              } else {
                                if (result2 == undefined) {
                                  resolve({
                                    embassy_fees: parseInt(0),
                                  });
                                } else {
                                  if (result2.length > 0) {
                                    result2.forEach(async function (result) {
                                      resolve({
                                        embassy_fees: result.embassy_fees,
                                      });
                                    });
                                  } else {
                                    resolve({
                                      embassy_fees: parseInt(0),
                                    });
                                  }
                                }
                              }
                            });
                          });
                          if (result111.length > 0 || result111.length == 0) {
                            if (result111.length > 0) {
                              sum = sum + parseInt(response2.result);
                              // embassy = embassy + parseInt(response2.embassy_fees);
                              sum1.push(parseInt(response2.result));

                              result111.forEach(async function (result1) {
                                let sql3 = "";
                                if (data1.c_s_type == 10) {
                                  sql3 = `UPDATE details SET amount = ${response2.result} WHERE deleted = 0 AND detail_id = ${result1.detail_id} AND service_type = 10`;
                                } else if (data1.c_s_type == 17) {
                                  sql3 = `UPDATE details SET amount = ${response2.result} WHERE deleted = 0 AND detail_id = ${result1.detail_id} AND service_type = 17`;
                                } else {
                                  sql3 = `UPDATE details SET amount = ${response2.result} WHERE deleted = 0 AND detail_id = ${result1.detail_id} AND service_type = 20`;
                                }


                                con.query(sql3, async function (err3, result3) {
                                  if (err3) {
                                    console.log(err3);
                                    resolve({
                                      status: 0,
                                      message: "Something went Wrong",
                                    });
                                  } else {
                                    if (result3.affectedRows > 0) {
                                      resolve({
                                        status: 1,
                                      });
                                    } else {
                                      resolve({
                                        status: 0,
                                        message: "Something went to wrong",
                                      });
                                    }
                                  }
                                });
                              });
                            } else {
                              sum = sum + parseInt(response2.result);
                              embassy =
                                parseInt(embassy) +
                                parseInt(response3.embassy_fees);
                              sum1.push(parseInt(response2.result));
                              console.log(
                                embassy,
                                "embassyembassyembassyembassy"
                              );
                              // result1.forEach(async function (result1) {
                              sqlll = `INSERT INTO lead_details (service_type,service_id,d_c_id,amount,tracking_id) VALUES ('${data1.c_s_type}',${data.a_id} ,${data.a_certificate[index]},${response2.result},'${data.tracking_id}')`;

                              con.query(sqlll, async function (err3, result3) {
                                if (err3) {
                                  console.log(err3);
                                  resolve({
                                    status: 0,
                                    message: "Something went Wrong",
                                  });
                                } else {
                                  if (result3 == undefined) {
                                    resolve({
                                      status: 0,
                                      result: [],
                                    });
                                  } else {
                                    if (result3.affectedRows > 0) {
                                      resolve({
                                        status: 1,
                                        result: result3,
                                      });
                                    }
                                  }
                                }
                                // });
                              });
                            }
                          } else {
                            resolve({
                              status: 0,
                              message: "Something went Wrong...",
                            });
                          }
                        }
                      });
                      // });
                    }
                  }
                } else {
                  resolve({
                    status: 0,
                    message: "Something went to wrong",
                  });
                }
              }
            });
          } else {
            sql = `UPDATE lead_visa SET v_prefix='${data.v_prefix
              }',v_name='${mysql_real_escape_string(data.v_name)}',v_passport='${data.v_passport
              }',v_country='${data.v_country}',v_type=${data.v_type
              },v_supporting_doc='${data.v_supporting_doc}',process_limit_date='${data.process_limit_date
              }',v_code='${data.v_code}',process_limit_mail_date='${data.process_limit_date
              }' WHERE v_id=${data.v_id}`;
            con.query(sql, async function (err, result) {
              if (err) {
                console.log(err);
                resolve({ status: 0, message: "Something went to wrong" });
              } else {
                if (result.affectedRows > 0) {
                  data.v_country.map(async (k) => {
                    sql1 = `SELECT detail_id FROM lead_details WHERE d_c_id=${k} AND service_id=${data.v_id}`;
                    con.query(sql1, async function (err111, result111) {
                      if (err111) {
                        console.log(err111);
                        resolve({
                          status: 0,
                          message: "Something went to wrong",
                        });
                      } else {
                        sql2 = `SELECT s_amount FROM serviceprice WHERE service = 8  AND country = ${k} AND s_type = ${data.v_type} AND deleted = 0;`;

                        let response2 = await new Promise((resolve, reject) => {
                          con.query(sql2, async function (err2, result2) {
                            if (err2) {
                              console.log(err2);
                              resolve({
                                status: 0,
                                message: "Something went wrong",
                              });
                            } else {
                              if (result2.length > 0) {
                                result2.forEach(async function (result) {
                                  resolve({
                                    result: result.s_amount,
                                  });
                                });
                              } else {
                                resolve({
                                  result: parseInt(0),
                                });
                              }
                            }
                          });
                        });
                        sql3 = `SELECT amount as embassy_fees FROM embassyfees WHERE service_type = 8  AND country = ${k} AND document = ${data.v_type} AND deleted = 0;`;
                        let response3 = await new Promise((resolve, reject) => {
                          con.query(sql3, async function (err2, result2) {
                            if (err2) {
                              console.log(err2);
                              resolve({
                                status: 0,
                                message: "Something went wrong",
                              });
                            } else {
                              if (result2.length > 0) {
                                result2.forEach(async function (result) {
                                  resolve({
                                    embassy_fees: result.embassy_fees,
                                  });
                                });
                              } else {
                                resolve({
                                  embassy_fees: parseInt(0),
                                });
                              }
                            }
                          });
                        });
                        if (result111.length > 0 || result111.length == 0) {
                          if (result111.length > 0) {
                            sum = sum + parseInt(response2.result);
                            // embassy = embassy + parseInt(response2.embassy_fees);
                            sum1.push(parseInt(response2.result));

                            result111.forEach(async function (result1) {
                              sql3 = `UPDATE lead_details SET amount = ${response2.result} WHERE deleted = 0 AND detail_id = ${result1.detail_id}`;

                              con.query(sql3, async function (err3, result3) {
                                if (err3) {
                                  console.log(err3);
                                  resolve({
                                    status: 0,
                                    message: "Something went Wrong",
                                  });
                                } else {
                                  if (result3.affectedRows > 0) {
                                    resolve({
                                      status: 1,
                                    });
                                  } else {
                                    resolve({
                                      status: 0,
                                      message: "Something went to wrong",
                                    });
                                  }
                                }
                              });
                            });
                          } else {
                            sum = sum + parseInt(response2.result);
                            embassy =
                              parseInt(embassy) +
                              parseInt(response3.embassy_fees);
                            console.log(embassy, "+++++++++++++++++++");
                            sum1.push(parseInt(response2.result));
                            let status_change_date = moment().format(
                              "DD-MM-YYYY HH:mm:ss"
                            );
                            // result1.forEach(async function (result1) {
                            sqlll = `INSERT INTO lead_details (service_type,service_id,d_c_id,amount,tracking_id) VALUES ('${data1.c_s_type}' , ${data.v_id} ,${k},${response2.result},'${data.tracking_id}')`;

                            con.query(sqlll, async function (err3, result3) {
                              if (err3) {
                                console.log(err3);
                                resolve({
                                  status: 0,
                                  message: "Something went Wrong",
                                });
                              } else {
                                if (result3.affectedRows > 0) {
                                  resolve({
                                    status: 1,
                                    result: result3,
                                  });
                                } else {
                                  resolve({
                                    status: 0,
                                    message: "Something went to wrong",
                                  });
                                }
                              }
                            });
                          }
                        } else {
                          resolve({
                            status: 0,
                            message: "Something went Wrong...",
                          });
                        }
                      }
                    });
                  });
                } else {
                  resolve({
                    status: 0,
                    message: "Something went to wrong",
                  });
                }
              }
            });
          }
        } else {
          if (data1.c_s_type == 10 || data1.c_s_type == 17 || data1.c_s_type == 20) {
            let sql = "";
            if (data1.c_s_type == 10) {
              sql = `INSERT INTO lead_attestation `;
            } else if (data1.c_s_type == 17) {
              sql = `INSERT INTO lead_apostille `;
            } else {
              sql = `INSERT INTO lead_apostille `;
            }

            sql += `(c_id,a_prefix,a_name,a_code,a_country,a_type,a_certificate,a_supporting_doc,a_extra_doc,created_id,pg_no,tracking_id,process_limit_date,process_limit_mail_date,no_of_certificates) VALUES (${data1.c_id
              },'${data.a_prefix}','${mysql_real_escape_string(data.a_name)}',${data.a_code
              },${data.a_country},${data.a_type},
      '${data.a_certificate.sort().toString()}',
                    '${typeof data.a_supporting_doc == "undefined"
                ? ""
                : data.a_supporting_doc.toString()
              }',
                    '${typeof data.a_extra_doc == "undefined"
                ? ""
                : data.a_extra_doc.toString()
              }',${data1.created_id},${data.pg_no
              },'${mysql_real_escape_string(data1.tracking_id)}','${data.process_limit_date
              }','${data.process_limit_date}',${data.no_of_certificates})`;

            con.query(sql, async function (err, result) {
              if (err) {
                console.log(err);
                resolve({ status: 0, message: "Something went to wrong" });
              } else {
                if (result.affectedRows > 0) {
                  if (data.no_of_certificates > 0) {
                    for (
                      let index = 0;
                      index < data.a_certificate.length;
                      index++
                    ) {
                      console.log(
                        index,
                        data.a_certificate[index],
                        "13423434335454335"
                      );
                      // data.a_certificate.map(async (k) => {
                      sql1 = `SELECT detail_id FROM lead_details WHERE d_c_id=${data.a_certificate[index]} AND service_id=${result.insertId} AND service_type = 10`;
                      con.query(sql1, async function (err111, result111) {
                        if (err111) {
                          console.log(err111);
                          resolve({
                            status: 0,
                            message: "Something went to wrong",
                          });
                        } else {
                          sql2 = `SELECT s_amount FROM serviceprice WHERE service = 10  AND country = ${data.a_country} AND s_type = ${data.a_type} and deleted = 0;`;

                          let response2 = await new Promise((resolve, reject) => {
                            con.query(sql2, async function (err2, result2) {
                              if (err2) {
                                console.log(err2);
                                resolve({
                                  status: 0,
                                  message: "Something went wrong",
                                });
                              } else {
                                if (result2.length > 0) {
                                  result2.forEach(async function (result) {
                                    resolve({
                                      result: result.s_amount,
                                    });
                                  });
                                } else {
                                  resolve({
                                    result: parseInt(0),
                                  });
                                }
                              }
                            });
                          });

                          let sqll = `SELECT document_type FROM attributes Where attribute_id=${data.a_certificate[index]}`;

                          let resp = await new Promise((resolve, reject) => {
                            con.query(sqll, async function (err1, result1) {
                              if (err1) {
                                console.log(err1);
                                resolve({
                                  status: 0,
                                  message: "Something went wrong",
                                });
                              } else {
                                if (result1.length > 0) {
                                  resolve({
                                    status: 1,
                                    result: result1[0].document_type,
                                  });
                                } else {
                                  resolve({ status: 0, result: [] });
                                }
                              }
                            });
                          });
                          sql3 = `SELECT amount as embassy_fees FROM embassyfees WHERE service_type = 10  AND country = ${data.a_country} AND document = ${resp.result} AND deleted = 0;`;
                          let response3 = await new Promise((resolve, reject) => {
                            con.query(sql3, async function (err2, result2) {
                              if (err2) {
                                console.log(err2);
                                resolve({
                                  status: 0,
                                  message: "Something went wrong",
                                });
                              } else {
                                if (result2.length > 0) {
                                  result2.forEach(async function (result) {
                                    resolve({
                                      embassy_fees: result.embassy_fees,
                                    });
                                  });
                                } else {
                                  resolve({
                                    embassy_fees: parseInt(0),
                                  });
                                }
                              }
                            });
                          });

                          if (result111.length > 0 || result111.length == 0) {
                            if (
                              result111.length > 0 &&
                              index < result111.length
                            ) {
                              sum = sum + parseInt(response2.result);
                              // embassy = embassy + parseInt(response2.embassy_fees);
                              sum1.push(parseInt(response2.result));

                              result111.forEach(async function (result1) {
                                sql3 = `UPDATE lead_details SET amount = ${response2.result} WHERE deleted = 0 AND detail_id = ${result1.detail_id} AND service_type = 10`;

                                con.query(sql3, async function (err3, result3) {
                                  if (err3) {
                                    console.log(err3);
                                    resolve({
                                      status: 0,
                                      message: "Something went Wrong",
                                    });
                                  } else {
                                    if (result3.affectedRows > 0) {
                                      resolve({
                                        status: 1,
                                      });
                                    } else {
                                      resolve({
                                        status: 0,
                                        message: "Something went to wrong",
                                      });
                                    }
                                  }
                                });
                              });
                            } else {
                              sum = sum + parseInt(response2.result);
                              embassy =
                                parseInt(embassy) +
                                parseInt(response3.embassy_fees);
                              console.log(embassy, "____________________");
                              sum1.push(parseInt(response2.result));
                              sqlll = `INSERT INTO lead_details (service_type,service_id,d_c_id,amount,tracking_id) VALUES ('${data1.c_s_type}' , ${result.insertId} ,${data.a_certificate[index]},${response2.result},'${data1.tracking_id}')`;

                              con.query(sqlll, async function (err3, result3) {
                                if (err3) {
                                  console.log(err3);
                                  resolve({
                                    status: 0,
                                    message: "Something went Wrong",
                                  });
                                } else {
                                  if (result3.affectedRows > 0) {
                                    resolve({
                                      status: 1,
                                      result: result3,
                                    });
                                  } else {
                                    resolve({
                                      status: 0,
                                      message: "Something went to wrong",
                                    });
                                  }
                                }
                              });
                            }
                          } else {
                            resolve({
                              status: 0,
                              message: "Something went Wrong...",
                            });
                          }
                        }
                      });
                    }
                  } else {
                    for (
                      let index = 0;
                      index < data.a_certificate.length;
                      index++
                    ) {
                      console.log(
                        index,
                        data.a_certificate[index],
                        "!@#@#@@@454335"
                      );
                      // data.a_certificate.map(async (k) => {
                      sql1 = `SELECT detail_id FROM lead_details WHERE d_c_id=${data.a_certificate[index]} AND service_id=${result.insertId} AND service_type = 10`;
                      con.query(sql1, async function (err111, result111) {
                        if (err111) {
                          console.log(err111);
                          resolve({
                            status: 0,
                            message: "Something went to wrong",
                          });
                        } else {
                          sql2 = `SELECT s_amount FROM serviceprice WHERE service = 10  AND country = ${data.a_country} AND s_type = ${data.a_type} and deleted = 0;`;

                          let response2 = await new Promise((resolve, reject) => {
                            con.query(sql2, async function (err2, result2) {
                              if (err2) {
                                console.log(err2);
                                resolve({
                                  status: 0,
                                  message: "Something went wrong",
                                });
                              } else {
                                if (result2.length > 0) {
                                  result2.forEach(async function (result) {
                                    resolve({
                                      result: result.s_amount,
                                    });
                                  });
                                } else {
                                  resolve({
                                    result: parseInt(0),
                                  });
                                }
                              }
                            });
                          });

                          let sqll = `SELECT document_type FROM attributes Where attribute_id=${data.a_certificate[index]}`;

                          let resp = await new Promise((resolve, reject) => {
                            con.query(sqll, async function (err1, result1) {
                              if (err1) {
                                console.log(err1);
                                resolve({
                                  status: 0,
                                  message: "Something went wrong",
                                });
                              } else {
                                if (result1.length > 0) {
                                  resolve({
                                    status: 1,
                                    result: result1[0].document_type,
                                  });
                                } else {
                                  resolve({ status: 0, result: [] });
                                }
                              }
                            });
                          });
                          sql3 = `SELECT amount as embassy_fees FROM embassyfees WHERE service_type = 10  AND country = ${data.a_country} AND document = ${resp.result} AND deleted = 0;`;
                          let response3 = await new Promise((resolve, reject) => {
                            con.query(sql3, async function (err2, result2) {
                              if (err2) {
                                console.log(err2);
                                resolve({
                                  status: 0,
                                  message: "Something went wrong",
                                });
                              } else {
                                if (result2.length > 0) {
                                  result2.forEach(async function (result) {
                                    resolve({
                                      embassy_fees: result.embassy_fees,
                                    });
                                  });
                                } else {
                                  resolve({
                                    embassy_fees: parseInt(0),
                                  });
                                }
                              }
                            });
                          });

                          if (result111.length > 0 || result111.length == 0) {
                            if (result111.length > 0) {
                              sum = sum + parseInt(response2.result);
                              // embassy = embassy + parseInt(response2.embassy_fees);
                              sum1.push(parseInt(response2.result));

                              result111.forEach(async function (result1) {
                                sql3 = `UPDATE lead_details SET amount = ${response2.result} WHERE deleted = 0 AND detail_id = ${result1.detail_id} AND service_type = 10`;

                                con.query(sql3, async function (err3, result3) {
                                  if (err3) {
                                    console.log(err3);
                                    resolve({
                                      status: 0,
                                      message: "Something went Wrong",
                                    });
                                  } else {
                                    if (result3.affectedRows > 0) {
                                      resolve({
                                        status: 1,
                                      });
                                    } else {
                                      resolve({
                                        status: 0,
                                        message: "Something went to wrong",
                                      });
                                    }
                                  }
                                });
                              });
                            } else {
                              sum = sum + parseInt(response2.result);
                              embassy =
                                parseInt(embassy) +
                                parseInt(response3.embassy_fees);
                              console.log(embassy, "|erferser");
                              sum1.push(parseInt(response2.result));
                              sqlll = `INSERT INTO lead_details (service_type,service_id,d_c_id,amount,tracking_id) VALUES ('${data1.c_s_type}' , ${result.insertId} ,${data.a_certificate[index]},${response2.result},'${data1.tracking_id}')`;

                              con.query(sqlll, async function (err3, result3) {
                                if (err3) {
                                  console.log(err3);
                                  resolve({
                                    status: 0,
                                    message: "Something went Wrong",
                                  });
                                } else {
                                  if (result3.affectedRows > 0) {
                                    resolve({
                                      status: 1,
                                      result: result3,
                                    });
                                  } else {
                                    resolve({
                                      status: 0,
                                      message: "Something went to wrong",
                                    });
                                  }
                                }
                              });
                            }
                          } else {
                            resolve({
                              status: 0,
                              message: "Something went Wrong...",
                            });
                          }
                        }
                      });
                    }
                  }
                } else {
                  resolve({
                    status: 0,
                    message: "Something went to wrong",
                  });
                }
              }
            });
          } else {
            sql = `INSERT INTO lead_visa (c_id,v_prefix,v_name,v_code,v_passport,v_type,v_country,v_supporting_doc,created_id,pg_no,tracking_id,process_limit_date,process_limit_mail_date) VALUES (${data1.c_id
              },'${data.v_prefix}','${mysql_real_escape_string(data.v_name)}',${data.v_code
              },'${data.v_passport}',${data.v_type},'${data.v_country
                .sort()
                .toString()}','${data.a_supporting_doc.toString()}',${data1.created_id
              },${data.pg_no},'${data1.tracking_id}','${data.process_limit_date
              }','${data.process_limit_date}')`;
            con.query(sql, async function (err, result) {
              if (err) {
                console.log(err);
                resolve({ status: 0, message: "Something went to wrong" });
              } else {
                if (result.affectedRows > 0) {
                  data.v_country.map(async (k) => {
                    sql1 = `SELECT detail_id FROM lead_details WHERE d_c_id=${k} AND service_id=${result.insertId}`;
                    con.query(sql1, async function (err111, result111) {
                      if (err111) {
                        console.log(err111);
                        resolve({
                          status: 0,
                          message: "Something went to wrong",
                        });
                      } else {
                        sql2 = `SELECT s_amount FROM serviceprice WHERE service = 8  AND country = ${k} AND s_type = ${data.v_type} AND deleted = 0;`;

                        let response2 = await new Promise((resolve, reject) => {
                          con.query(sql2, async function (err2, result2) {
                            if (err2) {
                              console.log(err2);
                              resolve({
                                status: 0,
                                message: "Something went wrong",
                              });
                            } else {
                              if (result2.length > 0) {
                                result2.forEach(async function (result) {
                                  resolve({
                                    result: result.s_amount,
                                  });
                                });
                              } else {
                                resolve({
                                  result: parseInt(0),
                                });
                              }
                            }
                          });
                        });
                        sql3 = `SELECT amount as embassy_fees FROM embassyfees WHERE service_type = 8  AND country = ${k} AND document = ${data.v_type} AND deleted = 0;`;
                        let response3 = await new Promise((resolve, reject) => {
                          con.query(sql3, async function (err2, result2) {
                            if (err2) {
                              console.log(err2);
                              resolve({
                                status: 0,
                                message: "Something went wrong",
                              });
                            } else {
                              if (result2.length > 0) {
                                result2.forEach(async function (result) {
                                  resolve({
                                    embassy_fees: result.embassy_fees,
                                  });
                                });
                              } else {
                                resolve({
                                  embassy_fees: parseInt(0),
                                });
                              }
                            }
                          });
                        });
                        if (result111.length > 0 || result111.length == 0) {
                          if (result111.length > 0) {
                            sum = sum + parseInt(response2.result);
                            // embassy = embassy + parseInt(response2.embassy_fees);
                            sum1.push(parseInt(response2.result));

                            result111.forEach(async function (result1) {
                              sql3 = `UPDATE lead_details SET amount = ${response2.result} WHERE deleted = 0 AND detail_id = ${result1.detail_id}`;

                              con.query(sql3, async function (err3, result3) {
                                if (err3) {
                                  console.log(err3);
                                  resolve({
                                    status: 0,
                                    message: "Something went Wrong",
                                  });
                                } else {
                                  if (result3.affectedRows > 0) {
                                    resolve({
                                      status: 1,
                                    });
                                  } else {
                                    resolve({
                                      status: 0,
                                      message: "Something went to wrong",
                                    });
                                  }
                                }
                              });
                            });
                          } else {
                            sum = sum + parseInt(response2.result);
                            embassy =
                              parseInt(embassy) +
                              parseInt(response3.embassy_fees);
                            sum1.push(parseInt(response2.result));

                            // result1.forEach(async function (result1) {
                            sqlll = `INSERT INTO lead_details (service_type,service_id,d_c_id,amount,tracking_id) VALUES ('${data1.c_s_type}' , ${result.insertId} ,${k},${response2.result},'${data1.tracking_id}')`;

                            con.query(sqlll, async function (err3, result3) {
                              if (err3) {
                                console.log(err3);
                                resolve({
                                  status: 0,
                                  message: "Something went Wrong",
                                });
                              } else {
                                if (result3.affectedRows > 0) {
                                  resolve({
                                    status: 1,
                                    result: result3,
                                  });
                                } else {
                                  resolve({
                                    status: 0,
                                    message: "Something went to wrong",
                                  });
                                }
                              }
                              // });
                            });
                          }
                        } else {
                          resolve({
                            status: 0,
                            message: "Something went Wrong...",
                          });
                        }
                      }
                    });
                  });
                }
              }
            });
          }

        }
      });
    });


    // let response4 = new Promise((resolve, reject) => {
    //   let c_gst = 0;
    //   let s_gst = 0;
    //   let i_gst = 0;
    //   let netamt = 0;

    //   let s1 =
    //     sum +
    //     parseInt(payment.result.courier) +
    //     parseInt(payment.result.exp_charge) -
    //     parseInt(payment.result.dis_amt) -
    //     parseInt(payment.result.coupon_amt);

    //   if (payment.result.c_tax == 1) {
    //     if (payment.result.c_gst == 1) {
    //       if (data1.branch_state_id == payment.result.c_state) {
    //         c_gst = (s1 * data1.s_c_gst) / 100;
    //         s_gst = (s1 * data1.s_s_gst) / 100;
    //         netamt = s1 + c_gst + s_gst + parseInt(embassy);
    //       } else {
    //         i_gst = (s1 * data1.s_i_gst) / 100;
    //         netamt = s1 + i_gst + parseInt(embassy);
    //       }
    //     } else {
    //       netamt = s1 + parseInt(embassy);
    //     }
    //   } else {
    //     netamt = s1 + parseInt(embassy);
    //   }
    //   //1003
    //   sql5 = `INSERT INTO lead_payment(payment_date,c_id,total_amount,courier,embassy_fees,dis_amt,net_amt,sgst,cgst,igst,created_id,paid_amt,due_amt,u_id,is_tds,tds_amt,tracking_id,exp_charge,coupon_amt,c_tax,created_branch_id,p_receipt_no,invoice_no,payment_refund) VALUES ('${response3.result.payment_date
    //     }',${response3.result.c_id},'${sum}',
    //                 '${response3.result.courier}','${embassy}','${response3.result.dis_amt
    //     }','${netamt}','${s_gst}','${c_gst}','${i_gst}',${response3.result.created_id
    //     },'${response3.result.paid_amt}','${netamt - response3.result.paid_amt - response3.result.tds_amt
    //     }',${response3.result.u_id},${response3.result.is_tds} , '${response3.result.tds_amt
    //     }','${mysql_real_escape_string(response3.result.tracking_id)}','${response3.result.exp_charge
    //     }','${response3.result.coupon_amt}','${response3.result.c_tax}',${response3.result.created_branch_id
    //     },'${payment.result.p_receipt_no}','${response3.result.invoice_no}','${response3.result.payment_refund}')`;
    //   con.query(sql5, async function (err5, result5) {
    //     if (err5) {
    //       console.log(err5);
    //       resolve({ status: 0, message: "Something went wrong" });
    //     } else {
    //       if (result5.affectedRows > 0) {
    //         resolve({
    //           status: 1,
    //           igst: i_gst,
    //           sgst: s_gst,
    //           cgst: c_gst,
    //           net_before: s1,
    //           serviceprice: response3.result,
    //           total_amt: sum,
    //           net_amt: netamt,
    //           amount: sum1,
    //           embassy_fees: embassy,
    //           message: "Lead Attestation Updated Successfully....",
    //         });
    //       } else {
    //         resolve({
    //           status: 0,
    //           result: 0,
    //           message: "Something went wrong..",
    //         });
    //       }
    //     }
    //   });
    // });

    let response4 = new Promise(async (resolve, reject) => {
      let sql1 = `INSERT INTO lead_payment(payment_date,c_id,total_amount,courier,embassy_fees,dis_amt,net_amt,due_amt,sgst,cgst,igst,created_id,u_id,invoice_no,tracking_id,coupon_amt,exp_charge,p_receipt_no,c_tax,created_branch_id) VALUES ('${data1.c_date
        }',${data1.c_id},'${data1.total_amount}',
    '${data1.courier}','${data1.embassy_fees}','${data1.dis_amt
        }','${data1.net_amt}','${data1.net_amt}','${data1.sgst}','${data1.cgst}','${data1.igst}',${data1.created_id},${data1.c_u_id},'${responseinvoice.ino}','${mysql_real_escape_string(
          data1.tracking_id
        )}','${data1.coupon_amt}','${data1.exp_charge}','${payment.result.p_receipt_no
        }','${data1.c_tax}',${data1.created_branch_id})`;
      con.query(sql1, async function (err4, result4) {
        if (err4) {
          console.log(err4);
          resolve({ status: 0, message: "Something went wrong" });
        } else {
          if (result4.affectedRows > 0) {
            resolve({
              status: 1,
              lead_id: data1.l_id,
              allocatedTo: data1.l_allocate_to,
              login_u_id: data1.login_u_id,
              l_created_by: data1.created_id,
              message: "Proforma Updated Successfully....",
            });
          } else {
            resolve({
              status: 0,
              message: "Proforma Not Updated...",
            });
          }
        }
      });
    });
    return response4;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}


async function deleteProformaCustomer(data) {
  try {
    const resp = await getCustomerByLeadId({ id: data.id });
    console.log(resp, "%%%%%%%%%%%%%%%");
    let sql1 = `SELECT lead_details.detail_id,lead_attestation.a_id FROM lead_details,lead_attestation WHERE lead_attestation.a_id = lead_details.service_id  AND lead_details.service_type = 10 and lead_attestation.c_id = ${resp.result} AND lead_attestation.deleted = 0 and lead_details.deleted = 0 UNION  SELECT lead_details.detail_id,lead_apostille.a_id FROM lead_details,lead_apostille WHERE lead_apostille.a_id = lead_details.service_id and lead_details.service_type = 17 and lead_apostille.c_id = ${resp.result} AND lead_apostille.deleted = 0 and lead_details.deleted = 0 UNION  SELECT lead_details.detail_id,lead_translation.a_id FROM lead_details,lead_translation WHERE lead_translation.a_id = lead_details.service_id and lead_details.service_type = 20 and lead_translation.c_id = ${resp.result} AND lead_translation.deleted = 0 and lead_details.deleted = 0 UNION  SELECT lead_details.detail_id,lead_visa.v_id FROM lead_details,lead_visa WHERE lead_visa.v_id = lead_details.service_id and lead_details.service_type = 8 and lead_visa.c_id = ${resp.result} AND lead_visa.deleted = 0 and lead_details.deleted = 0`;
    let response1 = await new Promise((resolve, reject) => {
      con.query(sql1, function (err1, result1) {
        if (err1) {
          console.log(err1);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result1.length > 0) {
            resolve({
              status: 1,
              result: result1,
            });
          } else {
            resolve({
              status: 0,
              result: [],
              message: "Something went to wrong",
            });
          }
        }
      });
    });

    sql = `UPDATE lead_customer SET deleted = 1 WHERE c_id = ${resp.result} ;UPDATE lead_visa SET deleted = 1 WHERE c_id = ${resp.result} AND deleted=0;UPDATE lead_apostille SET deleted = 1 WHERE c_id = ${resp.result};UPDATE lead_translation SET deleted = 1 WHERE c_id = ${resp.result} ;UPDATE lead_attestation SET deleted = 1 WHERE c_id = ${resp.result} ;UPDATE lead_payment SET deleted = 1 WHERE c_id = ${resp.result};UPDATE elead SET proforma_status = 0 WHERE lead_id = ${data.id}; `;
    let sqll = "";
    let sqll1 = "";
    let response = await new Promise((resolve, reject) => {
      con.query(sql, function (err1, result1) {
        if (err1) {
          console.log(err1);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result1.affectedRows > 0) {
            let sqll = "";
            response1.result.map((res) => {
              sqll += `UPDATE lead_details SET deleted = 1 WHERE detail_id = ${res.detail_id} ;`;
            });
            con.query(sqll, function (err, result) {
              if (err) {
                console.log(err);
                resolve({ status: 0, message: "Something went to wrong" });
              } else {
                if (result.affectedRows > 0) {
                  resolve({
                    status: 1,
                  });
                }
              }
            });

            resolve({
              status: 1,
              result: result1,
              message: "Proforma Deleted Successfully....",
            });
          } else {
            let sqll1 = "";
            response1.result.map((res) => {
              sqll1 += `UPDATE lead_details SET deleted = 1 WHERE detail_id = ${res.detail_id} ;`;
            });
            con.query(sqll1, function (err, result) {
              if (err) {
                console.log(err);
                resolve({ status: 0, message: "Something went to wrong" });
              } else {
                if (result.affectedRows > 0) {
                  resolve({
                    status: 1,
                  });
                }
              }
            });
            resolve({
              status: 1,
              result: result1,
              message: "Proforma Deleted Successfully....",
            });
          }
        }
      });
    });

    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}


async function CheckInvoiceNumberExists(data) {
  try {
    let getCustomer = "";
    if (data.type == 0) {
      getCustomer = `Select c_id from lead_payment where invoice_no = ${data.invoice_no} AND deleted = 0`;
    } else {
      getCustomer = `Select c_id from payment where invoice_no = ${data.invoice_no} AND deleted = 0`;
    }

    let response = await new Promise((resolve, reject) => {
      con.query(getCustomer, function (err1, result1) {
        if (err1) {
          console.log(err1);
          resolve({ status: 0, message: "Something went to wrong" });
        } else {
          if (result1.length == 0) {
            resolve({
              status: 1,
              message: "Invoice Number not Exists...",
            });
          }
          if (result1.length > 0) {
            resolve({
              status: 0,
              result: result1[0].c_id,
              message: "Invoice Number Already Exists...",
            });
          } else {
            resolve({
              status: 1,
              message: "Invoice Number not Exists...",
            });
          }
          // else {
          //   resolve({
          //     status: 0,
          //     message: "Something went to wrong",
          //   });
          // }
        }
      });
    });
    return response;
  } catch (error) {
    console.log(error);
    return { status: 0, message: "Invalid Call Try Again" };
  }
}


module.exports = {
  sendOtp,
  verifyOtp,
  setNewPassword,
  setChangePassword,
  updateUserData,
  insertAttribute,
  getallAttribute,
  updateattrstatus,
  updateattribute,
  insertBranch,
  getallBranch,
  updatebranch,
  deleteBranch,
  gettypecountry,
  insertService,
  deleteService,
  getallService,
  insertFeature,
  getallFeature,
  updateFeature,
  deleteFeature,
  getLeadSource,
  insertLead,
  getAllLead,
  deleteLead,
  updateLead,
  getAllBranch,
  getUsers,
  getAllLeadStatus,
  updateLeadBranch,
  updateLeadStatus,
  updateLeadPriority,
  insertFollowup,
  getFollowUp,
  updateSetting,
  getsettingdata,
  insertSMSTemplate,
  getAllSMStemlate,
  deleteSMSTemlate,
  updateSMSTemplate,
  updateAllocatedTo,
  updatetemplatestatus,
  getemailtemplate,
  //sakshi
  insertrole,
  updaterole,
  getroledata,
  getrolepermission,
  insertUser,
  getuserbyparent,
  getuserpermission,
  updateuser,
  deleteUser,
  getuserbytype,
  insertmanagerallocation,
  getallocationlist,
  getbranchallocationlist,
  updatemanagerallocation,
  deletemanagerallocation,
  deleteallocatedbranchbyid,
  searchlead,
  getinvoicedata,
  updatecustomeraddress,
  sendinvoicemail,
  fetchbranchdatabyid,
  fetchgraphleaddata,
  generatecregistrationreport,
  downloadallinvoicepdfwithbranch,
  getselectionamount,
  fetchmanagerbranch,
  fetchbranchuserdata,
  getrevenuedata,
  gettemplatelistbycate,
  gettemplatedata,
  getcourierchargereport,
  gettotalinvoice,
  sendmailfortranslation,
  searchallcover,
  allcoverpdf,
  searchstatuswiseleadreport,
  getallprocessoverdue,
  setnextprocessfinishdate,
  getfaqcatepermission,
  getallpickupusers,
  // get email template category
  getemailtemplatecategory,
  gettemplatesubcategory,
  insertEmailTemplate,
  updateEmailTemplate,
  deleteEmailTemplate,
  getbranchdatabyid,
  updateBranchSetting,
  getAttributebyid,
  deleteEmailImage,
  //Drashti
  insertTask,
  getallTask,
  deleteTask,
  deleteTaskImage,
  updateTask,
  updateTaskPriority,
  updateTaskStatus,
  getTodayLFollowup,
  insertTaskFeedback,
  getTaskFeedback,
  updateTaskAllocatedTo,
  updateTaskRevision,
  getTotalTask,
  getTotalLead,
  getTotalTodayLead,
  getVisaCustomer,
  updateVisaStatus,
  getAttestationCustomer,
  deleteVisaCustomer,
  updateVisaCustomer,
  updateAttestationStatus,
  deleteAttestationCustomer,
  updateAttestationCustomer,
  searchVisaCustomer,
  searchAttestationCustomer,
  insertCustomerConversation,
  getCustomerComment,
  getPaymentRefund,
  insertRefundPayment,
  getPaymentDetails,
  searchRefundData,
  getUnderProcessList,
  getattestationcustomerbyid,
  getRefundById,
  getRefundReceipt,
  getPaymentData,
  getPaymentReceipt,
  getLeadFollowupCounter,
  leadFollowUpCountReport,
  sendmailallcustomer,
  sendcustomerdueamtmail,
  getcourierreport,
  sendmailofprocesslimittousers,
  //customer
  insertmaincustomer,
  checkcustomer,
  getAttributebyid,
  getcustomeramount,
  getallcustomer,
  getpaymentdetail,
  deletecustomer,
  uploadCustomerFile,
  getallfilesbyid,
  deleteFile,
  getpayment,
  searchpayment,
  updatepayment,
  searchcustomer,
  updatecustomer,
  getcustomerbyId,
  getEmailSetting,
  updateDetailsStatus,
  getvisacustomerbyid,
  updatetds,
  gettds,
  //cashflow
  getbranchuser,
  getcashpaymentamount,
  insertcashflow,
  deletecashflow,
  searchcashflow,
  searchTaskData,
  //apostille
  updateApostilleStatus,
  getApostilleCustomer,
  getapostillecustomerbyid,
  deleteApostilleCustomer,
  updateApostilleCustomer,
  searchApostilleCustomer,
  //cover letter
  getbusinesssummery,
  searchbusinesssummery,
  attestationcoverletter,
  apostillecoverletter,
  visacoverletter,
  attestationpdf,
  apostillepdf,
  visapdf,
  sendattestationmail,
  sendapostillemail,
  sendvisaemail,
  generaterdeliveryreport,
  getdispatch,
  dispatchreportspdf,
  sendrefundmail,
  sendpaymentmail,
  excelreports,
  getbranchcustomer,
  accountreport,
  accountreportpdf,
  leadReport,
  leadCountReport,
  convertLead,
  fullcopy,
  halfcopy,
  profit_cost,
  sendServiceStatusMail,
  sendServiceStatusMailTemp,
  sendleadstatusmail,
  setleadmailtemp,
  //Proforma Invoice
  insertLeadCustomer,
  getproformainvoicedata,
  getproformainvoice,
  //update service
  updateService,
  //update serviceprice
  updateDispatchDate,
  //getallemailtemplate
  getallEmailtemplate,
  //Send Lead Mail
  sendleademail,
  allinvoice,
  getcustomer,
  searchcustomers,
  getattestations,
  searchAttestations,
  getapostilles,
  searchapostilles,
  getvisas,
  searchvisas,
  getpayments,
  searchpayments,
  getcustomertdslist,
  searchtdsdata,
  getapplicants,
  insertfeedback,
  getCustomerfeedback,
  //Goal
  insertGoal,
  getAllGoal,
  updateGoal,
  deleteGoal,
  //Task And Goal On Dashboard
  getAllGoalList,
  getallDashTask,
  getTaskUsers,
  branchtransfer,
  getactivitylog,
  addlogouttime,
  login_logout_report,
  searchlogin_logout_report,
  getAllHoldApplication,
  insertnextholdcomment,

  getTranslationCustomer,
  updateTranslationCustomer,
  searchTranslationCustomer,
  deleteTranslationCustomer,
  gettranslationcustomerbyid,
  updateTranslationStatus,
  translationpdf,
  translationcoverletter,
  sendtranslationmail,
  gettranslations,
  newtasknotification,
  readtasknotification,
  gettaskbyid,
  sendloginotp,
  feedbackmailsend,
  sendleadinvoicemail,
  sendleadwithoutinvoiceemail,
  blockCustomer,

  // JIl
  changeCustomerPassword,
  sendtempmail,
  // Form Link
  getuserbyid,
  // FAQ
  getfaqcategoryList,
  insertFaqCategory,
  updateFaqCategory,
  insertFaq,
  getfaqList,
  updateFaq,
  deleteFAQ,
  deletefaqcategory,
  getProcessLimitDate,
  sendMailOfProcessLimitDate,
  insertTarget,
  getTarget,
  updateTarget,
  userTargetReport,
  //Draft Receipt
  approvedpayment,
  getdraftreceipt,
  getDraftPaymentData,
  getDraftPaymentReceipt,
  searchdraftpayment,
  searchAccountSummery,
  //Suggestion
  insertSuggestion,
  updateSuggestion,
  deleteSuggestion,
  getSuggestion,

  userMonthTargetReport,
  deleteUserTarget,

  //Main customer
  getMainCustomer,
  updateMainCustomerDetails,
  sendloginemail,
  searchMainCustomer,

  insertembassyfee,
  getembassyfees,
  getembassyamount,
  updateembassyfees,
  searchChargeReport,
  getAllNewLead,
  logoutTodayUser,
  sendMailofDetailStatus,
  generatecollectedreport,
  generatedispatchreport,
  searchEmbassyFeesReports,
  newCustomerofAnotherBranch,
  searchtranslations,
  getAlldraftreceipt,
  getallapplicants,
  getTotalMonthlyInvoice,
  getAllinpickuplist,
  insertpickupnote,
  getAlloutpickuplist,
  pickupdone,
  getAllpickupdonelist,
  getAllpickupdoneleadlist,
  insertquestion,
  getallquestion,
  deletequestion,
  updatequestion,
  getDailyQuestions,
  insertDailyQueAns,
  getUsersChat,
  getChatByID,
  searchMainCustomerChat,
  getChatCustomerListSocket,
  insertUserMessage,
  searchMainCustomerChat,
  getChatCustomerListSocket,
  getCustomerUser,
  gettemplatebody,
  getEmailHistory,
  getdraftreceiptCounter,
  gettaskreport,
  searchtdsReport,
  updateDraftPayment,
  updatePaymentMode,
  getservicevalue,
  insertDirCustomer,
  insertbankdetails,
  getbankdetails,
  deletebankdetails,
  draftReceiptRead,
  branchCustomerRead,
  newLeadRead,
  getservicevaluetype,
  newPickDoneRead,
  insertUserMessageSocket,
  readchat,
  getChatUsersListSocket,
  getChatByIDSocket,
  getCustomerUserSocket,
  getallheadernewtask,
  getAllsocketdraftreceipt,
  LeadFollowRead,
  searchServicePrice,
  getreferralcustomer,
  getMaincustomerByid,
  getcommisiondata,
  updatecommsionpayment,
  getcommisionreportdata,
  deletecommision,
  checkcommissiondataById,
  searchEmbassyFees,
  searchFeedback,
  updatPaymentWithApproval,
  createmailpdf,
  getAttestationListBycid,
  searchcashinhand,
  searchEmbassyFeesReportsbyall,
  getLeadFollowup,
  getuserlist,
  chatnotification,
  usercheck,
  getTodayCFollowup,
  CustomerFollowRead,
  getCustomerFollowupCounter,
  searchAttribute,
  getApostilleListBycid,
  getTranslationListBycid,
  getVisaListBycid,
  updateUnderProcessDate,
  sendMailofApplicationStatus,
  sendcronleadstatusmail,
  setcronleadmailtemp,
  deleteDraftPayment,
  updatePaymentwithAdditionalCharges,
  sendpolicymail,
  setAttestationDetailStatusCron,
  setApostilleDetailStatusCron,
  setTranslationDetailStatusCron,
  setVisaDetailStatusCron,
  sendEnquiryCronMail,
  sendReadyforDispatchCronMail,
  sendReadyforDispatchUserCronMail,
  sendMailofHoldApplicationStatus,
  getwebsitename,
  sendCodeMail,
  getDetailId,
  getallcashflow,
  readCashflowNotification,
  getallDispatchingApplication,
  updatePaymentwithTDSAmount,
  searchPickupDoneCourierReport,
  deletePaymentwithTDSAmount,
  NextFollowupAutomation,
  NextCustFollowupAutomation,
  getUserCommision,
  dirCustomerCountReport,
  adminAllocateReport,
  multiInvoiceSingleCustomer,
  searchAllpickupdoneleadlist,
  getpaymentDataByCashflow,
  generatehistoryrdeliveryreport,
  generateallhistoryrdeliveryreport,
  generateallrdeliveryreport,
  getallcourierreport,
  getCashflowDetailsPdf,
  getcommissionDataById,
  getCommissionDetailsPdf,
  InsertLeaveService,
  getLeaveData,
  UpdateLeaveStatusService,
  UpdateLeaveService,
  getLeadCustomerById,
  updateProformaCustomer,
  deleteProformaCustomer,
  getAttributeNamebyid
};
